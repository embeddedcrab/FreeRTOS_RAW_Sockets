   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "xmc4_flash.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.XMC_FLASH_lEnterPageModeCommand,"ax",%progbits
  19              	 .align 2
  20              	 .global XMC_FLASH_lEnterPageModeCommand
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_FLASH_lEnterPageModeCommand:
  25              	.LFB149:
  26              	 .file 1 "../Libraries/XMCLib/src/xmc4_flash.c"
   1:../Libraries/XMCLib/src/xmc4_flash.c **** /**
   2:../Libraries/XMCLib/src/xmc4_flash.c ****  * @file xmc4_flash.c
   3:../Libraries/XMCLib/src/xmc4_flash.c ****  * @date 2016-01-08
   4:../Libraries/XMCLib/src/xmc4_flash.c ****  *
   5:../Libraries/XMCLib/src/xmc4_flash.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc4_flash.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc4_flash.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc4_flash.c ****  *
   9:../Libraries/XMCLib/src/xmc4_flash.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc4_flash.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc4_flash.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc4_flash.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc4_flash.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc4_flash.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc4_flash.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc4_flash.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc4_flash.c ****  * 
  18:../Libraries/XMCLib/src/xmc4_flash.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc4_flash.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc4_flash.c ****  * 
  21:../Libraries/XMCLib/src/xmc4_flash.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc4_flash.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc4_flash.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc4_flash.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc4_flash.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc4_flash.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc4_flash.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc4_flash.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc4_flash.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc4_flash.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc4_flash.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc4_flash.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc4_flash.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc4_flash.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc4_flash.c ****  *
  36:../Libraries/XMCLib/src/xmc4_flash.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc4_flash.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc4_flash.c ****  *
  39:../Libraries/XMCLib/src/xmc4_flash.c ****  * 2015-02-10:
  40:../Libraries/XMCLib/src/xmc4_flash.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc4_flash.c ****  *
  42:../Libraries/XMCLib/src/xmc4_flash.c ****  * 2015-06-20: 
  43:../Libraries/XMCLib/src/xmc4_flash.c ****  *     - Removed definition of GetDriverVersion API 
  44:../Libraries/XMCLib/src/xmc4_flash.c ****  *
  45:../Libraries/XMCLib/src/xmc4_flash.c ****  * 2015-08-17: 
  46:../Libraries/XMCLib/src/xmc4_flash.c ****  *     - Added the below API's to the public interface.
  47:../Libraries/XMCLib/src/xmc4_flash.c ****  *       1. XMC_FLASH_Reset
  48:../Libraries/XMCLib/src/xmc4_flash.c ****  *       2. XMC_FLASH_ErasePhysicalSector
  49:../Libraries/XMCLib/src/xmc4_flash.c ****  *       3. XMC_FLASH_EraseUCB
  50:../Libraries/XMCLib/src/xmc4_flash.c ****  *       4. XMC_FLASH_ResumeProtection
  51:../Libraries/XMCLib/src/xmc4_flash.c ****  *       5. XMC_FLASH_RepairPhysicalSector
  52:../Libraries/XMCLib/src/xmc4_flash.c ****  *
  53:../Libraries/XMCLib/src/xmc4_flash.c ****  * 2016-01-08: 
  54:../Libraries/XMCLib/src/xmc4_flash.c ****  *     - Wait until operation is finished for the next functions:
  55:../Libraries/XMCLib/src/xmc4_flash.c ****  *       1. XMC_FLASH_InstallProtection
  56:../Libraries/XMCLib/src/xmc4_flash.c ****  *       2. XMC_FLASH_ConfirmProtection
  57:../Libraries/XMCLib/src/xmc4_flash.c ****  *       3. XMC_FLASH_ProgramPage
  58:../Libraries/XMCLib/src/xmc4_flash.c ****  *       4. XMC_FLASH_EraseSector
  59:../Libraries/XMCLib/src/xmc4_flash.c ****  *       5. XMC_FLASH_ErasePhysicalSector
  60:../Libraries/XMCLib/src/xmc4_flash.c ****  *       6. XMC_FLASH_EraseUCB
  61:../Libraries/XMCLib/src/xmc4_flash.c ****  *     - Fix XMC_FLASH_VerifyReadProtection and XMC_FLASH_VerifyWriteProtection
  62:../Libraries/XMCLib/src/xmc4_flash.c ****  *
  63:../Libraries/XMCLib/src/xmc4_flash.c ****  * 2018-02-08
  64:../Libraries/XMCLib/src/xmc4_flash.c ****  *     - Added implementation of XMC_FLASH_InstallBMI()
  65:../Libraries/XMCLib/src/xmc4_flash.c ****  *
  66:../Libraries/XMCLib/src/xmc4_flash.c ****  * @endcond 
  67:../Libraries/XMCLib/src/xmc4_flash.c ****  *
  68:../Libraries/XMCLib/src/xmc4_flash.c ****  */
  69:../Libraries/XMCLib/src/xmc4_flash.c **** 
  70:../Libraries/XMCLib/src/xmc4_flash.c **** #include "xmc_flash.h"
  71:../Libraries/XMCLib/src/xmc4_flash.c **** 
  72:../Libraries/XMCLib/src/xmc4_flash.c **** #if UC_FAMILY == XMC4
  73:../Libraries/XMCLib/src/xmc4_flash.c **** 
  74:../Libraries/XMCLib/src/xmc4_flash.c **** /**************************************************************************************************
  75:../Libraries/XMCLib/src/xmc4_flash.c ****  * MACROS
  76:../Libraries/XMCLib/src/xmc4_flash.c ****  **************************************************************************************************
  77:../Libraries/XMCLib/src/xmc4_flash.c **** 
  78:../Libraries/XMCLib/src/xmc4_flash.c **** #define XMC_FLASH_PROTECTION_CONFIGURATION_WORDS (8UL) /* Used to upadte the assembly buffer during
  79:../Libraries/XMCLib/src/xmc4_flash.c ****                                                           configuration */
  80:../Libraries/XMCLib/src/xmc4_flash.c **** #define XMC_FLASH_BMI_STRING_WORDS (10UL) /* Used to upadte the assembly buffer during BMI String
  81:../Libraries/XMCLib/src/xmc4_flash.c ****                                                           configuration */
  82:../Libraries/XMCLib/src/xmc4_flash.c **** 
  83:../Libraries/XMCLib/src/xmc4_flash.c **** #define XMC_FLASH_PROT_CONFIRM_OFFSET (512UL) /* Offset address for UCB page */
  84:../Libraries/XMCLib/src/xmc4_flash.c **** #define XMC_FLASH_PROT_CONFIRM_WORDS  (4UL)
  85:../Libraries/XMCLib/src/xmc4_flash.c **** #define XMC_FLASH_PROT_CONFIRM_CODE   (0x8AFE15C3UL)
  86:../Libraries/XMCLib/src/xmc4_flash.c **** 
  87:../Libraries/XMCLib/src/xmc4_flash.c **** /**************************************************************************************************
  88:../Libraries/XMCLib/src/xmc4_flash.c ****  * LOCAL FUNCTIONS
  89:../Libraries/XMCLib/src/xmc4_flash.c ****  **************************************************************************************************
  90:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lEnterPageModeCommand(void);
  91:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lLoadPageCommand(uint32_t low_word, uint32_t high_word);
  92:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lWritePageCommand(uint32_t *page_start_address);
  93:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lWriteUCBPageCommand(uint32_t *page_start_address);
  94:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address);
  95:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lDisableSectorWriteProtectionCommand(uint32_t user, uint32_t password_0, uint32_t pa
  96:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lDisableReadProtectionCommand(uint32_t password_0, uint32_t password_1);
  97:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lRepairPhysicalSectorCommand(void);
  98:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lErasePhysicalSectorCommand(uint32_t *sector_start_address);
  99:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lClearStatusCommand(void);
 100:../Libraries/XMCLib/src/xmc4_flash.c **** 
 101:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 102:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to program the PFLASH in to page mode, so that assembly buffer is used 
 103:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 104:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lEnterPageModeCommand(void)
 105:../Libraries/XMCLib/src/xmc4_flash.c **** {
  27              	 .loc 1 105 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32              	.LVL0:
 106:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 107:../Libraries/XMCLib/src/xmc4_flash.c **** 
 108:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 109:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = (uint32_t)0x50U;
  33              	 .loc 1 109 0
  34 0000 5022     	 movs r2,#80
  35 0002 014B     	 ldr r3,.L2
  36 0004 1A60     	 str r2,[r3]
  37 0006 7047     	 bx lr
  38              	.L3:
  39              	 .align 2
  40              	.L2:
  41 0008 5455000C 	 .word 201348436
  42              	 .cfi_endproc
  43              	.LFE149:
  45              	 .section .text.XMC_FLASH_lLoadPageCommand,"ax",%progbits
  46              	 .align 2
  47              	 .global XMC_FLASH_lLoadPageCommand
  48              	 .thumb
  49              	 .thumb_func
  51              	XMC_FLASH_lLoadPageCommand:
  52              	.LFB150:
 110:../Libraries/XMCLib/src/xmc4_flash.c **** }
 111:../Libraries/XMCLib/src/xmc4_flash.c **** 
 112:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 113:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to load the data into the page assembly buffer 
 114:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 115:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lLoadPageCommand(uint32_t low_word, uint32_t high_word)
 116:../Libraries/XMCLib/src/xmc4_flash.c **** {
  53              	 .loc 1 116 0
  54              	 .cfi_startproc
  55              	 
  56              	 
  57              	 
  58              	.LVL1:
 117:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 118:../Libraries/XMCLib/src/xmc4_flash.c **** 
 119:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f0U);
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = low_word;
  59              	 .loc 1 120 0
  60 0000 024B     	 ldr r3,.L5
  61 0002 1860     	 str r0,[r3]
  62              	.LVL2:
 121:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 122:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = high_word;
  63              	 .loc 1 122 0
  64 0004 0433     	 adds r3,r3,#4
  65 0006 1960     	 str r1,[r3]
  66 0008 7047     	 bx lr
  67              	.L6:
  68 000a 00BF     	 .align 2
  69              	.L5:
  70 000c F055000C 	 .word 201348592
  71              	 .cfi_endproc
  72              	.LFE150:
  74              	 .section .text.XMC_FLASH_lWritePageCommand,"ax",%progbits
  75              	 .align 2
  76              	 .global XMC_FLASH_lWritePageCommand
  77              	 .thumb
  78              	 .thumb_func
  80              	XMC_FLASH_lWritePageCommand:
  81              	.LFB151:
 123:../Libraries/XMCLib/src/xmc4_flash.c **** }
 124:../Libraries/XMCLib/src/xmc4_flash.c **** 
 125:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 126:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to start the programming of one page with data from the assembly buffer
 127:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 128:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lWritePageCommand(uint32_t *page_start_address)
 129:../Libraries/XMCLib/src/xmc4_flash.c **** {
  82              	 .loc 1 129 0
  83              	 .cfi_startproc
  84              	 
  85              	 
  86              	 
  87              	.LVL3:
  88 0000 10B4     	 push {r4}
  89              	.LCFI0:
  90              	 .cfi_def_cfa_offset 4
  91              	 .cfi_offset 4,-4
  92              	.LVL4:
 130:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 131:../Libraries/XMCLib/src/xmc4_flash.c **** 
 132:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 133:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
  93              	 .loc 1 133 0
  94 0002 064A     	 ldr r2,.L9
  95 0004 AA23     	 movs r3,#170
  96 0006 1360     	 str r3,[r2]
  97              	.LVL5:
 134:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 135:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
  98              	 .loc 1 135 0
  99 0008 5524     	 movs r4,#85
 100 000a 0549     	 ldr r1,.L9+4
 101 000c 0C60     	 str r4,[r1]
 102              	.LVL6:
 136:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 137:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xa0U;
 103              	 .loc 1 137 0
 104 000e A021     	 movs r1,#160
 105 0010 1160     	 str r1,[r2]
 106              	.LVL7:
 138:../Libraries/XMCLib/src/xmc4_flash.c ****   address = page_start_address;
 139:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 107              	 .loc 1 139 0
 108 0012 0360     	 str r3,[r0]
 140:../Libraries/XMCLib/src/xmc4_flash.c **** }
 109              	 .loc 1 140 0
 110 0014 5DF8044B 	 ldr r4,[sp],#4
 111              	.LCFI1:
 112              	 .cfi_restore 4
 113              	 .cfi_def_cfa_offset 0
 114 0018 7047     	 bx lr
 115              	.L10:
 116 001a 00BF     	 .align 2
 117              	.L9:
 118 001c 5455000C 	 .word 201348436
 119 0020 A8AA000C 	 .word 201370280
 120              	 .cfi_endproc
 121              	.LFE151:
 123              	 .section .text.XMC_FLASH_lWriteUCBPageCommand,"ax",%progbits
 124              	 .align 2
 125              	 .global XMC_FLASH_lWriteUCBPageCommand
 126              	 .thumb
 127              	 .thumb_func
 129              	XMC_FLASH_lWriteUCBPageCommand:
 130              	.LFB152:
 141:../Libraries/XMCLib/src/xmc4_flash.c **** 
 142:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 143:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to start the programming of UCB page with data from the assembly buffer
 144:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 145:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lWriteUCBPageCommand(uint32_t *page_start_address)
 146:../Libraries/XMCLib/src/xmc4_flash.c **** {
 131              	 .loc 1 146 0
 132              	 .cfi_startproc
 133              	 
 134              	 
 135              	 
 136              	.LVL8:
 137 0000 10B4     	 push {r4}
 138              	.LCFI2:
 139              	 .cfi_def_cfa_offset 4
 140              	 .cfi_offset 4,-4
 141              	.LVL9:
 147:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 148:../Libraries/XMCLib/src/xmc4_flash.c **** 
 149:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 150:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 142              	 .loc 1 150 0
 143 0002 064A     	 ldr r2,.L13
 144 0004 AA23     	 movs r3,#170
 145 0006 1360     	 str r3,[r2]
 146              	.LVL10:
 151:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 152:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
 147              	 .loc 1 152 0
 148 0008 5524     	 movs r4,#85
 149 000a 0549     	 ldr r1,.L13+4
 150 000c 0C60     	 str r4,[r1]
 151              	.LVL11:
 153:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 154:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xc0U;
 152              	 .loc 1 154 0
 153 000e C021     	 movs r1,#192
 154 0010 1160     	 str r1,[r2]
 155              	.LVL12:
 155:../Libraries/XMCLib/src/xmc4_flash.c ****   address = page_start_address;
 156:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 156              	 .loc 1 156 0
 157 0012 0360     	 str r3,[r0]
 157:../Libraries/XMCLib/src/xmc4_flash.c **** }
 158              	 .loc 1 157 0
 159 0014 5DF8044B 	 ldr r4,[sp],#4
 160              	.LCFI3:
 161              	 .cfi_restore 4
 162              	 .cfi_def_cfa_offset 0
 163 0018 7047     	 bx lr
 164              	.L14:
 165 001a 00BF     	 .align 2
 166              	.L13:
 167 001c 5455000C 	 .word 201348436
 168 0020 A8AA000C 	 .word 201370280
 169              	 .cfi_endproc
 170              	.LFE152:
 172              	 .section .text.XMC_FLASH_lEraseSectorCommand,"ax",%progbits
 173              	 .align 2
 174              	 .global XMC_FLASH_lEraseSectorCommand
 175              	 .thumb
 176              	 .thumb_func
 178              	XMC_FLASH_lEraseSectorCommand:
 179              	.LFB153:
 158:../Libraries/XMCLib/src/xmc4_flash.c **** 
 159:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 160:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to erase sector which is starting with the specified address
 161:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 162:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address)
 163:../Libraries/XMCLib/src/xmc4_flash.c **** {
 180              	 .loc 1 163 0
 181              	 .cfi_startproc
 182              	 
 183              	 
 184              	 
 185              	.LVL13:
 186 0000 30B4     	 push {r4,r5}
 187              	.LCFI4:
 188              	 .cfi_def_cfa_offset 8
 189              	 .cfi_offset 4,-8
 190              	 .cfi_offset 5,-4
 191              	.LVL14:
 164:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 165:../Libraries/XMCLib/src/xmc4_flash.c **** 
 166:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 167:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 192              	 .loc 1 167 0
 193 0002 074B     	 ldr r3,.L17
 194 0004 AA24     	 movs r4,#170
 195 0006 1C60     	 str r4,[r3]
 196              	.LVL15:
 168:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 169:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
 197              	 .loc 1 169 0
 198 0008 064A     	 ldr r2,.L17+4
 199 000a 5521     	 movs r1,#85
 200 000c 1160     	 str r1,[r2]
 201              	.LVL16:
 170:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 171:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x80U;
 202              	 .loc 1 171 0
 203 000e 8025     	 movs r5,#128
 204 0010 1D60     	 str r5,[r3]
 172:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 173:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 205              	 .loc 1 173 0
 206 0012 1C60     	 str r4,[r3]
 207              	.LVL17:
 174:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 175:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
 208              	 .loc 1 175 0
 209 0014 1160     	 str r1,[r2]
 210              	.LVL18:
 176:../Libraries/XMCLib/src/xmc4_flash.c ****   address = sector_start_address;
 177:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x30U;
 211              	 .loc 1 177 0
 212 0016 3023     	 movs r3,#48
 213 0018 0360     	 str r3,[r0]
 178:../Libraries/XMCLib/src/xmc4_flash.c **** }
 214              	 .loc 1 178 0
 215 001a 30BC     	 pop {r4,r5}
 216              	.LCFI5:
 217              	 .cfi_restore 5
 218              	 .cfi_restore 4
 219              	 .cfi_def_cfa_offset 0
 220 001c 7047     	 bx lr
 221              	.L18:
 222 001e 00BF     	 .align 2
 223              	.L17:
 224 0020 5455000C 	 .word 201348436
 225 0024 A8AA000C 	 .word 201370280
 226              	 .cfi_endproc
 227              	.LFE153:
 229              	 .section .text.XMC_FLASH_lDisableSectorWriteProtectionCommand,"ax",%progbits
 230              	 .align 2
 231              	 .global XMC_FLASH_lDisableSectorWriteProtectionCommand
 232              	 .thumb
 233              	 .thumb_func
 235              	XMC_FLASH_lDisableSectorWriteProtectionCommand:
 236              	.LFB154:
 179:../Libraries/XMCLib/src/xmc4_flash.c **** 
 180:../Libraries/XMCLib/src/xmc4_flash.c **** 
 181:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 182:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to temporarily disables the write protection belonging to the the USER specified, when p
 183:../Libraries/XMCLib/src/xmc4_flash.c ****  * configured values
 184:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 185:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lDisableSectorWriteProtectionCommand(uint32_t user, uint32_t password_0, uint32_t pa
 186:../Libraries/XMCLib/src/xmc4_flash.c **** {
 237              	 .loc 1 186 0
 238              	 .cfi_startproc
 239              	 
 240              	 
 241              	 
 242              	.LVL19:
 243 0000 10B4     	 push {r4}
 244              	.LCFI6:
 245              	 .cfi_def_cfa_offset 4
 246              	 .cfi_offset 4,-4
 247              	.LVL20:
 187:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 188:../Libraries/XMCLib/src/xmc4_flash.c **** 
 189:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 190:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 248              	 .loc 1 190 0
 249 0002 AA24     	 movs r4,#170
 250 0004 094B     	 ldr r3,.L21
 251 0006 1C60     	 str r4,[r3]
 252              	.LVL21:
 191:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 192:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
 253              	 .loc 1 192 0
 254 0008 03F5AA43 	 add r3,r3,#21760
 255 000c 5433     	 adds r3,r3,#84
 256 000e 5524     	 movs r4,#85
 257 0010 1C60     	 str r4,[r3]
 258              	.LVL22:
 193:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x553cU);
 194:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = user;
 259              	 .loc 1 194 0
 260 0012 074C     	 ldr r4,.L21+4
 261 0014 2060     	 str r0,[r4]
 262              	.LVL23:
 195:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 196:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = password_0;
 263              	 .loc 1 196 0
 264 0016 1960     	 str r1,[r3]
 197:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 198:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = password_1;
 265              	 .loc 1 198 0
 266 0018 1A60     	 str r2,[r3]
 267              	.LVL24:
 199:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5558U);
 200:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x05U;
 268              	 .loc 1 200 0
 269 001a 0522     	 movs r2,#5
 270              	.LVL25:
 271 001c A3F5AA43 	 sub r3,r3,#21760
 272              	.LVL26:
 273 0020 503B     	 subs r3,r3,#80
 274              	.LVL27:
 275 0022 1A60     	 str r2,[r3]
 276              	.LVL28:
 201:../Libraries/XMCLib/src/xmc4_flash.c **** }
 277              	 .loc 1 201 0
 278 0024 5DF8044B 	 ldr r4,[sp],#4
 279              	.LCFI7:
 280              	 .cfi_restore 4
 281              	 .cfi_def_cfa_offset 0
 282 0028 7047     	 bx lr
 283              	.L22:
 284 002a 00BF     	 .align 2
 285              	.L21:
 286 002c 5455000C 	 .word 201348436
 287 0030 3C55000C 	 .word 201348412
 288              	 .cfi_endproc
 289              	.LFE154:
 291              	 .section .text.XMC_FLASH_lDisableReadProtectionCommand,"ax",%progbits
 292              	 .align 2
 293              	 .global XMC_FLASH_lDisableReadProtectionCommand
 294              	 .thumb
 295              	 .thumb_func
 297              	XMC_FLASH_lDisableReadProtectionCommand:
 298              	.LFB155:
 202:../Libraries/XMCLib/src/xmc4_flash.c **** 
 203:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 204:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to temporarily disables the read protection along with write protection, when passwords 
 205:../Libraries/XMCLib/src/xmc4_flash.c ****  * configured values
 206:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 207:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lDisableReadProtectionCommand(uint32_t password_0, uint32_t password_1)
 208:../Libraries/XMCLib/src/xmc4_flash.c **** {
 299              	 .loc 1 208 0
 300              	 .cfi_startproc
 301              	 
 302              	 
 303              	 
 304              	.LVL29:
 305 0000 10B4     	 push {r4}
 306              	.LCFI8:
 307              	 .cfi_def_cfa_offset 4
 308              	 .cfi_offset 4,-4
 309              	.LVL30:
 209:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 210:../Libraries/XMCLib/src/xmc4_flash.c **** 
 211:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 212:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 310              	 .loc 1 212 0
 311 0002 AA22     	 movs r2,#170
 312 0004 094B     	 ldr r3,.L25
 313 0006 1A60     	 str r2,[r3]
 314              	.LVL31:
 213:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 214:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
 315              	 .loc 1 214 0
 316 0008 03F5AA43 	 add r3,r3,#21760
 317 000c 5433     	 adds r3,r3,#84
 318 000e 5522     	 movs r2,#85
 319 0010 1A60     	 str r2,[r3]
 320              	.LVL32:
 215:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x553cU);
 216:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x00U;
 321              	 .loc 1 216 0
 322 0012 0024     	 movs r4,#0
 323 0014 064A     	 ldr r2,.L25+4
 324 0016 1460     	 str r4,[r2]
 325              	.LVL33:
 217:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 218:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = password_0;
 326              	 .loc 1 218 0
 327 0018 1860     	 str r0,[r3]
 219:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 220:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = password_1;
 328              	 .loc 1 220 0
 329 001a 1960     	 str r1,[r3]
 330              	.LVL34:
 221:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5558U);
 222:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x08U;
 331              	 .loc 1 222 0
 332 001c 0822     	 movs r2,#8
 333 001e A3F5AA43 	 sub r3,r3,#21760
 334 0022 503B     	 subs r3,r3,#80
 335 0024 1A60     	 str r2,[r3]
 223:../Libraries/XMCLib/src/xmc4_flash.c **** }
 336              	 .loc 1 223 0
 337 0026 5DF8044B 	 ldr r4,[sp],#4
 338              	.LCFI9:
 339              	 .cfi_restore 4
 340              	 .cfi_def_cfa_offset 0
 341 002a 7047     	 bx lr
 342              	.L26:
 343              	 .align 2
 344              	.L25:
 345 002c 5455000C 	 .word 201348436
 346 0030 3C55000C 	 .word 201348412
 347              	 .cfi_endproc
 348              	.LFE155:
 350              	 .section .text.XMC_FLASH_lClearStatusCommand,"ax",%progbits
 351              	 .align 2
 352              	 .global XMC_FLASH_lClearStatusCommand
 353              	 .thumb
 354              	 .thumb_func
 356              	XMC_FLASH_lClearStatusCommand:
 357              	.LFB156:
 224:../Libraries/XMCLib/src/xmc4_flash.c **** 
 225:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 226:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to clear FSR.PROG and FSR.ERASE and the error flags in FSR such as PFOPER, SQER, PROER, 
 227:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 228:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lClearStatusCommand(void)
 229:../Libraries/XMCLib/src/xmc4_flash.c **** {
 358              	 .loc 1 229 0
 359              	 .cfi_startproc
 360              	 
 361              	 
 362              	 
 363              	.LVL35:
 230:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 231:../Libraries/XMCLib/src/xmc4_flash.c **** 
 232:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 233:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xf5U;
 364              	 .loc 1 233 0
 365 0000 F522     	 movs r2,#245
 366 0002 014B     	 ldr r3,.L28
 367 0004 1A60     	 str r2,[r3]
 368 0006 7047     	 bx lr
 369              	.L29:
 370              	 .align 2
 371              	.L28:
 372 0008 5455000C 	 .word 201348436
 373              	 .cfi_endproc
 374              	.LFE156:
 376              	 .section .text.XMC_FLASH_ClearStatus,"ax",%progbits
 377              	 .align 2
 378              	 .global XMC_FLASH_ClearStatus
 379              	 .thumb
 380              	 .thumb_func
 382              	XMC_FLASH_ClearStatus:
 383              	.LFB157:
 234:../Libraries/XMCLib/src/xmc4_flash.c **** }
 235:../Libraries/XMCLib/src/xmc4_flash.c **** 
 236:../Libraries/XMCLib/src/xmc4_flash.c **** /**************************************************************************************************
 237:../Libraries/XMCLib/src/xmc4_flash.c ****  * API IMPLEMENTATION
 238:../Libraries/XMCLib/src/xmc4_flash.c ****  **************************************************************************************************
 239:../Libraries/XMCLib/src/xmc4_flash.c **** 
 240:../Libraries/XMCLib/src/xmc4_flash.c ****  /*
 241:../Libraries/XMCLib/src/xmc4_flash.c ****  * This API shall clear Program, erase and error flags(PFOPER, SQER, PROER, PFDBER, ORIER, VER) of 
 242:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 243:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_ClearStatus(void)
 244:../Libraries/XMCLib/src/xmc4_flash.c **** {
 384              	 .loc 1 244 0
 385              	 .cfi_startproc
 386              	 
 387              	 
 388              	 
 389              	.LVL36:
 390              	.LBB4:
 391              	.LBB5:
 233:../Libraries/XMCLib/src/xmc4_flash.c **** }
 392              	 .loc 1 233 0
 393 0000 F522     	 movs r2,#245
 394 0002 014B     	 ldr r3,.L31
 395 0004 1A60     	 str r2,[r3]
 396 0006 7047     	 bx lr
 397              	.L32:
 398              	 .align 2
 399              	.L31:
 400 0008 5455000C 	 .word 201348436
 401              	.LBE5:
 402              	.LBE4:
 403              	 .cfi_endproc
 404              	.LFE157:
 406              	 .section .text.XMC_FLASH_GetStatus,"ax",%progbits
 407              	 .align 2
 408              	 .global XMC_FLASH_GetStatus
 409              	 .thumb
 410              	 .thumb_func
 412              	XMC_FLASH_GetStatus:
 413              	.LFB158:
 245:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lClearStatusCommand();
 246:../Libraries/XMCLib/src/xmc4_flash.c **** }
 247:../Libraries/XMCLib/src/xmc4_flash.c **** 
 248:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 249:../Libraries/XMCLib/src/xmc4_flash.c ****  * This API returns the FSR register value
 250:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 251:../Libraries/XMCLib/src/xmc4_flash.c **** uint32_t XMC_FLASH_GetStatus(void)
 252:../Libraries/XMCLib/src/xmc4_flash.c **** {
 414              	 .loc 1 252 0
 415              	 .cfi_startproc
 416              	 
 417              	 
 418              	 
 253:../Libraries/XMCLib/src/xmc4_flash.c ****   return FLASH0->FSR;
 419              	 .loc 1 253 0
 420 0000 41F21003 	 movw r3,#4112
 421 0004 014A     	 ldr r2,.L34
 422 0006 D058     	 ldr r0,[r2,r3]
 254:../Libraries/XMCLib/src/xmc4_flash.c **** }
 423              	 .loc 1 254 0
 424 0008 7047     	 bx lr
 425              	.L35:
 426 000a 00BF     	 .align 2
 427              	.L34:
 428 000c 00100058 	 .word 1476399104
 429              	 .cfi_endproc
 430              	.LFE158:
 432              	 .section .text.XMC_FLASH_EnableEvent,"ax",%progbits
 433              	 .align 2
 434              	 .global XMC_FLASH_EnableEvent
 435              	 .thumb
 436              	 .thumb_func
 438              	XMC_FLASH_EnableEvent:
 439              	.LFB159:
 255:../Libraries/XMCLib/src/xmc4_flash.c **** 
 256:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 257:../Libraries/XMCLib/src/xmc4_flash.c ****  * This API enables the events which required to trigger the ISR 
 258:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 259:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_EnableEvent(const uint32_t event_msk)
 260:../Libraries/XMCLib/src/xmc4_flash.c **** {
 440              	 .loc 1 260 0
 441              	 .cfi_startproc
 442              	 
 443              	 
 444              	 
 445              	.LVL37:
 261:../Libraries/XMCLib/src/xmc4_flash.c ****   FLASH0->FCON |= event_msk;
 446              	 .loc 1 261 0
 447 0000 0349     	 ldr r1,.L37
 448 0002 41F21402 	 movw r2,#4116
 449 0006 8B58     	 ldr r3,[r1,r2]
 450 0008 1843     	 orrs r0,r0,r3
 451              	.LVL38:
 452 000a 8850     	 str r0,[r1,r2]
 453 000c 7047     	 bx lr
 454              	.L38:
 455 000e 00BF     	 .align 2
 456              	.L37:
 457 0010 00100058 	 .word 1476399104
 458              	 .cfi_endproc
 459              	.LFE159:
 461              	 .section .text.XMC_FLASH_DisableEvent,"ax",%progbits
 462              	 .align 2
 463              	 .global XMC_FLASH_DisableEvent
 464              	 .thumb
 465              	 .thumb_func
 467              	XMC_FLASH_DisableEvent:
 468              	.LFB160:
 262:../Libraries/XMCLib/src/xmc4_flash.c **** }
 263:../Libraries/XMCLib/src/xmc4_flash.c **** 
 264:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 265:../Libraries/XMCLib/src/xmc4_flash.c ****  * This API disables the event generation 
 266:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 267:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_DisableEvent(const uint32_t event_msk)
 268:../Libraries/XMCLib/src/xmc4_flash.c **** {
 469              	 .loc 1 268 0
 470              	 .cfi_startproc
 471              	 
 472              	 
 473              	 
 474              	.LVL39:
 269:../Libraries/XMCLib/src/xmc4_flash.c ****   FLASH0->FCON &= ~event_msk;
 475              	 .loc 1 269 0
 476 0000 0349     	 ldr r1,.L40
 477 0002 41F21402 	 movw r2,#4116
 478 0006 8B58     	 ldr r3,[r1,r2]
 479 0008 23EA0000 	 bic r0,r3,r0
 480              	.LVL40:
 481 000c 8850     	 str r0,[r1,r2]
 482 000e 7047     	 bx lr
 483              	.L41:
 484              	 .align 2
 485              	.L40:
 486 0010 00100058 	 .word 1476399104
 487              	 .cfi_endproc
 488              	.LFE160:
 490              	 .section .text.XMC_FLASH_ProgramPage,"ax",%progbits
 491              	 .align 2
 492              	 .global XMC_FLASH_ProgramPage
 493              	 .thumb
 494              	 .thumb_func
 496              	XMC_FLASH_ProgramPage:
 497              	.LFB161:
 270:../Libraries/XMCLib/src/xmc4_flash.c **** }
 271:../Libraries/XMCLib/src/xmc4_flash.c **** 
 272:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 273:../Libraries/XMCLib/src/xmc4_flash.c ****  * This API write the PFLASH page
 274:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 275:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
 276:../Libraries/XMCLib/src/xmc4_flash.c **** {
 498              	 .loc 1 276 0
 499              	 .cfi_startproc
 500              	 
 501              	 
 502              	.LVL41:
 503 0000 70B5     	 push {r4,r5,r6,lr}
 504              	.LCFI10:
 505              	 .cfi_def_cfa_offset 16
 506              	 .cfi_offset 4,-16
 507              	 .cfi_offset 5,-12
 508              	 .cfi_offset 6,-8
 509              	 .cfi_offset 14,-4
 510              	.LVL42:
 511              	.LBB12:
 512              	.LBB13:
 233:../Libraries/XMCLib/src/xmc4_flash.c **** }
 513              	 .loc 1 233 0
 514 0002 0C4B     	 ldr r3,.L48
 515 0004 F522     	 movs r2,#245
 516 0006 1A60     	 str r2,[r3]
 517              	.LVL43:
 518              	.LBE13:
 519              	.LBE12:
 520              	.LBB14:
 521              	.LBB15:
 109:../Libraries/XMCLib/src/xmc4_flash.c **** }
 522              	 .loc 1 109 0
 523 0008 5022     	 movs r2,#80
 524 000a 1A60     	 str r2,[r3]
 525              	.LVL44:
 526 000c 0B46     	 mov r3,r1
 527 000e 01F58071 	 add r1,r1,#256
 528              	.LVL45:
 529              	.LBE15:
 530              	.LBE14:
 531              	.LBB16:
 532              	.LBB17:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 533              	 .loc 1 120 0
 534 0012 094E     	 ldr r6,.L48+4
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 535              	 .loc 1 122 0
 536 0014 094D     	 ldr r5,.L48+8
 537              	.LVL46:
 538              	.L43:
 539              	.LBE17:
 540              	.LBE16:
 277:../Libraries/XMCLib/src/xmc4_flash.c ****   uint32_t idx;
 278:../Libraries/XMCLib/src/xmc4_flash.c **** 
 279:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lClearStatusCommand();  
 280:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lEnterPageModeCommand();
 281:../Libraries/XMCLib/src/xmc4_flash.c **** 
 282:../Libraries/XMCLib/src/xmc4_flash.c ****   for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 283:../Libraries/XMCLib/src/xmc4_flash.c ****   {
 284:../Libraries/XMCLib/src/xmc4_flash.c ****     XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
 541              	 .loc 1 284 0 discriminator 3
 542 0016 1C68     	 ldr r4,[r3]
 543 0018 5A68     	 ldr r2,[r3,#4]
 544              	.LVL47:
 545              	.LBB19:
 546              	.LBB18:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 547              	 .loc 1 120 0 discriminator 3
 548 001a 3460     	 str r4,[r6]
 549              	.LVL48:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 550              	 .loc 1 122 0 discriminator 3
 551 001c 2A60     	 str r2,[r5]
 552 001e 0833     	 adds r3,r3,#8
 553              	.LBE18:
 554              	.LBE19:
 282:../Libraries/XMCLib/src/xmc4_flash.c ****   {
 555              	 .loc 1 282 0 discriminator 3
 556 0020 8B42     	 cmp r3,r1
 557 0022 F8D1     	 bne .L43
 285:../Libraries/XMCLib/src/xmc4_flash.c ****   }
 286:../Libraries/XMCLib/src/xmc4_flash.c **** 
 287:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lWritePageCommand(address);    
 558              	 .loc 1 287 0
 559 0024 FFF7FEFF 	 bl XMC_FLASH_lWritePageCommand
 560              	.LVL49:
 288:../Libraries/XMCLib/src/xmc4_flash.c **** 
 289:../Libraries/XMCLib/src/xmc4_flash.c ****   /* wait until the operation is completed */
 290:../Libraries/XMCLib/src/xmc4_flash.c ****   while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 561              	 .loc 1 290 0
 562 0028 054A     	 ldr r2,.L48+12
 563              	.L44:
 564              	 .loc 1 290 0 is_stmt 0 discriminator 1
 565 002a 1368     	 ldr r3,[r2]
 566 002c 13F0010F 	 tst r3,#1
 567 0030 FBD1     	 bne .L44
 291:../Libraries/XMCLib/src/xmc4_flash.c **** }
 568              	 .loc 1 291 0 is_stmt 1
 569 0032 70BD     	 pop {r4,r5,r6,pc}
 570              	.LVL50:
 571              	.L49:
 572              	 .align 2
 573              	.L48:
 574 0034 5455000C 	 .word 201348436
 575 0038 F055000C 	 .word 201348592
 576 003c F455000C 	 .word 201348596
 577 0040 10200058 	 .word 1476403216
 578              	 .cfi_endproc
 579              	.LFE161:
 581              	 .section .text.XMC_FLASH_EraseSector,"ax",%progbits
 582              	 .align 2
 583              	 .global XMC_FLASH_EraseSector
 584              	 .thumb
 585              	 .thumb_func
 587              	XMC_FLASH_EraseSector:
 588              	.LFB162:
 292:../Libraries/XMCLib/src/xmc4_flash.c **** 
 293:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 294:../Libraries/XMCLib/src/xmc4_flash.c ****  * This API erase the logical sector
 295:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 296:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_EraseSector(uint32_t *address)
 297:../Libraries/XMCLib/src/xmc4_flash.c **** {
 589              	 .loc 1 297 0
 590              	 .cfi_startproc
 591              	 
 592              	 
 593              	.LVL51:
 594 0000 08B5     	 push {r3,lr}
 595              	.LCFI11:
 596              	 .cfi_def_cfa_offset 8
 597              	 .cfi_offset 3,-8
 598              	 .cfi_offset 14,-4
 599              	.LVL52:
 600              	.LBB22:
 601              	.LBB23:
 233:../Libraries/XMCLib/src/xmc4_flash.c **** }
 602              	 .loc 1 233 0
 603 0002 F522     	 movs r2,#245
 604 0004 044B     	 ldr r3,.L54
 605 0006 1A60     	 str r2,[r3]
 606              	.LBE23:
 607              	.LBE22:
 298:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lClearStatusCommand();
 299:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lEraseSectorCommand(address);
 608              	 .loc 1 299 0
 609 0008 FFF7FEFF 	 bl XMC_FLASH_lEraseSectorCommand
 610              	.LVL53:
 300:../Libraries/XMCLib/src/xmc4_flash.c **** 
 301:../Libraries/XMCLib/src/xmc4_flash.c ****   /* wait until the operation is completed */
 302:../Libraries/XMCLib/src/xmc4_flash.c ****   while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 611              	 .loc 1 302 0
 612 000c 034A     	 ldr r2,.L54+4
 613              	.L51:
 614              	 .loc 1 302 0 is_stmt 0 discriminator 1
 615 000e 1368     	 ldr r3,[r2]
 616 0010 13F0010F 	 tst r3,#1
 617 0014 FBD1     	 bne .L51
 303:../Libraries/XMCLib/src/xmc4_flash.c **** }
 618              	 .loc 1 303 0 is_stmt 1
 619 0016 08BD     	 pop {r3,pc}
 620              	.L55:
 621              	 .align 2
 622              	.L54:
 623 0018 5455000C 	 .word 201348436
 624 001c 10200058 	 .word 1476403216
 625              	 .cfi_endproc
 626              	.LFE162:
 628              	 .section .text.XMC_FLASH_lErasePhysicalSectorCommand,"ax",%progbits
 629              	 .align 2
 630              	 .global XMC_FLASH_lErasePhysicalSectorCommand
 631              	 .thumb
 632              	 .thumb_func
 634              	XMC_FLASH_lErasePhysicalSectorCommand:
 635              	.LFB163:
 304:../Libraries/XMCLib/src/xmc4_flash.c **** 
 305:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 306:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to erase physical sector which is starting with the specified address
 307:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 308:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lErasePhysicalSectorCommand(uint32_t *sector_start_address)
 309:../Libraries/XMCLib/src/xmc4_flash.c **** {
 636              	 .loc 1 309 0
 637              	 .cfi_startproc
 638              	 
 639              	 
 640              	 
 641              	.LVL54:
 642 0000 30B4     	 push {r4,r5}
 643              	.LCFI12:
 644              	 .cfi_def_cfa_offset 8
 645              	 .cfi_offset 4,-8
 646              	 .cfi_offset 5,-4
 647              	.LVL55:
 310:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 311:../Libraries/XMCLib/src/xmc4_flash.c **** 
 312:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 313:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 648              	 .loc 1 313 0
 649 0002 074B     	 ldr r3,.L58
 650 0004 AA24     	 movs r4,#170
 651 0006 1C60     	 str r4,[r3]
 652              	.LVL56:
 314:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 315:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
 653              	 .loc 1 315 0
 654 0008 064A     	 ldr r2,.L58+4
 655 000a 5521     	 movs r1,#85
 656 000c 1160     	 str r1,[r2]
 657              	.LVL57:
 316:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 317:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x80U;
 658              	 .loc 1 317 0
 659 000e 8025     	 movs r5,#128
 660 0010 1D60     	 str r5,[r3]
 318:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 319:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 661              	 .loc 1 319 0
 662 0012 1C60     	 str r4,[r3]
 663              	.LVL58:
 320:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 321:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
 664              	 .loc 1 321 0
 665 0014 1160     	 str r1,[r2]
 666              	.LVL59:
 322:../Libraries/XMCLib/src/xmc4_flash.c ****   address = sector_start_address;
 323:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x40U;
 667              	 .loc 1 323 0
 668 0016 4023     	 movs r3,#64
 669 0018 0360     	 str r3,[r0]
 324:../Libraries/XMCLib/src/xmc4_flash.c **** }
 670              	 .loc 1 324 0
 671 001a 30BC     	 pop {r4,r5}
 672              	.LCFI13:
 673              	 .cfi_restore 5
 674              	 .cfi_restore 4
 675              	 .cfi_def_cfa_offset 0
 676 001c 7047     	 bx lr
 677              	.L59:
 678 001e 00BF     	 .align 2
 679              	.L58:
 680 0020 5455000C 	 .word 201348436
 681 0024 A8AA000C 	 .word 201370280
 682              	 .cfi_endproc
 683              	.LFE163:
 685              	 .section .text.XMC_FLASH_lRepairPhysicalSectorCommand,"ax",%progbits
 686              	 .align 2
 687              	 .global XMC_FLASH_lRepairPhysicalSectorCommand
 688              	 .thumb
 689              	 .thumb_func
 691              	XMC_FLASH_lRepairPhysicalSectorCommand:
 692              	.LFB164:
 325:../Libraries/XMCLib/src/xmc4_flash.c **** 
 326:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 327:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to erase physical sector-4 which is starting with the specified address
 328:../Libraries/XMCLib/src/xmc4_flash.c ****  * This command is only available if PROCON1.PRS = 1.
 329:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 330:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_lRepairPhysicalSectorCommand(void)
 331:../Libraries/XMCLib/src/xmc4_flash.c **** {
 693              	 .loc 1 331 0
 694              	 .cfi_startproc
 695              	 
 696              	 
 697              	 
 698 0000 10B4     	 push {r4}
 699              	.LCFI14:
 700              	 .cfi_def_cfa_offset 4
 701              	 .cfi_offset 4,-4
 702              	.LVL60:
 332:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 333:../Libraries/XMCLib/src/xmc4_flash.c **** 
 334:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 335:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 703              	 .loc 1 335 0
 704 0002 084B     	 ldr r3,.L62
 705 0004 AA20     	 movs r0,#170
 706 0006 1860     	 str r0,[r3]
 707              	.LVL61:
 336:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 337:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
 708              	 .loc 1 337 0
 709 0008 074A     	 ldr r2,.L62+4
 710 000a 5521     	 movs r1,#85
 711 000c 1160     	 str r1,[r2]
 712              	.LVL62:
 338:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 339:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x80U;
 713              	 .loc 1 339 0
 714 000e 8024     	 movs r4,#128
 715 0010 1C60     	 str r4,[r3]
 340:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 341:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 716              	 .loc 1 341 0
 717 0012 1860     	 str r0,[r3]
 718              	.LVL63:
 342:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 343:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
 719              	 .loc 1 343 0
 720 0014 1160     	 str r1,[r2]
 721              	.LVL64:
 344:../Libraries/XMCLib/src/xmc4_flash.c ****   address = XMC_FLASH_PHY_SECTOR_4;
 345:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x40U;
 722              	 .loc 1 345 0
 723 0016 4022     	 movs r2,#64
 724 0018 044B     	 ldr r3,.L62+8
 725 001a 1A60     	 str r2,[r3]
 346:../Libraries/XMCLib/src/xmc4_flash.c **** }
 726              	 .loc 1 346 0
 727 001c 5DF8044B 	 ldr r4,[sp],#4
 728              	.LCFI15:
 729              	 .cfi_restore 4
 730              	 .cfi_def_cfa_offset 0
 731 0020 7047     	 bx lr
 732              	.L63:
 733 0022 00BF     	 .align 2
 734              	.L62:
 735 0024 5455000C 	 .word 201348436
 736 0028 A8AA000C 	 .word 201370280
 737 002c 0000010C 	 .word 201392128
 738              	 .cfi_endproc
 739              	.LFE164:
 741              	 .section .text.XMC_FLASH_ErasePhysicalSector,"ax",%progbits
 742              	 .align 2
 743              	 .global XMC_FLASH_ErasePhysicalSector
 744              	 .thumb
 745              	 .thumb_func
 747              	XMC_FLASH_ErasePhysicalSector:
 748              	.LFB165:
 347:../Libraries/XMCLib/src/xmc4_flash.c **** 
 348:../Libraries/XMCLib/src/xmc4_flash.c ****  /* 
 349:../Libraries/XMCLib/src/xmc4_flash.c ****   * This API erase the physical sector
 350:../Libraries/XMCLib/src/xmc4_flash.c ****   */
 351:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_ErasePhysicalSector(uint32_t *address)
 352:../Libraries/XMCLib/src/xmc4_flash.c **** {
 749              	 .loc 1 352 0
 750              	 .cfi_startproc
 751              	 
 752              	 
 753              	.LVL65:
 754 0000 08B5     	 push {r3,lr}
 755              	.LCFI16:
 756              	 .cfi_def_cfa_offset 8
 757              	 .cfi_offset 3,-8
 758              	 .cfi_offset 14,-4
 759              	.LVL66:
 760              	.LBB26:
 761              	.LBB27:
 233:../Libraries/XMCLib/src/xmc4_flash.c **** }
 762              	 .loc 1 233 0
 763 0002 F522     	 movs r2,#245
 764 0004 044B     	 ldr r3,.L68
 765 0006 1A60     	 str r2,[r3]
 766              	.LBE27:
 767              	.LBE26:
 353:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lClearStatusCommand();
 354:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lErasePhysicalSectorCommand(address);
 768              	 .loc 1 354 0
 769 0008 FFF7FEFF 	 bl XMC_FLASH_lErasePhysicalSectorCommand
 770              	.LVL67:
 355:../Libraries/XMCLib/src/xmc4_flash.c **** 
 356:../Libraries/XMCLib/src/xmc4_flash.c ****   /* wait until the operation is completed */
 357:../Libraries/XMCLib/src/xmc4_flash.c ****   while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 771              	 .loc 1 357 0
 772 000c 034A     	 ldr r2,.L68+4
 773              	.L65:
 774              	 .loc 1 357 0 is_stmt 0 discriminator 1
 775 000e 1368     	 ldr r3,[r2]
 776 0010 13F0010F 	 tst r3,#1
 777 0014 FBD1     	 bne .L65
 358:../Libraries/XMCLib/src/xmc4_flash.c **** }
 778              	 .loc 1 358 0 is_stmt 1
 779 0016 08BD     	 pop {r3,pc}
 780              	.L69:
 781              	 .align 2
 782              	.L68:
 783 0018 5455000C 	 .word 201348436
 784 001c 10200058 	 .word 1476403216
 785              	 .cfi_endproc
 786              	.LFE165:
 788              	 .section .text.XMC_FLASH_RepairPhysicalSector,"ax",%progbits
 789              	 .align 2
 790              	 .global XMC_FLASH_RepairPhysicalSector
 791              	 .thumb
 792              	 .thumb_func
 794              	XMC_FLASH_RepairPhysicalSector:
 795              	.LFB166:
 359:../Libraries/XMCLib/src/xmc4_flash.c **** 
 360:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 361:../Libraries/XMCLib/src/xmc4_flash.c ****  * This API repair the physical sector
 362:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 363:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_RepairPhysicalSector(void)
 364:../Libraries/XMCLib/src/xmc4_flash.c **** {
 796              	 .loc 1 364 0
 797              	 .cfi_startproc
 798              	 
 799              	 
 800 0000 08B5     	 push {r3,lr}
 801              	.LCFI17:
 802              	 .cfi_def_cfa_offset 8
 803              	 .cfi_offset 3,-8
 804              	 .cfi_offset 14,-4
 805              	.LVL68:
 806              	.LBB30:
 807              	.LBB31:
 233:../Libraries/XMCLib/src/xmc4_flash.c **** }
 808              	 .loc 1 233 0
 809 0002 F522     	 movs r2,#245
 810 0004 024B     	 ldr r3,.L72
 811 0006 1A60     	 str r2,[r3]
 812              	.LBE31:
 813              	.LBE30:
 365:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lClearStatusCommand();
 366:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lRepairPhysicalSectorCommand();
 814              	 .loc 1 366 0
 815 0008 FFF7FEFF 	 bl XMC_FLASH_lRepairPhysicalSectorCommand
 816              	.LVL69:
 817 000c 08BD     	 pop {r3,pc}
 818              	.L73:
 819 000e 00BF     	 .align 2
 820              	.L72:
 821 0010 5455000C 	 .word 201348436
 822              	 .cfi_endproc
 823              	.LFE166:
 825              	 .section .text.XMC_FLASH_EraseUCB,"ax",%progbits
 826              	 .align 2
 827              	 .global XMC_FLASH_EraseUCB
 828              	 .thumb
 829              	 .thumb_func
 831              	XMC_FLASH_EraseUCB:
 832              	.LFB167:
 367:../Libraries/XMCLib/src/xmc4_flash.c **** }
 368:../Libraries/XMCLib/src/xmc4_flash.c **** 
 369:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 370:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to erase UCB sector which is starting with the specified address
 371:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 372:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_EraseUCB(uint32_t *ucb_sector_start_address)
 373:../Libraries/XMCLib/src/xmc4_flash.c **** {
 833              	 .loc 1 373 0
 834              	 .cfi_startproc
 835              	 
 836              	 
 837              	 
 838              	.LVL70:
 839 0000 30B4     	 push {r4,r5}
 840              	.LCFI18:
 841              	 .cfi_def_cfa_offset 8
 842              	 .cfi_offset 4,-8
 843              	 .cfi_offset 5,-4
 844              	.LVL71:
 374:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 375:../Libraries/XMCLib/src/xmc4_flash.c **** 
 376:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 377:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 845              	 .loc 1 377 0
 846 0002 094B     	 ldr r3,.L78
 847 0004 AA24     	 movs r4,#170
 848 0006 1C60     	 str r4,[r3]
 849              	.LVL72:
 378:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 379:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
 850              	 .loc 1 379 0
 851 0008 084A     	 ldr r2,.L78+4
 852 000a 5521     	 movs r1,#85
 853 000c 1160     	 str r1,[r2]
 854              	.LVL73:
 380:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 381:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x80U;
 855              	 .loc 1 381 0
 856 000e 8025     	 movs r5,#128
 857 0010 1D60     	 str r5,[r3]
 382:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 383:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xaaU;
 858              	 .loc 1 383 0
 859 0012 1C60     	 str r4,[r3]
 860              	.LVL74:
 384:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 385:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x55U;
 861              	 .loc 1 385 0
 862 0014 1160     	 str r1,[r2]
 863              	.LVL75:
 386:../Libraries/XMCLib/src/xmc4_flash.c ****   address = ucb_sector_start_address;
 387:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xc0U;
 864              	 .loc 1 387 0
 865 0016 C023     	 movs r3,#192
 866 0018 0360     	 str r3,[r0]
 388:../Libraries/XMCLib/src/xmc4_flash.c **** 
 389:../Libraries/XMCLib/src/xmc4_flash.c ****   /* wait until the operation is completed */
 390:../Libraries/XMCLib/src/xmc4_flash.c ****   while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 867              	 .loc 1 390 0
 868 001a 054A     	 ldr r2,.L78+8
 869              	.L75:
 870              	 .loc 1 390 0 is_stmt 0 discriminator 1
 871 001c 1368     	 ldr r3,[r2]
 872 001e 13F0010F 	 tst r3,#1
 873 0022 FBD1     	 bne .L75
 391:../Libraries/XMCLib/src/xmc4_flash.c **** }
 874              	 .loc 1 391 0 is_stmt 1
 875 0024 30BC     	 pop {r4,r5}
 876              	.LCFI19:
 877              	 .cfi_restore 5
 878              	 .cfi_restore 4
 879              	 .cfi_def_cfa_offset 0
 880 0026 7047     	 bx lr
 881              	.L79:
 882              	 .align 2
 883              	.L78:
 884 0028 5455000C 	 .word 201348436
 885 002c A8AA000C 	 .word 201370280
 886 0030 10200058 	 .word 1476403216
 887              	 .cfi_endproc
 888              	.LFE167:
 890              	 .section .text.XMC_FLASH_Reset,"ax",%progbits
 891              	 .align 2
 892              	 .global XMC_FLASH_Reset
 893              	 .thumb
 894              	 .thumb_func
 896              	XMC_FLASH_Reset:
 897              	.LFB168:
 392:../Libraries/XMCLib/src/xmc4_flash.c **** 
 393:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 394:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to reset the status of the PFLASH
 395:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 396:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_Reset(void)
 397:../Libraries/XMCLib/src/xmc4_flash.c **** {
 898              	 .loc 1 397 0
 899              	 .cfi_startproc
 900              	 
 901              	 
 902              	 
 903              	.LVL76:
 398:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 399:../Libraries/XMCLib/src/xmc4_flash.c **** 
 400:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 401:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0xf0U;
 904              	 .loc 1 401 0
 905 0000 F022     	 movs r2,#240
 906 0002 014B     	 ldr r3,.L81
 907 0004 1A60     	 str r2,[r3]
 908 0006 7047     	 bx lr
 909              	.L82:
 910              	 .align 2
 911              	.L81:
 912 0008 5455000C 	 .word 201348436
 913              	 .cfi_endproc
 914              	.LFE168:
 916              	 .section .text.XMC_FLASH_InstallBMI,"ax",%progbits
 917              	 .align 2
 918              	 .global XMC_FLASH_InstallBMI
 919              	 .thumb
 920              	 .thumb_func
 922              	XMC_FLASH_InstallBMI:
 923              	.LFB169:
 402:../Libraries/XMCLib/src/xmc4_flash.c **** }
 403:../Libraries/XMCLib/src/xmc4_flash.c **** 
 404:../Libraries/XMCLib/src/xmc4_flash.c **** #define BMI_STRING_BYTE_CNT 30
 405:../Libraries/XMCLib/src/xmc4_flash.c **** 
 406:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_InstallBMI(XMC_FLASH_BMI_STRING_t *const bmi_string)
 407:../Libraries/XMCLib/src/xmc4_flash.c **** {
 924              	 .loc 1 407 0
 925              	 .cfi_startproc
 926              	 
 927              	 
 928              	.LVL77:
 929 0000 10B5     	 push {r4,lr}
 930              	.LCFI20:
 931              	 .cfi_def_cfa_offset 8
 932              	 .cfi_offset 4,-8
 933              	 .cfi_offset 14,-4
 934              	.LVL78:
 935 0002 431E     	 subs r3,r0,#1
 936 0004 00F11D04 	 add r4,r0,#29
 408:../Libraries/XMCLib/src/xmc4_flash.c ****   uint32_t checksum = 0;
 937              	 .loc 1 408 0
 938 0008 0022     	 movs r2,#0
 939              	.LVL79:
 940              	.L84:
 941              	.LBB48:
 409:../Libraries/XMCLib/src/xmc4_flash.c ****   for (int i = 0; i < BMI_STRING_BYTE_CNT; ++i)
 410:../Libraries/XMCLib/src/xmc4_flash.c ****   {
 411:../Libraries/XMCLib/src/xmc4_flash.c **** 	checksum ^= ((const uint8_t *)bmi_string)[i];
 942              	 .loc 1 411 0 discriminator 3
 943 000a 13F8011F 	 ldrb r1,[r3,#1]!
 944 000e 4A40     	 eors r2,r2,r1
 945              	.LVL80:
 409:../Libraries/XMCLib/src/xmc4_flash.c ****   for (int i = 0; i < BMI_STRING_BYTE_CNT; ++i)
 946              	 .loc 1 409 0 discriminator 3
 947 0010 A342     	 cmp r3,r4
 948 0012 FAD1     	 bne .L84
 949              	.LBE48:
 412:../Libraries/XMCLib/src/xmc4_flash.c ****   }
 413:../Libraries/XMCLib/src/xmc4_flash.c **** 
 414:../Libraries/XMCLib/src/xmc4_flash.c ****   bmi_string->reserved = checksum;
 950              	 .loc 1 414 0
 951 0014 0262     	 str r2,[r0,#32]
 952              	.LVL81:
 953              	.LBB49:
 954              	.LBB50:
 109:../Libraries/XMCLib/src/xmc4_flash.c **** }
 955              	 .loc 1 109 0
 956 0016 5022     	 movs r2,#80
 957              	.LVL82:
 958 0018 134B     	 ldr r3,.L91
 959 001a 1A60     	 str r2,[r3]
 960              	.LVL83:
 961              	.LBE50:
 962              	.LBE49:
 415:../Libraries/XMCLib/src/xmc4_flash.c **** 
 416:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lEnterPageModeCommand();
 417:../Libraries/XMCLib/src/xmc4_flash.c **** 
 418:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lLoadPageCommand(((const uint32_t *)bmi_string)[0], ((const uint32_t *)bmi_string)[1]);
 963              	 .loc 1 418 0
 964 001c 0368     	 ldr r3,[r0]
 965 001e 4168     	 ldr r1,[r0,#4]
 966              	.LVL84:
 967              	.LBB51:
 968              	.LBB52:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 969              	 .loc 1 120 0
 970 0020 124A     	 ldr r2,.L91+4
 971 0022 1360     	 str r3,[r2]
 972              	.LVL85:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 973              	 .loc 1 122 0
 974 0024 124B     	 ldr r3,.L91+8
 975              	.LVL86:
 976 0026 1960     	 str r1,[r3]
 977              	.LVL87:
 978              	.LBE52:
 979              	.LBE51:
 419:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lLoadPageCommand(((const uint32_t *)bmi_string)[2], ((const uint32_t *)bmi_string)[3]);
 980              	 .loc 1 419 0
 981 0028 8468     	 ldr r4,[r0,#8]
 982 002a C168     	 ldr r1,[r0,#12]
 983              	.LVL88:
 984              	.LBB53:
 985              	.LBB54:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 986              	 .loc 1 120 0
 987 002c 1460     	 str r4,[r2]
 988              	.LVL89:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 989              	 .loc 1 122 0
 990 002e 1960     	 str r1,[r3]
 991              	.LBE54:
 992              	.LBE53:
 420:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lLoadPageCommand(((const uint32_t *)bmi_string)[4], ((const uint32_t *)bmi_string)[5]);
 993              	 .loc 1 420 0
 994 0030 0469     	 ldr r4,[r0,#16]
 995              	.LVL90:
 996 0032 4169     	 ldr r1,[r0,#20]
 997              	.LVL91:
 998              	.LBB55:
 999              	.LBB56:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1000              	 .loc 1 120 0
 1001 0034 1460     	 str r4,[r2]
 1002              	.LVL92:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1003              	 .loc 1 122 0
 1004 0036 1960     	 str r1,[r3]
 1005              	.LBE56:
 1006              	.LBE55:
 421:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lLoadPageCommand(((const uint32_t *)bmi_string)[6], ((const uint32_t *)bmi_string)[7]);
 1007              	 .loc 1 421 0
 1008 0038 8469     	 ldr r4,[r0,#24]
 1009              	.LVL93:
 1010 003a C169     	 ldr r1,[r0,#28]
 1011              	.LVL94:
 1012              	.LBB57:
 1013              	.LBB58:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1014              	 .loc 1 120 0
 1015 003c 1460     	 str r4,[r2]
 1016              	.LVL95:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1017              	 .loc 1 122 0
 1018 003e 1960     	 str r1,[r3]
 1019              	.LBE58:
 1020              	.LBE57:
 422:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lLoadPageCommand(((const uint32_t *)bmi_string)[8], 0);
 1021              	 .loc 1 422 0
 1022 0040 016A     	 ldr r1,[r0,#32]
 1023              	.LVL96:
 1024              	.LBB59:
 1025              	.LBB60:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1026              	 .loc 1 120 0
 1027 0042 1160     	 str r1,[r2]
 1028              	.LVL97:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1029              	 .loc 1 122 0
 1030 0044 0022     	 movs r2,#0
 1031 0046 1A60     	 str r2,[r3]
 1032              	.LVL98:
 1033 0048 1B23     	 movs r3,#27
 1034              	.LBE60:
 1035              	.LBE59:
 1036              	.LBB61:
 1037              	.LBB62:
 1038              	.LBB63:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1039              	 .loc 1 120 0
 1040 004a 0848     	 ldr r0,.L91+4
 1041              	.LVL99:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1042              	 .loc 1 122 0
 1043 004c 0849     	 ldr r1,.L91+8
 1044              	.LVL100:
 1045              	.L85:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1046              	 .loc 1 120 0
 1047 004e 0260     	 str r2,[r0]
 1048              	.LVL101:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1049              	 .loc 1 122 0
 1050 0050 0A60     	 str r2,[r1]
 1051              	.LVL102:
 1052              	.LBE63:
 1053              	.LBE62:
 423:../Libraries/XMCLib/src/xmc4_flash.c **** 
 424:../Libraries/XMCLib/src/xmc4_flash.c ****   for (uint32_t idx = 0U; idx < (XMC_FLASH_WORDS_PER_PAGE - XMC_FLASH_BMI_STRING_WORDS); idx += 2U)
 1054              	 .loc 1 424 0
 1055 0052 013B     	 subs r3,r3,#1
 1056              	.LVL103:
 1057 0054 FBD1     	 bne .L85
 1058              	.LBE61:
 425:../Libraries/XMCLib/src/xmc4_flash.c ****   {
 426:../Libraries/XMCLib/src/xmc4_flash.c ****     XMC_FLASH_lLoadPageCommand(0UL, 0UL);
 427:../Libraries/XMCLib/src/xmc4_flash.c ****   }
 428:../Libraries/XMCLib/src/xmc4_flash.c **** 
 429:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lWriteUCBPageCommand((uint32_t *)((uint32_t)XMC_FLASH_UCB2 + XMC_FLASH_BYTES_PER_PAGE))
 1059              	 .loc 1 429 0
 1060 0056 0748     	 ldr r0,.L91+12
 1061 0058 FFF7FEFF 	 bl XMC_FLASH_lWriteUCBPageCommand
 1062              	.LVL104:
 430:../Libraries/XMCLib/src/xmc4_flash.c **** 
 431:../Libraries/XMCLib/src/xmc4_flash.c ****   /* wait until the operation is completed */
 432:../Libraries/XMCLib/src/xmc4_flash.c ****   while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 1063              	 .loc 1 432 0
 1064 005c 064A     	 ldr r2,.L91+16
 1065              	.L86:
 1066              	 .loc 1 432 0 is_stmt 0 discriminator 1
 1067 005e 1368     	 ldr r3,[r2]
 1068 0060 13F0010F 	 tst r3,#1
 1069 0064 FBD1     	 bne .L86
 433:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1070              	 .loc 1 433 0 is_stmt 1
 1071 0066 10BD     	 pop {r4,pc}
 1072              	.LVL105:
 1073              	.L92:
 1074              	 .align 2
 1075              	.L91:
 1076 0068 5455000C 	 .word 201348436
 1077 006c F055000C 	 .word 201348592
 1078 0070 F455000C 	 .word 201348596
 1079 0074 0009000C 	 .word 201328896
 1080 0078 10200058 	 .word 1476403216
 1081              	 .cfi_endproc
 1082              	.LFE169:
 1084              	 .section .text.XMC_FLASH_InstallProtection,"ax",%progbits
 1085              	 .align 2
 1086              	 .global XMC_FLASH_InstallProtection
 1087              	 .thumb
 1088              	 .thumb_func
 1090              	XMC_FLASH_InstallProtection:
 1091              	.LFB170:
 434:../Libraries/XMCLib/src/xmc4_flash.c **** 
 435:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 436:../Libraries/XMCLib/src/xmc4_flash.c ****  * This API install the global read and sector write protection for the specified user
 437:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 438:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_InstallProtection(uint8_t user,
 439:../Libraries/XMCLib/src/xmc4_flash.c ****                                  uint32_t protection_mask,
 440:../Libraries/XMCLib/src/xmc4_flash.c **** 	                             uint32_t password_0,
 441:../Libraries/XMCLib/src/xmc4_flash.c ****                                  uint32_t password_1)
 442:../Libraries/XMCLib/src/xmc4_flash.c **** {
 1092              	 .loc 1 442 0
 1093              	 .cfi_startproc
 1094              	 
 1095              	 
 1096              	.LVL106:
 1097 0000 70B5     	 push {r4,r5,r6,lr}
 1098              	.LCFI21:
 1099              	 .cfi_def_cfa_offset 16
 1100              	 .cfi_offset 4,-16
 1101              	 .cfi_offset 5,-12
 1102              	 .cfi_offset 6,-8
 1103              	 .cfi_offset 14,-4
 1104              	.LVL107:
 1105              	.LBB76:
 1106              	.LBB77:
 109:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1107              	 .loc 1 109 0
 1108 0002 5025     	 movs r5,#80
 1109 0004 0F4C     	 ldr r4,.L99
 1110 0006 2560     	 str r5,[r4]
 1111              	.LVL108:
 1112              	.LBE77:
 1113              	.LBE76:
 1114              	.LBB78:
 1115              	.LBB79:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1116              	 .loc 1 120 0
 1117 0008 0F4D     	 ldr r5,.L99+4
 1118 000a 2960     	 str r1,[r5]
 1119              	.LVL109:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1120              	 .loc 1 122 0
 1121 000c A034     	 adds r4,r4,#160
 1122 000e 0026     	 movs r6,#0
 1123 0010 2660     	 str r6,[r4]
 1124              	.LVL110:
 1125              	.LBE79:
 1126              	.LBE78:
 1127              	.LBB80:
 1128              	.LBB81:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1129              	 .loc 1 120 0
 1130 0012 2960     	 str r1,[r5]
 1131              	.LVL111:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1132              	 .loc 1 122 0
 1133 0014 2660     	 str r6,[r4]
 1134              	.LVL112:
 1135              	.LBE81:
 1136              	.LBE80:
 1137              	.LBB82:
 1138              	.LBB83:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1139              	 .loc 1 120 0
 1140 0016 2A60     	 str r2,[r5]
 1141              	.LVL113:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1142              	 .loc 1 122 0
 1143 0018 2360     	 str r3,[r4]
 1144              	.LVL114:
 1145              	.LBE83:
 1146              	.LBE82:
 1147              	.LBB84:
 1148              	.LBB85:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1149              	 .loc 1 120 0
 1150 001a 2A60     	 str r2,[r5]
 1151              	.LVL115:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1152              	 .loc 1 122 0
 1153 001c 2360     	 str r3,[r4]
 1154              	.LVL116:
 1155 001e 1C23     	 movs r3,#28
 1156              	.LVL117:
 1157              	.LBE85:
 1158              	.LBE84:
 1159              	.LBB86:
 1160              	.LBB87:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1161              	 .loc 1 120 0
 1162 0020 2C46     	 mov r4,r5
 1163              	.LVL118:
 1164 0022 3246     	 mov r2,r6
 1165              	.LVL119:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1166              	 .loc 1 122 0
 1167 0024 0949     	 ldr r1,.L99+8
 1168              	.LVL120:
 1169              	.L94:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1170              	 .loc 1 120 0
 1171 0026 2260     	 str r2,[r4]
 1172              	.LVL121:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1173              	 .loc 1 122 0
 1174 0028 0A60     	 str r2,[r1]
 1175              	.LVL122:
 1176              	.LBE87:
 1177              	.LBE86:
 443:../Libraries/XMCLib/src/xmc4_flash.c ****   uint32_t idx;
 444:../Libraries/XMCLib/src/xmc4_flash.c ****   
 445:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_ASSERT(" XMC_FLASH_ConfigureProtection: User level out of range", (user < 3U))
 446:../Libraries/XMCLib/src/xmc4_flash.c **** 
 447:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lEnterPageModeCommand();
 448:../Libraries/XMCLib/src/xmc4_flash.c **** 
 449:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lLoadPageCommand(protection_mask, 0UL);
 450:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lLoadPageCommand(protection_mask, 0UL);
 451:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lLoadPageCommand(password_0, password_1);
 452:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lLoadPageCommand(password_0, password_1);
 453:../Libraries/XMCLib/src/xmc4_flash.c ****   
 454:../Libraries/XMCLib/src/xmc4_flash.c ****   for (idx = 0U; idx < (XMC_FLASH_WORDS_PER_PAGE - XMC_FLASH_PROTECTION_CONFIGURATION_WORDS); idx +
 1178              	 .loc 1 454 0
 1179 002a 013B     	 subs r3,r3,#1
 1180              	.LVL123:
 1181 002c FBD1     	 bne .L94
 455:../Libraries/XMCLib/src/xmc4_flash.c ****   {
 456:../Libraries/XMCLib/src/xmc4_flash.c ****     XMC_FLASH_lLoadPageCommand(0UL, 0UL);
 457:../Libraries/XMCLib/src/xmc4_flash.c ****   }
 458:../Libraries/XMCLib/src/xmc4_flash.c **** 
 459:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lWriteUCBPageCommand((uint32_t *)((uint32_t)XMC_FLASH_UCB0 + (user * XMC_FLASH_BYTES_PE
 1182              	 .loc 1 459 0
 1183 002e 00F54030 	 add r0,r0,#196608
 1184              	.LVL124:
 1185 0032 8002     	 lsls r0,r0,#10
 1186 0034 FFF7FEFF 	 bl XMC_FLASH_lWriteUCBPageCommand
 1187              	.LVL125:
 460:../Libraries/XMCLib/src/xmc4_flash.c **** 
 461:../Libraries/XMCLib/src/xmc4_flash.c ****   /* wait until the operation is completed */
 462:../Libraries/XMCLib/src/xmc4_flash.c ****   while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 1188              	 .loc 1 462 0
 1189 0038 054A     	 ldr r2,.L99+12
 1190              	.L95:
 1191              	 .loc 1 462 0 is_stmt 0 discriminator 1
 1192 003a 1368     	 ldr r3,[r2]
 1193 003c 13F0010F 	 tst r3,#1
 1194 0040 FBD1     	 bne .L95
 463:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1195              	 .loc 1 463 0 is_stmt 1
 1196 0042 70BD     	 pop {r4,r5,r6,pc}
 1197              	.L100:
 1198              	 .align 2
 1199              	.L99:
 1200 0044 5455000C 	 .word 201348436
 1201 0048 F055000C 	 .word 201348592
 1202 004c F455000C 	 .word 201348596
 1203 0050 10200058 	 .word 1476403216
 1204              	 .cfi_endproc
 1205              	.LFE170:
 1207              	 .section .text.XMC_FLASH_ConfirmProtection,"ax",%progbits
 1208              	 .align 2
 1209              	 .global XMC_FLASH_ConfirmProtection
 1210              	 .thumb
 1211              	 .thumb_func
 1213              	XMC_FLASH_ConfirmProtection:
 1214              	.LFB171:
 464:../Libraries/XMCLib/src/xmc4_flash.c **** 
 465:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 466:../Libraries/XMCLib/src/xmc4_flash.c ****  * This API confirm the protection. So that This sectors are locked with the specified protection.
 467:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 468:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_ConfirmProtection(uint8_t user)
 469:../Libraries/XMCLib/src/xmc4_flash.c **** {
 1215              	 .loc 1 469 0
 1216              	 .cfi_startproc
 1217              	 
 1218              	 
 1219              	.LVL126:
 1220 0000 10B5     	 push {r4,lr}
 1221              	.LCFI22:
 1222              	 .cfi_def_cfa_offset 8
 1223              	 .cfi_offset 4,-8
 1224              	 .cfi_offset 14,-4
 1225              	.LVL127:
 1226              	.LBB96:
 1227              	.LBB97:
 109:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1228              	 .loc 1 109 0
 1229 0002 5022     	 movs r2,#80
 1230 0004 0E4B     	 ldr r3,.L107
 1231 0006 1A60     	 str r2,[r3]
 1232              	.LVL128:
 1233              	.LBE97:
 1234              	.LBE96:
 1235              	.LBB98:
 1236              	.LBB99:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1237              	 .loc 1 120 0
 1238 0008 0E49     	 ldr r1,.L107+4
 1239 000a 0F4C     	 ldr r4,.L107+8
 1240 000c 0C60     	 str r4,[r1]
 1241              	.LVL129:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1242              	 .loc 1 122 0
 1243 000e A033     	 adds r3,r3,#160
 1244 0010 0022     	 movs r2,#0
 1245 0012 1A60     	 str r2,[r3]
 1246              	.LVL130:
 1247              	.LBE99:
 1248              	.LBE98:
 1249              	.LBB100:
 1250              	.LBB101:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1251              	 .loc 1 120 0
 1252 0014 0C60     	 str r4,[r1]
 1253              	.LVL131:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1254              	 .loc 1 122 0
 1255 0016 1A60     	 str r2,[r3]
 1256              	.LVL132:
 1257 0018 1E23     	 movs r3,#30
 1258              	.LBE101:
 1259              	.LBE100:
 1260              	.LBB102:
 1261              	.LBB103:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1262              	 .loc 1 120 0
 1263 001a 0C46     	 mov r4,r1
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1264              	 .loc 1 122 0
 1265 001c 0431     	 adds r1,r1,#4
 1266              	.LVL133:
 1267              	.L102:
 120:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 1268              	 .loc 1 120 0
 1269 001e 2260     	 str r2,[r4]
 1270              	.LVL134:
 122:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1271              	 .loc 1 122 0
 1272 0020 0A60     	 str r2,[r1]
 1273              	.LVL135:
 1274              	.LBE103:
 1275              	.LBE102:
 470:../Libraries/XMCLib/src/xmc4_flash.c ****   uint32_t idx;
 471:../Libraries/XMCLib/src/xmc4_flash.c **** 
 472:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_ASSERT(" XMC_FLASH_ConfirmProtection: User level out of range", (user < 3U))
 473:../Libraries/XMCLib/src/xmc4_flash.c **** 
 474:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lEnterPageModeCommand();
 475:../Libraries/XMCLib/src/xmc4_flash.c **** 
 476:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lLoadPageCommand(XMC_FLASH_PROT_CONFIRM_CODE, 0U);
 477:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lLoadPageCommand(XMC_FLASH_PROT_CONFIRM_CODE, 0U);
 478:../Libraries/XMCLib/src/xmc4_flash.c **** 
 479:../Libraries/XMCLib/src/xmc4_flash.c ****   /* Fill the rest of page buffer with zeros*/
 480:../Libraries/XMCLib/src/xmc4_flash.c ****   for (idx = 0UL; idx < (XMC_FLASH_WORDS_PER_PAGE - XMC_FLASH_PROT_CONFIRM_WORDS); idx += 2U)
 1276              	 .loc 1 480 0
 1277 0022 013B     	 subs r3,r3,#1
 1278              	.LVL136:
 1279 0024 FBD1     	 bne .L102
 481:../Libraries/XMCLib/src/xmc4_flash.c ****   {
 482:../Libraries/XMCLib/src/xmc4_flash.c ****     XMC_FLASH_lLoadPageCommand(0UL, 0UL);
 483:../Libraries/XMCLib/src/xmc4_flash.c ****   }
 484:../Libraries/XMCLib/src/xmc4_flash.c **** 
 485:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_FLASH_lWriteUCBPageCommand((uint32_t *)((uint32_t)XMC_FLASH_UCB0 + 
 1280              	 .loc 1 485 0
 1281 0026 8002     	 lsls r0,r0,#10
 1282              	.LVL137:
 1283 0028 00F14060 	 add r0,r0,#201326592
 1284 002c 00F50070 	 add r0,r0,#512
 1285 0030 FFF7FEFF 	 bl XMC_FLASH_lWriteUCBPageCommand
 1286              	.LVL138:
 486:../Libraries/XMCLib/src/xmc4_flash.c ****                                  (user * XMC_FLASH_BYTES_PER_UCB) + XMC_FLASH_PROT_CONFIRM_OFFSET))
 487:../Libraries/XMCLib/src/xmc4_flash.c **** 
 488:../Libraries/XMCLib/src/xmc4_flash.c ****   /* wait until the operation is completed */
 489:../Libraries/XMCLib/src/xmc4_flash.c ****   while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 1287              	 .loc 1 489 0
 1288 0034 054A     	 ldr r2,.L107+12
 1289              	.L103:
 1290              	 .loc 1 489 0 is_stmt 0 discriminator 1
 1291 0036 1368     	 ldr r3,[r2]
 1292 0038 13F0010F 	 tst r3,#1
 1293 003c FBD1     	 bne .L103
 490:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1294              	 .loc 1 490 0 is_stmt 1
 1295 003e 10BD     	 pop {r4,pc}
 1296              	.L108:
 1297              	 .align 2
 1298              	.L107:
 1299 0040 5455000C 	 .word 201348436
 1300 0044 F055000C 	 .word 201348592
 1301 0048 C315FE8A 	 .word -1963059773
 1302 004c 10200058 	 .word 1476403216
 1303              	 .cfi_endproc
 1304              	.LFE171:
 1306              	 .section .text.XMC_FLASH_VerifyReadProtection,"ax",%progbits
 1307              	 .align 2
 1308              	 .global XMC_FLASH_VerifyReadProtection
 1309              	 .thumb
 1310              	 .thumb_func
 1312              	XMC_FLASH_VerifyReadProtection:
 1313              	.LFB172:
 491:../Libraries/XMCLib/src/xmc4_flash.c **** 
 492:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 493:../Libraries/XMCLib/src/xmc4_flash.c ****  * This API verify read protection configuration. And returns true if passwords are matching.
 494:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 495:../Libraries/XMCLib/src/xmc4_flash.c **** bool XMC_FLASH_VerifyReadProtection(uint32_t password_0, uint32_t password_1)
 496:../Libraries/XMCLib/src/xmc4_flash.c **** {
 1314              	 .loc 1 496 0
 1315              	 .cfi_startproc
 1316              	 
 1317              	 
 1318              	.LVL139:
 1319 0000 08B5     	 push {r3,lr}
 1320              	.LCFI23:
 1321              	 .cfi_def_cfa_offset 8
 1322              	 .cfi_offset 3,-8
 1323              	 .cfi_offset 14,-4
 1324              	.LVL140:
 1325              	.LBB110:
 1326              	.LBB111:
 253:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1327              	 .loc 1 253 0
 1328 0002 41F21003 	 movw r3,#4112
 1329 0006 094A     	 ldr r2,.L113
 1330 0008 D358     	 ldr r3,[r2,r3]
 1331              	.LBE111:
 1332              	.LBE110:
 497:../Libraries/XMCLib/src/xmc4_flash.c ****   bool status = false;
 498:../Libraries/XMCLib/src/xmc4_flash.c ****   
 499:../Libraries/XMCLib/src/xmc4_flash.c ****   /* Check if read protection is installed */
 500:../Libraries/XMCLib/src/xmc4_flash.c ****   if ((XMC_FLASH_GetStatus() & (uint32_t)XMC_FLASH_STATUS_READ_PROTECTION_INSTALLED) != 0U)
 1333              	 .loc 1 500 0
 1334 000a 13F4802F 	 tst r3,#262144
 1335 000e 0BD0     	 beq .L111
 1336              	.LVL141:
 1337              	.LBB112:
 1338              	.LBB113:
 233:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1339              	 .loc 1 233 0
 1340 0010 F522     	 movs r2,#245
 1341 0012 074B     	 ldr r3,.L113+4
 1342 0014 1A60     	 str r2,[r3]
 1343              	.LBE113:
 1344              	.LBE112:
 501:../Libraries/XMCLib/src/xmc4_flash.c ****   {  
 502:../Libraries/XMCLib/src/xmc4_flash.c ****     XMC_FLASH_lClearStatusCommand();
 503:../Libraries/XMCLib/src/xmc4_flash.c ****     XMC_FLASH_lDisableReadProtectionCommand(password_0, password_1);
 1345              	 .loc 1 503 0
 1346 0016 FFF7FEFF 	 bl XMC_FLASH_lDisableReadProtectionCommand
 1347              	.LVL142:
 1348              	.LBB114:
 1349              	.LBB115:
 253:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1350              	 .loc 1 253 0
 1351 001a 41F21003 	 movw r3,#4112
 1352 001e 034A     	 ldr r2,.L113
 1353 0020 D058     	 ldr r0,[r2,r3]
 1354              	.LBE115:
 1355              	.LBE114:
 504:../Libraries/XMCLib/src/xmc4_flash.c **** 
 505:../Libraries/XMCLib/src/xmc4_flash.c ****     status = (bool)(XMC_FLASH_GetStatus() & (uint32_t)XMC_FLASH_STATUS_READ_PROTECTION_DISABLED_STA
 1356              	 .loc 1 505 0
 1357 0022 C0F3C040 	 ubfx r0,r0,#19,#1
 1358              	.LVL143:
 1359 0026 08BD     	 pop {r3,pc}
 1360              	.LVL144:
 1361              	.L111:
 497:../Libraries/XMCLib/src/xmc4_flash.c ****   
 1362              	 .loc 1 497 0
 1363 0028 0020     	 movs r0,#0
 1364              	.LVL145:
 506:../Libraries/XMCLib/src/xmc4_flash.c ****   }
 507:../Libraries/XMCLib/src/xmc4_flash.c **** 
 508:../Libraries/XMCLib/src/xmc4_flash.c ****   return status;
 509:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1365              	 .loc 1 509 0
 1366 002a 08BD     	 pop {r3,pc}
 1367              	.L114:
 1368              	 .align 2
 1369              	.L113:
 1370 002c 00100058 	 .word 1476399104
 1371 0030 5455000C 	 .word 201348436
 1372              	 .cfi_endproc
 1373              	.LFE172:
 1375              	 .section .text.XMC_FLASH_VerifyWriteProtection,"ax",%progbits
 1376              	 .align 2
 1377              	 .global XMC_FLASH_VerifyWriteProtection
 1378              	 .thumb
 1379              	 .thumb_func
 1381              	XMC_FLASH_VerifyWriteProtection:
 1382              	.LFB173:
 510:../Libraries/XMCLib/src/xmc4_flash.c **** 
 511:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 512:../Libraries/XMCLib/src/xmc4_flash.c ****  * This API verify sector write protection configuration. And returns true if passwords are matchin
 513:../Libraries/XMCLib/src/xmc4_flash.c ****  * specified user.
 514:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 515:../Libraries/XMCLib/src/xmc4_flash.c **** bool XMC_FLASH_VerifyWriteProtection(uint32_t user,
 516:../Libraries/XMCLib/src/xmc4_flash.c ****                                      uint32_t protection_mask, 
 517:../Libraries/XMCLib/src/xmc4_flash.c ****                                      uint32_t password_0, 
 518:../Libraries/XMCLib/src/xmc4_flash.c ****                                      uint32_t password_1)
 519:../Libraries/XMCLib/src/xmc4_flash.c **** {
 1383              	 .loc 1 519 0
 1384              	 .cfi_startproc
 1385              	 
 1386              	 
 1387              	.LVL146:
 1388 0000 38B5     	 push {r3,r4,r5,lr}
 1389              	.LCFI24:
 1390              	 .cfi_def_cfa_offset 16
 1391              	 .cfi_offset 3,-16
 1392              	 .cfi_offset 4,-12
 1393              	 .cfi_offset 5,-8
 1394              	 .cfi_offset 14,-4
 1395              	.LVL147:
 1396              	.LBB122:
 1397              	.LBB123:
 253:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1398              	 .loc 1 253 0
 1399 0002 41F21004 	 movw r4,#4112
 1400 0006 154D     	 ldr r5,.L121
 1401 0008 2C59     	 ldr r4,[r5,r4]
 1402              	.LBE123:
 1403              	.LBE122:
 520:../Libraries/XMCLib/src/xmc4_flash.c ****   bool status = false;
 521:../Libraries/XMCLib/src/xmc4_flash.c ****   uint32_t *flash_procon_ptr = (uint32_t *)(void*)(&(FLASH0->PROCON0) + user);
 522:../Libraries/XMCLib/src/xmc4_flash.c **** 
 523:../Libraries/XMCLib/src/xmc4_flash.c ****   XMC_ASSERT(" XMC_FLASH_VerifyWriteProtection: User level out of range", (user < 2U))
 524:../Libraries/XMCLib/src/xmc4_flash.c **** 
 525:../Libraries/XMCLib/src/xmc4_flash.c ****   /* Check if write protection for selected user is installed */
 526:../Libraries/XMCLib/src/xmc4_flash.c ****   if ((XMC_FLASH_GetStatus() & (uint32_t)((uint32_t)1U << (uint32_t)((uint32_t)FLASH_FSR_WPROIN0_Po
 1404              	 .loc 1 526 0
 1405 000a 00F11505 	 add r5,r0,#21
 1406 000e EC40     	 lsrs r4,r4,r5
 1407 0010 14F0010F 	 tst r4,#1
 1408 0014 1FD0     	 beq .L118
 1409 0016 0C46     	 mov r4,r1
 1410 0018 0546     	 mov r5,r0
 1411              	.LVL148:
 1412              	.LBB124:
 1413              	.LBB125:
 233:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1414              	 .loc 1 233 0
 1415 001a F520     	 movs r0,#245
 1416              	.LVL149:
 1417 001c 1049     	 ldr r1,.L121+4
 1418              	.LVL150:
 1419 001e 0860     	 str r0,[r1]
 1420              	.LBE125:
 1421              	.LBE124:
 527:../Libraries/XMCLib/src/xmc4_flash.c ****   {  
 528:../Libraries/XMCLib/src/xmc4_flash.c ****     XMC_FLASH_lClearStatusCommand();
 529:../Libraries/XMCLib/src/xmc4_flash.c ****     XMC_FLASH_lDisableSectorWriteProtectionCommand(user, password_0, password_1);
 1422              	 .loc 1 529 0
 1423 0020 2846     	 mov r0,r5
 1424 0022 1146     	 mov r1,r2
 1425 0024 1A46     	 mov r2,r3
 1426              	.LVL151:
 1427 0026 FFF7FEFF 	 bl XMC_FLASH_lDisableSectorWriteProtectionCommand
 1428              	.LVL152:
 1429              	.LBB126:
 1430              	.LBB127:
 253:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1431              	 .loc 1 253 0
 1432 002a 41F21003 	 movw r3,#4112
 1433 002e 0B4A     	 ldr r2,.L121
 1434 0030 D358     	 ldr r3,[r2,r3]
 1435              	.LBE127:
 1436              	.LBE126:
 530:../Libraries/XMCLib/src/xmc4_flash.c ****     
 531:../Libraries/XMCLib/src/xmc4_flash.c ****     status = (bool)((XMC_FLASH_GetStatus() & (uint32_t)((uint32_t)1U << (uint32_t)((uint32_t)FLASH_
 1437              	 .loc 1 531 0
 1438 0032 05F11902 	 add r2,r5,#25
 1439 0036 D340     	 lsrs r3,r3,r2
 1440 0038 13F0010F 	 tst r3,#1
 1441 003c 09D0     	 beq .L119
 532:../Libraries/XMCLib/src/xmc4_flash.c ****              (*flash_procon_ptr == (protection_mask & (uint32_t)(~(uint32_t)XMC_FLASH_PROTECTION_RE
 1442              	 .loc 1 532 0 discriminator 1
 1443 003e 24F40040 	 bic r0,r4,#32768
 531:../Libraries/XMCLib/src/xmc4_flash.c ****              (*flash_procon_ptr == (protection_mask & (uint32_t)(~(uint32_t)XMC_FLASH_PROTECTION_RE
 1444              	 .loc 1 531 0 discriminator 1
 1445 0042 084B     	 ldr r3,.L121+8
 1446 0044 53F82530 	 ldr r3,[r3,r5,lsl#2]
 1447 0048 8342     	 cmp r3,r0
 1448 004a 14BF     	 ite ne
 1449 004c 0020     	 movne r0,#0
 1450 004e 0120     	 moveq r0,#1
 1451 0050 38BD     	 pop {r3,r4,r5,pc}
 1452              	.LVL153:
 1453              	.L119:
 531:../Libraries/XMCLib/src/xmc4_flash.c ****              (*flash_procon_ptr == (protection_mask & (uint32_t)(~(uint32_t)XMC_FLASH_PROTECTION_RE
 1454              	 .loc 1 531 0 is_stmt 0
 1455 0052 0020     	 movs r0,#0
 1456              	.LVL154:
 1457 0054 38BD     	 pop {r3,r4,r5,pc}
 1458              	.LVL155:
 1459              	.L118:
 520:../Libraries/XMCLib/src/xmc4_flash.c ****   uint32_t *flash_procon_ptr = (uint32_t *)(void*)(&(FLASH0->PROCON0) + user);
 1460              	 .loc 1 520 0 is_stmt 1
 1461 0056 0020     	 movs r0,#0
 1462              	.LVL156:
 533:../Libraries/XMCLib/src/xmc4_flash.c ****   }
 534:../Libraries/XMCLib/src/xmc4_flash.c **** 
 535:../Libraries/XMCLib/src/xmc4_flash.c ****   return status;
 536:../Libraries/XMCLib/src/xmc4_flash.c **** }
 1463              	 .loc 1 536 0
 1464 0058 38BD     	 pop {r3,r4,r5,pc}
 1465              	.LVL157:
 1466              	.L122:
 1467 005a 00BF     	 .align 2
 1468              	.L121:
 1469 005c 00100058 	 .word 1476399104
 1470 0060 5455000C 	 .word 201348436
 1471 0064 20200058 	 .word 1476403232
 1472              	 .cfi_endproc
 1473              	.LFE173:
 1475              	 .section .text.XMC_FLASH_ResumeProtection,"ax",%progbits
 1476              	 .align 2
 1477              	 .global XMC_FLASH_ResumeProtection
 1478              	 .thumb
 1479              	 .thumb_func
 1481              	XMC_FLASH_ResumeProtection:
 1482              	.LFB174:
 537:../Libraries/XMCLib/src/xmc4_flash.c **** 
 538:../Libraries/XMCLib/src/xmc4_flash.c **** /*
 539:../Libraries/XMCLib/src/xmc4_flash.c ****  * Command to enables the protection as it was configured
 540:../Libraries/XMCLib/src/xmc4_flash.c ****  */
 541:../Libraries/XMCLib/src/xmc4_flash.c **** void XMC_FLASH_ResumeProtection(void)
 542:../Libraries/XMCLib/src/xmc4_flash.c **** {
 1483              	 .loc 1 542 0
 1484              	 .cfi_startproc
 1485              	 
 1486              	 
 1487              	 
 1488              	.LVL158:
 543:../Libraries/XMCLib/src/xmc4_flash.c ****   volatile uint32_t *address;
 544:../Libraries/XMCLib/src/xmc4_flash.c **** 
 545:../Libraries/XMCLib/src/xmc4_flash.c ****   address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 546:../Libraries/XMCLib/src/xmc4_flash.c ****   *address = 0x5eU;
 1489              	 .loc 1 546 0
 1490 0000 5E22     	 movs r2,#94
 1491 0002 014B     	 ldr r3,.L124
 1492 0004 1A60     	 str r2,[r3]
 1493 0006 7047     	 bx lr
 1494              	.L125:
 1495              	 .align 2
 1496              	.L124:
 1497 0008 5455000C 	 .word 201348436
 1498              	 .cfi_endproc
 1499              	.LFE174:
 1501              	 .text
 1502              	.Letext0:
 1503              	 .file 2 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1504              	 .file 3 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1505              	 .file 4 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1506              	 .file 5 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc4_flash.h"
 1507              	 .file 6 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc4_flash.c
    {standard input}:19     .text.XMC_FLASH_lEnterPageModeCommand:00000000 $t
    {standard input}:24     .text.XMC_FLASH_lEnterPageModeCommand:00000000 XMC_FLASH_lEnterPageModeCommand
    {standard input}:41     .text.XMC_FLASH_lEnterPageModeCommand:00000008 $d
    {standard input}:46     .text.XMC_FLASH_lLoadPageCommand:00000000 $t
    {standard input}:51     .text.XMC_FLASH_lLoadPageCommand:00000000 XMC_FLASH_lLoadPageCommand
    {standard input}:70     .text.XMC_FLASH_lLoadPageCommand:0000000c $d
    {standard input}:75     .text.XMC_FLASH_lWritePageCommand:00000000 $t
    {standard input}:80     .text.XMC_FLASH_lWritePageCommand:00000000 XMC_FLASH_lWritePageCommand
    {standard input}:118    .text.XMC_FLASH_lWritePageCommand:0000001c $d
    {standard input}:124    .text.XMC_FLASH_lWriteUCBPageCommand:00000000 $t
    {standard input}:129    .text.XMC_FLASH_lWriteUCBPageCommand:00000000 XMC_FLASH_lWriteUCBPageCommand
    {standard input}:167    .text.XMC_FLASH_lWriteUCBPageCommand:0000001c $d
    {standard input}:173    .text.XMC_FLASH_lEraseSectorCommand:00000000 $t
    {standard input}:178    .text.XMC_FLASH_lEraseSectorCommand:00000000 XMC_FLASH_lEraseSectorCommand
    {standard input}:224    .text.XMC_FLASH_lEraseSectorCommand:00000020 $d
    {standard input}:230    .text.XMC_FLASH_lDisableSectorWriteProtectionCommand:00000000 $t
    {standard input}:235    .text.XMC_FLASH_lDisableSectorWriteProtectionCommand:00000000 XMC_FLASH_lDisableSectorWriteProtectionCommand
    {standard input}:286    .text.XMC_FLASH_lDisableSectorWriteProtectionCommand:0000002c $d
    {standard input}:292    .text.XMC_FLASH_lDisableReadProtectionCommand:00000000 $t
    {standard input}:297    .text.XMC_FLASH_lDisableReadProtectionCommand:00000000 XMC_FLASH_lDisableReadProtectionCommand
    {standard input}:345    .text.XMC_FLASH_lDisableReadProtectionCommand:0000002c $d
    {standard input}:351    .text.XMC_FLASH_lClearStatusCommand:00000000 $t
    {standard input}:356    .text.XMC_FLASH_lClearStatusCommand:00000000 XMC_FLASH_lClearStatusCommand
    {standard input}:372    .text.XMC_FLASH_lClearStatusCommand:00000008 $d
    {standard input}:377    .text.XMC_FLASH_ClearStatus:00000000 $t
    {standard input}:382    .text.XMC_FLASH_ClearStatus:00000000 XMC_FLASH_ClearStatus
    {standard input}:400    .text.XMC_FLASH_ClearStatus:00000008 $d
    {standard input}:407    .text.XMC_FLASH_GetStatus:00000000 $t
    {standard input}:412    .text.XMC_FLASH_GetStatus:00000000 XMC_FLASH_GetStatus
    {standard input}:428    .text.XMC_FLASH_GetStatus:0000000c $d
    {standard input}:433    .text.XMC_FLASH_EnableEvent:00000000 $t
    {standard input}:438    .text.XMC_FLASH_EnableEvent:00000000 XMC_FLASH_EnableEvent
    {standard input}:457    .text.XMC_FLASH_EnableEvent:00000010 $d
    {standard input}:462    .text.XMC_FLASH_DisableEvent:00000000 $t
    {standard input}:467    .text.XMC_FLASH_DisableEvent:00000000 XMC_FLASH_DisableEvent
    {standard input}:486    .text.XMC_FLASH_DisableEvent:00000010 $d
    {standard input}:491    .text.XMC_FLASH_ProgramPage:00000000 $t
    {standard input}:496    .text.XMC_FLASH_ProgramPage:00000000 XMC_FLASH_ProgramPage
    {standard input}:574    .text.XMC_FLASH_ProgramPage:00000034 $d
    {standard input}:582    .text.XMC_FLASH_EraseSector:00000000 $t
    {standard input}:587    .text.XMC_FLASH_EraseSector:00000000 XMC_FLASH_EraseSector
    {standard input}:623    .text.XMC_FLASH_EraseSector:00000018 $d
    {standard input}:629    .text.XMC_FLASH_lErasePhysicalSectorCommand:00000000 $t
    {standard input}:634    .text.XMC_FLASH_lErasePhysicalSectorCommand:00000000 XMC_FLASH_lErasePhysicalSectorCommand
    {standard input}:680    .text.XMC_FLASH_lErasePhysicalSectorCommand:00000020 $d
    {standard input}:686    .text.XMC_FLASH_lRepairPhysicalSectorCommand:00000000 $t
    {standard input}:691    .text.XMC_FLASH_lRepairPhysicalSectorCommand:00000000 XMC_FLASH_lRepairPhysicalSectorCommand
    {standard input}:735    .text.XMC_FLASH_lRepairPhysicalSectorCommand:00000024 $d
    {standard input}:742    .text.XMC_FLASH_ErasePhysicalSector:00000000 $t
    {standard input}:747    .text.XMC_FLASH_ErasePhysicalSector:00000000 XMC_FLASH_ErasePhysicalSector
    {standard input}:783    .text.XMC_FLASH_ErasePhysicalSector:00000018 $d
    {standard input}:789    .text.XMC_FLASH_RepairPhysicalSector:00000000 $t
    {standard input}:794    .text.XMC_FLASH_RepairPhysicalSector:00000000 XMC_FLASH_RepairPhysicalSector
    {standard input}:821    .text.XMC_FLASH_RepairPhysicalSector:00000010 $d
    {standard input}:826    .text.XMC_FLASH_EraseUCB:00000000 $t
    {standard input}:831    .text.XMC_FLASH_EraseUCB:00000000 XMC_FLASH_EraseUCB
    {standard input}:884    .text.XMC_FLASH_EraseUCB:00000028 $d
    {standard input}:891    .text.XMC_FLASH_Reset:00000000 $t
    {standard input}:896    .text.XMC_FLASH_Reset:00000000 XMC_FLASH_Reset
    {standard input}:912    .text.XMC_FLASH_Reset:00000008 $d
    {standard input}:917    .text.XMC_FLASH_InstallBMI:00000000 $t
    {standard input}:922    .text.XMC_FLASH_InstallBMI:00000000 XMC_FLASH_InstallBMI
    {standard input}:1076   .text.XMC_FLASH_InstallBMI:00000068 $d
    {standard input}:1085   .text.XMC_FLASH_InstallProtection:00000000 $t
    {standard input}:1090   .text.XMC_FLASH_InstallProtection:00000000 XMC_FLASH_InstallProtection
    {standard input}:1200   .text.XMC_FLASH_InstallProtection:00000044 $d
    {standard input}:1208   .text.XMC_FLASH_ConfirmProtection:00000000 $t
    {standard input}:1213   .text.XMC_FLASH_ConfirmProtection:00000000 XMC_FLASH_ConfirmProtection
    {standard input}:1299   .text.XMC_FLASH_ConfirmProtection:00000040 $d
    {standard input}:1307   .text.XMC_FLASH_VerifyReadProtection:00000000 $t
    {standard input}:1312   .text.XMC_FLASH_VerifyReadProtection:00000000 XMC_FLASH_VerifyReadProtection
    {standard input}:1370   .text.XMC_FLASH_VerifyReadProtection:0000002c $d
    {standard input}:1376   .text.XMC_FLASH_VerifyWriteProtection:00000000 $t
    {standard input}:1381   .text.XMC_FLASH_VerifyWriteProtection:00000000 XMC_FLASH_VerifyWriteProtection
    {standard input}:1469   .text.XMC_FLASH_VerifyWriteProtection:0000005c $d
    {standard input}:1476   .text.XMC_FLASH_ResumeProtection:00000000 $t
    {standard input}:1481   .text.XMC_FLASH_ResumeProtection:00000000 XMC_FLASH_ResumeProtection
    {standard input}:1497   .text.XMC_FLASH_ResumeProtection:00000008 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4002528de975c0fcce6c551c15d87b8c
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.48aa5dfcc4adf36b323cf9dbe32c793a
                           .group:00000000 wm4.core_cm4.h.174.824e0532337e90525b645435b961cc25
                           .group:00000000 wm4.mpu_armv7.h.32.7da498ea6f18d3b74a42202d7c1d394e
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:00000000 wm4.xmc_common.h.92.bbcf261068c7c74d7033b80d0dbf155c
                           .group:00000000 wm4.xmc4_flash.h.68.0b871392128acbc46622970ae7165eb1

NO UNDEFINED SYMBOLS
