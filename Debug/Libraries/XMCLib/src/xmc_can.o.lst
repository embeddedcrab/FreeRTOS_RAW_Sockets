   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "xmc_can.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigureEx,"ax",%progbits
  19              	 .align 2
  20              	 .global XMC_CAN_NODE_NominalBitTimeConfigureEx
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CAN_NODE_NominalBitTimeConfigureEx:
  25              	.LFB224:
  26              	 .file 1 "../Libraries/XMCLib/src/xmc_can.c"
   1:../Libraries/XMCLib/src/xmc_can.c **** /**
   2:../Libraries/XMCLib/src/xmc_can.c ****  * @file xmc_can.c
   3:../Libraries/XMCLib/src/xmc_can.c ****  * @date 2017-11-09
   4:../Libraries/XMCLib/src/xmc_can.c ****  *
   5:../Libraries/XMCLib/src/xmc_can.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_can.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_can.c ****  *
   9:../Libraries/XMCLib/src/xmc_can.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_can.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_can.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_can.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_can.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_can.c ****  * 
  18:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_can.c ****  * 
  21:../Libraries/XMCLib/src/xmc_can.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_can.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_can.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_can.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_can.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_can.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_can.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_can.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_can.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_can.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_can.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_can.c ****  *
  36:../Libraries/XMCLib/src/xmc_can.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_can.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_can.c ****  *
  39:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_can.c ****  *     - Initial draft <br>
  41:../Libraries/XMCLib/src/xmc_can.c ****  *
  42:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  44:../Libraries/XMCLib/src/xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  45:../Libraries/XMCLib/src/xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  46:../Libraries/XMCLib/src/xmc_can.c ****  *
  47:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-06-20:
  48:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  49:../Libraries/XMCLib/src/xmc_can.c ****  *
  50:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-01:
  51:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed  fCANB clock support <br>
  52:../Libraries/XMCLib/src/xmc_can.c ****  *
  53:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-08:
  54:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  55:../Libraries/XMCLib/src/xmc_can.c ****  *
  56:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-07:
  57:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed XMC_CAN_AllocateMOtoNodeList to wait for ready status of list controller
  58:../Libraries/XMCLib/src/xmc_can.c ****  *
  59:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-20:
  60:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_MO_Config() <br> 
  61:../Libraries/XMCLib/src/xmc_can.c ****  *
  62:../Libraries/XMCLib/src/xmc_can.c ****  * 2017-11-09:
  63:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  64:../Libraries/XMCLib/src/xmc_can.c ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  65:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed refactoring XMC_CAN_MO_Config() to configure MOCTR depending on transmit or receiv
  66:../Libraries/XMCLib/src/xmc_can.c ****  *
  67:../Libraries/XMCLib/src/xmc_can.c ****  * @endcond
  68:../Libraries/XMCLib/src/xmc_can.c ****  *
  69:../Libraries/XMCLib/src/xmc_can.c ****  */ 
  70:../Libraries/XMCLib/src/xmc_can.c **** 
  71:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  72:../Libraries/XMCLib/src/xmc_can.c ****  * HEADER FILES
  73:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  74:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_can.h"
  75:../Libraries/XMCLib/src/xmc_can.c **** 
  76:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CAN)
  77:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_scu.h"
  78:../Libraries/XMCLib/src/xmc_can.c **** 
  79:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
  80:../Libraries/XMCLib/src/xmc_can.c **** {
  81:../Libraries/XMCLib/src/xmc_can.c ****   return (a > b) ? a : b;
  82:../Libraries/XMCLib/src/xmc_can.c **** }
  83:../Libraries/XMCLib/src/xmc_can.c **** 
  84:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
  85:../Libraries/XMCLib/src/xmc_can.c **** {
  86:../Libraries/XMCLib/src/xmc_can.c ****   return (a < b) ? a : b;
  87:../Libraries/XMCLib/src/xmc_can.c **** }
  88:../Libraries/XMCLib/src/xmc_can.c **** 
  89:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  90:../Libraries/XMCLib/src/xmc_can.c ****  * API IMPLEMENTATION
  91:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  92:../Libraries/XMCLib/src/xmc_can.c **** 
  93:../Libraries/XMCLib/src/xmc_can.c **** /* The max prescaler is the equal to max BRP setting (64) multiply by 8 (DIV8) */
  94:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_PRESCALER 512
  95:../Libraries/XMCLib/src/xmc_can.c **** 
  96:../Libraries/XMCLib/src/xmc_can.c **** /* maximum TSEG1 is 16 and maximum TSEG2 is 8, plus one fix sync tq */
  97:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_NTQ 25
  98:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_NTQ 8
  99:../Libraries/XMCLib/src/xmc_can.c **** 
 100:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG1 3
 101:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG2 2
 102:../Libraries/XMCLib/src/xmc_can.c **** 
 103:../Libraries/XMCLib/src/xmc_can.c **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 104:../Libraries/XMCLib/src/xmc_can.c ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 105:../Libraries/XMCLib/src/xmc_can.c **** {
  27              	 .loc 1 105 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 F0B4     	 push {r4,r5,r6,r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 16
  36              	 .cfi_offset 4,-16
  37              	 .cfi_offset 5,-12
  38              	 .cfi_offset 6,-8
  39              	 .cfi_offset 7,-4
 106:../Libraries/XMCLib/src/xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
 107:../Libraries/XMCLib/src/xmc_can.c ****   if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
  40              	 .loc 1 107 0
  41 0002 0B68     	 ldr r3,[r1]
  42 0004 4C68     	 ldr r4,[r1,#4]
  43 0006 B3FBF4F2 	 udiv r2,r3,r4
  44 000a 04FB1232 	 mls r2,r4,r2,r3
  45 000e 002A     	 cmp r2,#0
  46 0010 4CD1     	 bne .L6
  47              	.LVL1:
  48              	.LBB28:
 108:../Libraries/XMCLib/src/xmc_can.c ****   {
 109:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t prescaler;
 110:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t div8 = 0;
 111:../Libraries/XMCLib/src/xmc_can.c **** 
 112:../Libraries/XMCLib/src/xmc_can.c ****   /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler 
 113:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
  49              	 .loc 1 113 0
  50 0012 B3FBF4F4 	 udiv r4,r3,r4
  51              	.LVL2:
 114:../Libraries/XMCLib/src/xmc_can.c **** 
 115:../Libraries/XMCLib/src/xmc_can.c ****     /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bi
 116:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
  52              	 .loc 1 116 0
  53 0016 1923     	 movs r3,#25
  54              	.LVL3:
  55              	.L5:
 117:../Libraries/XMCLib/src/xmc_can.c ****     while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 118:../Libraries/XMCLib/src/xmc_can.c ****     {
 119:../Libraries/XMCLib/src/xmc_can.c ****       /* consider this ntq, only if fcan_div is multiple of ntq */
 120:../Libraries/XMCLib/src/xmc_can.c ****     if ((fcan_div % ntq) == 0)
  56              	 .loc 1 120 0
  57 0018 B4FBF3F2 	 udiv r2,r4,r3
  58 001c 03FB1242 	 mls r2,r3,r2,r4
  59 0020 52B9     	 cbnz r2,.L3
 121:../Libraries/XMCLib/src/xmc_can.c ****     {
 122:../Libraries/XMCLib/src/xmc_can.c ****         prescaler = fcan_div / ntq;
  60              	 .loc 1 122 0
  61 0022 B4FBF3F2 	 udiv r2,r4,r3
  62              	.LVL4:
 123:../Libraries/XMCLib/src/xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
  63              	 .loc 1 123 0
  64 0026 551E     	 subs r5,r2,#1
  65 0028 B5F5007F 	 cmp r5,#512
  66 002c 04D2     	 bcs .L3
 124:../Libraries/XMCLib/src/xmc_can.c ****         {
 125:../Libraries/XMCLib/src/xmc_can.c ****           if (prescaler >= 64)
  67              	 .loc 1 125 0
  68 002e 3F2A     	 cmp r2,#63
  69 0030 07D9     	 bls .L7
 126:../Libraries/XMCLib/src/xmc_can.c ****           {
 127:../Libraries/XMCLib/src/xmc_can.c ****           /* consider prescaler >=64, if it is integer divisible by 8*/
 128:../Libraries/XMCLib/src/xmc_can.c ****             if ((prescaler & 0x7U) == 0)
  70              	 .loc 1 128 0
  71 0032 12F0070F 	 tst r2,#7
  72 0036 06D0     	 beq .L8
  73              	.LVL5:
  74              	.L3:
 129:../Libraries/XMCLib/src/xmc_can.c ****         {
 130:../Libraries/XMCLib/src/xmc_can.c ****               div8 = 1;
 131:../Libraries/XMCLib/src/xmc_can.c ****               break;
 132:../Libraries/XMCLib/src/xmc_can.c ****         }
 133:../Libraries/XMCLib/src/xmc_can.c ****           }
 134:../Libraries/XMCLib/src/xmc_can.c ****           else
 135:../Libraries/XMCLib/src/xmc_can.c ****           {
 136:../Libraries/XMCLib/src/xmc_can.c ****             break;
 137:../Libraries/XMCLib/src/xmc_can.c ****           }
 138:../Libraries/XMCLib/src/xmc_can.c ****         }
 139:../Libraries/XMCLib/src/xmc_can.c ****       }
 140:../Libraries/XMCLib/src/xmc_can.c ****       --ntq;
  75              	 .loc 1 140 0
  76 0038 013B     	 subs r3,r3,#1
  77              	.LVL6:
 117:../Libraries/XMCLib/src/xmc_can.c ****     {
  78              	 .loc 1 117 0
  79 003a 072B     	 cmp r3,#7
  80 003c ECD1     	 bne .L5
  81              	.LBE28:
 141:../Libraries/XMCLib/src/xmc_can.c ****     }
 142:../Libraries/XMCLib/src/xmc_can.c **** 
 143:../Libraries/XMCLib/src/xmc_can.c ****     if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 144:../Libraries/XMCLib/src/xmc_can.c ****     {
 145:../Libraries/XMCLib/src/xmc_can.c ****       uint32_t tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 1000;
 146:../Libraries/XMCLib/src/xmc_can.c ****       uint32_t tseg2 = ntq - tseg1 - 1;
 147:../Libraries/XMCLib/src/xmc_can.c **** 
 148:../Libraries/XMCLib/src/xmc_can.c ****       if ((tseg1 < XMC_CAN_NODE_MIN_TSEG1) || (tseg2 < XMC_CAN_NODE_MIN_TSEG2) || (tseg2 < bit_time
 149:../Libraries/XMCLib/src/xmc_can.c ****       {
 150:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_ERROR;
 151:../Libraries/XMCLib/src/xmc_can.c ****       }
 152:../Libraries/XMCLib/src/xmc_can.c **** 
 153:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_EnableConfigurationChange(can_node);
 154:../Libraries/XMCLib/src/xmc_can.c **** 
 155:../Libraries/XMCLib/src/xmc_can.c ****       /* Configure bit timing register */
 156:../Libraries/XMCLib/src/xmc_can.c ****       can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_M
 157:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 158:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 159:../Libraries/XMCLib/src/xmc_can.c ****                         (((prescaler - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_
 160:../Libraries/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 161:../Libraries/XMCLib/src/xmc_can.c **** 
 162:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_DisableConfigurationChange(can_node);
 163:../Libraries/XMCLib/src/xmc_can.c **** 
 164:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_SUCCESS;
 165:../Libraries/XMCLib/src/xmc_can.c ****     }
 166:../Libraries/XMCLib/src/xmc_can.c ****   }
 167:../Libraries/XMCLib/src/xmc_can.c **** 
 168:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_STATUS_ERROR;
  82              	 .loc 1 168 0
  83 003e 0120     	 movs r0,#1
  84              	.LVL7:
  85 0040 3DE0     	 b .L2
  86              	.LVL8:
  87              	.L7:
  88              	.LBB35:
 110:../Libraries/XMCLib/src/xmc_can.c **** 
  89              	 .loc 1 110 0
  90 0042 0026     	 movs r6,#0
  91 0044 00E0     	 b .L4
  92              	.L8:
 130:../Libraries/XMCLib/src/xmc_can.c ****               break;
  93              	 .loc 1 130 0
  94 0046 0126     	 movs r6,#1
  95              	.L4:
  96              	.LVL9:
 143:../Libraries/XMCLib/src/xmc_can.c ****     {
  97              	 .loc 1 143 0
  98 0048 072B     	 cmp r3,#7
  99 004a 31D9     	 bls .L9
 100              	.LBB29:
 145:../Libraries/XMCLib/src/xmc_can.c ****       uint32_t tseg2 = ntq - tseg1 - 1;
 101              	 .loc 1 145 0
 102 004c 5C1E     	 subs r4,r3,#1
 103              	.LVL10:
 104 004e 0D89     	 ldrh r5,[r1,#8]
 105 0050 05FB04F4 	 mul r4,r5,r4
 106 0054 1B4D     	 ldr r5,.L15
 107 0056 A5FB0454 	 umull r5,r4,r5,r4
 108 005a A409     	 lsrs r4,r4,#6
 109              	.LVL11:
 148:../Libraries/XMCLib/src/xmc_can.c ****       {
 110              	 .loc 1 148 0
 111 005c 022C     	 cmp r4,#2
 112 005e 29D9     	 bls .L10
 146:../Libraries/XMCLib/src/xmc_can.c **** 
 113              	 .loc 1 146 0 discriminator 1
 114 0060 1B1B     	 subs r3,r3,r4
 115              	.LVL12:
 116 0062 5D1E     	 subs r5,r3,#1
 148:../Libraries/XMCLib/src/xmc_can.c ****       {
 117              	 .loc 1 148 0 discriminator 1
 118 0064 012D     	 cmp r5,#1
 119 0066 27D9     	 bls .L11
 148:../Libraries/XMCLib/src/xmc_can.c ****       {
 120              	 .loc 1 148 0 is_stmt 0 discriminator 2
 121 0068 4F89     	 ldrh r7,[r1,#10]
 122 006a BD42     	 cmp r5,r7
 123 006c 26D3     	 bcc .L12
 124              	.LVL13:
 125              	.LBB30:
 126              	.LBB31:
 127              	 .file 2 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc_can.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2017-11-09
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *                                             
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *      
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between 
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {  
 453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #else
 457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #else
 461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   #pragma push
 520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   union{
 534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     };
 540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   };
 543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   union{
 557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     };
 562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   };
 564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   union{
 565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     };
 569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   };
 571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   union{
 574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       };
 581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   #pragma pop
 588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 616:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 617:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 618:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 619:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 620:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 621:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 622:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 623:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 624:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 625:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 626:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 627:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 628:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 629:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 630:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 631:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 632:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 633:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 634:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 635:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 636:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 637:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 638:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 639:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 640:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 641:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 642:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 643:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 644:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 645:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 646:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 647:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 648:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 649:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 650:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 651:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 652:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 653:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 654:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 655:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 656:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 657:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 658:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 659:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 660:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 661:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 662:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 663:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 664:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 665:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 666:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 667:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 668:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 669:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 670:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 671:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 672:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 673:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 674:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 675:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 676:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 677:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 678:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 679:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 680:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 681:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 682:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 683:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 685:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 686:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 687:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 688:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 689:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 690:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 691:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 692:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 693:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 694:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 695:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 696:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 697:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 698:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 699:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 700:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 701:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 704:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 705:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 706:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 707:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 708:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 709:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 710:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 711:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 712:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 713:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 714:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 715:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 716:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 717:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 718:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 719:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 720:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 721:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 722:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 723:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 724:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 725:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 726:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 727:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 728:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 729:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 730:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 731:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 732:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 733:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 734:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 735:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 736:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 737:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 738:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 739:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 740:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 741:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 742:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 743:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 744:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 745:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 746:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 747:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 748:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 749:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 750:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 751:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 752:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 753:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 754:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 755:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 756:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 757:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 758:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 759:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 760:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 761:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 762:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 763:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 764:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 765:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 766:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 767:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 768:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 769:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 770:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 771:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 772:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 773:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 774:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 775:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 776:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 777:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 778:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 779:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 780:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 781:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
 782:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 783:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 784:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 785:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 786:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 787:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 788:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 789:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 790:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 791:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 792:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 793:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 794:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 795:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 796:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 797:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 798:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 799:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 800:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 801:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 802:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 803:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 804:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 805:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 806:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 807:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 808:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 809:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 810:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 811:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 812:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 813:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 814:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 815:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 816:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 817:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 818:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 819:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 820:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 821:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 822:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 823:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 824:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 825:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 826:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 827:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 828:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #else
 829:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 830:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 831:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 832:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 833:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 834:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 835:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 836:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 837:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 838:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 839:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 840:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 841:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 842:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
 844:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 846:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 847:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 848:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 849:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 850:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 851:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 852:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 853:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 854:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 855:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 856:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 857:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 858:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 859:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 860:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 861:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
 863:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 864:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 865:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 866:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 867:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 868:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 869:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 870:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 871:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 872:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 873:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 874:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 875:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 876:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 877:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 878:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 879:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 880:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 881:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 882:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 883:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 884:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 885:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 886:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
 887:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 888:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 889:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 890:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 891:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 892:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 893:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 894:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 895:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 896:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 897:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 898:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 899:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 900:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 901:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 902:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 903:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 905:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 906:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 907:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 908:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 909:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 910:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 911:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 912:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 913:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 914:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 915:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 916:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 917:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 918:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 919:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 920:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 921:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 922:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 923:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 924:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 925:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 926:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 927:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
 928:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 929:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 930:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 931:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 932:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 933:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 934:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 935:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 936:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 937:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 938:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 939:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 940:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 941:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 942:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 943:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 944:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 945:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 946:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 947:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 948:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 949:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 950:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 951:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 952:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 953:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 954:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 955:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 956:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 957:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 958:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 959:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 960:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 961:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 962:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 963:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 964:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 965:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 966:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 967:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 968:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 969:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 970:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 971:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 972:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 973:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 974:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 975:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 976:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 977:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 978:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 979:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 980:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 981:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 982:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 983:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 984:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 985:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 986:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 987:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 988:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 989:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 990:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 991:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 992:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 993:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 994:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 995:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 996:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 997:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
 998:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 999:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1000:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1001:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1002:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1003:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1004:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1005:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1006:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1007:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1008:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1009:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1010:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1011:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1012:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1013:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1018:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1019:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1020:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1022:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1023:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1025:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1026:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1027:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1028:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1030:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1031:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1032:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1034:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1035:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1036:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1037:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1038:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1039:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1040:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1041:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1042:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1043:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1044:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1045:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1046:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1047:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1048:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1049:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1050:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1051:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1052:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1053:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1054:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1055:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1056:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1057:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1058:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1059:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1060:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1061:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1062:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1063:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1064:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1065:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1066:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1067:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1068:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1069:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1070:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1071:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1072:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1073:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1074:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1075:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1076:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1077:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1078:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1079:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1080:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1081:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1082:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1083:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1084:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1085:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1086:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1087:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1088:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1089:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1090:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1091:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1092:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1093:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1094:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1095:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1096:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1097:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1098:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1099:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 128              	 .loc 2 1274 0 is_stmt 1
 129 006e 0568     	 ldr r5,[r0]
 130 0070 45F04005 	 orr r5,r5,#64
 131 0074 0560     	 str r5,[r0]
 132              	.LVL14:
 133              	.LBE31:
 134              	.LBE30:
 159:../Libraries/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 135              	 .loc 1 159 0
 136 0076 013A     	 subs r2,r2,#1
 137              	.LVL15:
 138 0078 02F03F02 	 and r2,r2,#63
 139              	.LVL16:
 140 007c 42EAC632 	 orr r2,r2,r6,lsl#15
 157:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 141              	 .loc 1 157 0
 142 0080 4989     	 ldrh r1,[r1,#10]
 143              	.LVL17:
 144 0082 0139     	 subs r1,r1,#1
 145 0084 8901     	 lsls r1,r1,#6
 146 0086 C9B2     	 uxtb r1,r1
 147 0088 0A43     	 orrs r2,r2,r1
 158:../Libraries/XMCLib/src/xmc_can.c ****                         (((prescaler - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_
 148              	 .loc 1 158 0
 149 008a 611E     	 subs r1,r4,#1
 150 008c 0902     	 lsls r1,r1,#8
 151 008e 01F47061 	 and r1,r1,#3840
 152 0092 0A43     	 orrs r2,r2,r1
 156:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 153              	 .loc 1 156 0
 154 0094 023B     	 subs r3,r3,#2
 155              	.LVL18:
 156 0096 1B03     	 lsls r3,r3,#12
 157              	.LVL19:
 158 0098 03F4E043 	 and r3,r3,#28672
 159:../Libraries/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 159              	 .loc 1 159 0
 160 009c 1A43     	 orrs r2,r2,r3
 156:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 161              	 .loc 1 156 0
 162 009e 0261     	 str r2,[r0,#16]
 163              	.LVL20:
 164              	.LBB32:
 165              	.LBB33:
1275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 166              	 .loc 2 1294 0
 167 00a0 0368     	 ldr r3,[r0]
 168 00a2 23F04003 	 bic r3,r3,#64
 169 00a6 0360     	 str r3,[r0]
 170              	.LBE33:
 171              	.LBE32:
 164:../Libraries/XMCLib/src/xmc_can.c ****     }
 172              	 .loc 1 164 0
 173 00a8 0020     	 movs r0,#0
 174              	.LVL21:
 175 00aa 08E0     	 b .L2
 176              	.LVL22:
 177              	.L6:
 178              	.LBE29:
 179              	.LBE35:
 180              	 .loc 1 168 0
 181 00ac 0120     	 movs r0,#1
 182              	.LVL23:
 183 00ae 06E0     	 b .L2
 184              	.LVL24:
 185              	.L9:
 186 00b0 0120     	 movs r0,#1
 187              	.LVL25:
 188 00b2 04E0     	 b .L2
 189              	.LVL26:
 190              	.L10:
 191              	.LBB36:
 192              	.LBB34:
 150:../Libraries/XMCLib/src/xmc_can.c ****       }
 193              	 .loc 1 150 0
 194 00b4 0120     	 movs r0,#1
 195              	.LVL27:
 196 00b6 02E0     	 b .L2
 197              	.LVL28:
 198              	.L11:
 199 00b8 0120     	 movs r0,#1
 200              	.LVL29:
 201 00ba 00E0     	 b .L2
 202              	.LVL30:
 203              	.L12:
 204 00bc 0120     	 movs r0,#1
 205              	.LVL31:
 206              	.L2:
 207              	.LBE34:
 208              	.LBE36:
 169:../Libraries/XMCLib/src/xmc_can.c **** }
 209              	 .loc 1 169 0
 210 00be F0BC     	 pop {r4,r5,r6,r7}
 211              	.LCFI1:
 212              	 .cfi_restore 7
 213              	 .cfi_restore 6
 214              	 .cfi_restore 5
 215              	 .cfi_restore 4
 216              	 .cfi_def_cfa_offset 0
 217 00c0 7047     	 bx lr
 218              	.L16:
 219 00c2 00BF     	 .align 2
 220              	.L15:
 221 00c4 D34D6210 	 .word 274877907
 222              	 .cfi_endproc
 223              	.LFE224:
 225              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 226              	 .align 2
 227              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 228              	 .thumb
 229              	 .thumb_func
 231              	XMC_CAN_NODE_NominalBitTimeConfigure:
 232              	.LFB225:
 170:../Libraries/XMCLib/src/xmc_can.c **** 
 171:../Libraries/XMCLib/src/xmc_can.c **** /* Baudrate Configuration */
 172:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 173:../Libraries/XMCLib/src/xmc_can.c ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
 174:../Libraries/XMCLib/src/xmc_can.c **** {
 233              	 .loc 1 174 0
 234              	 .cfi_startproc
 235              	 
 236              	 
 237              	.LVL32:
 238 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
 239              	.LCFI2:
 240              	 .cfi_def_cfa_offset 36
 241              	 .cfi_offset 4,-36
 242              	 .cfi_offset 5,-32
 243              	 .cfi_offset 6,-28
 244              	 .cfi_offset 7,-24
 245              	 .cfi_offset 8,-20
 246              	 .cfi_offset 9,-16
 247              	 .cfi_offset 10,-12
 248              	 .cfi_offset 11,-8
 249              	 .cfi_offset 14,-4
 250              	.LVL33:
 251              	.LBB37:
 175:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 176:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 177:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_brp = 0U;
 178:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 179:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 180:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tbaud = 0U;
 181:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 182:../Libraries/XMCLib/src/xmc_can.c **** 
 183:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
 184:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
 185:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 186:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
 187:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 188:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 189:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 190:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 191:../Libraries/XMCLib/src/xmc_can.c ****        
 192:../Libraries/XMCLib/src/xmc_can.c ****   /*
 193:../Libraries/XMCLib/src/xmc_can.c ****    * Bit timing & sampling
 194:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 195:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 196:../Libraries/XMCLib/src/xmc_can.c ****    * TSync = 1.Tq
 197:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 198:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 199:../Libraries/XMCLib/src/xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 200:../Libraries/XMCLib/src/xmc_can.c ****    *
 201:../Libraries/XMCLib/src/xmc_can.c ****    * Resynchronization:
 202:../Libraries/XMCLib/src/xmc_can.c ****    *
 203:../Libraries/XMCLib/src/xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 204:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 205:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 >= Tsjw
 206:../Libraries/XMCLib/src/xmc_can.c ****    */
 207:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best baudrate */
 208:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 209:../Libraries/XMCLib/src/xmc_can.c ****   {
 210:../Libraries/XMCLib/src/xmc_can.c **** 
 211:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 252              	 .loc 1 211 0
 253 0004 0B68     	 ldr r3,[r1]
 254 0006 03EB8303 	 add r3,r3,r3,lsl#2
 255 000a 4FEA430E 	 lsl lr,r3,#1
 212:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 256              	 .loc 1 212 0
 257 000e 4E68     	 ldr r6,[r1,#4]
 258              	.LBE37:
 181:../Libraries/XMCLib/src/xmc_can.c **** 
 259              	 .loc 1 181 0
 260 0010 42F21078 	 movw r8,#10000
 180:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 261              	 .loc 1 180 0
 262 0014 4FF0000C 	 mov ip,#0
 177:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 263              	 .loc 1 177 0
 264 0018 E246     	 mov r10,ip
 208:../Libraries/XMCLib/src/xmc_can.c ****   {
 265              	 .loc 1 208 0
 266 001a 0125     	 movs r5,#1
 267              	.LBB38:
 213:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 214:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 215:../Libraries/XMCLib/src/xmc_can.c **** 
 216:../Libraries/XMCLib/src/xmc_can.c ****   if((temp_tbaud % 10U) > 5U)
 268              	 .loc 1 216 0
 269 001c 384F     	 ldr r7,.L36
 217:../Libraries/XMCLib/src/xmc_can.c ****   {
 218:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 219:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud++;
 220:../Libraries/XMCLib/src/xmc_can.c ****   }
 221:../Libraries/XMCLib/src/xmc_can.c ****   else
 222:../Libraries/XMCLib/src/xmc_can.c ****   {
 223:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 224:../Libraries/XMCLib/src/xmc_can.c ****   }
 225:../Libraries/XMCLib/src/xmc_can.c **** 
 226:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_tbaud > 0U)
 227:../Libraries/XMCLib/src/xmc_can.c ****   {
 228:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 229:../Libraries/XMCLib/src/xmc_can.c ****   }
 230:../Libraries/XMCLib/src/xmc_can.c ****   else
 231:../Libraries/XMCLib/src/xmc_can.c ****   {
 232:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = f_quanta / 10U;
 233:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = 1;
 270              	 .loc 1 233 0
 271 001e A946     	 mov r9,r5
 272              	.LVL34:
 273              	.L26:
 211:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 274              	 .loc 1 211 0
 275 0020 BEFBF5F4 	 udiv r4,lr,r5
 276              	.LVL35:
 212:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 277              	 .loc 1 212 0
 278 0024 B4FBF6F3 	 udiv r3,r4,r6
 279              	.LVL36:
 216:../Libraries/XMCLib/src/xmc_can.c ****   {
 280              	 .loc 1 216 0
 281 0028 A7FB03B2 	 umull fp,r2,r7,r3
 282 002c D208     	 lsrs r2,r2,#3
 283 002e 02EB8202 	 add r2,r2,r2,lsl#2
 284 0032 A3EB4202 	 sub r2,r3,r2,lsl#1
 285 0036 052A     	 cmp r2,#5
 286              	.LVL37:
 218:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud++;
 287              	 .loc 1 218 0
 288 0038 A7FB0323 	 umull r2,r3,r7,r3
 289              	.LVL38:
 290 003c 4FEAD303 	 lsr r3,r3,#3
 219:../Libraries/XMCLib/src/xmc_can.c ****   }
 291              	 .loc 1 219 0
 292 0040 88BF     	 it hi
 293 0042 0133     	 addhi r3,r3,#1
 294              	.LVL39:
 226:../Libraries/XMCLib/src/xmc_can.c ****   {
 295              	 .loc 1 226 0
 296 0044 2BB1     	 cbz r3,.L20
 228:../Libraries/XMCLib/src/xmc_can.c ****   }
 297              	 .loc 1 228 0
 298 0046 03EB8302 	 add r2,r3,r3,lsl#2
 299 004a 5200     	 lsls r2,r2,#1
 300 004c B4FBF2F4 	 udiv r4,r4,r2
 301              	.LVL40:
 302 0050 03E0     	 b .L21
 303              	.LVL41:
 304              	.L20:
 232:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = 1;
 305              	 .loc 1 232 0
 306 0052 A7FB0434 	 umull r3,r4,r7,r4
 307              	.LVL42:
 308 0056 E408     	 lsrs r4,r4,#3
 309              	.LVL43:
 310              	 .loc 1 233 0
 311 0058 4B46     	 mov r3,r9
 312              	.LVL44:
 313              	.L21:
 234:../Libraries/XMCLib/src/xmc_can.c ****   }
 235:../Libraries/XMCLib/src/xmc_can.c **** 
 236:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_baudrate >= can_bit_time->baudrate)
 314              	 .loc 1 236 0
 315 005a B442     	 cmp r4,r6
 237:../Libraries/XMCLib/src/xmc_can.c ****   {
 238:../Libraries/XMCLib/src/xmc_can.c ****   error = temp_baudrate - can_bit_time->baudrate;
 316              	 .loc 1 238 0
 317 005c 2CBF     	 ite cs
 318 005e A41B     	 subcs r4,r4,r6
 319              	.LVL45:
 239:../Libraries/XMCLib/src/xmc_can.c ****   }
 240:../Libraries/XMCLib/src/xmc_can.c ****   else
 241:../Libraries/XMCLib/src/xmc_can.c ****   {
 242:../Libraries/XMCLib/src/xmc_can.c ****   error = can_bit_time->baudrate - temp_baudrate;
 320              	 .loc 1 242 0
 321 0060 341B     	 subcc r4,r6,r4
 322              	.LVL46:
 243:../Libraries/XMCLib/src/xmc_can.c ****   }
 244:../Libraries/XMCLib/src/xmc_can.c **** 
 245:../Libraries/XMCLib/src/xmc_can.c ****   if ((temp_tbaud <= 20U) && (best_error > error))
 323              	 .loc 1 245 0
 324 0062 142B     	 cmp r3,#20
 325 0064 07D8     	 bhi .L24
 326              	 .loc 1 245 0 is_stmt 0 discriminator 1
 327 0066 4445     	 cmp r4,r8
 328 0068 05D2     	 bcs .L24
 329              	.LVL47:
 246:../Libraries/XMCLib/src/xmc_can.c ****   {
 247:../Libraries/XMCLib/src/xmc_can.c ****     best_brp = temp_brp;
 248:../Libraries/XMCLib/src/xmc_can.c ****     best_tbaud = temp_tbaud;
 249:../Libraries/XMCLib/src/xmc_can.c ****     best_error = (error);
 250:../Libraries/XMCLib/src/xmc_can.c **** 
 251:../Libraries/XMCLib/src/xmc_can.c ****     if (error < 1000U)
 330              	 .loc 1 251 0 is_stmt 1
 331 006a B4F57A7F 	 cmp r4,#1000
 332 006e 06D3     	 bcc .L32
 249:../Libraries/XMCLib/src/xmc_can.c **** 
 333              	 .loc 1 249 0
 334 0070 A046     	 mov r8,r4
 335 0072 9C46     	 mov ip,r3
 336 0074 AA46     	 mov r10,r5
 337              	.LVL48:
 338              	.L24:
 339              	.LBE38:
 208:../Libraries/XMCLib/src/xmc_can.c ****   {
 340              	 .loc 1 208 0 discriminator 2
 341 0076 0135     	 adds r5,r5,#1
 342              	.LVL49:
 343 0078 412D     	 cmp r5,#65
 344 007a D1D1     	 bne .L26
 345 007c 01E0     	 b .L25
 346              	.LVL50:
 347              	.L32:
 348 007e 9C46     	 mov ip,r3
 349 0080 AA46     	 mov r10,r5
 350              	.LVL51:
 351              	.L25:
 352              	.LBB39:
 252:../Libraries/XMCLib/src/xmc_can.c ****     {
 253:../Libraries/XMCLib/src/xmc_can.c ****       break;
 254:../Libraries/XMCLib/src/xmc_can.c ****     }
 255:../Libraries/XMCLib/src/xmc_can.c ****    }
 256:../Libraries/XMCLib/src/xmc_can.c ****   }
 257:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best sample point */
 258:../Libraries/XMCLib/src/xmc_can.c ****   best_error = 10000U;
 259:../Libraries/XMCLib/src/xmc_can.c **** 
 260:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 261:../Libraries/XMCLib/src/xmc_can.c ****   {
 262:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 263:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t error;
 264:../Libraries/XMCLib/src/xmc_can.c ****   if (tempSamplePoint >= can_bit_time->sample_point)
 353              	 .loc 1 264 0
 354 0082 0D89     	 ldrh r5,[r1,#8]
 355              	.LVL52:
 356 0084 1F4B     	 ldr r3,.L36+4
 357              	.LVL53:
 358              	.LBE39:
 258:../Libraries/XMCLib/src/xmc_can.c **** 
 359              	 .loc 1 258 0
 360 0086 42F21076 	 movw r6,#10000
 178:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 361              	 .loc 1 178 0
 362 008a 0127     	 movs r7,#1
 260:../Libraries/XMCLib/src/xmc_can.c ****   {
 363              	 .loc 1 260 0
 364 008c 4022     	 movs r2,#64
 365              	.LVL54:
 366              	.L31:
 367              	.LBB40:
 262:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t error;
 368              	 .loc 1 262 0
 369 008e B3FBFCF4 	 udiv r4,r3,ip
 370              	.LVL55:
 371              	 .loc 1 264 0
 372 0092 AC42     	 cmp r4,r5
 373 0094 03D3     	 bcc .L27
 265:../Libraries/XMCLib/src/xmc_can.c ****   {
 266:../Libraries/XMCLib/src/xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 374              	 .loc 1 266 0
 375 0096 641B     	 subs r4,r4,r5
 376              	.LVL56:
 267:../Libraries/XMCLib/src/xmc_can.c ****   }
 268:../Libraries/XMCLib/src/xmc_can.c ****   else
 269:../Libraries/XMCLib/src/xmc_can.c ****   {
 270:../Libraries/XMCLib/src/xmc_can.c ****     error = can_bit_time->sample_point  - tempSamplePoint;
 271:../Libraries/XMCLib/src/xmc_can.c ****   }
 272:../Libraries/XMCLib/src/xmc_can.c ****     if (best_error > error)
 377              	 .loc 1 272 0
 378 0098 B442     	 cmp r4,r6
 379 009a 05D3     	 bcc .L28
 380 009c 06E0     	 b .L29
 381              	.LVL57:
 382              	.L27:
 270:../Libraries/XMCLib/src/xmc_can.c ****   }
 383              	 .loc 1 270 0
 384 009e 2C1B     	 subs r4,r5,r4
 385              	.LVL58:
 386              	 .loc 1 272 0
 387 00a0 B442     	 cmp r4,r6
 388 00a2 28BF     	 it cs
 389 00a4 3A46     	 movcs r2,r7
 390              	.LVL59:
 391 00a6 08E0     	 b .L30
 392              	.LVL60:
 393              	.L28:
 266:../Libraries/XMCLib/src/xmc_can.c ****   }
 394              	 .loc 1 266 0
 395 00a8 2646     	 mov r6,r4
 396              	.LVL61:
 397              	 .loc 1 272 0
 398 00aa 1746     	 mov r7,r2
 399              	.L29:
 400              	.LVL62:
 401              	.LBE40:
 260:../Libraries/XMCLib/src/xmc_can.c ****   {
 402              	 .loc 1 260 0 discriminator 2
 403 00ac 013A     	 subs r2,r2,#1
 404              	.LVL63:
 405 00ae A3F51C53 	 sub r3,r3,#9984
 406              	.LVL64:
 407 00b2 103B     	 subs r3,r3,#16
 408              	.LVL65:
 409 00b4 022A     	 cmp r2,#2
 410 00b6 EAD1     	 bne .L31
 411 00b8 3A46     	 mov r2,r7
 412              	.LVL66:
 413              	.L30:
 414              	.LBB41:
 415              	.LBB42:
1274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 416              	 .loc 2 1274 0
 417 00ba 0368     	 ldr r3,[r0]
 418 00bc 43F04003 	 orr r3,r3,#64
 419 00c0 0360     	 str r3,[r0]
 420              	.LBE42:
 421              	.LBE41:
 273:../Libraries/XMCLib/src/xmc_can.c ****     {
 274:../Libraries/XMCLib/src/xmc_can.c ****       best_tseg1 = temp_tseg1;
 275:../Libraries/XMCLib/src/xmc_can.c ****       best_error = error;
 276:../Libraries/XMCLib/src/xmc_can.c ****     }
 277:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 278:../Libraries/XMCLib/src/xmc_can.c ****     {
 279:../Libraries/XMCLib/src/xmc_can.c ****       break;
 280:../Libraries/XMCLib/src/xmc_can.c ****     }
 281:../Libraries/XMCLib/src/xmc_can.c ****   }
 282:../Libraries/XMCLib/src/xmc_can.c **** 
 283:../Libraries/XMCLib/src/xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 284:../Libraries/XMCLib/src/xmc_can.c **** 
 285:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 286:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure bit timing register */
 287:../Libraries/XMCLib/src/xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 288:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 289:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 290:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 422              	 .loc 1 290 0
 423 00c2 0AF1FF3A 	 add r10,r10,#-1
 424              	.LVL67:
 425 00c6 0AF03F0A 	 and r10,r10,#63
 426              	.LVL68:
 288:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 427              	 .loc 1 288 0
 428 00ca 4B89     	 ldrh r3,[r1,#10]
 429 00cc 013B     	 subs r3,r3,#1
 430 00ce 9B01     	 lsls r3,r3,#6
 431 00d0 DBB2     	 uxtb r3,r3
 432 00d2 4AEA030A 	 orr r10,r10,r3
 289:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 433              	 .loc 1 289 0
 434 00d6 531E     	 subs r3,r2,#1
 435 00d8 1B02     	 lsls r3,r3,#8
 436 00da 03F47063 	 and r3,r3,#3840
 437 00de 4AEA030A 	 orr r10,r10,r3
 438 00e2 ACF10203 	 sub r3,ip,#2
 287:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 439              	 .loc 1 287 0
 440 00e6 9B1A     	 subs r3,r3,r2
 441 00e8 1B03     	 lsls r3,r3,#12
 442 00ea 03F4E043 	 and r3,r3,#28672
 443              	 .loc 1 290 0
 444 00ee 4AEA0303 	 orr r3,r10,r3
 287:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 445              	 .loc 1 287 0
 446 00f2 0361     	 str r3,[r0,#16]
 447              	.LVL69:
 448              	.LBB43:
 449              	.LBB44:
 450              	 .loc 2 1294 0
 451 00f4 0368     	 ldr r3,[r0]
 452 00f6 23F04003 	 bic r3,r3,#64
 453 00fa 0360     	 str r3,[r0]
 454 00fc BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 455              	.LVL70:
 456              	.L37:
 457              	 .align 2
 458              	.L36:
 459 0100 CDCCCCCC 	 .word -858993459
 460 0104 10EB0900 	 .word 650000
 461              	.LBE44:
 462              	.LBE43:
 463              	 .cfi_endproc
 464              	.LFE225:
 466              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 467              	 .align 2
 468              	 .global XMC_CAN_AllocateMOtoNodeList
 469              	 .thumb
 470              	 .thumb_func
 472              	XMC_CAN_AllocateMOtoNodeList:
 473              	.LFB226:
 291:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 292:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 293:../Libraries/XMCLib/src/xmc_can.c **** }
 294:../Libraries/XMCLib/src/xmc_can.c **** /* Function to allocate message object from free list to node list */
 295:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 296:../Libraries/XMCLib/src/xmc_can.c **** {
 474              	 .loc 1 296 0
 475              	 .cfi_startproc
 476              	 
 477              	 
 478              	 
 479              	.LVL71:
 480              	.L39:
 481              	.LBB45:
 482              	.LBB46:
 671:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 483              	 .loc 2 671 0 discriminator 1
 484 0000 D0F8C431 	 ldr r3,[r0,#452]
 485              	.LBE46:
 486              	.LBE45:
 297:../Libraries/XMCLib/src/xmc_can.c ****   /* wait while panel operation is in progress. */
 298:../Libraries/XMCLib/src/xmc_can.c ****   while (XMC_CAN_IsPanelControlReady(obj) == false)
 487              	 .loc 1 298 0 discriminator 1
 488 0004 13F4407F 	 tst r3,#768
 489 0008 FAD1     	 bne .L39
 490              	.LVL72:
 491              	.LBB47:
 492              	.LBB48:
 703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 493              	 .loc 2 703 0
 494 000a 1204     	 lsls r2,r2,#16
 495              	.LVL73:
 702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 496              	 .loc 2 702 0
 497 000c 42F00202 	 orr r2,r2,#2
 498              	.LBE48:
 499              	.LBE47:
 299:../Libraries/XMCLib/src/xmc_can.c ****   {
 300:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 301:../Libraries/XMCLib/src/xmc_can.c ****   };
 302:../Libraries/XMCLib/src/xmc_can.c **** 
 303:../Libraries/XMCLib/src/xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 304:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 500              	 .loc 1 304 0
 501 0010 0131     	 adds r1,r1,#1
 502              	.LVL74:
 503              	.LBB50:
 504              	.LBB49:
 703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 505              	 .loc 2 703 0
 506 0012 42EA0161 	 orr r1,r2,r1,lsl#24
 702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 507              	 .loc 2 702 0
 508 0016 C0F8C411 	 str r1,[r0,#452]
 509 001a 7047     	 bx lr
 510              	.LBE49:
 511              	.LBE50:
 512              	 .cfi_endproc
 513              	.LFE226:
 515              	 .section .text.XMC_CAN_Disable,"ax",%progbits
 516              	 .align 2
 517              	 .global XMC_CAN_Disable
 518              	 .thumb
 519              	 .thumb_func
 521              	XMC_CAN_Disable:
 522              	.LFB227:
 305:../Libraries/XMCLib/src/xmc_can.c **** }
 306:../Libraries/XMCLib/src/xmc_can.c **** 
 307:../Libraries/XMCLib/src/xmc_can.c **** /* Disable XMC_CAN Peripheral */
 308:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 309:../Libraries/XMCLib/src/xmc_can.c **** {
 523              	 .loc 1 309 0
 524              	 .cfi_startproc
 525              	 
 526              	 
 527              	.LVL75:
 528 0000 08B5     	 push {r3,lr}
 529              	.LCFI3:
 530              	 .cfi_def_cfa_offset 8
 531              	 .cfi_offset 3,-8
 532              	 .cfi_offset 14,-4
 310:../Libraries/XMCLib/src/xmc_can.c ****   /* Disable CAN Module */
 311:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 533              	 .loc 1 311 0
 534 0002 0123     	 movs r3,#1
 535 0004 0360     	 str r3,[r0]
 312:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 313:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 536              	 .loc 1 313 0
 537 0006 0248     	 ldr r0,.L43
 538              	.LVL76:
 539 0008 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 540              	.LVL77:
 541 000c 08BD     	 pop {r3,pc}
 542              	.L44:
 543 000e 00BF     	 .align 2
 544              	.L43:
 545 0010 10000010 	 .word 268435472
 546              	 .cfi_endproc
 547              	.LFE227:
 549              	 .section .text.XMC_CAN_Enable,"ax",%progbits
 550              	 .align 2
 551              	 .global XMC_CAN_Enable
 552              	 .thumb
 553              	 .thumb_func
 555              	XMC_CAN_Enable:
 556              	.LFB228:
 314:../Libraries/XMCLib/src/xmc_can.c **** #endif
 315:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 316:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 317:../Libraries/XMCLib/src/xmc_can.c **** #endif
 318:../Libraries/XMCLib/src/xmc_can.c **** }
 319:../Libraries/XMCLib/src/xmc_can.c **** 
 320:../Libraries/XMCLib/src/xmc_can.c **** /* Enable XMC_CAN Peripheral */
 321:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 322:../Libraries/XMCLib/src/xmc_can.c **** {
 557              	 .loc 1 322 0
 558              	 .cfi_startproc
 559              	 
 560              	 
 561              	.LVL78:
 562 0000 10B5     	 push {r4,lr}
 563              	.LCFI4:
 564              	 .cfi_def_cfa_offset 8
 565              	 .cfi_offset 4,-8
 566              	 .cfi_offset 14,-4
 567 0002 0446     	 mov r4,r0
 323:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 324:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 325:../Libraries/XMCLib/src/xmc_can.c **** #endif
 326:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 327:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 568              	 .loc 1 327 0
 569 0004 0548     	 ldr r0,.L49
 570              	.LVL79:
 571 0006 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 572              	.LVL80:
 328:../Libraries/XMCLib/src/xmc_can.c **** #endif
 329:../Libraries/XMCLib/src/xmc_can.c ****   /* Enable CAN Module */
 330:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 573              	 .loc 1 330 0
 574 000a 2368     	 ldr r3,[r4]
 575 000c 23F00103 	 bic r3,r3,#1
 576 0010 2360     	 str r3,[r4]
 577              	.L46:
 331:../Libraries/XMCLib/src/xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 578              	 .loc 1 331 0 discriminator 1
 579 0012 2368     	 ldr r3,[r4]
 580 0014 13F0020F 	 tst r3,#2
 581 0018 FBD1     	 bne .L46
 332:../Libraries/XMCLib/src/xmc_can.c ****   {
 333:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 334:../Libraries/XMCLib/src/xmc_can.c ****   };
 335:../Libraries/XMCLib/src/xmc_can.c **** }
 582              	 .loc 1 335 0
 583 001a 10BD     	 pop {r4,pc}
 584              	.LVL81:
 585              	.L50:
 586              	 .align 2
 587              	.L49:
 588 001c 10000010 	 .word 268435472
 589              	 .cfi_endproc
 590              	.LFE228:
 592              	 .section .text.XMC_CAN_Init,"ax",%progbits
 593              	 .align 2
 594              	 .global XMC_CAN_Init
 595              	 .thumb
 596              	 .thumb_func
 598              	XMC_CAN_Init:
 599              	.LFB229:
 336:../Libraries/XMCLib/src/xmc_can.c **** 
 337:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 338:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 339:../Libraries/XMCLib/src/xmc_can.c **** {
 340:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 341:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 342:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 343:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 344:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 345:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 346:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 347:../Libraries/XMCLib/src/xmc_can.c **** 
 348:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 349:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 350:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 351:../Libraries/XMCLib/src/xmc_can.c **** 
 352:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 353:../Libraries/XMCLib/src/xmc_can.c **** 
 354:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 355:../Libraries/XMCLib/src/xmc_can.c **** 
 356:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 357:../Libraries/XMCLib/src/xmc_can.c **** 
 358:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 359:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 360:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 361:../Libraries/XMCLib/src/xmc_can.c **** 
 362:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 363:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 364:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 365:../Libraries/XMCLib/src/xmc_can.c **** 
 366:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 367:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 368:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 369:../Libraries/XMCLib/src/xmc_can.c **** 
 370:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 371:../Libraries/XMCLib/src/xmc_can.c **** 
 372:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 373:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 374:../Libraries/XMCLib/src/xmc_can.c **** 
 375:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 376:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 377:../Libraries/XMCLib/src/xmc_can.c **** 
 378:../Libraries/XMCLib/src/xmc_can.c **** }
 379:../Libraries/XMCLib/src/xmc_can.c **** 
 380:../Libraries/XMCLib/src/xmc_can.c **** #else
 381:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 382:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 383:../Libraries/XMCLib/src/xmc_can.c **** {
 600              	 .loc 1 383 0
 601              	 .cfi_startproc
 602              	 
 603              	 
 604              	.LVL82:
 605 0000 70B5     	 push {r4,r5,r6,lr}
 606              	.LCFI5:
 607              	 .cfi_def_cfa_offset 16
 608              	 .cfi_offset 4,-16
 609              	 .cfi_offset 5,-12
 610              	 .cfi_offset 6,-8
 611              	 .cfi_offset 14,-4
 612 0002 0546     	 mov r5,r0
 613 0004 0E46     	 mov r6,r1
 384:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 385:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 386:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 387:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 388:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 389:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 390:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 391:../Libraries/XMCLib/src/xmc_can.c **** 
 392:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 614              	 .loc 1 392 0
 615 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 616              	.LVL83:
 617 000a 0446     	 mov r4,r0
 618              	.LVL84:
 393:../Libraries/XMCLib/src/xmc_can.c **** 
 394:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 395:../Libraries/XMCLib/src/xmc_can.c **** 
 396:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 397:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 619              	 .loc 1 397 0
 620 000c 2846     	 mov r0,r5
 621              	.LVL85:
 622 000e FFF7FEFF 	 bl XMC_CAN_Enable
 623              	.LVL86:
 398:../Libraries/XMCLib/src/xmc_can.c **** 
 399:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 400:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 624              	 .loc 1 400 0
 625 0012 B4FBF6F1 	 udiv r1,r4,r6
 626 0016 C1F58061 	 rsb r1,r1,#1024
 627              	.LVL87:
 628              	.LBB51:
 629              	.LBB52:
  81:../Libraries/XMCLib/src/xmc_can.c **** }
 630              	 .loc 1 81 0
 631 001a 0029     	 cmp r1,#0
 632 001c 38BF     	 it cc
 633 001e 0021     	 movcc r1,#0
 634              	.LVL88:
 635              	.LBE52:
 636              	.LBE51:
 637              	.LBB53:
 638              	.LBB54:
  86:../Libraries/XMCLib/src/xmc_can.c **** }
 639              	 .loc 1 86 0
 640 0020 40F2FF30 	 movw r0,#1023
 641 0024 8142     	 cmp r1,r0
 642 0026 28BF     	 it cs
 643 0028 0146     	 movcs r1,r0
 644              	.LVL89:
 645              	.LBE54:
 646              	.LBE53:
 401:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 402:../Libraries/XMCLib/src/xmc_can.c **** 
 403:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 404:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 405:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 647              	 .loc 1 405 0
 648 002a A209     	 lsrs r2,r4,#6
 649              	.LVL90:
 404:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 650              	 .loc 1 404 0
 651 002c B309     	 lsrs r3,r6,#6
 652              	.LVL91:
 406:../Libraries/XMCLib/src/xmc_can.c **** 
 407:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 653              	 .loc 1 407 0
 654 002e 9B02     	 lsls r3,r3,#10
 655              	.LVL92:
 656 0030 B3FBF2F3 	 udiv r3,r3,r2
 657              	.LVL93:
 658              	.LBB55:
 659              	.LBB56:
  86:../Libraries/XMCLib/src/xmc_can.c **** }
 660              	 .loc 1 86 0
 661 0034 8342     	 cmp r3,r0
 662 0036 28BF     	 it cs
 663 0038 0346     	 movcs r3,r0
 664              	.LVL94:
 665              	.LBE56:
 666              	.LBE55:
 408:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 667              	 .loc 1 408 0
 668 003a 02FB03F2 	 mul r2,r2,r3
 669              	.LVL95:
 670 003e 920A     	 lsrs r2,r2,#10
 671              	.LVL96:
 401:../Libraries/XMCLib/src/xmc_can.c **** 
 672              	 .loc 1 401 0
 673 0040 C1F58060 	 rsb r0,r1,#1024
 409:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 410:../Libraries/XMCLib/src/xmc_can.c **** 
 411:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 674              	 .loc 1 411 0
 675 0044 B4FBF0F0 	 udiv r0,r4,r0
 676              	.LVL97:
 677 0048 A6EB8212 	 sub r2,r6,r2,lsl#6
 678              	.LVL98:
 412:../Libraries/XMCLib/src/xmc_can.c **** 
 413:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 679              	 .loc 1 413 0
 680 004c 301A     	 subs r0,r6,r0
 681              	.LVL99:
 682 004e 9042     	 cmp r0,r2
 683 0050 98BF     	 it ls
 684 0052 0B46     	 movls r3,r1
 685              	.LVL100:
 414:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 415:../Libraries/XMCLib/src/xmc_can.c **** 
 416:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 686              	 .loc 1 416 0
 687 0054 E968     	 ldr r1,[r5,#12]
 688              	.LVL101:
 689 0056 21F44341 	 bic r1,r1,#49920
 690 005a 21F0FF01 	 bic r1,r1,#255
 691 005e E960     	 str r1,[r5,#12]
 417:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 692              	 .loc 1 417 0
 693 0060 E968     	 ldr r1,[r5,#12]
 694 0062 0B43     	 orrs r3,r3,r1
 695 0064 9042     	 cmp r0,r2
 696 0066 8CBF     	 ite hi
 697 0068 4FF40040 	 movhi r0,#32768
 698 006c 4FF48040 	 movls r0,#16384
 699              	.LVL102:
 700 0070 1843     	 orrs r0,r0,r3
 701 0072 E860     	 str r0,[r5,#12]
 702 0074 70BD     	 pop {r4,r5,r6,pc}
 703              	 .cfi_endproc
 704              	.LFE229:
 706 0076 00BF     	 .section .text.XMC_CAN_SetBaudrateClockSource,"ax",%progbits
 707              	 .align 2
 708              	 .global XMC_CAN_SetBaudrateClockSource
 709              	 .thumb
 710              	 .thumb_func
 712              	XMC_CAN_SetBaudrateClockSource:
 713              	.LFB230:
 418:../Libraries/XMCLib/src/xmc_can.c **** }
 419:../Libraries/XMCLib/src/xmc_can.c **** #endif
 420:../Libraries/XMCLib/src/xmc_can.c **** 
 421:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
 422:../Libraries/XMCLib/src/xmc_can.c **** {
 714              	 .loc 1 422 0
 715              	 .cfi_startproc
 716              	 
 717              	 
 718              	 
 719              	.LVL103:
 720 0000 7047     	 bx lr
 721              	 .cfi_endproc
 722              	.LFE230:
 724 0002 00BF     	 .section .text.XMC_CAN_GetBaudrateClockSource,"ax",%progbits
 725              	 .align 2
 726              	 .global XMC_CAN_GetBaudrateClockSource
 727              	 .thumb
 728              	 .thumb_func
 730              	XMC_CAN_GetBaudrateClockSource:
 731              	.LFB231:
 423:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 424:../Libraries/XMCLib/src/xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 425:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 426:../Libraries/XMCLib/src/xmc_can.c **** }
 427:../Libraries/XMCLib/src/xmc_can.c **** 
 428:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 429:../Libraries/XMCLib/src/xmc_can.c **** {
 732              	 .loc 1 429 0
 733              	 .cfi_startproc
 734              	 
 735              	 
 736              	 
 737              	.LVL104:
 430:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 431:../Libraries/XMCLib/src/xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 432:../Libraries/XMCLib/src/xmc_can.c **** #elif (UC_FAMILY == XMC4) 
 433:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_CANCLKSRC_FPERI;
 434:../Libraries/XMCLib/src/xmc_can.c **** #endif    
 435:../Libraries/XMCLib/src/xmc_can.c **** }
 738              	 .loc 1 435 0
 739 0000 0120     	 movs r0,#1
 740              	.LVL105:
 741 0002 7047     	 bx lr
 742              	 .cfi_endproc
 743              	.LFE231:
 745              	 .section .text.XMC_CAN_GetBaudrateClockFrequency,"ax",%progbits
 746              	 .align 2
 747              	 .global XMC_CAN_GetBaudrateClockFrequency
 748              	 .thumb
 749              	 .thumb_func
 751              	XMC_CAN_GetBaudrateClockFrequency:
 752              	.LFB232:
 436:../Libraries/XMCLib/src/xmc_can.c **** 
 437:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 438:../Libraries/XMCLib/src/xmc_can.c **** {
 753              	 .loc 1 438 0
 754              	 .cfi_startproc
 755              	 
 756              	 
 757              	.LVL106:
 758 0000 08B5     	 push {r3,lr}
 759              	.LCFI6:
 760              	 .cfi_def_cfa_offset 8
 761              	 .cfi_offset 3,-8
 762              	 .cfi_offset 14,-4
 439:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t frequency;
 440:../Libraries/XMCLib/src/xmc_can.c **** 
 441:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 442:../Libraries/XMCLib/src/xmc_can.c ****   switch(XMC_CAN_GetBaudrateClockSource(obj))
 443:../Libraries/XMCLib/src/xmc_can.c ****   {
 444:../Libraries/XMCLib/src/xmc_can.c **** #if UC_FAMILY == XMC4
 445:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 446:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 447:../Libraries/XMCLib/src/xmc_can.c ****       break;
 448:../Libraries/XMCLib/src/xmc_can.c **** #else
 449:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 450:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 451:../Libraries/XMCLib/src/xmc_can.c ****       break;
 452:../Libraries/XMCLib/src/xmc_can.c **** #endif
 453:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 454:../Libraries/XMCLib/src/xmc_can.c ****       frequency = OSCHP_GetFrequency();
 455:../Libraries/XMCLib/src/xmc_can.c ****       break;
 456:../Libraries/XMCLib/src/xmc_can.c **** 
 457:../Libraries/XMCLib/src/xmc_can.c ****     default:
 458:../Libraries/XMCLib/src/xmc_can.c ****       frequency = 0;
 459:../Libraries/XMCLib/src/xmc_can.c ****       break;
 460:../Libraries/XMCLib/src/xmc_can.c ****   }
 461:../Libraries/XMCLib/src/xmc_can.c **** #else
 462:../Libraries/XMCLib/src/xmc_can.c ****   frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 763              	 .loc 1 462 0
 764 0002 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 765              	.LVL107:
 463:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 464:../Libraries/XMCLib/src/xmc_can.c **** 
 465:../Libraries/XMCLib/src/xmc_can.c ****   return frequency;
 466:../Libraries/XMCLib/src/xmc_can.c **** }
 766              	 .loc 1 466 0
 767 0006 08BD     	 pop {r3,pc}
 768              	 .cfi_endproc
 769              	.LFE232:
 771              	 .section .text.XMC_CAN_InitEx,"ax",%progbits
 772              	 .align 2
 773              	 .global XMC_CAN_InitEx
 774              	 .thumb
 775              	 .thumb_func
 777              	XMC_CAN_InitEx:
 778              	.LFB233:
 467:../Libraries/XMCLib/src/xmc_can.c **** 
 468:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 469:../Libraries/XMCLib/src/xmc_can.c **** {
 779              	 .loc 1 469 0
 780              	 .cfi_startproc
 781              	 
 782              	 
 783              	.LVL108:
 784 0000 38B5     	 push {r3,r4,r5,lr}
 785              	.LCFI7:
 786              	 .cfi_def_cfa_offset 16
 787              	 .cfi_offset 3,-16
 788              	 .cfi_offset 4,-12
 789              	 .cfi_offset 5,-8
 790              	 .cfi_offset 14,-4
 791 0002 0546     	 mov r5,r0
 792 0004 1446     	 mov r4,r2
 470:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n;
 471:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n;
 472:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 473:../Libraries/XMCLib/src/xmc_can.c **** 
 474:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 475:../Libraries/XMCLib/src/xmc_can.c **** 
 476:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 477:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 793              	 .loc 1 477 0
 794 0006 FFF7FEFF 	 bl XMC_CAN_Enable
 795              	.LVL109:
 796              	.LBB63:
 797              	.LBB64:
 462:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 798              	 .loc 1 462 0
 799 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 800              	.LVL110:
 801              	.LBE64:
 802              	.LBE63:
 478:../Libraries/XMCLib/src/xmc_can.c **** 
 479:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 480:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 481:../Libraries/XMCLib/src/xmc_can.c **** 
 482:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 483:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 803              	 .loc 1 483 0
 804 000e B0FBF4F3 	 udiv r3,r0,r4
 805 0012 C3F58063 	 rsb r3,r3,#1024
 806              	.LVL111:
 807              	.LBB65:
 808              	.LBB66:
  81:../Libraries/XMCLib/src/xmc_can.c **** }
 809              	 .loc 1 81 0
 810 0016 002B     	 cmp r3,#0
 811 0018 38BF     	 it cc
 812 001a 0023     	 movcc r3,#0
 813              	.LVL112:
 814              	.LBE66:
 815              	.LBE65:
 816              	.LBB67:
 817              	.LBB68:
  86:../Libraries/XMCLib/src/xmc_can.c **** }
 818              	 .loc 1 86 0
 819 001c 40F2FF32 	 movw r2,#1023
 820 0020 9342     	 cmp r3,r2
 821 0022 28BF     	 it cs
 822 0024 1346     	 movcs r3,r2
 823              	.LVL113:
 824              	.LBE68:
 825              	.LBE67:
 484:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 485:../Libraries/XMCLib/src/xmc_can.c **** 
 486:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 826              	 .loc 1 486 0
 827 0026 EA68     	 ldr r2,[r5,#12]
 828 0028 22F44342 	 bic r2,r2,#49920
 829 002c 22F0FF02 	 bic r2,r2,#255
 830 0030 EA60     	 str r2,[r5,#12]
 487:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_P
 831              	 .loc 1 487 0
 832 0032 EA68     	 ldr r2,[r5,#12]
 833 0034 42F48042 	 orr r2,r2,#16384
 834 0038 1A43     	 orrs r2,r2,r3
 835 003a EA60     	 str r2,[r5,#12]
 484:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 836              	 .loc 1 484 0
 837 003c C3F58063 	 rsb r3,r3,#1024
 838              	.LVL114:
 488:../Libraries/XMCLib/src/xmc_can.c **** 
 489:../Libraries/XMCLib/src/xmc_can.c ****   return freq_n;
 490:../Libraries/XMCLib/src/xmc_can.c **** }
 839              	 .loc 1 490 0
 840 0040 B0FBF3F0 	 udiv r0,r0,r3
 841              	.LVL115:
 842 0044 38BD     	 pop {r3,r4,r5,pc}
 843              	 .cfi_endproc
 844              	.LFE233:
 846 0046 00BF     	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 847              	 .align 2
 848              	 .global XMC_CAN_MO_SetIdentifier
 849              	 .thumb
 850              	 .thumb_func
 852              	XMC_CAN_MO_SetIdentifier:
 853              	.LFB234:
 491:../Libraries/XMCLib/src/xmc_can.c **** 
 492:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the Identifier of the MO */
 493:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 494:../Libraries/XMCLib/src/xmc_can.c **** {
 854              	 .loc 1 494 0
 855              	 .cfi_startproc
 856              	 
 857              	 
 858              	 
 859              	.LVL116:
 860 0000 10B4     	 push {r4}
 861              	.LCFI8:
 862              	 .cfi_def_cfa_offset 4
 863              	 .cfi_offset 4,-4
 495:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 864              	 .loc 1 495 0
 865 0002 0368     	 ldr r3,[r0]
 866 0004 9A69     	 ldr r2,[r3,#24]
 867 0006 12F0005F 	 tst r2,#536870912
 868 000a 08D1     	 bne .L62
 496:../Libraries/XMCLib/src/xmc_can.c ****   {
 497:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 869              	 .loc 1 497 0
 870 000c 9A69     	 ldr r2,[r3,#24]
 498:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 871              	 .loc 1 498 0
 872 000e 8C04     	 lsls r4,r1,#18
 873 0010 24F06044 	 bic r4,r4,#-536870912
 497:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 874              	 .loc 1 497 0
 875 0014 02F06042 	 and r2,r2,#-536870912
 876 0018 2243     	 orrs r2,r2,r4
 877 001a 9A61     	 str r2,[r3,#24]
 878 001c 06E0     	 b .L63
 879              	.L62:
 499:../Libraries/XMCLib/src/xmc_can.c ****   }
 500:../Libraries/XMCLib/src/xmc_can.c ****   else
 501:../Libraries/XMCLib/src/xmc_can.c ****   {
 502:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 880              	 .loc 1 502 0
 881 001e 9C69     	 ldr r4,[r3,#24]
 503:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 882              	 .loc 1 503 0
 883 0020 21F06042 	 bic r2,r1,#-536870912
 502:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 884              	 .loc 1 502 0
 885 0024 04F06044 	 and r4,r4,#-536870912
 886 0028 2243     	 orrs r2,r2,r4
 887 002a 9A61     	 str r2,[r3,#24]
 888              	.L63:
 504:../Libraries/XMCLib/src/xmc_can.c ****   }
 505:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_identifier = can_identifier;
 889              	 .loc 1 505 0
 890 002c 4368     	 ldr r3,[r0,#4]
 891 002e 61F31C03 	 bfi r3,r1,#0,#29
 892 0032 4360     	 str r3,[r0,#4]
 506:../Libraries/XMCLib/src/xmc_can.c **** }
 893              	 .loc 1 506 0
 894 0034 5DF8044B 	 ldr r4,[sp],#4
 895              	.LCFI9:
 896              	 .cfi_restore 4
 897              	 .cfi_def_cfa_offset 0
 898 0038 7047     	 bx lr
 899              	 .cfi_endproc
 900              	.LFE234:
 902 003a 00BF     	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 903              	 .align 2
 904              	 .global XMC_CAN_MO_GetIdentifier
 905              	 .thumb
 906              	 .thumb_func
 908              	XMC_CAN_MO_GetIdentifier:
 909              	.LFB235:
 507:../Libraries/XMCLib/src/xmc_can.c **** 
 508:../Libraries/XMCLib/src/xmc_can.c **** 
 509:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the Identifier of the MO */
 510:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 511:../Libraries/XMCLib/src/xmc_can.c **** {
 910              	 .loc 1 511 0
 911              	 .cfi_startproc
 912              	 
 913              	 
 914              	 
 915              	.LVL117:
 512:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier;
 513:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 916              	 .loc 1 513 0
 917 0000 0368     	 ldr r3,[r0]
 918 0002 9A69     	 ldr r2,[r3,#24]
 919 0004 12F0005F 	 tst r2,#536870912
 514:../Libraries/XMCLib/src/xmc_can.c ****   {
 515:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_STD
 920              	 .loc 1 515 0
 921 0008 9869     	 ldr r0,[r3,#24]
 922              	.LVL118:
 923 000a 0CBF     	 ite eq
 924 000c C0F38A40 	 ubfxeq r0,r0,#18,#11
 925              	.LVL119:
 516:../Libraries/XMCLib/src/xmc_can.c ****   }
 517:../Libraries/XMCLib/src/xmc_can.c ****   else
 518:../Libraries/XMCLib/src/xmc_can.c ****   {
 519:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 926              	 .loc 1 519 0
 927 0010 20F06040 	 bicne r0,r0,#-536870912
 928              	.LVL120:
 520:../Libraries/XMCLib/src/xmc_can.c ****   }
 521:../Libraries/XMCLib/src/xmc_can.c ****   return identifier;
 522:../Libraries/XMCLib/src/xmc_can.c **** }
 929              	 .loc 1 522 0
 930 0014 7047     	 bx lr
 931              	 .cfi_endproc
 932              	.LFE235:
 934 0016 00BF     	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 935              	 .align 2
 936              	 .global XMC_CAN_MO_GetAcceptanceMask
 937              	 .thumb
 938              	 .thumb_func
 940              	XMC_CAN_MO_GetAcceptanceMask:
 941              	.LFB236:
 523:../Libraries/XMCLib/src/xmc_can.c **** 
 524:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 525:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 526:../Libraries/XMCLib/src/xmc_can.c **** {
 942              	 .loc 1 526 0
 943              	 .cfi_startproc
 944              	 
 945              	 
 946              	 
 947              	.LVL121:
 527:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier_mask;
 528:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 948              	 .loc 1 528 0
 949 0000 0368     	 ldr r3,[r0]
 950 0002 DA68     	 ldr r2,[r3,#12]
 951 0004 12F0005F 	 tst r2,#536870912
 952 0008 07D1     	 bne .L69
 529:../Libraries/XMCLib/src/xmc_can.c ****             && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 953              	 .loc 1 529 0
 954 000a 9A69     	 ldr r2,[r3,#24]
 955 000c 12F0005F 	 tst r2,#536870912
 956 0010 03D1     	 bne .L69
 530:../Libraries/XMCLib/src/xmc_can.c ****   {
 531:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 957              	 .loc 1 531 0
 958 0012 D868     	 ldr r0,[r3,#12]
 959              	.LVL122:
 960 0014 C0F38A40 	 ubfx r0,r0,#18,#11
 961              	.LVL123:
 962 0018 7047     	 bx lr
 963              	.LVL124:
 964              	.L69:
 532:../Libraries/XMCLib/src/xmc_can.c ****   }
 533:../Libraries/XMCLib/src/xmc_can.c ****   else
 534:../Libraries/XMCLib/src/xmc_can.c ****   {
 535:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 965              	 .loc 1 535 0
 966 001a D868     	 ldr r0,[r3,#12]
 967              	.LVL125:
 968 001c 20F06040 	 bic r0,r0,#-536870912
 969              	.LVL126:
 536:../Libraries/XMCLib/src/xmc_can.c ****   }
 537:../Libraries/XMCLib/src/xmc_can.c ****   return identifier_mask;
 538:../Libraries/XMCLib/src/xmc_can.c **** }
 970              	 .loc 1 538 0
 971 0020 7047     	 bx lr
 972              	 .cfi_endproc
 973              	.LFE236:
 975 0022 00BF     	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 976              	 .align 2
 977              	 .global XMC_CAN_MO_SetAcceptanceMask
 978              	 .thumb
 979              	 .thumb_func
 981              	XMC_CAN_MO_SetAcceptanceMask:
 982              	.LFB237:
 539:../Libraries/XMCLib/src/xmc_can.c **** 
 540:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask of the MO */
 541:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
 542:../Libraries/XMCLib/src/xmc_can.c **** {
 983              	 .loc 1 542 0
 984              	 .cfi_startproc
 985              	 
 986              	 
 987              	 
 988              	.LVL127:
 989 0000 10B4     	 push {r4}
 990              	.LCFI10:
 991              	 .cfi_def_cfa_offset 4
 992              	 .cfi_offset 4,-4
 543:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 993              	 .loc 1 543 0
 994 0002 0468     	 ldr r4,[r0]
 995 0004 E368     	 ldr r3,[r4,#12]
 996 0006 13F0005F 	 tst r3,#536870912
 997 000a 0AD1     	 bne .L72
 544:../Libraries/XMCLib/src/xmc_can.c ****           && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 998              	 .loc 1 544 0
 999 000c A369     	 ldr r3,[r4,#24]
 1000 000e 13F0005F 	 tst r3,#536870912
 1001 0012 06D1     	 bne .L72
 545:../Libraries/XMCLib/src/xmc_can.c ****   {
 546:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1002              	 .loc 1 546 0
 1003 0014 E368     	 ldr r3,[r4,#12]
 1004 0016 03F06043 	 and r3,r3,#-536870912
 1005 001a 43EA8143 	 orr r3,r3,r1,lsl#18
 1006 001e E360     	 str r3,[r4,#12]
 1007 0020 06E0     	 b .L73
 1008              	.L72:
 547:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 548:../Libraries/XMCLib/src/xmc_can.c ****   }
 549:../Libraries/XMCLib/src/xmc_can.c ****   else
 550:../Libraries/XMCLib/src/xmc_can.c ****   {
 551:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1009              	 .loc 1 551 0
 1010 0022 E268     	 ldr r2,[r4,#12]
 552:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1011              	 .loc 1 552 0
 1012 0024 21F06043 	 bic r3,r1,#-536870912
 551:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1013              	 .loc 1 551 0
 1014 0028 02F06042 	 and r2,r2,#-536870912
 1015 002c 1343     	 orrs r3,r3,r2
 1016 002e E360     	 str r3,[r4,#12]
 1017              	.L73:
 553:../Libraries/XMCLib/src/xmc_can.c ****   }
 554:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 1018              	 .loc 1 554 0
 1019 0030 8368     	 ldr r3,[r0,#8]
 1020 0032 61F31C03 	 bfi r3,r1,#0,#29
 1021 0036 8360     	 str r3,[r0,#8]
 555:../Libraries/XMCLib/src/xmc_can.c **** }
 1022              	 .loc 1 555 0
 1023 0038 5DF8044B 	 ldr r4,[sp],#4
 1024              	.LCFI11:
 1025              	 .cfi_restore 4
 1026              	 .cfi_def_cfa_offset 0
 1027 003c 7047     	 bx lr
 1028              	 .cfi_endproc
 1029              	.LFE237:
 1031 003e 00BF     	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 1032              	 .align 2
 1033              	 .global XMC_CAN_MO_UpdateData
 1034              	 .thumb
 1035              	 .thumb_func
 1037              	XMC_CAN_MO_UpdateData:
 1038              	.LFB239:
 556:../Libraries/XMCLib/src/xmc_can.c **** 
 557:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 558:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 559:../Libraries/XMCLib/src/xmc_can.c **** {
 560:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 561:../Libraries/XMCLib/src/xmc_can.c ****   
 562:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure MPN */
 563:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 564:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 565:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 566:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 567:../Libraries/XMCLib/src/xmc_can.c ****   
 568:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 569:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 570:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 571:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 572:../Libraries/XMCLib/src/xmc_can.c ****   {
 573:../Libraries/XMCLib/src/xmc_can.c ****     ; /*Do nothing*/
 574:../Libraries/XMCLib/src/xmc_can.c ****   }
 575:../Libraries/XMCLib/src/xmc_can.c ****   else
 576:../Libraries/XMCLib/src/xmc_can.c ****   {
 577:../Libraries/XMCLib/src/xmc_can.c **** 
 578:../Libraries/XMCLib/src/xmc_can.c ****     /* Disable Message object */
 579:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 580:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 581:../Libraries/XMCLib/src/xmc_can.c ****     {
 582:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_ar;
 583:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 584:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 585:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 586:../Libraries/XMCLib/src/xmc_can.c **** 
 587:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_amr;
 588:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 589:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 590:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 591:../Libraries/XMCLib/src/xmc_can.c ****     }
 592:../Libraries/XMCLib/src/xmc_can.c ****     else
 593:../Libraries/XMCLib/src/xmc_can.c ****     {
 594:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 595:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 596:../Libraries/XMCLib/src/xmc_can.c ****     }
 597:../Libraries/XMCLib/src/xmc_can.c ****     /* Check whether message object is transmit message object */
 598:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 599:../Libraries/XMCLib/src/xmc_can.c ****     {
 600:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Transmit message object  */
 601:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 602:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 603:../Libraries/XMCLib/src/xmc_can.c **** 
 604:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
 605:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_M
 606:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 607:../Libraries/XMCLib/src/xmc_can.c ****     }
 608:../Libraries/XMCLib/src/xmc_can.c ****     else
 609:../Libraries/XMCLib/src/xmc_can.c ****     {
 610:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 611:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 612:../Libraries/XMCLib/src/xmc_can.c **** 
 613:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
 614:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_M
 615:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 616:../Libraries/XMCLib/src/xmc_can.c ****     }
 617:../Libraries/XMCLib/src/xmc_can.c **** 
 618:../Libraries/XMCLib/src/xmc_can.c ****   }
 619:../Libraries/XMCLib/src/xmc_can.c **** }
 620:../Libraries/XMCLib/src/xmc_can.c **** 
 621:../Libraries/XMCLib/src/xmc_can.c **** /* Update of XMC_CAN Object */
 622:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 623:../Libraries/XMCLib/src/xmc_can.c **** {
 1039              	 .loc 1 623 0
 1040              	 .cfi_startproc
 1041              	 
 1042              	 
 1043              	 
 1044              	.LVL128:
 624:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 625:../Libraries/XMCLib/src/xmc_can.c ****   /* Check whether message object is transmit message object */
 626:../Libraries/XMCLib/src/xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1045              	 .loc 1 626 0
 1046 0000 037E     	 ldrb r3,[r0,#24]
 1047 0002 012B     	 cmp r3,#1
 1048 0004 17D1     	 bne .L77
 627:../Libraries/XMCLib/src/xmc_can.c ****   {
 628:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1049              	 .loc 1 628 0
 1050 0006 0368     	 ldr r3,[r0]
 1051 0008 2022     	 movs r2,#32
 1052 000a DA61     	 str r2,[r3,#28]
 629:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure data length */
 630:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 1053              	 .loc 1 630 0
 1054 000c 0168     	 ldr r1,[r0]
 1055 000e 0B68     	 ldr r3,[r1]
 631:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 1056              	 .loc 1 631 0
 1057 0010 027B     	 ldrb r2,[r0,#12]
 1058 0012 1206     	 lsls r2,r2,#24
 1059 0014 02F07062 	 and r2,r2,#251658240
 630:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 1060              	 .loc 1 630 0
 1061 0018 23F07063 	 bic r3,r3,#251658240
 1062 001c 1343     	 orrs r3,r3,r2
 1063 001e 0B60     	 str r3,[r1]
 632:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure Data registers*/
 633:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 1064              	 .loc 1 633 0
 1065 0020 0368     	 ldr r3,[r0]
 1066 0022 0269     	 ldr r2,[r0,#16]
 1067 0024 1A61     	 str r2,[r3,#16]
 634:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 1068              	 .loc 1 634 0
 1069 0026 0368     	 ldr r3,[r0]
 1070 0028 4269     	 ldr r2,[r0,#20]
 1071 002a 5A61     	 str r2,[r3,#20]
 635:../Libraries/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 636:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOC
 1072              	 .loc 1 636 0
 1073 002c 0368     	 ldr r3,[r0]
 1074 002e 034A     	 ldr r2,.L78
 1075 0030 DA61     	 str r2,[r3,#28]
 1076              	.LVL129:
 637:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1077              	 .loc 1 637 0
 1078 0032 0020     	 movs r0,#0
 1079              	.LVL130:
 1080 0034 7047     	 bx lr
 1081              	.LVL131:
 1082              	.L77:
 638:../Libraries/XMCLib/src/xmc_can.c ****   }
 639:../Libraries/XMCLib/src/xmc_can.c ****   else
 640:../Libraries/XMCLib/src/xmc_can.c ****   {
 641:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 1083              	 .loc 1 641 0
 1084 0036 0320     	 movs r0,#3
 1085              	.LVL132:
 642:../Libraries/XMCLib/src/xmc_can.c ****   }
 643:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 644:../Libraries/XMCLib/src/xmc_can.c **** }
 1086              	 .loc 1 644 0
 1087 0038 7047     	 bx lr
 1088              	.L79:
 1089 003a 00BF     	 .align 2
 1090              	.L78:
 1091 003c 40002800 	 .word 2621504
 1092              	 .cfi_endproc
 1093              	.LFE239:
 1095              	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1096              	 .align 2
 1097              	 .global XMC_CAN_MO_Config
 1098              	 .thumb
 1099              	 .thumb_func
 1101              	XMC_CAN_MO_Config:
 1102              	.LFB238:
 559:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 1103              	 .loc 1 559 0
 1104              	 .cfi_startproc
 1105              	 
 1106              	 
 1107              	.LVL133:
 1108 0000 38B5     	 push {r3,r4,r5,lr}
 1109              	.LCFI12:
 1110              	 .cfi_def_cfa_offset 16
 1111              	 .cfi_offset 3,-16
 1112              	 .cfi_offset 4,-12
 1113              	 .cfi_offset 5,-8
 1114              	 .cfi_offset 14,-4
 563:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 1115              	 .loc 1 563 0
 1116 0002 0268     	 ldr r2,[r0]
 1117 0004 02F13843 	 add r3,r2,#-1207959552
 1118 0008 A3F5A833 	 sub r3,r3,#86016
 1119              	.LVL134:
 565:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1120              	 .loc 1 565 0
 1121 000c 9168     	 ldr r1,[r2,#8]
 1122 000e 21F47F41 	 bic r1,r1,#65280
 1123 0012 9160     	 str r1,[r2,#8]
 566:../Libraries/XMCLib/src/xmc_can.c ****   
 1124              	 .loc 1 566 0
 1125 0014 0468     	 ldr r4,[r0]
 1126 0016 A168     	 ldr r1,[r4,#8]
 564:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 1127              	 .loc 1 564 0
 1128 0018 9D0A     	 lsrs r5,r3,#10
 1129 001a C3F34413 	 ubfx r3,r3,#5,#5
 1130              	.LVL135:
 1131 001e 1A02     	 lsls r2,r3,#8
 1132              	.LVL136:
 1133 0020 42EA4533 	 orr r3,r2,r5,lsl#13
 566:../Libraries/XMCLib/src/xmc_can.c ****   
 1134              	 .loc 1 566 0
 1135 0024 0B43     	 orrs r3,r3,r1
 1136 0026 A360     	 str r3,[r4,#8]
 568:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1137              	 .loc 1 568 0
 1138 0028 037E     	 ldrb r3,[r0,#24]
 1139 002a 012B     	 cmp r3,#1
 1140 002c 30D8     	 bhi .L80
 579:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1141              	 .loc 1 579 0
 1142 002e 0368     	 ldr r3,[r0]
 1143 0030 2022     	 movs r2,#32
 1144 0032 DA61     	 str r2,[r3,#28]
 580:../Libraries/XMCLib/src/xmc_can.c ****     {
 1145              	 .loc 1 580 0
 1146 0034 C379     	 ldrb r3,[r0,#7]
 1147 0036 13F0200F 	 tst r3,#32
 1148 003a 0ED1     	 bne .L82
 582:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 1149              	 .loc 1 582 0
 1150 003c 4268     	 ldr r2,[r0,#4]
 1151              	.LVL137:
 583:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1152              	 .loc 1 583 0
 1153 003e 02F06043 	 and r3,r2,#-536870912
 1154              	.LVL138:
 584:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1155              	 .loc 1 584 0
 1156 0042 43EA8243 	 orr r3,r3,r2,lsl#18
 1157              	.LVL139:
 585:../Libraries/XMCLib/src/xmc_can.c **** 
 1158              	 .loc 1 585 0
 1159 0046 0268     	 ldr r2,[r0]
 1160 0048 9361     	 str r3,[r2,#24]
 587:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1161              	 .loc 1 587 0
 1162 004a 8268     	 ldr r2,[r0,#8]
 1163              	.LVL140:
 588:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1164              	 .loc 1 588 0
 1165 004c 02F06043 	 and r3,r2,#-536870912
 1166              	.LVL141:
 589:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 1167              	 .loc 1 589 0
 1168 0050 43EA8243 	 orr r3,r3,r2,lsl#18
 1169              	.LVL142:
 590:../Libraries/XMCLib/src/xmc_can.c ****     }
 1170              	 .loc 1 590 0
 1171 0054 0268     	 ldr r2,[r0]
 1172 0056 D360     	 str r3,[r2,#12]
 1173 0058 05E0     	 b .L83
 1174              	.LVL143:
 1175              	.L82:
 594:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 1176              	 .loc 1 594 0
 1177 005a 0368     	 ldr r3,[r0]
 1178 005c 4268     	 ldr r2,[r0,#4]
 1179 005e 9A61     	 str r2,[r3,#24]
 595:../Libraries/XMCLib/src/xmc_can.c ****     }
 1180              	 .loc 1 595 0
 1181 0060 0368     	 ldr r3,[r0]
 1182 0062 8268     	 ldr r2,[r0,#8]
 1183 0064 DA60     	 str r2,[r3,#12]
 1184              	.L83:
 598:../Libraries/XMCLib/src/xmc_can.c ****     {
 1185              	 .loc 1 598 0
 1186 0066 037E     	 ldrb r3,[r0,#24]
 1187 0068 012B     	 cmp r3,#1
 1188 006a 0AD1     	 bne .L84
 1189 006c 0446     	 mov r4,r0
 601:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 1190              	 .loc 1 601 0
 1191 006e FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 1192              	.LVL144:
 602:../Libraries/XMCLib/src/xmc_can.c **** 
 1193              	 .loc 1 602 0
 1194 0072 2368     	 ldr r3,[r4]
 1195 0074 4FF00062 	 mov r2,#134217728
 1196 0078 DA61     	 str r2,[r3,#28]
 605:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 1197              	 .loc 1 605 0
 1198 007a 2368     	 ldr r3,[r4]
 1199 007c 054A     	 ldr r2,.L86
 1200 007e DA61     	 str r2,[r3,#28]
 1201 0080 38BD     	 pop {r3,r4,r5,pc}
 1202              	.LVL145:
 1203              	.L84:
 611:../Libraries/XMCLib/src/xmc_can.c **** 
 1204              	 .loc 1 611 0
 1205 0082 0368     	 ldr r3,[r0]
 1206 0084 4FF40062 	 mov r2,#2048
 1207 0088 DA61     	 str r2,[r3,#28]
 614:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 1208              	 .loc 1 614 0
 1209 008a 0368     	 ldr r3,[r0]
 1210 008c 024A     	 ldr r2,.L86+4
 1211 008e DA61     	 str r2,[r3,#28]
 1212              	.L80:
 1213 0090 38BD     	 pop {r3,r4,r5,pc}
 1214              	.L87:
 1215 0092 00BF     	 .align 2
 1216              	.L86:
 1217 0094 C0002006 	 .word 102760640
 1218 0098 4006A000 	 .word 10487360
 1219              	 .cfi_endproc
 1220              	.LFE238:
 1222              	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 1223              	 .align 2
 1224              	 .global XMC_CAN_MO_Transmit
 1225              	 .thumb
 1226              	 .thumb_func
 1228              	XMC_CAN_MO_Transmit:
 1229              	.LFB240:
 645:../Libraries/XMCLib/src/xmc_can.c **** 
 646:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 647:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 648:../Libraries/XMCLib/src/xmc_can.c **** {
 1230              	 .loc 1 648 0
 1231              	 .cfi_startproc
 1232              	 
 1233              	 
 1234              	 
 1235              	.LVL146:
 649:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 650:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 1236              	 .loc 1 650 0
 1237 0000 0368     	 ldr r3,[r0]
 1238 0002 DA69     	 ldr r2,[r3,#28]
 1239              	.LVL147:
 651:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 1240              	 .loc 1 651 0
 1241 0004 D969     	 ldr r1,[r3,#28]
 1242              	.LVL148:
 652:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 653:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 1243              	 .loc 1 653 0
 1244 0006 12F0200F 	 tst r2,#32
 1245 000a 07D0     	 beq .L90
 654:../Libraries/XMCLib/src/xmc_can.c ****   {
 655:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 656:../Libraries/XMCLib/src/xmc_can.c ****   }
 657:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 658:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 1246              	 .loc 1 658 0
 1247 000c 11F4807F 	 tst r1,#256
 1248 0010 06D1     	 bne .L91
 659:../Libraries/XMCLib/src/xmc_can.c ****   {
 660:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 661:../Libraries/XMCLib/src/xmc_can.c ****   }
 662:../Libraries/XMCLib/src/xmc_can.c ****   else
 663:../Libraries/XMCLib/src/xmc_can.c ****   {
 664:../Libraries/XMCLib/src/xmc_can.c ****     /* set TXRQ bit */
 665:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 1249              	 .loc 1 665 0
 1250 0012 4FF0E062 	 mov r2,#117440512
 1251              	.LVL149:
 1252 0016 DA61     	 str r2,[r3,#28]
 1253              	.LVL150:
 666:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1254              	 .loc 1 666 0
 1255 0018 0020     	 movs r0,#0
 1256              	.LVL151:
 1257 001a 7047     	 bx lr
 1258              	.LVL152:
 1259              	.L90:
 655:../Libraries/XMCLib/src/xmc_can.c ****   }
 1260              	 .loc 1 655 0
 1261 001c 0420     	 movs r0,#4
 1262              	.LVL153:
 1263 001e 7047     	 bx lr
 1264              	.LVL154:
 1265              	.L91:
 660:../Libraries/XMCLib/src/xmc_can.c ****   }
 1266              	 .loc 1 660 0
 1267 0020 0220     	 movs r0,#2
 1268              	.LVL155:
 667:../Libraries/XMCLib/src/xmc_can.c ****   }
 668:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 669:../Libraries/XMCLib/src/xmc_can.c **** }
 1269              	 .loc 1 669 0
 1270 0022 7047     	 bx lr
 1271              	 .cfi_endproc
 1272              	.LFE240:
 1274              	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 1275              	 .align 2
 1276              	 .global XMC_CAN_MO_ReceiveData
 1277              	 .thumb
 1278              	 .thumb_func
 1280              	XMC_CAN_MO_ReceiveData:
 1281              	.LFB241:
 670:../Libraries/XMCLib/src/xmc_can.c **** 
 671:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 672:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 673:../Libraries/XMCLib/src/xmc_can.c **** {
 1282              	 .loc 1 673 0
 1283              	 .cfi_startproc
 1284              	 
 1285              	 
 1286              	 
 1287              	.LVL156:
 674:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 675:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 676:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 677:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 1288              	 .loc 1 677 0
 1289 0000 0368     	 ldr r3,[r0]
 1290 0002 DA69     	 ldr r2,[r3,#28]
 1291              	.LVL157:
 678:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 1292              	 .loc 1 678 0
 1293 0004 D969     	 ldr r1,[r3,#28]
 1294              	.LVL158:
 679:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 680:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 1295              	 .loc 1 680 0
 1296 0006 12F4006F 	 tst r2,#2048
 1297 000a 11D1     	 bne .L95
 681:../Libraries/XMCLib/src/xmc_can.c ****   {
 682:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 683:../Libraries/XMCLib/src/xmc_can.c ****   }
 684:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 685:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 1298              	 .loc 1 685 0
 1299 000c 11F0040F 	 tst r1,#4
 1300 0010 10D1     	 bne .L96
 1301              	.LVL159:
 1302              	.L98:
 686:../Libraries/XMCLib/src/xmc_can.c ****   {
 687:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 688:../Libraries/XMCLib/src/xmc_can.c ****   }
 689:../Libraries/XMCLib/src/xmc_can.c ****   else
 690:../Libraries/XMCLib/src/xmc_can.c ****   {
 691:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 692:../Libraries/XMCLib/src/xmc_can.c ****     do
 693:../Libraries/XMCLib/src/xmc_can.c ****     {
 694:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 1303              	 .loc 1 694 0 discriminator 2
 1304 0012 1A69     	 ldr r2,[r3,#16]
 1305 0014 0261     	 str r2,[r0,#16]
 695:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 1306              	 .loc 1 695 0 discriminator 2
 1307 0016 5A69     	 ldr r2,[r3,#20]
 1308 0018 4261     	 str r2,[r0,#20]
 696:../Libraries/XMCLib/src/xmc_can.c **** 
 697:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 1309              	 .loc 1 697 0 discriminator 2
 1310 001a D969     	 ldr r1,[r3,#28]
 1311              	.LVL160:
 698:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 1312              	 .loc 1 698 0 discriminator 2
 1313 001c DA69     	 ldr r2,[r3,#28]
 1314 001e C2F3C002 	 ubfx r2,r2,#3,#1
 1315              	.LVL161:
 699:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 1316              	 .loc 1 699 0 discriminator 2
 1317 0022 11F0040F 	 tst r1,#4
 1318 0026 07D0     	 beq .L97
 1319              	 .loc 1 699 0 is_stmt 0 discriminator 1
 1320 0028 002A     	 cmp r2,#0
 1321 002a F2D1     	 bne .L98
 700:../Libraries/XMCLib/src/xmc_can.c **** 
 701:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1322              	 .loc 1 701 0 is_stmt 1
 1323 002c 0020     	 movs r0,#0
 1324              	.LVL162:
 1325 002e 7047     	 bx lr
 1326              	.LVL163:
 1327              	.L95:
 682:../Libraries/XMCLib/src/xmc_can.c ****   }
 1328              	 .loc 1 682 0
 1329 0030 0320     	 movs r0,#3
 1330              	.LVL164:
 1331 0032 7047     	 bx lr
 1332              	.LVL165:
 1333              	.L96:
 687:../Libraries/XMCLib/src/xmc_can.c ****   }
 1334              	 .loc 1 687 0
 1335 0034 0220     	 movs r0,#2
 1336              	.LVL166:
 1337 0036 7047     	 bx lr
 1338              	.LVL167:
 1339              	.L97:
 1340              	 .loc 1 701 0
 1341 0038 0020     	 movs r0,#0
 1342              	.LVL168:
 702:../Libraries/XMCLib/src/xmc_can.c ****   }
 703:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 704:../Libraries/XMCLib/src/xmc_can.c **** }
 1343              	 .loc 1 704 0
 1344 003a 7047     	 bx lr
 1345              	 .cfi_endproc
 1346              	.LFE241:
 1348              	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 1349              	 .align 2
 1350              	 .global XMC_CAN_MO_Receive
 1351              	 .thumb
 1352              	 .thumb_func
 1354              	XMC_CAN_MO_Receive:
 1355              	.LFB242:
 705:../Libraries/XMCLib/src/xmc_can.c **** 
 706:../Libraries/XMCLib/src/xmc_can.c **** 
 707:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 708:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 709:../Libraries/XMCLib/src/xmc_can.c **** {
 1356              	 .loc 1 709 0
 1357              	 .cfi_startproc
 1358              	 
 1359              	 
 1360              	 
 1361              	.LVL169:
 710:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 711:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 712:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 713:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 1362              	 .loc 1 713 0
 1363 0000 0368     	 ldr r3,[r0]
 1364 0002 DA69     	 ldr r2,[r3,#28]
 1365              	.LVL170:
 714:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 1366              	 .loc 1 714 0
 1367 0004 DB69     	 ldr r3,[r3,#28]
 1368              	.LVL171:
 715:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 716:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 1369              	 .loc 1 716 0
 1370 0006 12F4006F 	 tst r2,#2048
 1371 000a 59D1     	 bne .L107
 717:../Libraries/XMCLib/src/xmc_can.c ****   {
 718:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 719:../Libraries/XMCLib/src/xmc_can.c ****   }
 720:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 721:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 1372              	 .loc 1 721 0
 1373 000c 13F0040F 	 tst r3,#4
 1374 0010 58D1     	 bne .L108
 709:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 1375              	 .loc 1 709 0
 1376 0012 10B4     	 push {r4}
 1377              	.LCFI13:
 1378              	 .cfi_def_cfa_offset 4
 1379              	 .cfi_offset 4,-4
 722:../Libraries/XMCLib/src/xmc_can.c ****   {
 723:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 724:../Libraries/XMCLib/src/xmc_can.c ****   }
 725:../Libraries/XMCLib/src/xmc_can.c ****   else
 726:../Libraries/XMCLib/src/xmc_can.c ****   {
 727:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 728:../Libraries/XMCLib/src/xmc_can.c ****     do
 729:../Libraries/XMCLib/src/xmc_can.c ****     {
 730:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 1380              	 .loc 1 730 0
 1381 0014 0821     	 movs r1,#8
 1382              	.LVL172:
 1383              	.L109:
 1384 0016 0368     	 ldr r3,[r0]
 1385 0018 D961     	 str r1,[r3,#28]
 731:../Libraries/XMCLib/src/xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 1386              	 .loc 1 731 0
 1387 001a 0368     	 ldr r3,[r0]
 1388 001c 9A69     	 ldr r2,[r3,#24]
 1389 001e 12F0005F 	 tst r2,#536870912
 1390 0022 22D1     	 bne .L102
 732:../Libraries/XMCLib/src/xmc_can.c ****       {
 733:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 1391              	 .loc 1 733 0
 1392 0024 C279     	 ldrb r2,[r0,#7]
 1393 0026 6FF34512 	 bfc r2,#5,#1
 1394 002a C271     	 strb r2,[r0,#7]
 734:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 1395              	 .loc 1 734 0
 1396 002c 9A69     	 ldr r2,[r3,#24]
 1397 002e C2F38A42 	 ubfx r2,r2,#18,#11
 1398 0032 4468     	 ldr r4,[r0,#4]
 1399 0034 62F31C04 	 bfi r4,r2,#0,#29
 1400 0038 4460     	 str r4,[r0,#4]
 735:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 1401              	 .loc 1 735 0
 1402 003a DC68     	 ldr r4,[r3,#12]
 1403 003c C4F34074 	 ubfx r4,r4,#29,#1
 1404 0040 C27A     	 ldrb r2,[r0,#11]
 1405 0042 64F34512 	 bfi r2,r4,#5,#1
 1406 0046 C272     	 strb r2,[r0,#11]
 736:../Libraries/XMCLib/src/xmc_can.c ****         if(can_mo->can_ide_mask == 1U)
 1407              	 .loc 1 736 0
 1408 0048 12F0200F 	 tst r2,#32
 1409 004c 07D0     	 beq .L103
 737:../Libraries/XMCLib/src/xmc_can.c ****         {
 738:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 1410              	 .loc 1 738 0
 1411 004e DB68     	 ldr r3,[r3,#12]
 1412 0050 C3F38A43 	 ubfx r3,r3,#18,#11
 1413 0054 8268     	 ldr r2,[r0,#8]
 1414 0056 63F31C02 	 bfi r2,r3,#0,#29
 1415 005a 8260     	 str r2,[r0,#8]
 1416 005c 1AE0     	 b .L104
 1417              	.L103:
 739:../Libraries/XMCLib/src/xmc_can.c ****         }
 740:../Libraries/XMCLib/src/xmc_can.c ****         else
 741:../Libraries/XMCLib/src/xmc_can.c ****         {
 742:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 1418              	 .loc 1 742 0
 1419 005e DA68     	 ldr r2,[r3,#12]
 1420 0060 8368     	 ldr r3,[r0,#8]
 1421 0062 62F31C03 	 bfi r3,r2,#0,#29
 1422 0066 8360     	 str r3,[r0,#8]
 1423 0068 14E0     	 b .L104
 1424              	.L102:
 743:../Libraries/XMCLib/src/xmc_can.c ****         }
 744:../Libraries/XMCLib/src/xmc_can.c ****       }
 745:../Libraries/XMCLib/src/xmc_can.c ****       else
 746:../Libraries/XMCLib/src/xmc_can.c ****       {
 747:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 1425              	 .loc 1 747 0
 1426 006a C279     	 ldrb r2,[r0,#7]
 1427 006c 42F02002 	 orr r2,r2,#32
 1428 0070 C271     	 strb r2,[r0,#7]
 748:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 1429              	 .loc 1 748 0
 1430 0072 9C69     	 ldr r4,[r3,#24]
 1431 0074 4268     	 ldr r2,[r0,#4]
 1432 0076 64F31C02 	 bfi r2,r4,#0,#29
 1433 007a 4260     	 str r2,[r0,#4]
 749:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 1434              	 .loc 1 749 0
 1435 007c DC68     	 ldr r4,[r3,#12]
 1436 007e 8268     	 ldr r2,[r0,#8]
 1437 0080 64F31C02 	 bfi r2,r4,#0,#29
 1438 0084 8260     	 str r2,[r0,#8]
 750:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 1439              	 .loc 1 750 0
 1440 0086 DB68     	 ldr r3,[r3,#12]
 1441 0088 C3F34073 	 ubfx r3,r3,#29,#1
 1442 008c C27A     	 ldrb r2,[r0,#11]
 1443 008e 63F34512 	 bfi r2,r3,#5,#1
 1444 0092 C272     	 strb r2,[r0,#11]
 1445              	.L104:
 751:../Libraries/XMCLib/src/xmc_can.c ****       }
 752:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 1446              	 .loc 1 752 0
 1447 0094 0368     	 ldr r3,[r0]
 1448 0096 1A68     	 ldr r2,[r3]
 1449 0098 C2F30362 	 ubfx r2,r2,#24,#4
 1450 009c 0273     	 strb r2,[r0,#12]
 753:../Libraries/XMCLib/src/xmc_can.c **** 
 754:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 1451              	 .loc 1 754 0
 1452 009e 1A69     	 ldr r2,[r3,#16]
 1453 00a0 0261     	 str r2,[r0,#16]
 755:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 1454              	 .loc 1 755 0
 1455 00a2 5A69     	 ldr r2,[r3,#20]
 1456 00a4 4261     	 str r2,[r0,#20]
 756:../Libraries/XMCLib/src/xmc_can.c **** 
 757:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 1457              	 .loc 1 757 0
 1458 00a6 DA69     	 ldr r2,[r3,#28]
 1459              	.LVL173:
 758:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 1460              	 .loc 1 758 0
 1461 00a8 DB69     	 ldr r3,[r3,#28]
 1462 00aa C3F3C003 	 ubfx r3,r3,#3,#1
 1463              	.LVL174:
 759:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 1464              	 .loc 1 759 0
 1465 00ae 12F0040F 	 tst r2,#4
 1466 00b2 01D0     	 beq .L105
 1467              	 .loc 1 759 0 is_stmt 0 discriminator 1
 1468 00b4 002B     	 cmp r3,#0
 1469 00b6 AED1     	 bne .L109
 1470              	.L105:
 760:../Libraries/XMCLib/src/xmc_can.c **** 
 761:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 1471              	 .loc 1 761 0 is_stmt 1
 1472 00b8 0023     	 movs r3,#0
 1473              	.LVL175:
 1474 00ba 0376     	 strb r3,[r0,#24]
 1475              	.LVL176:
 762:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1476              	 .loc 1 762 0
 1477 00bc 1846     	 mov r0,r3
 1478              	.LVL177:
 1479 00be 03E0     	 b .L101
 1480              	.LVL178:
 1481              	.L107:
 1482              	.LCFI14:
 1483              	 .cfi_def_cfa_offset 0
 1484              	 .cfi_restore 4
 718:../Libraries/XMCLib/src/xmc_can.c ****   }
 1485              	 .loc 1 718 0
 1486 00c0 0320     	 movs r0,#3
 1487              	.LVL179:
 1488 00c2 7047     	 bx lr
 1489              	.LVL180:
 1490              	.L108:
 723:../Libraries/XMCLib/src/xmc_can.c ****   }
 1491              	 .loc 1 723 0
 1492 00c4 0220     	 movs r0,#2
 1493              	.LVL181:
 1494 00c6 7047     	 bx lr
 1495              	.LVL182:
 1496              	.L101:
 1497              	.LCFI15:
 1498              	 .cfi_def_cfa_offset 4
 1499              	 .cfi_offset 4,-4
 763:../Libraries/XMCLib/src/xmc_can.c ****   }
 764:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 765:../Libraries/XMCLib/src/xmc_can.c **** }
 1500              	 .loc 1 765 0
 1501 00c8 5DF8044B 	 ldr r4,[sp],#4
 1502              	.LCFI16:
 1503              	 .cfi_restore 4
 1504              	 .cfi_def_cfa_offset 0
 1505 00cc 7047     	 bx lr
 1506              	 .cfi_endproc
 1507              	.LFE242:
 1509 00ce 00BF     	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 1510              	 .align 2
 1511              	 .global XMC_CAN_NODE_EnableEvent
 1512              	 .thumb
 1513              	 .thumb_func
 1515              	XMC_CAN_NODE_EnableEvent:
 1516              	.LFB243:
 766:../Libraries/XMCLib/src/xmc_can.c **** 
 767:../Libraries/XMCLib/src/xmc_can.c **** /* Function to enable node event */
 768:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 769:../Libraries/XMCLib/src/xmc_can.c **** {
 1517              	 .loc 1 769 0
 1518              	 .cfi_startproc
 1519              	 
 1520              	 
 1521              	 
 1522              	.LVL183:
 770:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 1523              	 .loc 1 770 0
 1524 0000 B1F5800F 	 cmp r1,#4194304
 1525 0004 03D0     	 beq .L114
 771:../Libraries/XMCLib/src/xmc_can.c ****   {
 772:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 1526              	 .loc 1 772 0
 1527 0006 0368     	 ldr r3,[r0]
 1528 0008 1943     	 orrs r1,r1,r3
 1529              	.LVL184:
 1530 000a 0160     	 str r1,[r0]
 1531 000c 7047     	 bx lr
 1532              	.LVL185:
 1533              	.L114:
 773:../Libraries/XMCLib/src/xmc_can.c ****   }
 774:../Libraries/XMCLib/src/xmc_can.c ****   else
 775:../Libraries/XMCLib/src/xmc_can.c ****   {
 776:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 1534              	 .loc 1 776 0
 1535 000e 8369     	 ldr r3,[r0,#24]
 1536 0010 43F48003 	 orr r3,r3,#4194304
 1537 0014 8361     	 str r3,[r0,#24]
 1538 0016 7047     	 bx lr
 1539              	 .cfi_endproc
 1540              	.LFE243:
 1542              	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 1543              	 .align 2
 1544              	 .global XMC_CAN_NODE_DisableEvent
 1545              	 .thumb
 1546              	 .thumb_func
 1548              	XMC_CAN_NODE_DisableEvent:
 1549              	.LFB244:
 777:../Libraries/XMCLib/src/xmc_can.c ****   }
 778:../Libraries/XMCLib/src/xmc_can.c **** }
 779:../Libraries/XMCLib/src/xmc_can.c **** 
 780:../Libraries/XMCLib/src/xmc_can.c **** /* Function to disable node event */
 781:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 782:../Libraries/XMCLib/src/xmc_can.c **** {
 1550              	 .loc 1 782 0
 1551              	 .cfi_startproc
 1552              	 
 1553              	 
 1554              	 
 1555              	.LVL186:
 783:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 1556              	 .loc 1 783 0
 1557 0000 B1F5800F 	 cmp r1,#4194304
 1558 0004 04D0     	 beq .L117
 784:../Libraries/XMCLib/src/xmc_can.c ****   {
 785:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 1559              	 .loc 1 785 0
 1560 0006 0368     	 ldr r3,[r0]
 1561 0008 23EA0101 	 bic r1,r3,r1
 1562              	.LVL187:
 1563 000c 0160     	 str r1,[r0]
 1564 000e 7047     	 bx lr
 1565              	.LVL188:
 1566              	.L117:
 786:../Libraries/XMCLib/src/xmc_can.c ****   }
 787:../Libraries/XMCLib/src/xmc_can.c ****   else
 788:../Libraries/XMCLib/src/xmc_can.c ****   {
 789:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 1567              	 .loc 1 789 0
 1568 0010 8369     	 ldr r3,[r0,#24]
 1569 0012 23F48003 	 bic r3,r3,#4194304
 1570 0016 8361     	 str r3,[r0,#24]
 1571 0018 7047     	 bx lr
 1572              	 .cfi_endproc
 1573              	.LFE244:
 1575 001a 00BF     	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 1576              	 .align 2
 1577              	 .global XMC_CAN_TXFIFO_Transmit
 1578              	 .thumb
 1579              	 .thumb_func
 1581              	XMC_CAN_TXFIFO_Transmit:
 1582              	.LFB245:
 790:../Libraries/XMCLib/src/xmc_can.c ****   }
 791:../Libraries/XMCLib/src/xmc_can.c **** }
 792:../Libraries/XMCLib/src/xmc_can.c **** /* Function to transmit MO from the FIFO */
 793:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 794:../Libraries/XMCLib/src/xmc_can.c **** {
 1583              	 .loc 1 794 0
 1584              	 .cfi_startproc
 1585              	 
 1586              	 
 1587              	 
 1588              	.LVL189:
 795:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 796:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 1589              	 .loc 1 796 0
 1590 0000 0368     	 ldr r3,[r0]
 1591 0002 DA69     	 ldr r2,[r3,#28]
 1592              	.LVL190:
 797:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 1593              	 .loc 1 797 0
 1594 0004 D969     	 ldr r1,[r3,#28]
 1595              	.LVL191:
 798:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 1596              	 .loc 1 798 0
 1597 0006 5B68     	 ldr r3,[r3,#4]
 1598              	.LVL192:
 799:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 800:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 801:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 1599              	 .loc 1 801 0
 1600 0008 12F0200F 	 tst r2,#32
 1601 000c 0ED0     	 beq .L121
 802:../Libraries/XMCLib/src/xmc_can.c ****   {
 803:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 804:../Libraries/XMCLib/src/xmc_can.c ****   }
 805:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 806:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 1602              	 .loc 1 806 0
 1603 000e 11F4807F 	 tst r1,#256
 1604 0012 0DD1     	 bne .L122
 798:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 1605              	 .loc 1 798 0
 1606 0014 C3F30743 	 ubfx r3,r3,#16,#8
 1607              	.LVL193:
 799:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 1608              	 .loc 1 799 0
 1609 0018 03F11073 	 add r3,r3,#37748736
 1610 001c 03F52863 	 add r3,r3,#2688
 1611 0020 5B01     	 lsls r3,r3,#5
 807:../Libraries/XMCLib/src/xmc_can.c ****   {
 808:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 809:../Libraries/XMCLib/src/xmc_can.c ****   }
 810:../Libraries/XMCLib/src/xmc_can.c ****   else
 811:../Libraries/XMCLib/src/xmc_can.c ****   {
 812:../Libraries/XMCLib/src/xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 1612              	 .loc 1 812 0
 1613 0022 4FF0E062 	 mov r2,#117440512
 1614              	.LVL194:
 1615 0026 DA61     	 str r2,[r3,#28]
 1616              	.LVL195:
 813:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1617              	 .loc 1 813 0
 1618 0028 0020     	 movs r0,#0
 1619              	.LVL196:
 1620 002a 7047     	 bx lr
 1621              	.LVL197:
 1622              	.L121:
 803:../Libraries/XMCLib/src/xmc_can.c ****   }
 1623              	 .loc 1 803 0
 1624 002c 0420     	 movs r0,#4
 1625              	.LVL198:
 1626 002e 7047     	 bx lr
 1627              	.LVL199:
 1628              	.L122:
 808:../Libraries/XMCLib/src/xmc_can.c ****   }
 1629              	 .loc 1 808 0
 1630 0030 0220     	 movs r0,#2
 1631              	.LVL200:
 814:../Libraries/XMCLib/src/xmc_can.c ****   }
 815:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 816:../Libraries/XMCLib/src/xmc_can.c **** }
 1632              	 .loc 1 816 0
 1633 0032 7047     	 bx lr
 1634              	 .cfi_endproc
 1635              	.LFE245:
 1637              	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 1638              	 .align 2
 1639              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 1640              	 .thumb
 1641              	 .thumb_func
 1643              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 1644              	.LFB246:
 817:../Libraries/XMCLib/src/xmc_can.c **** 
 818:../Libraries/XMCLib/src/xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 819:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 820:../Libraries/XMCLib/src/xmc_can.c **** {
 1645              	 .loc 1 820 0
 1646              	 .cfi_startproc
 1647              	 
 1648              	 
 1649              	 
 1650              	.LVL201:
 1651 0000 82B0     	 sub sp,sp,#8
 1652              	.LCFI17:
 1653              	 .cfi_def_cfa_offset 8
 1654 0002 0191     	 str r1,[sp,#4]
 821:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1655              	 .loc 1 821 0
 1656 0004 0268     	 ldr r2,[r0]
 1657 0006 1368     	 ldr r3,[r2]
 1658 0008 23F00F03 	 bic r3,r3,#15
 1659 000c 43F00203 	 orr r3,r3,#2
 1660 0010 1360     	 str r3,[r2]
 822:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 823:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 1661              	 .loc 1 823 0
 1662 0012 0268     	 ldr r2,[r0]
 1663 0014 5368     	 ldr r3,[r2,#4]
 824:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 825:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 826:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 1664              	 .loc 1 826 0
 1665 0016 9DF80410 	 ldrb r1,[sp,#4]
 823:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1666              	 .loc 1 823 0
 1667 001a 03F07F43 	 and r3,r3,#-16777216
 825:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 1668              	 .loc 1 825 0
 1669 001e 0B43     	 orrs r3,r3,r1
 827:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1670              	 .loc 1 827 0
 1671 0020 9DF80610 	 ldrb r1,[sp,#6]
 826:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1672              	 .loc 1 826 0
 1673 0024 43EA0143 	 orr r3,r3,r1,lsl#16
 828:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 1674              	 .loc 1 828 0
 1675 0028 9DF80510 	 ldrb r1,[sp,#5]
 827:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1676              	 .loc 1 827 0
 1677 002c 43EA0123 	 orr r3,r3,r1,lsl#8
 823:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1678              	 .loc 1 823 0
 1679 0030 5360     	 str r3,[r2,#4]
 829:../Libraries/XMCLib/src/xmc_can.c **** }
 1680              	 .loc 1 829 0
 1681 0032 02B0     	 add sp,sp,#8
 1682              	.LCFI18:
 1683              	 .cfi_def_cfa_offset 0
 1684              	 
 1685 0034 7047     	 bx lr
 1686              	 .cfi_endproc
 1687              	.LFE246:
 1689 0036 00BF     	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 1690              	 .align 2
 1691              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 1692              	 .thumb
 1693              	 .thumb_func
 1695              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 1696              	.LFB247:
 830:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 831:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 832:../Libraries/XMCLib/src/xmc_can.c **** {
 1697              	 .loc 1 832 0
 1698              	 .cfi_startproc
 1699              	 
 1700              	 
 1701              	 
 1702              	.LVL202:
 1703 0000 82B0     	 sub sp,sp,#8
 1704              	.LCFI19:
 1705              	 .cfi_def_cfa_offset 8
 1706 0002 0191     	 str r1,[sp,#4]
 833:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1707              	 .loc 1 833 0
 1708 0004 0268     	 ldr r2,[r0]
 1709 0006 1368     	 ldr r3,[r2]
 1710 0008 23F00F03 	 bic r3,r3,#15
 1711 000c 43F00103 	 orr r3,r3,#1
 1712 0010 1360     	 str r3,[r2]
 834:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 835:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 1713              	 .loc 1 835 0
 1714 0012 0268     	 ldr r2,[r0]
 1715 0014 5368     	 ldr r3,[r2,#4]
 836:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 837:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 838:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 1716              	 .loc 1 838 0
 1717 0016 9DF80410 	 ldrb r1,[sp,#4]
 835:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1718              	 .loc 1 835 0
 1719 001a 03F07F43 	 and r3,r3,#-16777216
 837:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 1720              	 .loc 1 837 0
 1721 001e 0B43     	 orrs r3,r3,r1
 839:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1722              	 .loc 1 839 0
 1723 0020 9DF80610 	 ldrb r1,[sp,#6]
 838:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1724              	 .loc 1 838 0
 1725 0024 43EA0143 	 orr r3,r3,r1,lsl#16
 840:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 1726              	 .loc 1 840 0
 1727 0028 9DF80510 	 ldrb r1,[sp,#5]
 839:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1728              	 .loc 1 839 0
 1729 002c 43EA0123 	 orr r3,r3,r1,lsl#8
 835:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1730              	 .loc 1 835 0
 1731 0030 5360     	 str r3,[r2,#4]
 841:../Libraries/XMCLib/src/xmc_can.c **** }
 1732              	 .loc 1 841 0
 1733 0032 02B0     	 add sp,sp,#8
 1734              	.LCFI20:
 1735              	 .cfi_def_cfa_offset 0
 1736              	 
 1737 0034 7047     	 bx lr
 1738              	 .cfi_endproc
 1739              	.LFE247:
 1741 0036 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 1742              	 .align 2
 1743              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 1744              	 .thumb
 1745              	 .thumb_func
 1747              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 1748              	.LFB248:
 842:../Libraries/XMCLib/src/xmc_can.c **** 
 843:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 844:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_
 845:../Libraries/XMCLib/src/xmc_can.c **** {
 1749              	 .loc 1 845 0
 1750              	 .cfi_startproc
 1751              	 
 1752              	 
 1753              	 
 1754              	.LVL203:
 1755 0000 82B0     	 sub sp,sp,#8
 1756              	.LCFI21:
 1757              	 .cfi_def_cfa_offset 8
 1758 0002 0191     	 str r1,[sp,#4]
 846:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1759              	 .loc 1 846 0
 1760 0004 0268     	 ldr r2,[r0]
 1761 0006 1368     	 ldr r3,[r2]
 1762 0008 23F00F03 	 bic r3,r3,#15
 1763 000c 43F00303 	 orr r3,r3,#3
 1764 0010 1360     	 str r3,[r2]
 847:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 848:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 1765              	 .loc 1 848 0
 1766 0012 0268     	 ldr r2,[r0]
 1767 0014 5368     	 ldr r3,[r2,#4]
 849:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1768              	 .loc 1 849 0
 1769 0016 9DF80610 	 ldrb r1,[sp,#6]
 848:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1770              	 .loc 1 848 0
 1771 001a 23F47F03 	 bic r3,r3,#16711680
 1772 001e 43EA0143 	 orr r3,r3,r1,lsl#16
 1773 0022 5360     	 str r3,[r2,#4]
 850:../Libraries/XMCLib/src/xmc_can.c **** 
 851:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk|
 1774              	 .loc 1 851 0
 1775 0024 0368     	 ldr r3,[r0]
 1776 0026 024A     	 ldr r2,.L129
 1777 0028 DA61     	 str r2,[r3,#28]
 852:../Libraries/XMCLib/src/xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 853:../Libraries/XMCLib/src/xmc_can.c **** }
 1778              	 .loc 1 853 0
 1779 002a 02B0     	 add sp,sp,#8
 1780              	.LCFI22:
 1781              	 .cfi_def_cfa_offset 0
 1782              	 
 1783 002c 7047     	 bx lr
 1784              	.L130:
 1785 002e 00BF     	 .align 2
 1786              	.L129:
 1787 0030 00040002 	 .word 33555456
 1788              	 .cfi_endproc
 1789              	.LFE248:
 1791              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 1792              	 .align 2
 1793              	 .global XMC_CAN_GATEWAY_InitSourceObject
 1794              	 .thumb
 1795              	 .thumb_func
 1797              	XMC_CAN_GATEWAY_InitSourceObject:
 1798              	.LFB249:
 854:../Libraries/XMCLib/src/xmc_can.c **** 
 855:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 856:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG
 857:../Libraries/XMCLib/src/xmc_can.c **** {
 1799              	 .loc 1 857 0
 1800              	 .cfi_startproc
 1801              	 
 1802              	 
 1803              	 
 1804              	.LVL204:
 1805 0000 82B0     	 sub sp,sp,#8
 1806              	.LCFI23:
 1807              	 .cfi_def_cfa_offset 8
 1808 0002 02AB     	 add r3,sp,#8
 1809 0004 03E90600 	 stmdb r3,{r1,r2}
 858:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 1810              	 .loc 1 858 0
 1811 0008 0168     	 ldr r1,[r0]
 859:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 1812              	 .loc 1 859 0
 1813 000a 9DF80330 	 ldrb r3,[sp,#3]
 1814 000e 1B02     	 lsls r3,r3,#8
 1815 0010 03F48072 	 and r2,r3,#256
 860:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 1816              	 .loc 1 860 0
 1817 0014 9DF80530 	 ldrb r3,[sp,#5]
 1818 0018 9B02     	 lsls r3,r3,#10
 1819 001a 03F48063 	 and r3,r3,#1024
 859:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 1820              	 .loc 1 859 0
 1821 001e 1343     	 orrs r3,r3,r2
 1822 0020 43F00403 	 orr r3,r3,#4
 861:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 1823              	 .loc 1 861 0
 1824 0024 9DF80420 	 ldrb r2,[sp,#4]
 1825 0028 5202     	 lsls r2,r2,#9
 1826 002a 02F40072 	 and r2,r2,#512
 1827 002e 1343     	 orrs r3,r3,r2
 862:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 1828              	 .loc 1 862 0
 1829 0030 9DF80620 	 ldrb r2,[sp,#6]
 1830 0034 D202     	 lsls r2,r2,#11
 1831 0036 02F40062 	 and r2,r2,#2048
 861:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 1832              	 .loc 1 861 0
 1833 003a 1343     	 orrs r3,r3,r2
 858:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 1834              	 .loc 1 858 0
 1835 003c 0B60     	 str r3,[r1]
 863:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 1836              	 .loc 1 863 0
 1837 003e 0168     	 ldr r1,[r0]
 864:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (ui
 1838              	 .loc 1 864 0
 1839 0040 9DF80220 	 ldrb r2,[sp,#2]
 865:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uin
 1840              	 .loc 1 865 0
 1841 0044 9DF80130 	 ldrb r3,[sp,#1]
 1842 0048 1B02     	 lsls r3,r3,#8
 1843 004a 43EA0243 	 orr r3,r3,r2,lsl#16
 863:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 1844              	 .loc 1 863 0
 1845 004e 9DF80020 	 ldrb r2,[sp]
 1846 0052 1343     	 orrs r3,r3,r2
 1847 0054 4B60     	 str r3,[r1,#4]
 866:../Libraries/XMCLib/src/xmc_can.c **** }
 1848              	 .loc 1 866 0
 1849 0056 02B0     	 add sp,sp,#8
 1850              	.LCFI24:
 1851              	 .cfi_def_cfa_offset 0
 1852              	 
 1853 0058 7047     	 bx lr
 1854              	 .cfi_endproc
 1855              	.LFE249:
 1857 005a 00BF     	 .text
 1858              	.Letext0:
 1859              	 .file 3 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1860              	 .file 4 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1861              	 .file 5 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1862              	 .file 6 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc4_scu.h"
 1863              	 .file 7 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include/core_cm4.h"
 1864              	 .file 8 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 1865              	 .file 9 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc_scu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:19     .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 $t
    {standard input}:24     .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 XMC_CAN_NODE_NominalBitTimeConfigureEx
    {standard input}:221    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:000000c4 $d
    {standard input}:226    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:231    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:459    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000100 $d
    {standard input}:467    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:472    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:516    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:521    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:545    .text.XMC_CAN_Disable:00000010 $d
    {standard input}:550    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:555    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:588    .text.XMC_CAN_Enable:0000001c $d
    {standard input}:593    .text.XMC_CAN_Init:00000000 $t
    {standard input}:598    .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:707    .text.XMC_CAN_SetBaudrateClockSource:00000000 $t
    {standard input}:712    .text.XMC_CAN_SetBaudrateClockSource:00000000 XMC_CAN_SetBaudrateClockSource
    {standard input}:725    .text.XMC_CAN_GetBaudrateClockSource:00000000 $t
    {standard input}:730    .text.XMC_CAN_GetBaudrateClockSource:00000000 XMC_CAN_GetBaudrateClockSource
    {standard input}:746    .text.XMC_CAN_GetBaudrateClockFrequency:00000000 $t
    {standard input}:751    .text.XMC_CAN_GetBaudrateClockFrequency:00000000 XMC_CAN_GetBaudrateClockFrequency
    {standard input}:772    .text.XMC_CAN_InitEx:00000000 $t
    {standard input}:777    .text.XMC_CAN_InitEx:00000000 XMC_CAN_InitEx
    {standard input}:847    .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:852    .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:903    .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:908    .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:935    .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:940    .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:976    .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:981    .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:1032   .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:1037   .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:1091   .text.XMC_CAN_MO_UpdateData:0000003c $d
    {standard input}:1096   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1101   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:1217   .text.XMC_CAN_MO_Config:00000094 $d
    {standard input}:1223   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:1228   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:1275   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:1280   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:1349   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:1354   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:1510   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:1515   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:1543   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:1548   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:1576   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:1581   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:1638   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:1643   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:1690   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:1695   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:1742   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:1747   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:1787   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000030 $d
    {standard input}:1792   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:1797   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4002528de975c0fcce6c551c15d87b8c
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.48aa5dfcc4adf36b323cf9dbe32c793a
                           .group:00000000 wm4.core_cm4.h.174.824e0532337e90525b645435b961cc25
                           .group:00000000 wm4.mpu_armv7.h.32.7da498ea6f18d3b74a42202d7c1d394e
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:00000000 wm4.xmc_common.h.92.bbcf261068c7c74d7033b80d0dbf155c
                           .group:00000000 wm4.xmc4_scu.h.83.0449f5880ac071460ec1a8072311ea51
                           .group:00000000 wm4.xmc_can_map.h.53.acf344f754863d08777806bac8258159
                           .group:00000000 wm4.xmc_can.h.165.b8cbf26258050f21ae0d7187b2c799e4

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_CLOCK_GetPeripheralClockFrequency
