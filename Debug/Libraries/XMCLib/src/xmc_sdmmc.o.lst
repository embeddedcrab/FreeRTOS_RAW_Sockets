   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "xmc_sdmmc.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.XMC_SDMMC_GetPowerStatus,"ax",%progbits
  19              	 .align 2
  20              	 .global XMC_SDMMC_GetPowerStatus
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_SDMMC_GetPowerStatus:
  25              	.LFB211:
  26              	 .file 1 "../Libraries/XMCLib/src/xmc_sdmmc.c"
   1:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
   2:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
   3:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @file xmc_sdmmc.c
   4:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @date 2016-07-11
   5:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
   6:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_sdmmc.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  10:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 
  19:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 
  22:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_sdmmc.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  37:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  40:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-02-20:
  41:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Initial <br>
  42:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed GetDriverVersion API <br>
  43:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  44:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-06-20:
  45:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed definition of GetDriverVersion API <br>
  46:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  47:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-03-14:
  48:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Values are directly assigned to the int status registers <br>
  49:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  50:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-07-11:
  51:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - XMC_SDMMC_SetDataTransferMode() shall not invoke SetDateLineTimeout() <br>
  52:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  53:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @endcond
  54:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  55:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  56:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  57:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup XMClib
  58:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  59:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  60:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  61:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  62:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup SDMMC
  63:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @brief SDMMC driver
  64:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  65:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  66:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  67:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  68:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * HEADER FILES
  69:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  70:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  71:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_sdmmc.h"
  72:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  73:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  74:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * The SDMMC peripheral is only available on the
  75:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMC4500. The SDMMC definition can be found in
  76:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * the XMC4500.h (device header file).
  77:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  78:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined (SDMMC)
  79:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_scu.h"
  80:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  81:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  82:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * MACROS
  83:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  84:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  85:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  86:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC error events <br>
  87:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  88:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
  89:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  90:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_ERROR_EVENT(e)\
  91:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_TIMEOUT_ERR)     ||\
  92:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_CRC_ERR)         ||\
  93:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_END_BIT_ERR)     ||\
  94:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_IND_ERR)         ||\
  95:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_TIMEOUT_ERR)    ||\
  96:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_CRC_ERR)        ||\
  97:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_END_BIT_ERR)    ||\
  98:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CURRENT_LIMIT_ERR)   ||\
  99:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_ACMD_ERR)            ||\
 100:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TARGET_RESP_ERR))
 101:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 102:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 103:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC normal events <br>
 104:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 105:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 106:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 107:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_NORMAL_EVENT(e)\
 108:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_COMPLETE)        ||\
 109:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TX_COMPLETE)         ||\
 110:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BLOCK_GAP_EVENT)     ||\
 111:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_WRITE_READY)  ||\
 112:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_READ_READY)   ||\
 113:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INS)            ||\
 114:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_REMOVAL)        ||\
 115:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INT))
 116:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 117:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 118:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for both normal and error events <br>
 119:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 120:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 121:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 122:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_EVENT(e)\
 123:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((XMC_SDMMC_CHECK_NORMAL_EVENT(e))    ||\
 124:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (XMC_SDMMC_CHECK_ERROR_EVENT(e)))
 125:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 126:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 127:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC wakeup events <br>
 128:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 129:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 130:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 131:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_WAKEUP_EVENT(w)\
 132:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((w == XMC_SDMMC_WAKEUP_EN_CARD_INT)  ||\
 133:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_INS)  ||\
 134:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_REM))
 135:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 136:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 137:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC software reset modes <br>
 138:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 139:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 140:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 141:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_SW_RESET_MODE(m)\
 142:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_SW_RESET_ALL)        ||\
 143:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_CMD_LINE)     ||\
 144:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_DAT_LINE))
 145:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 146:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 147:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC transfer modes <br>
 148:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 149:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 150:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 151:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_TRANSFER_MODE(m)\
 152:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)    ||\
 153:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_INFINITE)  ||\
 154:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_MULTIPLE)  ||\
 155:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_STOP_MULTIPLE))
 156:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 157:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 158:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
 159:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * API IMPLEMENTATION
 160:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
 161:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
 162:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get power status of the SDMMC peripheral */
 163:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetPowerStatus(XMC_SDMMC_t *const sdmmc)
 164:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  27              	 .loc 1 164 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32              	.LVL0:
 165:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetPowerStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
 166:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 167:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return (bool)(sdmmc->POWER_CTRL & SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
  33              	 .loc 1 167 0
  34 0000 90F82900 	 ldrb r0,[r0,#41]
  35              	.LVL1:
 168:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
  36              	 .loc 1 168 0
  37 0004 00F00100 	 and r0,r0,#1
  38 0008 7047     	 bx lr
  39              	 .cfi_endproc
  40              	.LFE211:
  42 000a 00BF     	 .section .text.XMC_SDMMC_Enable,"ax",%progbits
  43              	 .align 2
  44              	 .global XMC_SDMMC_Enable
  45              	 .thumb
  46              	 .thumb_func
  48              	XMC_SDMMC_Enable:
  49              	.LFB212:
 169:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 170:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 171:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * De-assert the peripheral reset. The SDMMC peripheral
 172:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * needs to be initialized
 173:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 174:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc)
 175:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  50              	 .loc 1 175 0
  51              	 .cfi_startproc
  52              	 
  53              	 
  54              	.LVL2:
  55 0000 08B5     	 push {r3,lr}
  56              	.LCFI0:
  57              	 .cfi_def_cfa_offset 8
  58              	 .cfi_offset 3,-8
  59              	 .cfi_offset 14,-4
 176:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Enable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 177:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 178:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 179:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 180:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 181:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 182:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
  60              	 .loc 1 182 0
  61 0002 0248     	 ldr r0,.L4
  62              	.LVL3:
  63 0004 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
  64              	.LVL4:
  65 0008 08BD     	 pop {r3,pc}
  66              	.L5:
  67 000a 00BF     	 .align 2
  68              	.L4:
  69 000c 40000010 	 .word 268435520
  70              	 .cfi_endproc
  71              	.LFE212:
  73              	 .section .text.XMC_SDMMC_Disable,"ax",%progbits
  74              	 .align 2
  75              	 .global XMC_SDMMC_Disable
  76              	 .thumb
  77              	 .thumb_func
  79              	XMC_SDMMC_Disable:
  80              	.LFB213:
 183:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 184:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 185:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 186:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Assert the peripheral reset */
 187:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Disable(XMC_SDMMC_t *const sdmmc)
 188:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  81              	 .loc 1 188 0
  82              	 .cfi_startproc
  83              	 
  84              	 
  85              	.LVL5:
  86 0000 08B5     	 push {r3,lr}
  87              	.LCFI1:
  88              	 .cfi_def_cfa_offset 8
  89              	 .cfi_offset 3,-8
  90              	 .cfi_offset 14,-4
 189:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Disable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 190:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 191:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 192:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
  91              	 .loc 1 192 0
  92 0002 0248     	 ldr r0,.L8
  93              	.LVL6:
  94 0004 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
  95              	.LVL7:
  96 0008 08BD     	 pop {r3,pc}
  97              	.L9:
  98 000a 00BF     	 .align 2
  99              	.L8:
 100 000c 40000010 	 .word 268435520
 101              	 .cfi_endproc
 102              	.LFE213:
 104              	 .section .text.XMC_SDMMC_Init,"ax",%progbits
 105              	 .align 2
 106              	 .global XMC_SDMMC_Init
 107              	 .thumb
 108              	 .thumb_func
 110              	XMC_SDMMC_Init:
 111              	.LFB214:
 193:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 194:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 195:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 196:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 197:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 198:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 199:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Initialize SDMMC peripheral */
 200:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_Init(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_CONFIG_t *config)
 201:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 112              	 .loc 1 201 0
 113              	 .cfi_startproc
 114              	 
 115              	 
 116              	.LVL8:
 117 0000 38B5     	 push {r3,r4,r5,lr}
 118              	.LCFI2:
 119              	 .cfi_def_cfa_offset 16
 120              	 .cfi_offset 3,-16
 121              	 .cfi_offset 4,-12
 122              	 .cfi_offset 5,-8
 123              	 .cfi_offset 14,-4
 124 0002 0446     	 mov r4,r0
 125 0004 0D46     	 mov r5,r1
 126              	.LVL9:
 127              	.LBB4:
 128              	.LBB5:
 182:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 129              	 .loc 1 182 0
 130 0006 0A48     	 ldr r0,.L12
 131              	.LVL10:
 132 0008 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 133              	.LVL11:
 134              	.LBE5:
 135              	.LBE4:
 202:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 203:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid clock divider value", XMC_SDMMC_CHECK_SDCLK_FREQ(config->cloc
 204:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid bus width", XMC_SDMMC_CHECK_DATA_LINES(config->bus_width));
 205:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 206:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Enable SDMMC peripheral */
 207:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_Enable(sdmmc);
 208:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 209:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Write internal clock divider register */
 210:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)config->clock_divider << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SE
 136              	 .loc 1 210 0
 137 000c A38D     	 ldrh r3,[r4,#44]
 138 000e 9BB2     	 uxth r3,r3
 139 0010 6A78     	 ldrb r2,[r5,#1]
 140 0012 43EA0223 	 orr r3,r3,r2,lsl#8
 141 0016 A385     	 strh r3,[r4,#44]
 211:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 212:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set bus width */
 213:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->HOST_CTRL = (uint8_t)((sdmmc->HOST_CTRL & (uint8_t)~SDMMC_HOST_CTRL_DATA_TX_WIDTH_Msk) |
 142              	 .loc 1 213 0
 143 0018 94F82830 	 ldrb r3,[r4,#40]
 214:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 144              	 .loc 1 214 0
 145 001c 2A78     	 ldrb r2,[r5]
 213:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 146              	 .loc 1 213 0
 147 001e 03F0FD03 	 and r3,r3,#253
 148 0022 43EA4203 	 orr r3,r3,r2,lsl#1
 149 0026 DBB2     	 uxtb r3,r3
 150 0028 84F82830 	 strb r3,[r4,#40]
 215:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 216:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 217:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 151              	 .loc 1 217 0
 152 002c 0020     	 movs r0,#0
 153 002e 38BD     	 pop {r3,r4,r5,pc}
 154              	.LVL12:
 155              	.L13:
 156              	 .align 2
 157              	.L12:
 158 0030 40000010 	 .word 268435520
 159              	 .cfi_endproc
 160              	.LFE214:
 162              	 .section .text.XMC_SDMMC_EnableEventStatus,"ax",%progbits
 163              	 .align 2
 164              	 .global XMC_SDMMC_EnableEventStatus
 165              	 .thumb
 166              	 .thumb_func
 168              	XMC_SDMMC_EnableEventStatus:
 169              	.LFB215:
 218:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 219:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable event status */
 220:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 221:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 170              	 .loc 1 221 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174              	 
 175              	.LVL13:
 222:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 223:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 224:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set INT status enable register */
 225:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM |= (uint16_t)event;
 176              	 .loc 1 225 0
 177 0000 838E     	 ldrh r3,[r0,#52]
 178 0002 0B43     	 orrs r3,r3,r1
 179 0004 9BB2     	 uxth r3,r3
 180 0006 8386     	 strh r3,[r0,#52]
 226:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR |= (uint16_t)(event >> 16U);
 181              	 .loc 1 226 0
 182 0008 C38E     	 ldrh r3,[r0,#54]
 183 000a 9BB2     	 uxth r3,r3
 184 000c 43EA1141 	 orr r1,r3,r1,lsr#16
 185              	.LVL14:
 186 0010 C186     	 strh r1,[r0,#54]
 187 0012 7047     	 bx lr
 188              	 .cfi_endproc
 189              	.LFE215:
 191              	 .section .text.XMC_SDMMC_DisableEventStatus,"ax",%progbits
 192              	 .align 2
 193              	 .global XMC_SDMMC_DisableEventStatus
 194              	 .thumb
 195              	 .thumb_func
 197              	XMC_SDMMC_DisableEventStatus:
 198              	.LFB216:
 227:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 228:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 229:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable event status */
 230:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 231:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 199              	 .loc 1 231 0
 200              	 .cfi_startproc
 201              	 
 202              	 
 203              	 
 204              	.LVL15:
 232:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
 233:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 234:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT status enable register */
 235:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM &= (uint16_t)~event;
 205              	 .loc 1 235 0
 206 0000 838E     	 ldrh r3,[r0,#52]
 207 0002 9BB2     	 uxth r3,r3
 208 0004 23EA0103 	 bic r3,r3,r1
 209 0008 8386     	 strh r3,[r0,#52]
 236:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR &= (uint16_t)~(event >> 16U);
 210              	 .loc 1 236 0
 211 000a C38E     	 ldrh r3,[r0,#54]
 212 000c 9BB2     	 uxth r3,r3
 213 000e 23EA1141 	 bic r1,r3,r1,lsr#16
 214              	.LVL16:
 215 0012 C186     	 strh r1,[r0,#54]
 216 0014 7047     	 bx lr
 217              	 .cfi_endproc
 218              	.LFE216:
 220 0016 00BF     	 .section .text.XMC_SDMMC_EnableEvent,"ax",%progbits
 221              	 .align 2
 222              	 .global XMC_SDMMC_EnableEvent
 223              	 .thumb
 224              	 .thumb_func
 226              	XMC_SDMMC_EnableEvent:
 227              	.LFB217:
 237:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 238:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 239:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable SDMMC event */
 240:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 241:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 228              	 .loc 1 241 0
 229              	 .cfi_startproc
 230              	 
 231              	 
 232              	.LVL17:
 233 0000 38B5     	 push {r3,r4,r5,lr}
 234              	.LCFI3:
 235              	 .cfi_def_cfa_offset 16
 236              	 .cfi_offset 3,-16
 237              	 .cfi_offset 4,-12
 238              	 .cfi_offset 5,-8
 239              	 .cfi_offset 14,-4
 240 0002 0446     	 mov r4,r0
 241 0004 0D46     	 mov r5,r1
 242:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 243:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 244:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_EnableEventStatus(sdmmc, event);
 242              	 .loc 1 244 0
 243 0006 FFF7FEFF 	 bl XMC_SDMMC_EnableEventStatus
 244              	.LVL18:
 245:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 246:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM |= (uint16_t)event;
 245              	 .loc 1 246 0
 246 000a 238F     	 ldrh r3,[r4,#56]
 247 000c 2B43     	 orrs r3,r3,r5
 248 000e 9BB2     	 uxth r3,r3
 249 0010 2387     	 strh r3,[r4,#56]
 247:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR |= (uint16_t)(event >> 16U);
 250              	 .loc 1 247 0
 251 0012 618F     	 ldrh r1,[r4,#58]
 252 0014 89B2     	 uxth r1,r1
 253 0016 41EA1541 	 orr r1,r1,r5,lsr#16
 254 001a 6187     	 strh r1,[r4,#58]
 255 001c 38BD     	 pop {r3,r4,r5,pc}
 256              	 .cfi_endproc
 257              	.LFE217:
 259 001e 00BF     	 .section .text.XMC_SDMMC_DisableEvent,"ax",%progbits
 260              	 .align 2
 261              	 .global XMC_SDMMC_DisableEvent
 262              	 .thumb
 263              	 .thumb_func
 265              	XMC_SDMMC_DisableEvent:
 266              	.LFB218:
 248:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 249:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 250:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable SDMMC event without disabling event status */
 251:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 252:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 267              	 .loc 1 252 0
 268              	 .cfi_startproc
 269              	 
 270              	 
 271              	 
 272              	.LVL19:
 253:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 254:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 255:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT signal enable register */
 256:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM &= (uint16_t)~event;
 273              	 .loc 1 256 0
 274 0000 038F     	 ldrh r3,[r0,#56]
 275 0002 9BB2     	 uxth r3,r3
 276 0004 23EA0103 	 bic r3,r3,r1
 277 0008 0387     	 strh r3,[r0,#56]
 257:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR &= (uint16_t)~(event >> 16U);
 278              	 .loc 1 257 0
 279 000a 438F     	 ldrh r3,[r0,#58]
 280 000c 9BB2     	 uxth r3,r3
 281 000e 23EA1141 	 bic r1,r3,r1,lsr#16
 282              	.LVL20:
 283 0012 4187     	 strh r1,[r0,#58]
 284 0014 7047     	 bx lr
 285              	 .cfi_endproc
 286              	.LFE218:
 288 0016 00BF     	 .section .text.XMC_SDMMC_ClearEvent,"ax",%progbits
 289              	 .align 2
 290              	 .global XMC_SDMMC_ClearEvent
 291              	 .thumb
 292              	 .thumb_func
 294              	XMC_SDMMC_ClearEvent:
 295              	.LFB219:
 258:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 259:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 260:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Clear SDMMC event(s) */
 261:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 262:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 296              	 .loc 1 262 0
 297              	 .cfi_startproc
 298              	 
 299              	 
 300              	 
 301              	.LVL21:
 263:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 264:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid bit-field", !(event & XMC_SDMMC_TARGET_RESP_ERR));
 265:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 266:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_NORM = (uint16_t)event;
 302              	 .loc 1 266 0
 303 0000 8BB2     	 uxth r3,r1
 304 0002 0386     	 strh r3,[r0,#48]
 267:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_ERR = (uint16_t)(event >> 16U);
 305              	 .loc 1 267 0
 306 0004 090C     	 lsrs r1,r1,#16
 307              	.LVL22:
 308 0006 4186     	 strh r1,[r0,#50]
 309 0008 7047     	 bx lr
 310              	 .cfi_endproc
 311              	.LFE219:
 313 000a 00BF     	 .section .text.XMC_SDMMC_GetEvent,"ax",%progbits
 314              	 .align 2
 315              	 .global XMC_SDMMC_GetEvent
 316              	 .thumb
 317              	 .thumb_func
 319              	XMC_SDMMC_GetEvent:
 320              	.LFB220:
 268:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 269:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 270:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get the status of an SDMMC event */
 271:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event)
 272:../Libraries/XMCLib/src/xmc_sdmmc.c **** {  
 321              	 .loc 1 272 0
 322              	 .cfi_startproc
 323              	 
 324              	 
 325              	 
 326              	.LVL23:
 273:../Libraries/XMCLib/src/xmc_sdmmc.c ****   bool status;
 274:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 275:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 276:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid SDMMC event", XMC_SDMMC_CHECK_EVENT(event));
 277:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 278:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (event < XMC_SDMMC_CMD_TIMEOUT_ERR)
 327              	 .loc 1 278 0
 328 0000 B1F5803F 	 cmp r1,#65536
 329 0004 06D2     	 bcs .L21
 279:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 280:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_NORM & (uint16_t)event);
 330              	 .loc 1 280 0
 331 0006 038E     	 ldrh r3,[r0,#48]
 332 0008 9BB2     	 uxth r3,r3
 333 000a 0B42     	 tst r3,r1
 334 000c 14BF     	 ite ne
 335 000e 0120     	 movne r0,#1
 336              	.LVL24:
 337 0010 0020     	 moveq r0,#0
 338              	.LVL25:
 339 0012 7047     	 bx lr
 340              	.LVL26:
 341              	.L21:
 281:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 282:../Libraries/XMCLib/src/xmc_sdmmc.c ****   else
 283:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 284:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_ERR & (uint16_t)((uint32_t)event >> 16U));
 342              	 .loc 1 284 0
 343 0014 438E     	 ldrh r3,[r0,#50]
 344 0016 13EA1143 	 ands r3,r3,r1,lsr#16
 345 001a 14BF     	 ite ne
 346 001c 0120     	 movne r0,#1
 347              	.LVL27:
 348 001e 0020     	 moveq r0,#0
 349              	.LVL28:
 285:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 286:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 287:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return status;
 288:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 350              	 .loc 1 288 0
 351 0020 7047     	 bx lr
 352              	 .cfi_endproc
 353              	.LFE220:
 355 0022 00BF     	 .section .text.XMC_SDMMC_GetR2Response,"ax",%progbits
 356              	 .align 2
 357              	 .global XMC_SDMMC_GetR2Response
 358              	 .thumb
 359              	 .thumb_func
 361              	XMC_SDMMC_GetR2Response:
 362              	.LFB221:
 289:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 290:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Read R2 response (CID, CSD register) */
 291:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_GetR2Response(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_RESPONSE_t *const response)
 292:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 363              	 .loc 1 292 0
 364              	 .cfi_startproc
 365              	 
 366              	 
 367              	 
 368              	.LVL29:
 293:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetR2Response: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 294:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 295:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_0 = sdmmc->RESPONSE[0];
 369              	 .loc 1 295 0
 370 0000 0369     	 ldr r3,[r0,#16]
 371 0002 0B60     	 str r3,[r1]
 296:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_2 = sdmmc->RESPONSE[1];
 372              	 .loc 1 296 0
 373 0004 4369     	 ldr r3,[r0,#20]
 374 0006 4B60     	 str r3,[r1,#4]
 297:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_4 = sdmmc->RESPONSE[2];
 375              	 .loc 1 297 0
 376 0008 8369     	 ldr r3,[r0,#24]
 377 000a 8B60     	 str r3,[r1,#8]
 298:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_6 = sdmmc->RESPONSE[3];
 378              	 .loc 1 298 0
 379 000c C369     	 ldr r3,[r0,#28]
 380 000e CB60     	 str r3,[r1,#12]
 381 0010 7047     	 bx lr
 382              	 .cfi_endproc
 383              	.LFE221:
 385 0012 00BF     	 .section .text.XMC_SDMMC_SendCommand,"ax",%progbits
 386              	 .align 2
 387              	 .global XMC_SDMMC_SendCommand
 388              	 .thumb
 389              	 .thumb_func
 391              	XMC_SDMMC_SendCommand:
 392              	.LFB222:
 299:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 300:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 301:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Send SDMMC command */
 302:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *cmd, 
 303:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 393              	 .loc 1 303 0
 394              	 .cfi_startproc
 395              	 
 396              	 
 397              	 
 398              	.LVL30:
 304:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SendCommand: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 305:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 306:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->ARGUMENT1 = arg;
 399              	 .loc 1 306 0
 400 0000 8260     	 str r2,[r0,#8]
 307:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->COMMAND = (uint16_t)(*(uint16_t *)cmd);
 401              	 .loc 1 307 0
 402 0002 0B88     	 ldrh r3,[r1]
 403 0004 C381     	 strh r3,[r0,#14]
 308:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 309:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 310:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 404              	 .loc 1 310 0
 405 0006 0020     	 movs r0,#0
 406              	.LVL31:
 407 0008 7047     	 bx lr
 408              	 .cfi_endproc
 409              	.LFE222:
 411 000a 00BF     	 .section .text.XMC_SDMMC_SetDataTransferMode,"ax",%progbits
 412              	 .align 2
 413              	 .global XMC_SDMMC_SetDataTransferMode
 414              	 .thumb
 415              	 .thumb_func
 417              	XMC_SDMMC_SetDataTransferMode:
 418              	.LFB223:
 311:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 312:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Set data transfer mode */
 313:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const respo
 314:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 419              	 .loc 1 314 0
 420              	 .cfi_startproc
 421              	 
 422              	 
 423              	 
 424              	.LVL32:
 315:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sd
 316:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid transfer type", XMC_SDMMC_CHECK_TRANSFER_MODE(
 317:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 318:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Block size */
 319:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_SIZE = (uint16_t)(response->block_size);
 425              	 .loc 1 319 0
 426 0000 0B88     	 ldrh r3,[r1]
 427 0002 8380     	 strh r3,[r0,#4]
 320:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 321:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Number of blocks */
 322:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);
 428              	 .loc 1 322 0
 429 0004 8B88     	 ldrh r3,[r1,#4]
 430 0006 C380     	 strh r3,[r0,#6]
 323:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 324:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Type of data transfer: single, infinite, multiple or stop multiple */
 325:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BL
 431              	 .loc 1 325 0
 432 0008 8389     	 ldrh r3,[r0,#12]
 433 000a 9BB2     	 uxth r3,r3
 434 000c 23F02003 	 bic r3,r3,#32
 435 0010 0A7A     	 ldrb r2,[r1,#8]
 436 0012 1343     	 orrs r3,r3,r2
 437 0014 8381     	 strh r3,[r0,#12]
 326:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 327:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 328:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /*
 329:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * Clear block count enable bit; that's only valid for
 330:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * a multi-block transfer
 331:../Libraries/XMCLib/src/xmc_sdmmc.c ****    */
 332:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (response->type == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)
 438              	 .loc 1 332 0
 439 0016 0B7A     	 ldrb r3,[r1,#8]
 440 0018 2BB9     	 cbnz r3,.L26
 333:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 334:../Libraries/XMCLib/src/xmc_sdmmc.c ****     sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
 441              	 .loc 1 334 0
 442 001a 8389     	 ldrh r3,[r0,#12]
 443 001c 23F00203 	 bic r3,r3,#2
 444 0020 1B04     	 lsls r3,r3,#16
 445 0022 1B0C     	 lsrs r3,r3,#16
 446 0024 8381     	 strh r3,[r0,#12]
 447              	.L26:
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 336:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 337:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Auto CMD configuration */
 338:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_
 448              	 .loc 1 338 0
 449 0026 8389     	 ldrh r3,[r0,#12]
 450 0028 9BB2     	 uxth r3,r3
 339:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 451              	 .loc 1 339 0
 452 002a 4A7A     	 ldrb r2,[r1,#9]
 338:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 453              	 .loc 1 338 0
 454 002c 23F00C03 	 bic r3,r3,#12
 455 0030 43EA8203 	 orr r3,r3,r2,lsl#2
 456 0034 8381     	 strh r3,[r0,#12]
 457 0036 7047     	 bx lr
 458              	 .cfi_endproc
 459              	.LFE223:
 461              	 .text
 462              	.Letext0:
 463              	 .file 2 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 464              	 .file 3 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 465              	 .file 4 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc_sdmmc.h"
 466              	 .file 5 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc4_scu.h"
 467              	 .file 6 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include/core_cm4.h"
 468              	 .file 7 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_sdmmc.c
    {standard input}:19     .text.XMC_SDMMC_GetPowerStatus:00000000 $t
    {standard input}:24     .text.XMC_SDMMC_GetPowerStatus:00000000 XMC_SDMMC_GetPowerStatus
    {standard input}:43     .text.XMC_SDMMC_Enable:00000000 $t
    {standard input}:48     .text.XMC_SDMMC_Enable:00000000 XMC_SDMMC_Enable
    {standard input}:69     .text.XMC_SDMMC_Enable:0000000c $d
    {standard input}:74     .text.XMC_SDMMC_Disable:00000000 $t
    {standard input}:79     .text.XMC_SDMMC_Disable:00000000 XMC_SDMMC_Disable
    {standard input}:100    .text.XMC_SDMMC_Disable:0000000c $d
    {standard input}:105    .text.XMC_SDMMC_Init:00000000 $t
    {standard input}:110    .text.XMC_SDMMC_Init:00000000 XMC_SDMMC_Init
    {standard input}:158    .text.XMC_SDMMC_Init:00000030 $d
    {standard input}:163    .text.XMC_SDMMC_EnableEventStatus:00000000 $t
    {standard input}:168    .text.XMC_SDMMC_EnableEventStatus:00000000 XMC_SDMMC_EnableEventStatus
    {standard input}:192    .text.XMC_SDMMC_DisableEventStatus:00000000 $t
    {standard input}:197    .text.XMC_SDMMC_DisableEventStatus:00000000 XMC_SDMMC_DisableEventStatus
    {standard input}:221    .text.XMC_SDMMC_EnableEvent:00000000 $t
    {standard input}:226    .text.XMC_SDMMC_EnableEvent:00000000 XMC_SDMMC_EnableEvent
    {standard input}:260    .text.XMC_SDMMC_DisableEvent:00000000 $t
    {standard input}:265    .text.XMC_SDMMC_DisableEvent:00000000 XMC_SDMMC_DisableEvent
    {standard input}:289    .text.XMC_SDMMC_ClearEvent:00000000 $t
    {standard input}:294    .text.XMC_SDMMC_ClearEvent:00000000 XMC_SDMMC_ClearEvent
    {standard input}:314    .text.XMC_SDMMC_GetEvent:00000000 $t
    {standard input}:319    .text.XMC_SDMMC_GetEvent:00000000 XMC_SDMMC_GetEvent
    {standard input}:356    .text.XMC_SDMMC_GetR2Response:00000000 $t
    {standard input}:361    .text.XMC_SDMMC_GetR2Response:00000000 XMC_SDMMC_GetR2Response
    {standard input}:386    .text.XMC_SDMMC_SendCommand:00000000 $t
    {standard input}:391    .text.XMC_SDMMC_SendCommand:00000000 XMC_SDMMC_SendCommand
    {standard input}:412    .text.XMC_SDMMC_SetDataTransferMode:00000000 $t
    {standard input}:417    .text.XMC_SDMMC_SetDataTransferMode:00000000 XMC_SDMMC_SetDataTransferMode
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4002528de975c0fcce6c551c15d87b8c
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.48aa5dfcc4adf36b323cf9dbe32c793a
                           .group:00000000 wm4.core_cm4.h.174.824e0532337e90525b645435b961cc25
                           .group:00000000 wm4.mpu_armv7.h.32.7da498ea6f18d3b74a42202d7c1d394e
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:00000000 wm4.xmc_common.h.92.bbcf261068c7c74d7033b80d0dbf155c
                           .group:00000000 wm4.xmc_sdmmc.h.113.f0a630b00f3654a16f677f2aeeb9a3da
                           .group:00000000 wm4.xmc4_scu.h.83.0449f5880ac071460ec1a8072311ea51

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
