   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "xmc_dma.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.XMC_DMA_Enable,"ax",%progbits
  19              	 .align 2
  20              	 .global XMC_DMA_Enable
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_DMA_Enable:
  25              	.LFB183:
  26              	 .file 1 "../Libraries/XMCLib/src/xmc_dma.c"
   1:../Libraries/XMCLib/src/xmc_dma.c **** 
   2:../Libraries/XMCLib/src/xmc_dma.c **** /**
   3:../Libraries/XMCLib/src/xmc_dma.c ****  * @file xmc_dma.c
   4:../Libraries/XMCLib/src/xmc_dma.c ****  * @date 2016-04-08
   5:../Libraries/XMCLib/src/xmc_dma.c ****  *
   6:../Libraries/XMCLib/src/xmc_dma.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_dma.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_dma.c ****  *
  10:../Libraries/XMCLib/src/xmc_dma.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_dma.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_dma.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_dma.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  19:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  22:../Libraries/XMCLib/src/xmc_dma.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_dma.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_dma.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_dma.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_dma.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_dma.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_dma.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_dma.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_dma.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_dma.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_dma.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_dma.c ****  *
  37:../Libraries/XMCLib/src/xmc_dma.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_dma.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_dma.c ****  *
  40:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-02-20:
  41:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Initial <br>
  42:../Libraries/XMCLib/src/xmc_dma.c ****  *
  43:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-05-20:
  44:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Add the declarations for the following APIs: <br>
  45:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  46:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  47:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  48:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Remove PRIOARRAY <br>
  49:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Documentation updates <br>
  50:../Libraries/XMCLib/src/xmc_dma.c ****  *
  51:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Removed GetDriverVersion API <br>
  53:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Init() to support scatter/gather functionality (only
  54:../Libraries/XMCLib/src/xmc_dma.c ****  *       on advanced DMA channels) <br>
  55:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Disable() <br>
  56:../Libraries/XMCLib/src/xmc_dma.c ****  *
  57:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-03-09:
  58:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Optimize write only registers
  59:../Libraries/XMCLib/src/xmc_dma.c ****  *
  60:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-04-08:
  61:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Update XMC_DMA_CH_EnableEvent and XMC_DMA_CH_DisableEvent.
  62:../Libraries/XMCLib/src/xmc_dma.c ****  *       Write optimization of MASKCHEV 
  63:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_IRQHandler, clear channel event status before processing the event handler.
  64:../Libraries/XMCLib/src/xmc_dma.c ****  *       It corrects event losses if the DMA triggered in the event handler finished before returni
  65:../Libraries/XMCLib/src/xmc_dma.c ****  *
  66:../Libraries/XMCLib/src/xmc_dma.c ****  * 2018-02-08:
  67:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_CH_RequestLastMultiblockTransfer() clearing CTLL_LLP_SRC_EN and CTLL_LLP_DST_E
  68:../Libraries/XMCLib/src/xmc_dma.c ****  *
  69:../Libraries/XMCLib/src/xmc_dma.c ****  * @endcond
  70:../Libraries/XMCLib/src/xmc_dma.c ****  */
  71:../Libraries/XMCLib/src/xmc_dma.c **** 
  72:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  73:../Libraries/XMCLib/src/xmc_dma.c ****  * HEADER FILES
  74:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  75:../Libraries/XMCLib/src/xmc_dma.c **** 
  76:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_dma.h"
  77:../Libraries/XMCLib/src/xmc_dma.c **** 
  78:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  79:../Libraries/XMCLib/src/xmc_dma.c **** 
  80:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_scu.h"
  81:../Libraries/XMCLib/src/xmc_dma.c **** 
  82:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  83:../Libraries/XMCLib/src/xmc_dma.c ****  * MACROS
  84:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  85:../Libraries/XMCLib/src/xmc_dma.c **** 
  86:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_MSK (0xfUL)
  87:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_BITSIZE (4UL)
  88:../Libraries/XMCLib/src/xmc_dma.c **** #define DMA_EVENT_MAX (5UL)
  89:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_DEST_PER_Pos GPDMA0_CH_CFGH_DEST_PER_Pos
  90:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_SRC_PER_Pos GPDMA0_CH_CFGH_SRC_PER_Pos
  91:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA0_CH_CFGH_PER_Msk (0x7U)
  92:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA1_CH_CFGH_PER_Msk (0x3U)
  93:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_PER_BITSIZE (4U)
  94:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CTLL_INT_EN_Msk GPDMA0_CH_CTLL_INT_EN_Msk
  95:../Libraries/XMCLib/src/xmc_dma.c **** 
  96:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  97:../Libraries/XMCLib/src/xmc_dma.c ****  * LOCAL DATA
  98:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  99:../Libraries/XMCLib/src/xmc_dma.c **** 
 100:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
 101:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma0_event_handlers[XMC_DMA0_NUM_CHANNELS];
 102:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 103:../Libraries/XMCLib/src/xmc_dma.c **** 
 104:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA1)
 105:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma1_event_handlers[XMC_DMA1_NUM_CHANNELS];
 106:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 107:../Libraries/XMCLib/src/xmc_dma.c ****  
 108:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 109:../Libraries/XMCLib/src/xmc_dma.c ****  * API IMPLEMENTATION
 110:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 111:../Libraries/XMCLib/src/xmc_dma.c **** 
 112:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize GPDMA */
 113:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Init(XMC_DMA_t *const dma)
 114:../Libraries/XMCLib/src/xmc_dma.c **** {
 115:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
 116:../Libraries/XMCLib/src/xmc_dma.c **** }
 117:../Libraries/XMCLib/src/xmc_dma.c **** 
 118:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA module */
 119:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Enable(XMC_DMA_t *const dma)
 120:../Libraries/XMCLib/src/xmc_dma.c **** {
  27              	 .loc 1 120 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	.LVL0:
  32 0000 10B5     	 push {r4,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 4,-8
  36              	 .cfi_offset 14,-4
  37 0002 0446     	 mov r4,r0
 121:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 122:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
  38              	 .loc 1 122 0
  39 0004 054B     	 ldr r3,.L5
  40 0006 9842     	 cmp r0,r3
 123:../Libraries/XMCLib/src/xmc_dma.c ****   {
 124:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 125:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 126:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 127:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 128:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
  41              	 .loc 1 128 0
  42 0008 0CBF     	 ite eq
  43 000a 0548     	 ldreq r0,.L5+4
  44              	.LVL1:
 129:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 130:../Libraries/XMCLib/src/xmc_dma.c ****   }
 131:../Libraries/XMCLib/src/xmc_dma.c ****   else
 132:../Libraries/XMCLib/src/xmc_dma.c ****   {
 133:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 134:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 135:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 136:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
  45              	 .loc 1 136 0
  46 000c 0548     	 ldrne r0,.L5+8
  47 000e FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
  48              	.LVL2:
 137:../Libraries/XMCLib/src/xmc_dma.c ****   }
 138:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 139:../Libraries/XMCLib/src/xmc_dma.c **** 
 140:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x1U;
  49              	 .loc 1 140 0
  50 0012 0123     	 movs r3,#1
  51 0014 C4F89833 	 str r3,[r4,#920]
  52 0018 10BD     	 pop {r4,pc}
  53              	.LVL3:
  54              	.L6:
  55 001a 00BF     	 .align 2
  56              	.L5:
  57 001c 00400150 	 .word 1342259200
  58 0020 10000020 	 .word 536870928
  59 0024 20000020 	 .word 536870944
  60              	 .cfi_endproc
  61              	.LFE183:
  63              	 .section .text.XMC_DMA_Init,"ax",%progbits
  64              	 .align 2
  65              	 .global XMC_DMA_Init
  66              	 .thumb
  67              	 .thumb_func
  69              	XMC_DMA_Init:
  70              	.LFB182:
 114:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
  71              	 .loc 1 114 0
  72              	 .cfi_startproc
  73              	 
  74              	 
  75              	.LVL4:
  76 0000 08B5     	 push {r3,lr}
  77              	.LCFI1:
  78              	 .cfi_def_cfa_offset 8
  79              	 .cfi_offset 3,-8
  80              	 .cfi_offset 14,-4
 115:../Libraries/XMCLib/src/xmc_dma.c **** }
  81              	 .loc 1 115 0
  82 0002 FFF7FEFF 	 bl XMC_DMA_Enable
  83              	.LVL5:
  84 0006 08BD     	 pop {r3,pc}
  85              	 .cfi_endproc
  86              	.LFE182:
  88              	 .section .text.XMC_DMA_Disable,"ax",%progbits
  89              	 .align 2
  90              	 .global XMC_DMA_Disable
  91              	 .thumb
  92              	 .thumb_func
  94              	XMC_DMA_Disable:
  95              	.LFB184:
 141:../Libraries/XMCLib/src/xmc_dma.c **** }
 142:../Libraries/XMCLib/src/xmc_dma.c **** 
 143:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA module */
 144:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Disable(XMC_DMA_t *const dma)
 145:../Libraries/XMCLib/src/xmc_dma.c **** {
  96              	 .loc 1 145 0
  97              	 .cfi_startproc
  98              	 
  99              	 
 100              	.LVL6:
 101 0000 08B5     	 push {r3,lr}
 102              	.LCFI2:
 103              	 .cfi_def_cfa_offset 8
 104              	 .cfi_offset 3,-8
 105              	 .cfi_offset 14,-4
 146:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x0U;
 106              	 .loc 1 146 0
 107 0002 0023     	 movs r3,#0
 108 0004 C0F89833 	 str r3,[r0,#920]
 147:../Libraries/XMCLib/src/xmc_dma.c **** 
 148:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 149:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 109              	 .loc 1 149 0
 110 0008 034B     	 ldr r3,.L13
 111 000a 9842     	 cmp r0,r3
 150:../Libraries/XMCLib/src/xmc_dma.c ****   {
 151:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 152:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 112              	 .loc 1 152 0
 113 000c 0CBF     	 ite eq
 114 000e 0348     	 ldreq r0,.L13+4
 115              	.LVL7:
 153:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 154:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 155:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 156:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 157:../Libraries/XMCLib/src/xmc_dma.c ****   }
 158:../Libraries/XMCLib/src/xmc_dma.c ****   else
 159:../Libraries/XMCLib/src/xmc_dma.c ****   {
 160:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 116              	 .loc 1 160 0
 117 0010 0348     	 ldrne r0,.L13+8
 118 0012 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 119              	.LVL8:
 120 0016 08BD     	 pop {r3,pc}
 121              	.L14:
 122              	 .align 2
 123              	.L13:
 124 0018 00400150 	 .word 1342259200
 125 001c 10000020 	 .word 536870928
 126 0020 20000020 	 .word 536870944
 127              	 .cfi_endproc
 128              	.LFE184:
 130              	 .section .text.XMC_DMA_IsEnabled,"ax",%progbits
 131              	 .align 2
 132              	 .global XMC_DMA_IsEnabled
 133              	 .thumb
 134              	 .thumb_func
 136              	XMC_DMA_IsEnabled:
 137              	.LFB185:
 161:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 162:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 163:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 164:../Libraries/XMCLib/src/xmc_dma.c ****   }
 165:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 166:../Libraries/XMCLib/src/xmc_dma.c **** }
 167:../Libraries/XMCLib/src/xmc_dma.c **** 
 168:../Libraries/XMCLib/src/xmc_dma.c **** /* Check is the GPDMA peripheral is enabled */
 169:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
 170:../Libraries/XMCLib/src/xmc_dma.c **** {
 138              	 .loc 1 170 0
 139              	 .cfi_startproc
 140              	 
 141              	 
 142              	.LVL9:
 143 0000 10B5     	 push {r4,lr}
 144              	.LCFI3:
 145              	 .cfi_def_cfa_offset 8
 146              	 .cfi_offset 4,-8
 147              	 .cfi_offset 14,-4
 148 0002 0446     	 mov r4,r0
 171:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 172:../Libraries/XMCLib/src/xmc_dma.c **** 
 173:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 174:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 149              	 .loc 1 174 0
 150 0004 084B     	 ldr r3,.L20
 151 0006 9842     	 cmp r0,r3
 175:../Libraries/XMCLib/src/xmc_dma.c ****   {
 176:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 177:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 152              	 .loc 1 177 0
 153 0008 0CBF     	 ite eq
 154 000a 0848     	 ldreq r0,.L20+4
 155              	.LVL10:
 178:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 179:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 180:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 181:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 182:../Libraries/XMCLib/src/xmc_dma.c ****   }
 183:../Libraries/XMCLib/src/xmc_dma.c ****   else
 184:../Libraries/XMCLib/src/xmc_dma.c ****   {
 185:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 156              	 .loc 1 185 0
 157 000c 0848     	 ldrne r0,.L20+8
 158 000e FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 159              	.LVL11:
 160 0012 80F00100 	 eor r0,r0,#1
 161 0016 C0B2     	 uxtb r0,r0
 162              	.LVL12:
 186:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 187:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 188:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 189:../Libraries/XMCLib/src/xmc_dma.c ****   }
 190:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 191:../Libraries/XMCLib/src/xmc_dma.c **** 
 192:../Libraries/XMCLib/src/xmc_dma.c ****   /* DMA reset is not asserted and peripheral clock is not gated */
 193:../Libraries/XMCLib/src/xmc_dma.c ****   if (status == true)
 163              	 .loc 1 193 0
 164 0018 20B1     	 cbz r0,.L18
 194:../Libraries/XMCLib/src/xmc_dma.c ****   {
 195:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && (dma->DMACFGREG != 0U);
 165              	 .loc 1 195 0 discriminator 1
 166 001a D4F89803 	 ldr r0,[r4,#920]
 167              	.LVL13:
 168 001e 0030     	 adds r0,r0,#0
 169 0020 18BF     	 it ne
 170 0022 0120     	 movne r0,#1
 171              	.LVL14:
 172              	.L18:
 196:../Libraries/XMCLib/src/xmc_dma.c ****   }
 197:../Libraries/XMCLib/src/xmc_dma.c **** 
 198:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 199:../Libraries/XMCLib/src/xmc_dma.c **** }
 173              	 .loc 1 199 0
 174 0024 10BD     	 pop {r4,pc}
 175              	.LVL15:
 176              	.L21:
 177 0026 00BF     	 .align 2
 178              	.L20:
 179 0028 00400150 	 .word 1342259200
 180 002c 10000020 	 .word 536870928
 181 0030 20000020 	 .word 536870944
 182              	 .cfi_endproc
 183              	.LFE185:
 185              	 .section .text.XMC_DMA_EnableRequestLine,"ax",%progbits
 186              	 .align 2
 187              	 .global XMC_DMA_EnableRequestLine
 188              	 .thumb
 189              	 .thumb_func
 191              	XMC_DMA_EnableRequestLine:
 192              	.LFB186:
 200:../Libraries/XMCLib/src/xmc_dma.c **** 
 201:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable request line */
 202:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
 203:../Libraries/XMCLib/src/xmc_dma.c **** {
 193              	 .loc 1 203 0
 194              	 .cfi_startproc
 195              	 
 196              	 
 197              	 
 198              	.LVL16:
 199 0000 30B4     	 push {r4,r5}
 200              	.LCFI4:
 201              	 .cfi_def_cfa_offset 8
 202              	 .cfi_offset 4,-8
 203              	 .cfi_offset 5,-4
 204:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 205:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 204              	 .loc 1 205 0
 205 0002 144B     	 ldr r3,.L26
 206 0004 9842     	 cmp r0,r3
 207 0006 12D1     	 bne .L23
 206:../Libraries/XMCLib/src/xmc_dma.c ****   {
 207:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 208:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 208              	 .loc 1 208 0
 209 0008 A3F57743 	 sub r3,r3,#63232
 210 000c 9C68     	 ldr r4,[r3,#8]
 211 000e 8D00     	 lsls r5,r1,#2
 212 0010 0F20     	 movs r0,#15
 213              	.LVL17:
 214 0012 A840     	 lsls r0,r0,r5
 215 0014 24EA0000 	 bic r0,r4,r0
 209:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 216              	 .loc 1 209 0
 217 0018 AA40     	 lsls r2,r2,r5
 218              	.LVL18:
 208:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 219              	 .loc 1 208 0
 220 001a 0243     	 orrs r2,r2,r0
 221 001c 9A60     	 str r2,[r3,#8]
 210:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 222              	 .loc 1 210 0
 223 001e 1869     	 ldr r0,[r3,#16]
 224 0020 01F00701 	 and r1,r1,#7
 225              	.LVL19:
 226 0024 0122     	 movs r2,#1
 227 0026 8A40     	 lsls r2,r2,r1
 228 0028 0243     	 orrs r2,r2,r0
 229 002a 1A61     	 str r2,[r3,#16]
 230 002c 0FE0     	 b .L22
 231              	.LVL20:
 232              	.L23:
 211:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 212:../Libraries/XMCLib/src/xmc_dma.c ****   }
 213:../Libraries/XMCLib/src/xmc_dma.c ****   else
 214:../Libraries/XMCLib/src/xmc_dma.c ****   {
 215:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 233              	 .loc 1 215 0
 234 002e 0A4B     	 ldr r3,.L26+4
 235 0030 DC68     	 ldr r4,[r3,#12]
 236 0032 8D00     	 lsls r5,r1,#2
 237 0034 0F20     	 movs r0,#15
 238              	.LVL21:
 239 0036 A840     	 lsls r0,r0,r5
 240 0038 24EA0000 	 bic r0,r4,r0
 216:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 241              	 .loc 1 216 0
 242 003c AA40     	 lsls r2,r2,r5
 243              	.LVL22:
 215:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 244              	 .loc 1 215 0
 245 003e 0243     	 orrs r2,r2,r0
 246 0040 DA60     	 str r2,[r3,#12]
 217:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 247              	 .loc 1 217 0
 248 0042 1869     	 ldr r0,[r3,#16]
 249 0044 4FF48072 	 mov r2,#256
 250 0048 8A40     	 lsls r2,r2,r1
 251 004a 0243     	 orrs r2,r2,r0
 252 004c 1A61     	 str r2,[r3,#16]
 253              	.LVL23:
 254              	.L22:
 218:../Libraries/XMCLib/src/xmc_dma.c ****   }
 219:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 220:../Libraries/XMCLib/src/xmc_dma.c **** }
 255              	 .loc 1 220 0
 256 004e 30BC     	 pop {r4,r5}
 257              	.LCFI5:
 258              	 .cfi_restore 5
 259              	 .cfi_restore 4
 260              	 .cfi_def_cfa_offset 0
 261 0050 7047     	 bx lr
 262              	.L27:
 263 0052 00BF     	 .align 2
 264              	.L26:
 265 0054 00400150 	 .word 1342259200
 266 0058 00490050 	 .word 1342195968
 267              	 .cfi_endproc
 268              	.LFE186:
 270              	 .section .text.XMC_DMA_DisableRequestLine,"ax",%progbits
 271              	 .align 2
 272              	 .global XMC_DMA_DisableRequestLine
 273              	 .thumb
 274              	 .thumb_func
 276              	XMC_DMA_DisableRequestLine:
 277              	.LFB187:
 221:../Libraries/XMCLib/src/xmc_dma.c **** 
 222:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
 223:../Libraries/XMCLib/src/xmc_dma.c **** {
 278              	 .loc 1 223 0
 279              	 .cfi_startproc
 280              	 
 281              	 
 282              	 
 283              	.LVL24:
 224:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 225:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 284              	 .loc 1 225 0
 285 0000 064B     	 ldr r3,.L31
 286 0002 9842     	 cmp r0,r3
 226:../Libraries/XMCLib/src/xmc_dma.c ****   {
 227:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 228:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 287              	 .loc 1 228 0
 288 0004 0648     	 ldr r0,.L31+4
 289              	.LVL25:
 290 0006 0269     	 ldr r2,[r0,#16]
 291 0008 0CBF     	 ite eq
 292 000a 0123     	 moveq r3,#1
 229:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 230:../Libraries/XMCLib/src/xmc_dma.c ****   }
 231:../Libraries/XMCLib/src/xmc_dma.c ****   else
 232:../Libraries/XMCLib/src/xmc_dma.c ****   {
 233:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 293              	 .loc 1 233 0
 294 000c 4FF48073 	 movne r3,#256
 295 0010 8B40     	 lsls r3,r3,r1
 296 0012 22EA0303 	 bic r3,r2,r3
 297 0016 0361     	 str r3,[r0,#16]
 298 0018 7047     	 bx lr
 299              	.L32:
 300 001a 00BF     	 .align 2
 301              	.L31:
 302 001c 00400150 	 .word 1342259200
 303 0020 00490050 	 .word 1342195968
 304              	 .cfi_endproc
 305              	.LFE187:
 307              	 .section .text.XMC_DMA_ClearRequestLine,"ax",%progbits
 308              	 .align 2
 309              	 .global XMC_DMA_ClearRequestLine
 310              	 .thumb
 311              	 .thumb_func
 313              	XMC_DMA_ClearRequestLine:
 314              	.LFB188:
 234:../Libraries/XMCLib/src/xmc_dma.c ****   }
 235:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 236:../Libraries/XMCLib/src/xmc_dma.c **** }
 237:../Libraries/XMCLib/src/xmc_dma.c **** 
 238:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
 239:../Libraries/XMCLib/src/xmc_dma.c **** {
 315              	 .loc 1 239 0
 316              	 .cfi_startproc
 317              	 
 318              	 
 319              	 
 320              	.LVL26:
 240:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 241:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 321              	 .loc 1 241 0
 322 0000 0D4B     	 ldr r3,.L36
 323 0002 9842     	 cmp r0,r3
 324 0004 0BD1     	 bne .L34
 242:../Libraries/XMCLib/src/xmc_dma.c ****   {
 243:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 244:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 325              	 .loc 1 244 0
 326 0006 A3F57743 	 sub r3,r3,#63232
 327 000a 1869     	 ldr r0,[r3,#16]
 328              	.LVL27:
 329 000c 0122     	 movs r2,#1
 330 000e 8A40     	 lsls r2,r2,r1
 331 0010 20EA0201 	 bic r1,r0,r2
 332              	.LVL28:
 333 0014 1961     	 str r1,[r3,#16]
 245:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x1UL << line;
 334              	 .loc 1 245 0
 335 0016 1969     	 ldr r1,[r3,#16]
 336 0018 0A43     	 orrs r2,r2,r1
 337 001a 1A61     	 str r2,[r3,#16]
 338 001c 7047     	 bx lr
 339              	.LVL29:
 340              	.L34:
 246:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 247:../Libraries/XMCLib/src/xmc_dma.c ****   }
 248:../Libraries/XMCLib/src/xmc_dma.c ****   else
 249:../Libraries/XMCLib/src/xmc_dma.c ****   {
 250:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 341              	 .loc 1 250 0
 342 001e 074B     	 ldr r3,.L36+4
 343 0020 1869     	 ldr r0,[r3,#16]
 344              	.LVL30:
 345 0022 4FF48072 	 mov r2,#256
 346 0026 8A40     	 lsls r2,r2,r1
 347 0028 20EA0201 	 bic r1,r0,r2
 348              	.LVL31:
 349 002c 1961     	 str r1,[r3,#16]
 251:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x100UL << line;
 350              	 .loc 1 251 0
 351 002e 1969     	 ldr r1,[r3,#16]
 352 0030 0A43     	 orrs r2,r2,r1
 353 0032 1A61     	 str r2,[r3,#16]
 354 0034 7047     	 bx lr
 355              	.L37:
 356 0036 00BF     	 .align 2
 357              	.L36:
 358 0038 00400150 	 .word 1342259200
 359 003c 00490050 	 .word 1342195968
 360              	 .cfi_endproc
 361              	.LFE188:
 363              	 .section .text.XMC_DMA_GetOverrunStatus,"ax",%progbits
 364              	 .align 2
 365              	 .global XMC_DMA_GetOverrunStatus
 366              	 .thumb
 367              	 .thumb_func
 369              	XMC_DMA_GetOverrunStatus:
 370              	.LFB189:
 252:../Libraries/XMCLib/src/xmc_dma.c ****   }
 253:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 254:../Libraries/XMCLib/src/xmc_dma.c **** }
 255:../Libraries/XMCLib/src/xmc_dma.c **** 
 256:../Libraries/XMCLib/src/xmc_dma.c **** /* Get DMA DLR overrun status */
 257:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
 258:../Libraries/XMCLib/src/xmc_dma.c **** {
 371              	 .loc 1 258 0
 372              	 .cfi_startproc
 373              	 
 374              	 
 375              	 
 376              	.LVL32:
 259:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 260:../Libraries/XMCLib/src/xmc_dma.c **** 
 261:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 262:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 377              	 .loc 1 262 0
 378 0000 094B     	 ldr r3,.L41
 379 0002 9842     	 cmp r0,r3
 380 0004 06D1     	 bne .L39
 263:../Libraries/XMCLib/src/xmc_dma.c ****   {
 264:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 265:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 381              	 .loc 1 265 0
 382 0006 A3F57743 	 sub r3,r3,#63232
 383 000a 1868     	 ldr r0,[r3]
 384              	.LVL33:
 385 000c C840     	 lsrs r0,r0,r1
 386 000e 00F00100 	 and r0,r0,#1
 387              	.LVL34:
 388 0012 7047     	 bx lr
 389              	.LVL35:
 390              	.L39:
 266:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 267:../Libraries/XMCLib/src/xmc_dma.c ****   }
 268:../Libraries/XMCLib/src/xmc_dma.c ****   else
 269:../Libraries/XMCLib/src/xmc_dma.c ****   {
 270:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 391              	 .loc 1 270 0
 392 0014 054B     	 ldr r3,.L41+4
 393 0016 1A68     	 ldr r2,[r3]
 394 0018 4FF48073 	 mov r3,#256
 395 001c 8B40     	 lsls r3,r3,r1
 396 001e 1342     	 tst r3,r2
 397 0020 14BF     	 ite ne
 398 0022 0120     	 movne r0,#1
 399              	.LVL36:
 400 0024 0020     	 moveq r0,#0
 401              	.LVL37:
 271:../Libraries/XMCLib/src/xmc_dma.c ****   }
 272:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 273:../Libraries/XMCLib/src/xmc_dma.c **** 
 274:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 275:../Libraries/XMCLib/src/xmc_dma.c **** }
 402              	 .loc 1 275 0
 403 0026 7047     	 bx lr
 404              	.L42:
 405              	 .align 2
 406              	.L41:
 407 0028 00400150 	 .word 1342259200
 408 002c 00490050 	 .word 1342195968
 409              	 .cfi_endproc
 410              	.LFE189:
 412              	 .section .text.XMC_DMA_ClearOverrunStatus,"ax",%progbits
 413              	 .align 2
 414              	 .global XMC_DMA_ClearOverrunStatus
 415              	 .thumb
 416              	 .thumb_func
 418              	XMC_DMA_ClearOverrunStatus:
 419              	.LFB190:
 276:../Libraries/XMCLib/src/xmc_dma.c **** 
 277:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear DMA DLR overrun status */
 278:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
 279:../Libraries/XMCLib/src/xmc_dma.c **** {
 420              	 .loc 1 279 0
 421              	 .cfi_startproc
 422              	 
 423              	 
 424              	 
 425              	.LVL38:
 280:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 281:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 426              	 .loc 1 281 0
 427 0000 044B     	 ldr r3,.L46
 428 0002 9842     	 cmp r0,r3
 282:../Libraries/XMCLib/src/xmc_dma.c ****   {
 283:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 284:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x1UL << line);
 429              	 .loc 1 284 0
 430 0004 0CBF     	 ite eq
 431 0006 0123     	 moveq r3,#1
 285:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 286:../Libraries/XMCLib/src/xmc_dma.c ****   }
 287:../Libraries/XMCLib/src/xmc_dma.c ****   else
 288:../Libraries/XMCLib/src/xmc_dma.c ****   {
 289:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x100UL << line);
 432              	 .loc 1 289 0
 433 0008 4FF48073 	 movne r3,#256
 434 000c 8B40     	 lsls r3,r3,r1
 435 000e 024A     	 ldr r2,.L46+4
 436 0010 5360     	 str r3,[r2,#4]
 437 0012 7047     	 bx lr
 438              	.L47:
 439              	 .align 2
 440              	.L46:
 441 0014 00400150 	 .word 1342259200
 442 0018 00490050 	 .word 1342195968
 443              	 .cfi_endproc
 444              	.LFE190:
 446              	 .section .text.XMC_DMA_CH_Disable,"ax",%progbits
 447              	 .align 2
 448              	 .global XMC_DMA_CH_Disable
 449              	 .thumb
 450              	 .thumb_func
 452              	XMC_DMA_CH_Disable:
 453              	.LFB191:
 290:../Libraries/XMCLib/src/xmc_dma.c ****   }
 291:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 292:../Libraries/XMCLib/src/xmc_dma.c **** }
 293:../Libraries/XMCLib/src/xmc_dma.c **** 
 294:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable DMA channel */
 295:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
 296:../Libraries/XMCLib/src/xmc_dma.c **** {
 454              	 .loc 1 296 0
 455              	 .cfi_startproc
 456              	 
 457              	 
 458              	 
 459              	.LVL39:
 297:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CHENREG = (uint32_t)(0x100UL << channel);
 460              	 .loc 1 297 0
 461 0000 4FF48073 	 mov r3,#256
 462 0004 8B40     	 lsls r3,r3,r1
 463 0006 C0F8A033 	 str r3,[r0,#928]
 464 000a 0122     	 movs r2,#1
 465 000c 8A40     	 lsls r2,r2,r1
 466              	.L49:
 298:../Libraries/XMCLib/src/xmc_dma.c ****   while((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 467              	 .loc 1 298 0 discriminator 1
 468 000e D0F8A033 	 ldr r3,[r0,#928]
 469 0012 1A42     	 tst r2,r3
 470 0014 FBD1     	 bne .L49
 299:../Libraries/XMCLib/src/xmc_dma.c ****   {
 300:../Libraries/XMCLib/src/xmc_dma.c ****     /* wait until channel is disabled */
 301:../Libraries/XMCLib/src/xmc_dma.c ****   }
 302:../Libraries/XMCLib/src/xmc_dma.c **** }
 471              	 .loc 1 302 0
 472 0016 7047     	 bx lr
 473              	 .cfi_endproc
 474              	.LFE191:
 476              	 .section .text.XMC_DMA_CH_IsEnabled,"ax",%progbits
 477              	 .align 2
 478              	 .global XMC_DMA_CH_IsEnabled
 479              	 .thumb
 480              	 .thumb_func
 482              	XMC_DMA_CH_IsEnabled:
 483              	.LFB192:
 303:../Libraries/XMCLib/src/xmc_dma.c **** 
 304:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is enabled */
 305:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
 306:../Libraries/XMCLib/src/xmc_dma.c **** {
 484              	 .loc 1 306 0
 485              	 .cfi_startproc
 486              	 
 487              	 
 488              	 
 489              	.LVL40:
 307:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 490              	 .loc 1 307 0
 491 0000 D0F8A003 	 ldr r0,[r0,#928]
 492              	.LVL41:
 493 0004 C840     	 lsrs r0,r0,r1
 308:../Libraries/XMCLib/src/xmc_dma.c **** }
 494              	 .loc 1 308 0
 495 0006 00F00100 	 and r0,r0,#1
 496 000a 7047     	 bx lr
 497              	 .cfi_endproc
 498              	.LFE192:
 500              	 .section .text.XMC_DMA_CH_Suspend,"ax",%progbits
 501              	 .align 2
 502              	 .global XMC_DMA_CH_Suspend
 503              	 .thumb
 504              	 .thumb_func
 506              	XMC_DMA_CH_Suspend:
 507              	.LFB194:
 309:../Libraries/XMCLib/src/xmc_dma.c **** 
 310:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize DMA channel */
 311:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 312:../Libraries/XMCLib/src/xmc_dma.c **** {
 313:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 314:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t line;
 315:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t peripheral;
 316:../Libraries/XMCLib/src/xmc_dma.c **** 
 317:../Libraries/XMCLib/src/xmc_dma.c ****   if (XMC_DMA_IsEnabled(dma) == true)
 318:../Libraries/XMCLib/src/xmc_dma.c ****   {
 319:../Libraries/XMCLib/src/xmc_dma.c ****     if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 320:../Libraries/XMCLib/src/xmc_dma.c ****     {
 321:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].SAR = config->src_addr;
 322:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 323:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 324:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 325:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 326:../Libraries/XMCLib/src/xmc_dma.c **** 
 327:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 328:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 329:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);
 330:../Libraries/XMCLib/src/xmc_dma.c **** 
 331:../Libraries/XMCLib/src/xmc_dma.c ****       if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 332:../Libraries/XMCLib/src/xmc_dma.c ****       {
 333:../Libraries/XMCLib/src/xmc_dma.c ****         /* Configure scatter and gather */
 334:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].SGR = config->src_gather_control;
 335:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 336:../Libraries/XMCLib/src/xmc_dma.c ****       }
 337:../Libraries/XMCLib/src/xmc_dma.c **** 
 338:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 339:../Libraries/XMCLib/src/xmc_dma.c ****       {
 340:../Libraries/XMCLib/src/xmc_dma.c ****         /* Hardware handshaking interface configuration */
 341:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 342:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 343:../Libraries/XMCLib/src/xmc_dma.c ****         {
 344:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 345:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 346:../Libraries/XMCLib/src/xmc_dma.c ****           {
 347:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 348:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 349:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 350:../Libraries/XMCLib/src/xmc_dma.c ****           }
 351:../Libraries/XMCLib/src/xmc_dma.c ****           else
 352:../Libraries/XMCLib/src/xmc_dma.c ****           {
 353:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 354:../Libraries/XMCLib/src/xmc_dma.c ****           }
 355:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 356:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 357:../Libraries/XMCLib/src/xmc_dma.c **** 
 358:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 359:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 360:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 361:../Libraries/XMCLib/src/xmc_dma.c ****         }
 362:../Libraries/XMCLib/src/xmc_dma.c ****       }
 363:../Libraries/XMCLib/src/xmc_dma.c **** 
 364:../Libraries/XMCLib/src/xmc_dma.c **** 
 365:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 366:../Libraries/XMCLib/src/xmc_dma.c ****       {
 367:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 368:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 369:../Libraries/XMCLib/src/xmc_dma.c ****         {
 370:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 371:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 372:../Libraries/XMCLib/src/xmc_dma.c ****           {
 373:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 374:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 375:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 376:../Libraries/XMCLib/src/xmc_dma.c ****           }
 377:../Libraries/XMCLib/src/xmc_dma.c ****           else
 378:../Libraries/XMCLib/src/xmc_dma.c ****           {
 379:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 380:../Libraries/XMCLib/src/xmc_dma.c ****           }
 381:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 382:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 383:../Libraries/XMCLib/src/xmc_dma.c **** 
 384:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 385:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 386:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 387:../Libraries/XMCLib/src/xmc_dma.c ****         }
 388:../Libraries/XMCLib/src/xmc_dma.c ****       }
 389:../Libraries/XMCLib/src/xmc_dma.c ****       
 390:../Libraries/XMCLib/src/xmc_dma.c ****       XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMP
 391:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFE
 392:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 393:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 394:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_ERROR));
 395:../Libraries/XMCLib/src/xmc_dma.c **** 
 396:../Libraries/XMCLib/src/xmc_dma.c ****       switch (config->transfer_type)
 397:../Libraries/XMCLib/src/xmc_dma.c ****       {
 398:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
 399:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 400:../Libraries/XMCLib/src/xmc_dma.c **** 
 401:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
 402:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 403:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 404:../Libraries/XMCLib/src/xmc_dma.c **** 
 405:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
 406:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 407:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 408:../Libraries/XMCLib/src/xmc_dma.c **** 
 409:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
 410:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 411:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 412:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 413:../Libraries/XMCLib/src/xmc_dma.c **** 
 414:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
 415:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 416:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 417:../Libraries/XMCLib/src/xmc_dma.c **** 
 418:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
 419:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 420:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 421:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 422:../Libraries/XMCLib/src/xmc_dma.c **** 
 423:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
 424:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 425:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 426:../Libraries/XMCLib/src/xmc_dma.c **** 
 427:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
 428:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 429:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 430:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 431:../Libraries/XMCLib/src/xmc_dma.c **** 
 432:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
 433:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 434:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 435:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 436:../Libraries/XMCLib/src/xmc_dma.c **** 
 437:../Libraries/XMCLib/src/xmc_dma.c ****         default:
 438:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 439:../Libraries/XMCLib/src/xmc_dma.c ****       }
 440:../Libraries/XMCLib/src/xmc_dma.c **** 
 441:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_OK;
 442:../Libraries/XMCLib/src/xmc_dma.c **** 
 443:../Libraries/XMCLib/src/xmc_dma.c ****     }
 444:../Libraries/XMCLib/src/xmc_dma.c ****     else
 445:../Libraries/XMCLib/src/xmc_dma.c ****     {
 446:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_BUSY;
 447:../Libraries/XMCLib/src/xmc_dma.c ****     }
 448:../Libraries/XMCLib/src/xmc_dma.c ****   }
 449:../Libraries/XMCLib/src/xmc_dma.c ****   else 
 450:../Libraries/XMCLib/src/xmc_dma.c ****   {
 451:../Libraries/XMCLib/src/xmc_dma.c ****     status = XMC_DMA_CH_STATUS_ERROR;
 452:../Libraries/XMCLib/src/xmc_dma.c ****   }
 453:../Libraries/XMCLib/src/xmc_dma.c ****   
 454:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 455:../Libraries/XMCLib/src/xmc_dma.c **** }
 456:../Libraries/XMCLib/src/xmc_dma.c **** 
 457:../Libraries/XMCLib/src/xmc_dma.c **** /* Suspend DMA channel transfer */
 458:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
 459:../Libraries/XMCLib/src/xmc_dma.c **** {
 508              	 .loc 1 459 0
 509              	 .cfi_startproc
 510              	 
 511              	 
 512              	 
 513              	.LVL42:
 460:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 514              	 .loc 1 460 0
 515 0000 5823     	 movs r3,#88
 516 0002 03FB0101 	 mla r1,r3,r1,r0
 517              	.LVL43:
 518 0006 0B6C     	 ldr r3,[r1,#64]
 519 0008 43F48073 	 orr r3,r3,#256
 520 000c 0B64     	 str r3,[r1,#64]
 521 000e 7047     	 bx lr
 522              	 .cfi_endproc
 523              	.LFE194:
 525              	 .section .text.XMC_DMA_CH_Resume,"ax",%progbits
 526              	 .align 2
 527              	 .global XMC_DMA_CH_Resume
 528              	 .thumb
 529              	 .thumb_func
 531              	XMC_DMA_CH_Resume:
 532              	.LFB195:
 461:../Libraries/XMCLib/src/xmc_dma.c **** }
 462:../Libraries/XMCLib/src/xmc_dma.c **** 
 463:../Libraries/XMCLib/src/xmc_dma.c **** /* Resume DMA channel transfer */
 464:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
 465:../Libraries/XMCLib/src/xmc_dma.c **** {
 533              	 .loc 1 465 0
 534              	 .cfi_startproc
 535              	 
 536              	 
 537              	 
 538              	.LVL44:
 466:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 539              	 .loc 1 466 0
 540 0000 5823     	 movs r3,#88
 541 0002 03FB0101 	 mla r1,r3,r1,r0
 542              	.LVL45:
 543 0006 0B6C     	 ldr r3,[r1,#64]
 544 0008 23F48073 	 bic r3,r3,#256
 545 000c 0B64     	 str r3,[r1,#64]
 546 000e 7047     	 bx lr
 547              	 .cfi_endproc
 548              	.LFE195:
 550              	 .section .text.XMC_DMA_CH_IsSuspended,"ax",%progbits
 551              	 .align 2
 552              	 .global XMC_DMA_CH_IsSuspended
 553              	 .thumb
 554              	 .thumb_func
 556              	XMC_DMA_CH_IsSuspended:
 557              	.LFB196:
 467:../Libraries/XMCLib/src/xmc_dma.c **** }
 468:../Libraries/XMCLib/src/xmc_dma.c **** 
 469:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is suspended */
 470:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
 471:../Libraries/XMCLib/src/xmc_dma.c **** {
 558              	 .loc 1 471 0
 559              	 .cfi_startproc
 560              	 
 561              	 
 562              	 
 563              	.LVL46:
 472:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 564              	 .loc 1 472 0
 565 0000 5823     	 movs r3,#88
 566 0002 03FB0101 	 mla r1,r3,r1,r0
 567              	.LVL47:
 568 0006 086C     	 ldr r0,[r1,#64]
 569              	.LVL48:
 473:../Libraries/XMCLib/src/xmc_dma.c **** }
 570              	 .loc 1 473 0
 571 0008 C0F30020 	 ubfx r0,r0,#8,#1
 572 000c 7047     	 bx lr
 573              	 .cfi_endproc
 574              	.LFE196:
 576 000e 00BF     	 .section .text.XMC_DMA_CH_EnableEvent,"ax",%progbits
 577              	 .align 2
 578              	 .global XMC_DMA_CH_EnableEvent
 579              	 .thumb
 580              	 .thumb_func
 582              	XMC_DMA_CH_EnableEvent:
 583              	.LFB197:
 474:../Libraries/XMCLib/src/xmc_dma.c **** 
 475:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA event */
 476:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 477:../Libraries/XMCLib/src/xmc_dma.c **** {
 584              	 .loc 1 477 0
 585              	 .cfi_startproc
 586              	 
 587              	 
 588              	 
 589              	.LVL49:
 590 0000 10B4     	 push {r4}
 591              	.LCFI6:
 592              	 .cfi_def_cfa_offset 4
 593              	 .cfi_offset 4,-4
 594              	.LVL50:
 478:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 479:../Libraries/XMCLib/src/xmc_dma.c **** 
 480:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 481:../Libraries/XMCLib/src/xmc_dma.c ****   {
 482:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 483:../Libraries/XMCLib/src/xmc_dma.c ****     {
 484:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 595              	 .loc 1 484 0
 596 0002 40F20114 	 movw r4,#257
 597 0006 8C40     	 lsls r4,r4,r1
 480:../Libraries/XMCLib/src/xmc_dma.c ****   {
 598              	 .loc 1 480 0
 599 0008 0023     	 movs r3,#0
 600              	.LVL51:
 601              	.L57:
 482:../Libraries/XMCLib/src/xmc_dma.c ****     {
 602              	 .loc 1 482 0
 603 000a 22FA03F1 	 lsr r1,r2,r3
 604 000e 11F0010F 	 tst r1,#1
 605 0012 03D0     	 beq .L56
 606 0014 5900     	 lsls r1,r3,#1
 607              	 .loc 1 484 0
 608 0016 C431     	 adds r1,r1,#196
 609 0018 40F82140 	 str r4,[r0,r1,lsl#2]
 610              	.L56:
 480:../Libraries/XMCLib/src/xmc_dma.c ****   {
 611              	 .loc 1 480 0 discriminator 2
 612 001c 0133     	 adds r3,r3,#1
 613              	.LVL52:
 614 001e 052B     	 cmp r3,#5
 615 0020 F3D1     	 bne .L57
 485:../Libraries/XMCLib/src/xmc_dma.c ****     }
 486:../Libraries/XMCLib/src/xmc_dma.c ****   }
 487:../Libraries/XMCLib/src/xmc_dma.c **** }
 616              	 .loc 1 487 0
 617 0022 5DF8044B 	 ldr r4,[sp],#4
 618              	.LCFI7:
 619              	 .cfi_restore 4
 620              	 .cfi_def_cfa_offset 0
 621 0026 7047     	 bx lr
 622              	 .cfi_endproc
 623              	.LFE197:
 625              	 .section .text.XMC_DMA_CH_DisableEvent,"ax",%progbits
 626              	 .align 2
 627              	 .global XMC_DMA_CH_DisableEvent
 628              	 .thumb
 629              	 .thumb_func
 631              	XMC_DMA_CH_DisableEvent:
 632              	.LFB198:
 488:../Libraries/XMCLib/src/xmc_dma.c **** 
 489:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA event */
 490:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 491:../Libraries/XMCLib/src/xmc_dma.c **** {
 633              	 .loc 1 491 0
 634              	 .cfi_startproc
 635              	 
 636              	 
 637              	 
 638              	.LVL53:
 639 0000 10B4     	 push {r4}
 640              	.LCFI8:
 641              	 .cfi_def_cfa_offset 4
 642              	 .cfi_offset 4,-4
 643              	.LVL54:
 492:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 493:../Libraries/XMCLib/src/xmc_dma.c **** 
 494:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 495:../Libraries/XMCLib/src/xmc_dma.c ****   {
 496:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 497:../Libraries/XMCLib/src/xmc_dma.c ****     {
 498:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x100UL << channel);
 644              	 .loc 1 498 0
 645 0002 4FF48074 	 mov r4,#256
 646 0006 8C40     	 lsls r4,r4,r1
 494:../Libraries/XMCLib/src/xmc_dma.c ****   {
 647              	 .loc 1 494 0
 648 0008 0023     	 movs r3,#0
 649              	.LVL55:
 650              	.L62:
 496:../Libraries/XMCLib/src/xmc_dma.c ****     {
 651              	 .loc 1 496 0
 652 000a 22FA03F1 	 lsr r1,r2,r3
 653 000e 11F0010F 	 tst r1,#1
 654 0012 03D0     	 beq .L61
 655 0014 5900     	 lsls r1,r3,#1
 656              	 .loc 1 498 0
 657 0016 C431     	 adds r1,r1,#196
 658 0018 40F82140 	 str r4,[r0,r1,lsl#2]
 659              	.L61:
 494:../Libraries/XMCLib/src/xmc_dma.c ****   {
 660              	 .loc 1 494 0 discriminator 2
 661 001c 0133     	 adds r3,r3,#1
 662              	.LVL56:
 663 001e 052B     	 cmp r3,#5
 664 0020 F3D1     	 bne .L62
 499:../Libraries/XMCLib/src/xmc_dma.c ****     }
 500:../Libraries/XMCLib/src/xmc_dma.c ****   }
 501:../Libraries/XMCLib/src/xmc_dma.c **** }
 665              	 .loc 1 501 0
 666 0022 5DF8044B 	 ldr r4,[sp],#4
 667              	.LCFI9:
 668              	 .cfi_restore 4
 669              	 .cfi_def_cfa_offset 0
 670 0026 7047     	 bx lr
 671              	 .cfi_endproc
 672              	.LFE198:
 674              	 .section .text.XMC_DMA_CH_ClearEventStatus,"ax",%progbits
 675              	 .align 2
 676              	 .global XMC_DMA_CH_ClearEventStatus
 677              	 .thumb
 678              	 .thumb_func
 680              	XMC_DMA_CH_ClearEventStatus:
 681              	.LFB199:
 502:../Libraries/XMCLib/src/xmc_dma.c **** 
 503:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear GPDMA event */
 504:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 505:../Libraries/XMCLib/src/xmc_dma.c **** {
 682              	 .loc 1 505 0
 683              	 .cfi_startproc
 684              	 
 685              	 
 686              	 
 687              	.LVL57:
 688 0000 10B4     	 push {r4}
 689              	.LCFI10:
 690              	 .cfi_def_cfa_offset 4
 691              	 .cfi_offset 4,-4
 692              	.LVL58:
 506:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 507:../Libraries/XMCLib/src/xmc_dma.c **** 
 508:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 509:../Libraries/XMCLib/src/xmc_dma.c ****   {
 510:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 511:../Libraries/XMCLib/src/xmc_dma.c ****     {
 512:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 693              	 .loc 1 512 0
 694 0002 0124     	 movs r4,#1
 695 0004 8C40     	 lsls r4,r4,r1
 508:../Libraries/XMCLib/src/xmc_dma.c ****   {
 696              	 .loc 1 508 0
 697 0006 0023     	 movs r3,#0
 698              	.LVL59:
 699              	.L67:
 510:../Libraries/XMCLib/src/xmc_dma.c ****     {
 700              	 .loc 1 510 0
 701 0008 22FA03F1 	 lsr r1,r2,r3
 702 000c 11F0010F 	 tst r1,#1
 703 0010 03D0     	 beq .L66
 704 0012 5900     	 lsls r1,r3,#1
 705              	 .loc 1 512 0
 706 0014 CE31     	 adds r1,r1,#206
 707 0016 40F82140 	 str r4,[r0,r1,lsl#2]
 708              	.L66:
 508:../Libraries/XMCLib/src/xmc_dma.c ****   {
 709              	 .loc 1 508 0 discriminator 2
 710 001a 0133     	 adds r3,r3,#1
 711              	.LVL60:
 712 001c 052B     	 cmp r3,#5
 713 001e F3D1     	 bne .L67
 513:../Libraries/XMCLib/src/xmc_dma.c ****     }
 514:../Libraries/XMCLib/src/xmc_dma.c ****   }
 515:../Libraries/XMCLib/src/xmc_dma.c **** 
 516:../Libraries/XMCLib/src/xmc_dma.c **** }
 714              	 .loc 1 516 0
 715 0020 5DF8044B 	 ldr r4,[sp],#4
 716              	.LCFI11:
 717              	 .cfi_restore 4
 718              	 .cfi_def_cfa_offset 0
 719 0024 7047     	 bx lr
 720              	 .cfi_endproc
 721              	.LFE199:
 723 0026 00BF     	 .section .text.XMC_DMA_CH_Init,"ax",%progbits
 724              	 .align 2
 725              	 .global XMC_DMA_CH_Init
 726              	 .thumb
 727              	 .thumb_func
 729              	XMC_DMA_CH_Init:
 730              	.LFB193:
 312:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 731              	 .loc 1 312 0
 732              	 .cfi_startproc
 733              	 
 734              	 
 735              	.LVL61:
 736 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 737              	.LCFI12:
 738              	 .cfi_def_cfa_offset 24
 739              	 .cfi_offset 3,-24
 740              	 .cfi_offset 4,-20
 741              	 .cfi_offset 5,-16
 742              	 .cfi_offset 6,-12
 743              	 .cfi_offset 7,-8
 744              	 .cfi_offset 14,-4
 745 0002 0546     	 mov r5,r0
 746 0004 0E46     	 mov r6,r1
 747 0006 1446     	 mov r4,r2
 317:../Libraries/XMCLib/src/xmc_dma.c ****   {
 748              	 .loc 1 317 0
 749 0008 FFF7FEFF 	 bl XMC_DMA_IsEnabled
 750              	.LVL62:
 751 000c 0028     	 cmp r0,#0
 752 000e 00F0C880 	 beq .L88
 753              	.LVL63:
 754              	.LBB16:
 755              	.LBB17:
 307:../Libraries/XMCLib/src/xmc_dma.c **** }
 756              	 .loc 1 307 0
 757 0012 D5F8A033 	 ldr r3,[r5,#928]
 758 0016 F340     	 lsrs r3,r3,r6
 759              	.LBE17:
 760              	.LBE16:
 319:../Libraries/XMCLib/src/xmc_dma.c ****     {
 761              	 .loc 1 319 0
 762 0018 13F0010F 	 tst r3,#1
 763 001c 40F0C380 	 bne .L89
 321:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 764              	 .loc 1 321 0
 765 0020 6168     	 ldr r1,[r4,#4]
 766 0022 5822     	 movs r2,#88
 767 0024 02FB06F2 	 mul r2,r2,r6
 768 0028 AB18     	 adds r3,r5,r2
 769 002a A950     	 str r1,[r5,r2]
 322:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 770              	 .loc 1 322 0
 771 002c A268     	 ldr r2,[r4,#8]
 772 002e 9A60     	 str r2,[r3,#8]
 323:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 773              	 .loc 1 323 0
 774 0030 E268     	 ldr r2,[r4,#12]
 775 0032 1A61     	 str r2,[r3,#16]
 324:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 776              	 .loc 1 324 0
 777 0034 218B     	 ldrh r1,[r4,#24]
 778 0036 D961     	 str r1,[r3,#28]
 325:../Libraries/XMCLib/src/xmc_dma.c **** 
 779              	 .loc 1 325 0
 780 0038 2268     	 ldr r2,[r4]
 781 003a 9A61     	 str r2,[r3,#24]
 327:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 782              	 .loc 1 327 0
 783 003c E27E     	 ldrb r2,[r4,#27]
 784 003e 42F44062 	 orr r2,r2,#3072
 785 0042 1A64     	 str r2,[r3,#64]
 331:../Libraries/XMCLib/src/xmc_dma.c ****       {
 786              	 .loc 1 331 0
 787 0044 5A4B     	 ldr r3,.L92
 788 0046 9D42     	 cmp r5,r3
 789 0048 0CD1     	 bne .L72
 331:../Libraries/XMCLib/src/xmc_dma.c ****       {
 790              	 .loc 1 331 0 is_stmt 0 discriminator 1
 791 004a 012E     	 cmp r6,#1
 792 004c 0AD8     	 bhi .L72
 334:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 793              	 .loc 1 334 0 is_stmt 1
 794 004e 2269     	 ldr r2,[r4,#16]
 795 0050 5823     	 movs r3,#88
 796 0052 03FB06F3 	 mul r3,r3,r6
 797 0056 03F1A043 	 add r3,r3,#1342177280
 798 005a 03F5A033 	 add r3,r3,#81920
 799 005e 9A64     	 str r2,[r3,#72]
 335:../Libraries/XMCLib/src/xmc_dma.c ****       }
 800              	 .loc 1 335 0
 801 0060 6269     	 ldr r2,[r4,#20]
 802 0062 1A65     	 str r2,[r3,#80]
 803              	.L72:
 338:../Libraries/XMCLib/src/xmc_dma.c ****       {
 804              	 .loc 1 338 0
 805 0064 238C     	 ldrh r3,[r4,#32]
 806 0066 F3B9     	 cbnz r3,.L73
 341:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 807              	 .loc 1 341 0
 808 0068 A378     	 ldrb r3,[r4,#2]
 809 006a 03F05003 	 and r3,r3,#80
 810 006e 102B     	 cmp r3,#16
 811 0070 19D1     	 bne .L73
 345:../Libraries/XMCLib/src/xmc_dma.c ****           {
 812              	 .loc 1 345 0
 813 0072 4F4B     	 ldr r3,.L92
 814 0074 9D42     	 cmp r5,r3
 348:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 815              	 .loc 1 348 0
 816 0076 94F82210 	 ldrb r1,[r4,#34]
 817 007a 0CBF     	 ite eq
 818 007c 01F00701 	 andeq r1,r1,#7
 819              	.LVL64:
 353:../Libraries/XMCLib/src/xmc_dma.c ****           }
 820              	 .loc 1 353 0
 821 0080 01F00301 	 andne r1,r1,#3
 822              	.LVL65:
 356:../Libraries/XMCLib/src/xmc_dma.c **** 
 823              	 .loc 1 356 0
 824 0084 94F82220 	 ldrb r2,[r4,#34]
 825              	.LVL66:
 358:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 826              	 .loc 1 358 0
 827 0088 5827     	 movs r7,#88
 828 008a 07FB0657 	 mla r7,r7,r6,r5
 829 008e 7B6C     	 ldr r3,[r7,#68]
 830 0090 43EAC123 	 orr r3,r3,r1,lsl#11
 831 0094 7B64     	 str r3,[r7,#68]
 359:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 832              	 .loc 1 359 0
 833 0096 2846     	 mov r0,r5
 834 0098 1209     	 lsrs r2,r2,#4
 835              	.LVL67:
 836 009a FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 837              	.LVL68:
 360:../Libraries/XMCLib/src/xmc_dma.c ****         }
 838              	 .loc 1 360 0
 839 009e 3B6C     	 ldr r3,[r7,#64]
 840 00a0 23F48063 	 bic r3,r3,#1024
 841 00a4 3B64     	 str r3,[r7,#64]
 842              	.L73:
 365:../Libraries/XMCLib/src/xmc_dma.c ****       {
 843              	 .loc 1 365 0
 844 00a6 A38B     	 ldrh r3,[r4,#28]
 845 00a8 E3B9     	 cbnz r3,.L76
 367:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 846              	 .loc 1 367 0
 847 00aa A378     	 ldrb r3,[r4,#2]
 848 00ac 03F06003 	 and r3,r3,#96
 849 00b0 202B     	 cmp r3,#32
 850 00b2 17D1     	 bne .L76
 371:../Libraries/XMCLib/src/xmc_dma.c ****           {
 851              	 .loc 1 371 0
 852 00b4 3E4B     	 ldr r3,.L92
 853 00b6 9D42     	 cmp r5,r3
 374:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 854              	 .loc 1 374 0
 855 00b8 A17F     	 ldrb r1,[r4,#30]
 856 00ba 0CBF     	 ite eq
 857 00bc 01F00701 	 andeq r1,r1,#7
 858              	.LVL69:
 379:../Libraries/XMCLib/src/xmc_dma.c ****           }
 859              	 .loc 1 379 0
 860 00c0 01F00301 	 andne r1,r1,#3
 861              	.LVL70:
 382:../Libraries/XMCLib/src/xmc_dma.c **** 
 862              	 .loc 1 382 0
 863 00c4 A27F     	 ldrb r2,[r4,#30]
 864              	.LVL71:
 384:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 865              	 .loc 1 384 0
 866 00c6 5827     	 movs r7,#88
 867 00c8 07FB0657 	 mla r7,r7,r6,r5
 868 00cc 7B6C     	 ldr r3,[r7,#68]
 869 00ce 43EAC113 	 orr r3,r3,r1,lsl#7
 870 00d2 7B64     	 str r3,[r7,#68]
 385:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 871              	 .loc 1 385 0
 872 00d4 2846     	 mov r0,r5
 873 00d6 1209     	 lsrs r2,r2,#4
 874              	.LVL72:
 875 00d8 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 876              	.LVL73:
 386:../Libraries/XMCLib/src/xmc_dma.c ****         }
 877              	 .loc 1 386 0
 878 00dc 3B6C     	 ldr r3,[r7,#64]
 879 00de 23F40063 	 bic r3,r3,#2048
 880 00e2 3B64     	 str r3,[r7,#64]
 881              	.L76:
 390:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFE
 882              	 .loc 1 390 0
 883 00e4 2846     	 mov r0,r5
 884 00e6 3146     	 mov r1,r6
 885 00e8 1F22     	 movs r2,#31
 886 00ea FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 887              	.LVL74:
 396:../Libraries/XMCLib/src/xmc_dma.c ****       {
 888              	 .loc 1 396 0
 889 00ee A37E     	 ldrb r3,[r4,#26]
 890 00f0 013B     	 subs r3,r3,#1
 891 00f2 072B     	 cmp r3,#7
 892 00f4 59D8     	 bhi .L90
 893 00f6 DFE803F0 	 tbb [pc,r3]
 894              	.L80:
 895 00fa 04       	 .byte (.L79-.L80)/2
 896 00fb 0D       	 .byte (.L81-.L80)/2
 897 00fc 16       	 .byte (.L82-.L80)/2
 898 00fd 1F       	 .byte (.L83-.L80)/2
 899 00fe 28       	 .byte (.L84-.L80)/2
 900 00ff 35       	 .byte (.L85-.L80)/2
 901 0100 3E       	 .byte (.L86-.L80)/2
 902 0101 4B       	 .byte (.L87-.L80)/2
 903              	 .p2align 1
 904              	.L79:
 402:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 905              	 .loc 1 402 0
 906 0102 5823     	 movs r3,#88
 907 0104 03FB0655 	 mla r5,r3,r6,r5
 908              	.LVL75:
 909 0108 2B6C     	 ldr r3,[r5,#64]
 910 010a 43F00043 	 orr r3,r3,#-2147483648
 911 010e 2B64     	 str r3,[r5,#64]
 441:../Libraries/XMCLib/src/xmc_dma.c **** 
 912              	 .loc 1 441 0
 913 0110 0020     	 movs r0,#0
 403:../Libraries/XMCLib/src/xmc_dma.c **** 
 914              	 .loc 1 403 0
 915 0112 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 916              	.LVL76:
 917              	.L81:
 406:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 918              	 .loc 1 406 0
 919 0114 5823     	 movs r3,#88
 920 0116 03FB0655 	 mla r5,r3,r6,r5
 921              	.LVL77:
 922 011a 2B6C     	 ldr r3,[r5,#64]
 923 011c 43F08043 	 orr r3,r3,#1073741824
 924 0120 2B64     	 str r3,[r5,#64]
 441:../Libraries/XMCLib/src/xmc_dma.c **** 
 925              	 .loc 1 441 0
 926 0122 0020     	 movs r0,#0
 407:../Libraries/XMCLib/src/xmc_dma.c **** 
 927              	 .loc 1 407 0
 928 0124 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 929              	.LVL78:
 930              	.L82:
 410:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 931              	 .loc 1 410 0
 932 0126 5823     	 movs r3,#88
 933 0128 03FB0655 	 mla r5,r3,r6,r5
 934              	.LVL79:
 935 012c 2B6C     	 ldr r3,[r5,#64]
 936 012e 43F04043 	 orr r3,r3,#-1073741824
 937 0132 2B64     	 str r3,[r5,#64]
 441:../Libraries/XMCLib/src/xmc_dma.c **** 
 938              	 .loc 1 441 0
 939 0134 0020     	 movs r0,#0
 412:../Libraries/XMCLib/src/xmc_dma.c **** 
 940              	 .loc 1 412 0
 941 0136 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 942              	.LVL80:
 943              	.L83:
 415:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 944              	 .loc 1 415 0
 945 0138 5823     	 movs r3,#88
 946 013a 03FB0655 	 mla r5,r3,r6,r5
 947              	.LVL81:
 948 013e AB69     	 ldr r3,[r5,#24]
 949 0140 43F00063 	 orr r3,r3,#134217728
 950 0144 AB61     	 str r3,[r5,#24]
 441:../Libraries/XMCLib/src/xmc_dma.c **** 
 951              	 .loc 1 441 0
 952 0146 0020     	 movs r0,#0
 416:../Libraries/XMCLib/src/xmc_dma.c **** 
 953              	 .loc 1 416 0
 954 0148 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 955              	.LVL82:
 956              	.L84:
 419:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 957              	 .loc 1 419 0
 958 014a 5823     	 movs r3,#88
 959 014c 03FB0655 	 mla r5,r3,r6,r5
 960              	.LVL83:
 961 0150 2B6C     	 ldr r3,[r5,#64]
 962 0152 43F08043 	 orr r3,r3,#1073741824
 963 0156 2B64     	 str r3,[r5,#64]
 420:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 964              	 .loc 1 420 0
 965 0158 AB69     	 ldr r3,[r5,#24]
 966 015a 43F00063 	 orr r3,r3,#134217728
 967 015e AB61     	 str r3,[r5,#24]
 441:../Libraries/XMCLib/src/xmc_dma.c **** 
 968              	 .loc 1 441 0
 969 0160 0020     	 movs r0,#0
 421:../Libraries/XMCLib/src/xmc_dma.c **** 
 970              	 .loc 1 421 0
 971 0162 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 972              	.LVL84:
 973              	.L85:
 424:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 974              	 .loc 1 424 0
 975 0164 5823     	 movs r3,#88
 976 0166 03FB0655 	 mla r5,r3,r6,r5
 977              	.LVL85:
 978 016a AB69     	 ldr r3,[r5,#24]
 979 016c 43F08053 	 orr r3,r3,#268435456
 980 0170 AB61     	 str r3,[r5,#24]
 441:../Libraries/XMCLib/src/xmc_dma.c **** 
 981              	 .loc 1 441 0
 982 0172 0020     	 movs r0,#0
 425:../Libraries/XMCLib/src/xmc_dma.c **** 
 983              	 .loc 1 425 0
 984 0174 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 985              	.LVL86:
 986              	.L86:
 428:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 987              	 .loc 1 428 0
 988 0176 5823     	 movs r3,#88
 989 0178 03FB0655 	 mla r5,r3,r6,r5
 990              	.LVL87:
 991 017c 2B6C     	 ldr r3,[r5,#64]
 992 017e 43F00043 	 orr r3,r3,#-2147483648
 993 0182 2B64     	 str r3,[r5,#64]
 429:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 994              	 .loc 1 429 0
 995 0184 AB69     	 ldr r3,[r5,#24]
 996 0186 43F08053 	 orr r3,r3,#268435456
 997 018a AB61     	 str r3,[r5,#24]
 441:../Libraries/XMCLib/src/xmc_dma.c **** 
 998              	 .loc 1 441 0
 999 018c 0020     	 movs r0,#0
 430:../Libraries/XMCLib/src/xmc_dma.c **** 
 1000              	 .loc 1 430 0
 1001 018e F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1002              	.LVL88:
 1003              	.L87:
 433:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 1004              	 .loc 1 433 0
 1005 0190 5823     	 movs r3,#88
 1006 0192 03FB0655 	 mla r5,r3,r6,r5
 1007              	.LVL89:
 1008 0196 AB69     	 ldr r3,[r5,#24]
 1009 0198 43F0C053 	 orr r3,r3,#402653184
 1010 019c AB61     	 str r3,[r5,#24]
 441:../Libraries/XMCLib/src/xmc_dma.c **** 
 1011              	 .loc 1 441 0
 1012 019e 0020     	 movs r0,#0
 435:../Libraries/XMCLib/src/xmc_dma.c **** 
 1013              	 .loc 1 435 0
 1014 01a0 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1015              	.LVL90:
 1016              	.L88:
 451:../Libraries/XMCLib/src/xmc_dma.c ****   }
 1017              	 .loc 1 451 0
 1018 01a2 0120     	 movs r0,#1
 1019 01a4 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1020              	.LVL91:
 1021              	.L89:
 446:../Libraries/XMCLib/src/xmc_dma.c ****     }
 1022              	 .loc 1 446 0
 1023 01a6 0220     	 movs r0,#2
 1024 01a8 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1025              	.LVL92:
 1026              	.L90:
 441:../Libraries/XMCLib/src/xmc_dma.c **** 
 1027              	 .loc 1 441 0
 1028 01aa 0020     	 movs r0,#0
 1029              	.LVL93:
 455:../Libraries/XMCLib/src/xmc_dma.c **** 
 1030              	 .loc 1 455 0
 1031 01ac F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1032              	.LVL94:
 1033              	.L93:
 1034 01ae 00BF     	 .align 2
 1035              	.L92:
 1036 01b0 00400150 	 .word 1342259200
 1037              	 .cfi_endproc
 1038              	.LFE193:
 1040              	 .section .text.XMC_DMA_CH_GetEventStatus,"ax",%progbits
 1041              	 .align 2
 1042              	 .global XMC_DMA_CH_GetEventStatus
 1043              	 .thumb
 1044              	 .thumb_func
 1046              	XMC_DMA_CH_GetEventStatus:
 1047              	.LFB200:
 517:../Libraries/XMCLib/src/xmc_dma.c **** 
 518:../Libraries/XMCLib/src/xmc_dma.c **** /* Get GPDMA event status */
 519:../Libraries/XMCLib/src/xmc_dma.c **** uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
 520:../Libraries/XMCLib/src/xmc_dma.c **** {
 1048              	 .loc 1 520 0
 1049              	 .cfi_startproc
 1050              	 
 1051              	 
 1052              	 
 1053              	.LVL95:
 1054 0000 30B4     	 push {r4,r5}
 1055              	.LCFI13:
 1056              	 .cfi_def_cfa_offset 8
 1057              	 .cfi_offset 4,-8
 1058              	 .cfi_offset 5,-4
 1059              	.LVL96:
 1060 0002 0123     	 movs r3,#1
 1061 0004 03FA01F1 	 lsl r1,r3,r1
 1062              	.LVL97:
 521:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 522:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t status = 0UL;
 1063              	 .loc 1 522 0
 1064 0008 0024     	 movs r4,#0
 523:../Libraries/XMCLib/src/xmc_dma.c **** 
 524:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1065              	 .loc 1 524 0
 1066 000a 2246     	 mov r2,r4
 525:../Libraries/XMCLib/src/xmc_dma.c ****   {
 526:../Libraries/XMCLib/src/xmc_dma.c ****     status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_
 1067              	 .loc 1 526 0
 1068 000c 1D46     	 mov r5,r3
 1069              	.LVL98:
 1070              	.L96:
 1071 000e 5300     	 lsls r3,r2,#1
 1072 0010 BA33     	 adds r3,r3,#186
 1073 0012 50F82330 	 ldr r3,[r0,r3,lsl#2]
 1074 0016 0B40     	 ands r3,r3,r1
 1075 0018 18BF     	 it ne
 1076 001a 05FA02F3 	 lslne r3,r5,r2
 1077 001e 1C43     	 orrs r4,r4,r3
 1078              	.LVL99:
 524:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1079              	 .loc 1 524 0
 1080 0020 0132     	 adds r2,r2,#1
 1081              	.LVL100:
 1082 0022 052A     	 cmp r2,#5
 1083 0024 F3D1     	 bne .L96
 527:../Libraries/XMCLib/src/xmc_dma.c ****                          ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
 528:../Libraries/XMCLib/src/xmc_dma.c ****   }
 529:../Libraries/XMCLib/src/xmc_dma.c **** 
 530:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 531:../Libraries/XMCLib/src/xmc_dma.c **** }
 1084              	 .loc 1 531 0
 1085 0026 2046     	 mov r0,r4
 1086              	.LVL101:
 1087 0028 30BC     	 pop {r4,r5}
 1088              	.LCFI14:
 1089              	 .cfi_restore 5
 1090              	 .cfi_restore 4
 1091              	 .cfi_def_cfa_offset 0
 1092              	.LVL102:
 1093 002a 7047     	 bx lr
 1094              	 .cfi_endproc
 1095              	.LFE200:
 1097              	 .section .text.XMC_DMA_CH_EnableSourceGather,"ax",%progbits
 1098              	 .align 2
 1099              	 .global XMC_DMA_CH_EnableSourceGather
 1100              	 .thumb
 1101              	 .thumb_func
 1103              	XMC_DMA_CH_EnableSourceGather:
 1104              	.LFB201:
 532:../Libraries/XMCLib/src/xmc_dma.c **** 
 533:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source gather */
 534:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, 
 535:../Libraries/XMCLib/src/xmc_dma.c **** {
 1105              	 .loc 1 535 0
 1106              	 .cfi_startproc
 1107              	 
 1108              	 
 1109              	 
 1110              	.LVL103:
 1111 0000 10B4     	 push {r4}
 1112              	.LCFI15:
 1113              	 .cfi_def_cfa_offset 4
 1114              	 .cfi_offset 4,-4
 536:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 1115              	 .loc 1 536 0
 1116 0002 5824     	 movs r4,#88
 1117 0004 04FB0101 	 mla r1,r4,r1,r0
 1118              	.LVL104:
 1119 0008 8869     	 ldr r0,[r1,#24]
 1120              	.LVL105:
 1121 000a 40F40030 	 orr r0,r0,#131072
 1122 000e 8861     	 str r0,[r1,#24]
 537:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0
 1123              	 .loc 1 537 0
 1124 0010 42EA0353 	 orr r3,r2,r3,lsl#20
 1125              	.LVL106:
 1126 0014 8B64     	 str r3,[r1,#72]
 538:../Libraries/XMCLib/src/xmc_dma.c **** }
 1127              	 .loc 1 538 0
 1128 0016 5DF8044B 	 ldr r4,[sp],#4
 1129              	.LCFI16:
 1130              	 .cfi_restore 4
 1131              	 .cfi_def_cfa_offset 0
 1132 001a 7047     	 bx lr
 1133              	 .cfi_endproc
 1134              	.LFE201:
 1136              	 .section .text.XMC_DMA_CH_DisableSourceGather,"ax",%progbits
 1137              	 .align 2
 1138              	 .global XMC_DMA_CH_DisableSourceGather
 1139              	 .thumb
 1140              	 .thumb_func
 1142              	XMC_DMA_CH_DisableSourceGather:
 1143              	.LFB202:
 539:../Libraries/XMCLib/src/xmc_dma.c **** 
 540:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source gather */
 541:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
 542:../Libraries/XMCLib/src/xmc_dma.c **** {
 1144              	 .loc 1 542 0
 1145              	 .cfi_startproc
 1146              	 
 1147              	 
 1148              	 
 1149              	.LVL107:
 543:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 1150              	 .loc 1 543 0
 1151 0000 5823     	 movs r3,#88
 1152 0002 03FB0101 	 mla r1,r3,r1,r0
 1153              	.LVL108:
 1154 0006 8B69     	 ldr r3,[r1,#24]
 1155 0008 23F40033 	 bic r3,r3,#131072
 1156 000c 8B61     	 str r3,[r1,#24]
 1157 000e 7047     	 bx lr
 1158              	 .cfi_endproc
 1159              	.LFE202:
 1161              	 .section .text.XMC_DMA_CH_EnableDestinationScatter,"ax",%progbits
 1162              	 .align 2
 1163              	 .global XMC_DMA_CH_EnableDestinationScatter
 1164              	 .thumb
 1165              	 .thumb_func
 1167              	XMC_DMA_CH_EnableDestinationScatter:
 1168              	.LFB203:
 544:../Libraries/XMCLib/src/xmc_dma.c **** }
 545:../Libraries/XMCLib/src/xmc_dma.c **** 
 546:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination scatter */
 547:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t inte
 548:../Libraries/XMCLib/src/xmc_dma.c **** {
 1169              	 .loc 1 548 0
 1170              	 .cfi_startproc
 1171              	 
 1172              	 
 1173              	 
 1174              	.LVL109:
 1175 0000 10B4     	 push {r4}
 1176              	.LCFI17:
 1177              	 .cfi_def_cfa_offset 4
 1178              	 .cfi_offset 4,-4
 549:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 1179              	 .loc 1 549 0
 1180 0002 5824     	 movs r4,#88
 1181 0004 04FB0101 	 mla r1,r4,r1,r0
 1182              	.LVL110:
 1183 0008 8869     	 ldr r0,[r1,#24]
 1184              	.LVL111:
 1185 000a 40F48020 	 orr r0,r0,#262144
 1186 000e 8861     	 str r0,[r1,#24]
 550:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0
 1187              	 .loc 1 550 0
 1188 0010 42EA0353 	 orr r3,r2,r3,lsl#20
 1189              	.LVL112:
 1190 0014 0B65     	 str r3,[r1,#80]
 551:../Libraries/XMCLib/src/xmc_dma.c **** }
 1191              	 .loc 1 551 0
 1192 0016 5DF8044B 	 ldr r4,[sp],#4
 1193              	.LCFI18:
 1194              	 .cfi_restore 4
 1195              	 .cfi_def_cfa_offset 0
 1196 001a 7047     	 bx lr
 1197              	 .cfi_endproc
 1198              	.LFE203:
 1200              	 .section .text.XMC_DMA_CH_DisableDestinationScatter,"ax",%progbits
 1201              	 .align 2
 1202              	 .global XMC_DMA_CH_DisableDestinationScatter
 1203              	 .thumb
 1204              	 .thumb_func
 1206              	XMC_DMA_CH_DisableDestinationScatter:
 1207              	.LFB204:
 552:../Libraries/XMCLib/src/xmc_dma.c **** 
 553:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination scatter */
 554:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
 555:../Libraries/XMCLib/src/xmc_dma.c **** {
 1208              	 .loc 1 555 0
 1209              	 .cfi_startproc
 1210              	 
 1211              	 
 1212              	 
 1213              	.LVL113:
 556:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 1214              	 .loc 1 556 0
 1215 0000 5823     	 movs r3,#88
 1216 0002 03FB0101 	 mla r1,r3,r1,r0
 1217              	.LVL114:
 1218 0006 8B69     	 ldr r3,[r1,#24]
 1219 0008 23F48023 	 bic r3,r3,#262144
 1220 000c 8B61     	 str r3,[r1,#24]
 1221 000e 7047     	 bx lr
 1222              	 .cfi_endproc
 1223              	.LFE204:
 1225              	 .section .text.XMC_DMA_CH_TriggerSourceRequest,"ax",%progbits
 1226              	 .align 2
 1227              	 .global XMC_DMA_CH_TriggerSourceRequest
 1228              	 .thumb
 1229              	 .thumb_func
 1231              	XMC_DMA_CH_TriggerSourceRequest:
 1232              	.LFB205:
 557:../Libraries/XMCLib/src/xmc_dma.c **** }
 558:../Libraries/XMCLib/src/xmc_dma.c **** 
 559:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger source request */
 560:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_
 561:../Libraries/XMCLib/src/xmc_dma.c **** {
 1233              	 .loc 1 561 0
 1234              	 .cfi_startproc
 1235              	 
 1236              	 
 1237              	 
 1238              	.LVL115:
 562:../Libraries/XMCLib/src/xmc_dma.c ****   if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 1239              	 .loc 1 562 0
 1240 0000 22B9     	 cbnz r2,.L106
 563:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 564:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 1241              	 .loc 1 564 0
 1242 0002 40F20112 	 movw r2,#257
 1243              	.LVL116:
 1244 0006 8A40     	 lsls r2,r2,r1
 1245 0008 C0F87823 	 str r2,[r0,#888]
 1246              	.L106:
 565:../Libraries/XMCLib/src/xmc_dma.c ****   }
 566:../Libraries/XMCLib/src/xmc_dma.c **** 
 567:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 1247              	 .loc 1 567 0
 1248 000c 23B1     	 cbz r3,.L107
 568:../Libraries/XMCLib/src/xmc_dma.c ****   {
 569:../Libraries/XMCLib/src/xmc_dma.c ****   dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 1249              	 .loc 1 569 0
 1250 000e 40F20113 	 movw r3,#257
 1251              	.LVL117:
 1252 0012 8B40     	 lsls r3,r3,r1
 1253 0014 C0F88833 	 str r3,[r0,#904]
 1254              	.L107:
 570:../Libraries/XMCLib/src/xmc_dma.c ****   }
 571:../Libraries/XMCLib/src/xmc_dma.c ****   
 572:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQSRCREG = (uint32_t)0x101UL << channel;
 1255              	 .loc 1 572 0
 1256 0018 40F20113 	 movw r3,#257
 1257 001c 8B40     	 lsls r3,r3,r1
 1258 001e C0F86833 	 str r3,[r0,#872]
 1259 0022 7047     	 bx lr
 1260              	 .cfi_endproc
 1261              	.LFE205:
 1263              	 .section .text.XMC_DMA_CH_TriggerDestinationRequest,"ax",%progbits
 1264              	 .align 2
 1265              	 .global XMC_DMA_CH_TriggerDestinationRequest
 1266              	 .thumb
 1267              	 .thumb_func
 1269              	XMC_DMA_CH_TriggerDestinationRequest:
 1270              	.LFB206:
 573:../Libraries/XMCLib/src/xmc_dma.c **** }
 574:../Libraries/XMCLib/src/xmc_dma.c **** 
 575:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger destination request */
 576:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DM
 577:../Libraries/XMCLib/src/xmc_dma.c **** {
 1271              	 .loc 1 577 0
 1272              	 .cfi_startproc
 1273              	 
 1274              	 
 1275              	 
 1276              	.LVL118:
 578:../Libraries/XMCLib/src/xmc_dma.c ****   if(type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 1277              	 .loc 1 578 0
 1278 0000 22B9     	 cbnz r2,.L109
 579:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 580:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 1279              	 .loc 1 580 0
 1280 0002 40F20112 	 movw r2,#257
 1281              	.LVL119:
 1282 0006 8A40     	 lsls r2,r2,r1
 1283 0008 C0F88023 	 str r2,[r0,#896]
 1284              	.L109:
 581:../Libraries/XMCLib/src/xmc_dma.c ****   }
 582:../Libraries/XMCLib/src/xmc_dma.c **** 
 583:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 1285              	 .loc 1 583 0
 1286 000c 23B1     	 cbz r3,.L110
 584:../Libraries/XMCLib/src/xmc_dma.c ****   {
 585:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 1287              	 .loc 1 585 0
 1288 000e 40F20113 	 movw r3,#257
 1289              	.LVL120:
 1290 0012 8B40     	 lsls r3,r3,r1
 1291 0014 C0F89033 	 str r3,[r0,#912]
 1292              	.L110:
 586:../Libraries/XMCLib/src/xmc_dma.c ****   }
 587:../Libraries/XMCLib/src/xmc_dma.c **** 
 588:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQDSTREG = (uint32_t)0x101UL << channel;
 1293              	 .loc 1 588 0
 1294 0018 40F20113 	 movw r3,#257
 1295 001c 8B40     	 lsls r3,r3,r1
 1296 001e C0F87033 	 str r3,[r0,#880]
 1297 0022 7047     	 bx lr
 1298              	 .cfi_endproc
 1299              	.LFE206:
 1301              	 .section .text.XMC_DMA_CH_EnableSourceAddressReload,"ax",%progbits
 1302              	 .align 2
 1303              	 .global XMC_DMA_CH_EnableSourceAddressReload
 1304              	 .thumb
 1305              	 .thumb_func
 1307              	XMC_DMA_CH_EnableSourceAddressReload:
 1308              	.LFB207:
 589:../Libraries/XMCLib/src/xmc_dma.c **** }
 590:../Libraries/XMCLib/src/xmc_dma.c **** 
 591:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source address reload */
 592:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 593:../Libraries/XMCLib/src/xmc_dma.c **** {
 1309              	 .loc 1 593 0
 1310              	 .cfi_startproc
 1311              	 
 1312              	 
 1313              	 
 1314              	.LVL121:
 594:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1315              	 .loc 1 594 0
 1316 0000 5823     	 movs r3,#88
 1317 0002 03FB0101 	 mla r1,r3,r1,r0
 1318              	.LVL122:
 1319 0006 0B6C     	 ldr r3,[r1,#64]
 1320 0008 43F08043 	 orr r3,r3,#1073741824
 1321 000c 0B64     	 str r3,[r1,#64]
 1322 000e 7047     	 bx lr
 1323              	 .cfi_endproc
 1324              	.LFE207:
 1326              	 .section .text.XMC_DMA_CH_DisableSourceAddressReload,"ax",%progbits
 1327              	 .align 2
 1328              	 .global XMC_DMA_CH_DisableSourceAddressReload
 1329              	 .thumb
 1330              	 .thumb_func
 1332              	XMC_DMA_CH_DisableSourceAddressReload:
 1333              	.LFB208:
 595:../Libraries/XMCLib/src/xmc_dma.c **** }
 596:../Libraries/XMCLib/src/xmc_dma.c **** 
 597:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source address reload */
 598:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 599:../Libraries/XMCLib/src/xmc_dma.c **** {
 1334              	 .loc 1 599 0
 1335              	 .cfi_startproc
 1336              	 
 1337              	 
 1338              	 
 1339              	.LVL123:
 600:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1340              	 .loc 1 600 0
 1341 0000 5823     	 movs r3,#88
 1342 0002 03FB0101 	 mla r1,r3,r1,r0
 1343              	.LVL124:
 1344 0006 0B6C     	 ldr r3,[r1,#64]
 1345 0008 23F08043 	 bic r3,r3,#1073741824
 1346 000c 0B64     	 str r3,[r1,#64]
 1347 000e 7047     	 bx lr
 1348              	 .cfi_endproc
 1349              	.LFE208:
 1351              	 .section .text.XMC_DMA_CH_EnableDestinationAddressReload,"ax",%progbits
 1352              	 .align 2
 1353              	 .global XMC_DMA_CH_EnableDestinationAddressReload
 1354              	 .thumb
 1355              	 .thumb_func
 1357              	XMC_DMA_CH_EnableDestinationAddressReload:
 1358              	.LFB209:
 601:../Libraries/XMCLib/src/xmc_dma.c **** }
 602:../Libraries/XMCLib/src/xmc_dma.c **** 
 603:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination address reload */
 604:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 605:../Libraries/XMCLib/src/xmc_dma.c **** {
 1359              	 .loc 1 605 0
 1360              	 .cfi_startproc
 1361              	 
 1362              	 
 1363              	 
 1364              	.LVL125:
 606:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1365              	 .loc 1 606 0
 1366 0000 5823     	 movs r3,#88
 1367 0002 03FB0101 	 mla r1,r3,r1,r0
 1368              	.LVL126:
 1369 0006 0B6C     	 ldr r3,[r1,#64]
 1370 0008 43F00043 	 orr r3,r3,#-2147483648
 1371 000c 0B64     	 str r3,[r1,#64]
 1372 000e 7047     	 bx lr
 1373              	 .cfi_endproc
 1374              	.LFE209:
 1376              	 .section .text.XMC_DMA_CH_DisableDestinationAddressReload,"ax",%progbits
 1377              	 .align 2
 1378              	 .global XMC_DMA_CH_DisableDestinationAddressReload
 1379              	 .thumb
 1380              	 .thumb_func
 1382              	XMC_DMA_CH_DisableDestinationAddressReload:
 1383              	.LFB210:
 607:../Libraries/XMCLib/src/xmc_dma.c **** }
 608:../Libraries/XMCLib/src/xmc_dma.c **** 
 609:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination address reload */
 610:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 611:../Libraries/XMCLib/src/xmc_dma.c **** {
 1384              	 .loc 1 611 0
 1385              	 .cfi_startproc
 1386              	 
 1387              	 
 1388              	 
 1389              	.LVL127:
 612:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1390              	 .loc 1 612 0
 1391 0000 5823     	 movs r3,#88
 1392 0002 03FB0101 	 mla r1,r3,r1,r0
 1393              	.LVL128:
 1394 0006 0B6C     	 ldr r3,[r1,#64]
 1395 0008 23F00043 	 bic r3,r3,#-2147483648
 1396 000c 0B64     	 str r3,[r1,#64]
 1397 000e 7047     	 bx lr
 1398              	 .cfi_endproc
 1399              	.LFE210:
 1401              	 .section .text.XMC_DMA_CH_RequestLastMultiblockTransfer,"ax",%progbits
 1402              	 .align 2
 1403              	 .global XMC_DMA_CH_RequestLastMultiblockTransfer
 1404              	 .thumb
 1405              	 .thumb_func
 1407              	XMC_DMA_CH_RequestLastMultiblockTransfer:
 1408              	.LFB211:
 613:../Libraries/XMCLib/src/xmc_dma.c **** }
 614:../Libraries/XMCLib/src/xmc_dma.c **** 
 615:../Libraries/XMCLib/src/xmc_dma.c **** /* Request last multi-block transfer */
 616:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
 617:../Libraries/XMCLib/src/xmc_dma.c **** {
 1409              	 .loc 1 617 0
 1410              	 .cfi_startproc
 1411              	 
 1412              	 
 1413              	 
 1414              	.LVL129:
 618:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Ms
 1415              	 .loc 1 618 0
 1416 0000 5823     	 movs r3,#88
 1417 0002 03FB0101 	 mla r1,r3,r1,r0
 1418              	.LVL130:
 1419 0006 0B6C     	 ldr r3,[r1,#64]
 1420 0008 23F04043 	 bic r3,r3,#-1073741824
 1421 000c 0B64     	 str r3,[r1,#64]
 619:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Ms
 1422              	 .loc 1 619 0
 1423 000e 8B69     	 ldr r3,[r1,#24]
 1424 0010 23F0C053 	 bic r3,r3,#402653184
 1425 0014 8B61     	 str r3,[r1,#24]
 1426 0016 7047     	 bx lr
 1427              	 .cfi_endproc
 1428              	.LFE211:
 1430              	 .section .text.XMC_DMA_CH_SetEventHandler,"ax",%progbits
 1431              	 .align 2
 1432              	 .global XMC_DMA_CH_SetEventHandler
 1433              	 .thumb
 1434              	 .thumb_func
 1436              	XMC_DMA_CH_SetEventHandler:
 1437              	.LFB212:
 620:../Libraries/XMCLib/src/xmc_dma.c **** }
 621:../Libraries/XMCLib/src/xmc_dma.c **** 
 622:../Libraries/XMCLib/src/xmc_dma.c **** /* Set event handler */
 623:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDL
 624:../Libraries/XMCLib/src/xmc_dma.c **** {
 1438              	 .loc 1 624 0
 1439              	 .cfi_startproc
 1440              	 
 1441              	 
 1442              	 
 1443              	.LVL131:
 625:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 626:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 1444              	 .loc 1 626 0
 1445 0000 034B     	 ldr r3,.L119
 1446 0002 9842     	 cmp r0,r3
 627:../Libraries/XMCLib/src/xmc_dma.c ****   {
 628:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 629:../Libraries/XMCLib/src/xmc_dma.c ****     dma0_event_handlers[channel] = event_handler;
 1447              	 .loc 1 629 0
 1448 0004 0CBF     	 ite eq
 1449 0006 034B     	 ldreq r3,.L119+4
 630:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 631:../Libraries/XMCLib/src/xmc_dma.c ****   }
 632:../Libraries/XMCLib/src/xmc_dma.c ****   else
 633:../Libraries/XMCLib/src/xmc_dma.c ****   {
 634:../Libraries/XMCLib/src/xmc_dma.c ****     dma1_event_handlers[channel] = event_handler;
 1450              	 .loc 1 634 0
 1451 0008 034B     	 ldrne r3,.L119+8
 1452 000a 43F82120 	 str r2,[r3,r1,lsl#2]
 1453 000e 7047     	 bx lr
 1454              	.L120:
 1455              	 .align 2
 1456              	.L119:
 1457 0010 00400150 	 .word 1342259200
 1458 0014 00000000 	 .word dma0_event_handlers
 1459 0018 00000000 	 .word dma1_event_handlers
 1460              	 .cfi_endproc
 1461              	.LFE212:
 1463              	 .section .text.XMC_DMA_CH_ClearSourcePeripheralRequest,"ax",%progbits
 1464              	 .align 2
 1465              	 .global XMC_DMA_CH_ClearSourcePeripheralRequest
 1466              	 .thumb
 1467              	 .thumb_func
 1469              	XMC_DMA_CH_ClearSourcePeripheralRequest:
 1470              	.LFB213:
 635:../Libraries/XMCLib/src/xmc_dma.c ****   }
 636:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 637:../Libraries/XMCLib/src/xmc_dma.c **** }
 638:../Libraries/XMCLib/src/xmc_dma.c **** 
 639:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 640:../Libraries/XMCLib/src/xmc_dma.c **** {
 1471              	 .loc 1 640 0
 1472              	 .cfi_startproc
 1473              	 
 1474              	 
 1475              	.LVL132:
 1476 0000 08B5     	 push {r3,lr}
 1477              	.LCFI19:
 1478              	 .cfi_def_cfa_offset 8
 1479              	 .cfi_offset 3,-8
 1480              	 .cfi_offset 14,-4
 641:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 642:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 1481              	 .loc 1 642 0
 1482 0002 5823     	 movs r3,#88
 1483 0004 03FB0101 	 mla r1,r3,r1,r0
 1484              	.LVL133:
 1485 0008 4031     	 adds r1,r1,#64
 1486 000a 4968     	 ldr r1,[r1,#4]
 1487              	.LVL134:
 643:../Libraries/XMCLib/src/xmc_dma.c **** 
 644:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 1488              	 .loc 1 644 0
 1489 000c C1F3C311 	 ubfx r1,r1,#7,#4
 1490              	.LVL135:
 1491 0010 FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 1492              	.LVL136:
 1493 0014 08BD     	 pop {r3,pc}
 1494              	 .cfi_endproc
 1495              	.LFE213:
 1497 0016 00BF     	 .section .text.XMC_DMA_CH_ClearDestinationPeripheralRequest,"ax",%progbits
 1498              	 .align 2
 1499              	 .global XMC_DMA_CH_ClearDestinationPeripheralRequest
 1500              	 .thumb
 1501              	 .thumb_func
 1503              	XMC_DMA_CH_ClearDestinationPeripheralRequest:
 1504              	.LFB214:
 645:../Libraries/XMCLib/src/xmc_dma.c **** }
 646:../Libraries/XMCLib/src/xmc_dma.c **** 
 647:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 648:../Libraries/XMCLib/src/xmc_dma.c **** {
 1505              	 .loc 1 648 0
 1506              	 .cfi_startproc
 1507              	 
 1508              	 
 1509              	.LVL137:
 1510 0000 08B5     	 push {r3,lr}
 1511              	.LCFI20:
 1512              	 .cfi_def_cfa_offset 8
 1513              	 .cfi_offset 3,-8
 1514              	 .cfi_offset 14,-4
 649:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 650:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 1515              	 .loc 1 650 0
 1516 0002 5823     	 movs r3,#88
 1517 0004 03FB0101 	 mla r1,r3,r1,r0
 1518              	.LVL138:
 1519 0008 4031     	 adds r1,r1,#64
 1520 000a 4968     	 ldr r1,[r1,#4]
 1521              	.LVL139:
 651:../Libraries/XMCLib/src/xmc_dma.c **** 
 652:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 1522              	 .loc 1 652 0
 1523 000c C1F3C321 	 ubfx r1,r1,#11,#4
 1524              	.LVL140:
 1525 0010 FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 1526              	.LVL141:
 1527 0014 08BD     	 pop {r3,pc}
 1528              	 .cfi_endproc
 1529              	.LFE214:
 1531 0016 00BF     	 .section .text.XMC_DMA_IRQHandler,"ax",%progbits
 1532              	 .align 2
 1533              	 .global XMC_DMA_IRQHandler
 1534              	 .thumb
 1535              	 .thumb_func
 1537              	XMC_DMA_IRQHandler:
 1538              	.LFB215:
 653:../Libraries/XMCLib/src/xmc_dma.c **** }
 654:../Libraries/XMCLib/src/xmc_dma.c **** 
 655:../Libraries/XMCLib/src/xmc_dma.c **** /* Default DMA IRQ handler */
 656:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
 657:../Libraries/XMCLib/src/xmc_dma.c **** {
 1539              	 .loc 1 657 0
 1540              	 .cfi_startproc
 1541              	 
 1542              	 
 1543              	.LVL142:
 1544 0000 38B5     	 push {r3,r4,r5,lr}
 1545              	.LCFI21:
 1546              	 .cfi_def_cfa_offset 16
 1547              	 .cfi_offset 3,-16
 1548              	 .cfi_offset 4,-12
 1549              	 .cfi_offset 5,-8
 1550              	 .cfi_offset 14,-4
 658:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event;
 659:../Libraries/XMCLib/src/xmc_dma.c ****   int32_t channel;
 660:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t mask;
 661:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
 662:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t event_handler;
 663:../Libraries/XMCLib/src/xmc_dma.c **** 
 664:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 665:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 666:../Libraries/XMCLib/src/xmc_dma.c ****   {
 667:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 668:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma0_event_handlers;
 669:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 670:../Libraries/XMCLib/src/xmc_dma.c ****   }
 671:../Libraries/XMCLib/src/xmc_dma.c ****   else
 672:../Libraries/XMCLib/src/xmc_dma.c ****   {
 673:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma1_event_handlers;
 1551              	 .loc 1 673 0
 1552 0002 514B     	 ldr r3,.L154
 1553 0004 514A     	 ldr r2,.L154+4
 1554 0006 524D     	 ldr r5,.L154+8
 1555 0008 A842     	 cmp r0,r5
 1556 000a 0CBF     	 ite eq
 1557 000c 1546     	 moveq r5,r2
 1558 000e 1D46     	 movne r5,r3
 1559              	.LVL143:
 1560              	.LBB18:
 1561              	.LBB19:
 1562              	 .file 2 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc_dma.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @file xmc_dma.h
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @date 2017-09-28
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @cond
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * All rights reserved.                        
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *                                             
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * following conditions are met:   
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * disclaimer.                        
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * 
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * 
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Change History
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * --------------
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-02-20:
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Initial <br>
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-06-20:
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Documentation updates <br>
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * 2016-10-28:
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Fix documentation on maximum block size
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * 2017-09-28:
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Improved documentation and added XMC_DMA_CH_EnableFifo() and XMC_DMA_CH_DisableFifo()
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @endcond
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #ifndef XMC_DMA_H
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA_H
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * HEADER FILES
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_common.h"
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_dma_map.h"
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup DMA
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * hardware peripheral.
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * MACROS
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA1)
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * ENUMS
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer types
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer flow modes
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid burst length values
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid transfer width values
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA address count mode
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel priorities
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Source handshake interface
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination handshake interface
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA hardware handshaking interface
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA events
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Transaction types
 236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel status values
 245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DATA STRUCTURES
 255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * modes and the like.
 265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  
 267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct {
 268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SAR;
 269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DAR;
 271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LLP;
 273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGR;
 287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSR;
 289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } GPDMA_CH_t;
 291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA device structure <br>
 294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct {
 300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  ID;
 325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_t;
 329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma push
 333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma anon_unions
 334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma warning 586
 336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel linked list item.
 340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Note: Needs to be word aligned
 341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   union
 348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   {
 349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     {
 351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     };
 367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   };
 369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure
 378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   union
 382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   {
 383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     {
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             
 396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 9;                             
 398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     };
 399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   };
 400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   
 405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   union
 406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   {
 407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t src_gather_control;
 408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     {
 410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     };
 413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   };
 414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   union
 416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   {
 417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     {
 420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****     };
 423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   };
 424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   
 425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [max. 
 426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type (:: XMC_DMA_CH_TRANSFER_TYPE
 427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority (::XMC_DMA_CH_PRIORITY_t)
 428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface (:: XMC_DMA_C
 429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request. See xmc_dma_map.h *
 430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface (:: XMC_
 431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request. See xmc_dma_ma
 432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma pop
 437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma warning restore
 439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel event handler
 443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * API PROTOTYPES
 448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #ifdef __cplusplus
 451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** extern "C" {
 452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral.
 464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @return bool
 498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * is enabled.
 507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA event status <br>
 516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSGLEV);
 1563              	 .loc 2 532 0
 1564 0010 D0F86033 	 ldr r3,[r0,#864]
 1565              	.LVL144:
 1566              	.LBE19:
 1567              	.LBE18:
 674:../Libraries/XMCLib/src/xmc_dma.c ****   }
 675:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 676:../Libraries/XMCLib/src/xmc_dma.c ****   
 677:../Libraries/XMCLib/src/xmc_dma.c ****   event = XMC_DMA_GetEventStatus(dma);
 678:../Libraries/XMCLib/src/xmc_dma.c ****   channel = 0;
 679:../Libraries/XMCLib/src/xmc_dma.c **** 
 680:../Libraries/XMCLib/src/xmc_dma.c ****   if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 1568              	 .loc 1 680 0
 1569 0014 13F0100F 	 tst r3,#16
 1570 0018 1AD0     	 beq .L127
 1571              	.LVL145:
 1572              	.LBB20:
 1573              	.LBB21:
 533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** }
 534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Get transfer complete status <br>
 541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
 548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** }
 549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Get block transfer complete status <br>
 556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** }
 564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Get source transaction complete status <br>
 571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * ignored.
 578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** }
 583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * interrupt is ignored.
 597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** }
 602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** 
 603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** /**
 604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA error event status <br>
 609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  *
 610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****  */
 613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** {
 615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 1574              	 .loc 2 615 0
 1575 001a D0F80823 	 ldr r2,[r0,#776]
 1576              	.LBE21:
 1577              	.LBE20:
 681:../Libraries/XMCLib/src/xmc_dma.c ****   {
 682:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsErrorStatus(dma);
 683:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 1578              	 .loc 1 683 0
 1579 001e 002A     	 cmp r2,#0
 1580 0020 00F09180 	 beq .L125
 1581              	.LVL146:
 684:../Libraries/XMCLib/src/xmc_dma.c ****     {
 685:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 686:../Libraries/XMCLib/src/xmc_dma.c ****       if ((event & mask) != 0)
 1582              	 .loc 1 686 0
 1583 0024 12F0010F 	 tst r2,#1
 1584 0028 06D1     	 bne .L148
 1585 002a 0124     	 movs r4,#1
 685:../Libraries/XMCLib/src/xmc_dma.c ****       if ((event & mask) != 0)
 1586              	 .loc 1 685 0
 1587 002c 2146     	 mov r1,r4
 1588              	.LVL147:
 1589              	.L142:
 1590 002e 01FA04F3 	 lsl r3,r1,r4
 1591              	 .loc 1 686 0
 1592 0032 1342     	 tst r3,r2
 1593 0034 7DD0     	 beq .L130
 1594 0036 00E0     	 b .L129
 1595              	.LVL148:
 1596              	.L148:
 678:../Libraries/XMCLib/src/xmc_dma.c **** 
 1597              	 .loc 1 678 0
 1598 0038 0024     	 movs r4,#0
 1599              	.LVL149:
 1600              	.L129:
 687:../Libraries/XMCLib/src/xmc_dma.c ****       {
 688:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 1601              	 .loc 1 688 0
 1602 003a E1B2     	 uxtb r1,r4
 1603 003c 1022     	 movs r2,#16
 1604 003e FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1605              	.LVL150:
 689:../Libraries/XMCLib/src/xmc_dma.c **** 
 690:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 691:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1606              	 .loc 1 691 0
 1607 0042 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1608              	.LVL151:
 692:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 1609              	 .loc 1 692 0
 1610 0046 002B     	 cmp r3,#0
 1611 0048 7DD0     	 beq .L125
 693:../Libraries/XMCLib/src/xmc_dma.c ****         {
 694:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_ERROR);
 1612              	 .loc 1 694 0
 1613 004a 1020     	 movs r0,#16
 1614 004c 9847     	 blx r3
 1615              	.LVL152:
 1616 004e 38BD     	 pop {r3,r4,r5,pc}
 1617              	.LVL153:
 1618              	.L127:
 695:../Libraries/XMCLib/src/xmc_dma.c ****         }
 696:../Libraries/XMCLib/src/xmc_dma.c ****        
 697:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 698:../Libraries/XMCLib/src/xmc_dma.c ****       }
 699:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 700:../Libraries/XMCLib/src/xmc_dma.c ****     }
 701:../Libraries/XMCLib/src/xmc_dma.c ****   }
 702:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 1619              	 .loc 1 702 0
 1620 0050 13F0010F 	 tst r3,#1
 1621 0054 19D0     	 beq .L131
 1622              	.LVL154:
 1623              	.LBB22:
 1624              	.LBB23:
 547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** }
 1625              	 .loc 2 547 0
 1626 0056 D0F8E822 	 ldr r2,[r0,#744]
 1627              	.LBE23:
 1628              	.LBE22:
 703:../Libraries/XMCLib/src/xmc_dma.c ****   {
 704:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 705:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 1629              	 .loc 1 705 0
 1630 005a 002A     	 cmp r2,#0
 1631 005c 73D0     	 beq .L125
 1632              	.LVL155:
 706:../Libraries/XMCLib/src/xmc_dma.c ****     {
 707:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 708:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1633              	 .loc 1 708 0
 1634 005e 12F0010F 	 tst r2,#1
 1635 0062 06D1     	 bne .L149
 1636 0064 0124     	 movs r4,#1
 707:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1637              	 .loc 1 707 0
 1638 0066 2146     	 mov r1,r4
 1639              	.LVL156:
 1640              	.L143:
 1641 0068 01FA04F3 	 lsl r3,r1,r4
 1642              	 .loc 1 708 0
 1643 006c 1342     	 tst r3,r2
 1644 006e 62D0     	 beq .L133
 1645 0070 00E0     	 b .L132
 1646              	.LVL157:
 1647              	.L149:
 678:../Libraries/XMCLib/src/xmc_dma.c **** 
 1648              	 .loc 1 678 0
 1649 0072 0024     	 movs r4,#0
 1650              	.LVL158:
 1651              	.L132:
 709:../Libraries/XMCLib/src/xmc_dma.c ****       {
 710:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TR
 1652              	 .loc 1 710 0
 1653 0074 E1B2     	 uxtb r1,r4
 1654 0076 0F22     	 movs r2,#15
 1655 0078 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1656              	.LVL159:
 711:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_BL
 712:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 713:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 714:../Libraries/XMCLib/src/xmc_dma.c **** 
 715:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 716:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1657              	 .loc 1 716 0
 1658 007c 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1659              	.LVL160:
 717:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 1660              	 .loc 1 717 0
 1661 0080 002B     	 cmp r3,#0
 1662 0082 60D0     	 beq .L125
 718:../Libraries/XMCLib/src/xmc_dma.c ****         {
 719:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 1663              	 .loc 1 719 0
 1664 0084 0120     	 movs r0,#1
 1665 0086 9847     	 blx r3
 1666              	.LVL161:
 1667 0088 38BD     	 pop {r3,r4,r5,pc}
 1668              	.LVL162:
 1669              	.L131:
 720:../Libraries/XMCLib/src/xmc_dma.c ****         }
 721:../Libraries/XMCLib/src/xmc_dma.c **** 																	  
 722:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 723:../Libraries/XMCLib/src/xmc_dma.c ****       }
 724:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 725:../Libraries/XMCLib/src/xmc_dma.c ****     }
 726:../Libraries/XMCLib/src/xmc_dma.c ****   }
 727:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 1670              	 .loc 1 727 0
 1671 008a 13F0020F 	 tst r3,#2
 1672 008e 19D0     	 beq .L134
 1673              	.LVL163:
 1674              	.LBB24:
 1675              	.LBB25:
 562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** }
 1676              	 .loc 2 562 0
 1677 0090 D0F8F022 	 ldr r2,[r0,#752]
 1678              	.LBE25:
 1679              	.LBE24:
 728:../Libraries/XMCLib/src/xmc_dma.c ****   {
 729:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 730:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 1680              	 .loc 1 730 0
 1681 0094 002A     	 cmp r2,#0
 1682 0096 56D0     	 beq .L125
 1683              	.LVL164:
 731:../Libraries/XMCLib/src/xmc_dma.c ****     {
 732:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 733:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1684              	 .loc 1 733 0
 1685 0098 12F0010F 	 tst r2,#1
 1686 009c 06D1     	 bne .L150
 1687 009e 0124     	 movs r4,#1
 732:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1688              	 .loc 1 732 0
 1689 00a0 2146     	 mov r1,r4
 1690              	.LVL165:
 1691              	.L144:
 1692 00a2 01FA04F3 	 lsl r3,r1,r4
 1693              	 .loc 1 733 0
 1694 00a6 1342     	 tst r3,r2
 1695 00a8 47D0     	 beq .L136
 1696 00aa 00E0     	 b .L135
 1697              	.LVL166:
 1698              	.L150:
 678:../Libraries/XMCLib/src/xmc_dma.c **** 
 1699              	 .loc 1 678 0
 1700 00ac 0024     	 movs r4,#0
 1701              	.LVL167:
 1702              	.L135:
 734:../Libraries/XMCLib/src/xmc_dma.c ****       {
 735:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BL
 1703              	 .loc 1 735 0
 1704 00ae E1B2     	 uxtb r1,r4
 1705 00b0 0E22     	 movs r2,#14
 1706 00b2 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1707              	.LVL168:
 736:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 737:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 738:../Libraries/XMCLib/src/xmc_dma.c **** 
 739:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 740:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1708              	 .loc 1 740 0
 1709 00b6 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1710              	.LVL169:
 741:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 1711              	 .loc 1 741 0
 1712 00ba 002B     	 cmp r3,#0
 1713 00bc 43D0     	 beq .L125
 742:../Libraries/XMCLib/src/xmc_dma.c ****         {
 743:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 1714              	 .loc 1 743 0
 1715 00be 0220     	 movs r0,#2
 1716 00c0 9847     	 blx r3
 1717              	.LVL170:
 1718 00c2 38BD     	 pop {r3,r4,r5,pc}
 1719              	.LVL171:
 1720              	.L134:
 744:../Libraries/XMCLib/src/xmc_dma.c ****         }
 745:../Libraries/XMCLib/src/xmc_dma.c **** 
 746:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 747:../Libraries/XMCLib/src/xmc_dma.c ****       }
 748:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 749:../Libraries/XMCLib/src/xmc_dma.c ****     }
 750:../Libraries/XMCLib/src/xmc_dma.c ****   }
 751:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 1721              	 .loc 1 751 0
 1722 00c4 13F0040F 	 tst r3,#4
 1723 00c8 18D0     	 beq .L137
 1724              	.LVL172:
 1725              	.LBB26:
 1726              	.LBB27:
 581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** }
 1727              	 .loc 2 581 0
 1728 00ca D0F8F822 	 ldr r2,[r0,#760]
 1729              	.LBE27:
 1730              	.LBE26:
 752:../Libraries/XMCLib/src/xmc_dma.c ****   {
 753:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 754:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 1731              	 .loc 1 754 0
 1732 00ce 002A     	 cmp r2,#0
 1733 00d0 39D0     	 beq .L125
 1734              	.LVL173:
 755:../Libraries/XMCLib/src/xmc_dma.c ****     {
 756:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 757:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1735              	 .loc 1 757 0
 1736 00d2 12F0010F 	 tst r2,#1
 1737 00d6 06D1     	 bne .L151
 1738 00d8 0124     	 movs r4,#1
 756:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1739              	 .loc 1 756 0
 1740 00da 2146     	 mov r1,r4
 1741              	.LVL174:
 1742              	.L145:
 1743 00dc 01FA04F3 	 lsl r3,r1,r4
 1744              	 .loc 1 757 0
 1745 00e0 1342     	 tst r3,r2
 1746 00e2 2CD0     	 beq .L139
 1747 00e4 00E0     	 b .L138
 1748              	.LVL175:
 1749              	.L151:
 678:../Libraries/XMCLib/src/xmc_dma.c **** 
 1750              	 .loc 1 678 0
 1751 00e6 0024     	 movs r4,#0
 1752              	.LVL176:
 1753              	.L138:
 758:../Libraries/XMCLib/src/xmc_dma.c ****       {
 759:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 1754              	 .loc 1 759 0
 1755 00e8 E1B2     	 uxtb r1,r4
 1756 00ea 0422     	 movs r2,#4
 1757 00ec FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1758              	.LVL177:
 760:../Libraries/XMCLib/src/xmc_dma.c **** 
 761:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 762:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1759              	 .loc 1 762 0
 1760 00f0 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1761              	.LVL178:
 763:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 1762              	 .loc 1 763 0
 1763 00f4 3BB3     	 cbz r3,.L125
 764:../Libraries/XMCLib/src/xmc_dma.c ****         {
 765:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 1764              	 .loc 1 765 0
 1765 00f6 0420     	 movs r0,#4
 1766 00f8 9847     	 blx r3
 1767              	.LVL179:
 1768 00fa 38BD     	 pop {r3,r4,r5,pc}
 1769              	.LVL180:
 1770              	.L137:
 766:../Libraries/XMCLib/src/xmc_dma.c ****         }
 767:../Libraries/XMCLib/src/xmc_dma.c ****         
 768:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 769:../Libraries/XMCLib/src/xmc_dma.c ****       }
 770:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 771:../Libraries/XMCLib/src/xmc_dma.c ****     }
 772:../Libraries/XMCLib/src/xmc_dma.c ****   }
 773:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 1771              	 .loc 1 773 0
 1772 00fc 13F0080F 	 tst r3,#8
 1773 0100 21D0     	 beq .L125
 1774              	.LVL181:
 1775              	.LBB28:
 1776              	.LBB29:
 600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_dma.h **** }
 1777              	 .loc 2 600 0
 1778 0102 D0F80023 	 ldr r2,[r0,#768]
 1779              	.LBE29:
 1780              	.LBE28:
 774:../Libraries/XMCLib/src/xmc_dma.c ****   {
 775:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 776:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 1781              	 .loc 1 776 0
 1782 0106 F2B1     	 cbz r2,.L125
 1783              	.LVL182:
 777:../Libraries/XMCLib/src/xmc_dma.c ****     {
 778:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 779:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1784              	 .loc 1 779 0
 1785 0108 12F0010F 	 tst r2,#1
 1786 010c 06D1     	 bne .L152
 1787 010e 0124     	 movs r4,#1
 778:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1788              	 .loc 1 778 0
 1789 0110 2146     	 mov r1,r4
 1790              	.LVL183:
 1791              	.L146:
 1792 0112 01FA04F3 	 lsl r3,r1,r4
 1793              	 .loc 1 779 0
 1794 0116 1342     	 tst r3,r2
 1795 0118 13D0     	 beq .L141
 1796 011a 00E0     	 b .L140
 1797              	.LVL184:
 1798              	.L152:
 678:../Libraries/XMCLib/src/xmc_dma.c **** 
 1799              	 .loc 1 678 0
 1800 011c 0024     	 movs r4,#0
 1801              	.LVL185:
 1802              	.L140:
 780:../Libraries/XMCLib/src/xmc_dma.c ****       {
 781:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 1803              	 .loc 1 781 0
 1804 011e E1B2     	 uxtb r1,r4
 1805 0120 0822     	 movs r2,#8
 1806 0122 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1807              	.LVL186:
 782:../Libraries/XMCLib/src/xmc_dma.c **** 
 783:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 784:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1808              	 .loc 1 784 0
 1809 0126 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1810              	.LVL187:
 785:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 1811              	 .loc 1 785 0
 1812 012a 63B1     	 cbz r3,.L125
 786:../Libraries/XMCLib/src/xmc_dma.c ****         {
 787:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 1813              	 .loc 1 787 0
 1814 012c 0820     	 movs r0,#8
 1815 012e 9847     	 blx r3
 1816              	.LVL188:
 1817 0130 38BD     	 pop {r3,r4,r5,pc}
 1818              	.LVL189:
 1819              	.L130:
 699:../Libraries/XMCLib/src/xmc_dma.c ****     }
 1820              	 .loc 1 699 0
 1821 0132 0134     	 adds r4,r4,#1
 1822              	.LVL190:
 1823 0134 7BE7     	 b .L142
 1824              	.LVL191:
 1825              	.L133:
 724:../Libraries/XMCLib/src/xmc_dma.c ****     }
 1826              	 .loc 1 724 0
 1827 0136 0134     	 adds r4,r4,#1
 1828              	.LVL192:
 1829 0138 96E7     	 b .L143
 1830              	.LVL193:
 1831              	.L136:
 748:../Libraries/XMCLib/src/xmc_dma.c ****     }
 1832              	 .loc 1 748 0
 1833 013a 0134     	 adds r4,r4,#1
 1834              	.LVL194:
 1835 013c B1E7     	 b .L144
 1836              	.LVL195:
 1837              	.L139:
 770:../Libraries/XMCLib/src/xmc_dma.c ****     }
 1838              	 .loc 1 770 0
 1839 013e 0134     	 adds r4,r4,#1
 1840              	.LVL196:
 1841 0140 CCE7     	 b .L145
 1842              	.LVL197:
 1843              	.L141:
 788:../Libraries/XMCLib/src/xmc_dma.c ****         }      
 789:../Libraries/XMCLib/src/xmc_dma.c **** 
 790:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 791:../Libraries/XMCLib/src/xmc_dma.c ****       }
 792:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 1844              	 .loc 1 792 0
 1845 0142 0134     	 adds r4,r4,#1
 1846              	.LVL198:
 1847 0144 E5E7     	 b .L146
 1848              	.LVL199:
 1849              	.L125:
 1850 0146 38BD     	 pop {r3,r4,r5,pc}
 1851              	.LVL200:
 1852              	.L155:
 1853              	 .align 2
 1854              	.L154:
 1855 0148 00000000 	 .word dma1_event_handlers
 1856 014c 00000000 	 .word dma0_event_handlers
 1857 0150 00400150 	 .word 1342259200
 1858              	 .cfi_endproc
 1859              	.LFE215:
 1861              	 .comm dma1_event_handlers,16,4
 1862              	 .comm dma0_event_handlers,32,4
 1863              	 .text
 1864              	.Letext0:
 1865              	 .file 3 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1866              	 .file 4 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1867              	 .file 5 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1868              	 .file 6 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc4_scu.h"
 1869              	 .file 7 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include/core_cm4.h"
 1870              	 .file 8 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dma.c
    {standard input}:19     .text.XMC_DMA_Enable:00000000 $t
    {standard input}:24     .text.XMC_DMA_Enable:00000000 XMC_DMA_Enable
    {standard input}:57     .text.XMC_DMA_Enable:0000001c $d
    {standard input}:64     .text.XMC_DMA_Init:00000000 $t
    {standard input}:69     .text.XMC_DMA_Init:00000000 XMC_DMA_Init
    {standard input}:89     .text.XMC_DMA_Disable:00000000 $t
    {standard input}:94     .text.XMC_DMA_Disable:00000000 XMC_DMA_Disable
    {standard input}:124    .text.XMC_DMA_Disable:00000018 $d
    {standard input}:131    .text.XMC_DMA_IsEnabled:00000000 $t
    {standard input}:136    .text.XMC_DMA_IsEnabled:00000000 XMC_DMA_IsEnabled
    {standard input}:179    .text.XMC_DMA_IsEnabled:00000028 $d
    {standard input}:186    .text.XMC_DMA_EnableRequestLine:00000000 $t
    {standard input}:191    .text.XMC_DMA_EnableRequestLine:00000000 XMC_DMA_EnableRequestLine
    {standard input}:265    .text.XMC_DMA_EnableRequestLine:00000054 $d
    {standard input}:271    .text.XMC_DMA_DisableRequestLine:00000000 $t
    {standard input}:276    .text.XMC_DMA_DisableRequestLine:00000000 XMC_DMA_DisableRequestLine
    {standard input}:302    .text.XMC_DMA_DisableRequestLine:0000001c $d
    {standard input}:308    .text.XMC_DMA_ClearRequestLine:00000000 $t
    {standard input}:313    .text.XMC_DMA_ClearRequestLine:00000000 XMC_DMA_ClearRequestLine
    {standard input}:358    .text.XMC_DMA_ClearRequestLine:00000038 $d
    {standard input}:364    .text.XMC_DMA_GetOverrunStatus:00000000 $t
    {standard input}:369    .text.XMC_DMA_GetOverrunStatus:00000000 XMC_DMA_GetOverrunStatus
    {standard input}:407    .text.XMC_DMA_GetOverrunStatus:00000028 $d
    {standard input}:413    .text.XMC_DMA_ClearOverrunStatus:00000000 $t
    {standard input}:418    .text.XMC_DMA_ClearOverrunStatus:00000000 XMC_DMA_ClearOverrunStatus
    {standard input}:441    .text.XMC_DMA_ClearOverrunStatus:00000014 $d
    {standard input}:447    .text.XMC_DMA_CH_Disable:00000000 $t
    {standard input}:452    .text.XMC_DMA_CH_Disable:00000000 XMC_DMA_CH_Disable
    {standard input}:477    .text.XMC_DMA_CH_IsEnabled:00000000 $t
    {standard input}:482    .text.XMC_DMA_CH_IsEnabled:00000000 XMC_DMA_CH_IsEnabled
    {standard input}:501    .text.XMC_DMA_CH_Suspend:00000000 $t
    {standard input}:506    .text.XMC_DMA_CH_Suspend:00000000 XMC_DMA_CH_Suspend
    {standard input}:526    .text.XMC_DMA_CH_Resume:00000000 $t
    {standard input}:531    .text.XMC_DMA_CH_Resume:00000000 XMC_DMA_CH_Resume
    {standard input}:551    .text.XMC_DMA_CH_IsSuspended:00000000 $t
    {standard input}:556    .text.XMC_DMA_CH_IsSuspended:00000000 XMC_DMA_CH_IsSuspended
    {standard input}:577    .text.XMC_DMA_CH_EnableEvent:00000000 $t
    {standard input}:582    .text.XMC_DMA_CH_EnableEvent:00000000 XMC_DMA_CH_EnableEvent
    {standard input}:626    .text.XMC_DMA_CH_DisableEvent:00000000 $t
    {standard input}:631    .text.XMC_DMA_CH_DisableEvent:00000000 XMC_DMA_CH_DisableEvent
    {standard input}:675    .text.XMC_DMA_CH_ClearEventStatus:00000000 $t
    {standard input}:680    .text.XMC_DMA_CH_ClearEventStatus:00000000 XMC_DMA_CH_ClearEventStatus
    {standard input}:724    .text.XMC_DMA_CH_Init:00000000 $t
    {standard input}:729    .text.XMC_DMA_CH_Init:00000000 XMC_DMA_CH_Init
    {standard input}:895    .text.XMC_DMA_CH_Init:000000fa $d
    {standard input}:903    .text.XMC_DMA_CH_Init:00000102 $t
    {standard input}:1036   .text.XMC_DMA_CH_Init:000001b0 $d
    {standard input}:1041   .text.XMC_DMA_CH_GetEventStatus:00000000 $t
    {standard input}:1046   .text.XMC_DMA_CH_GetEventStatus:00000000 XMC_DMA_CH_GetEventStatus
    {standard input}:1098   .text.XMC_DMA_CH_EnableSourceGather:00000000 $t
    {standard input}:1103   .text.XMC_DMA_CH_EnableSourceGather:00000000 XMC_DMA_CH_EnableSourceGather
    {standard input}:1137   .text.XMC_DMA_CH_DisableSourceGather:00000000 $t
    {standard input}:1142   .text.XMC_DMA_CH_DisableSourceGather:00000000 XMC_DMA_CH_DisableSourceGather
    {standard input}:1162   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 $t
    {standard input}:1167   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 XMC_DMA_CH_EnableDestinationScatter
    {standard input}:1201   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 $t
    {standard input}:1206   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 XMC_DMA_CH_DisableDestinationScatter
    {standard input}:1226   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 $t
    {standard input}:1231   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 XMC_DMA_CH_TriggerSourceRequest
    {standard input}:1264   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 $t
    {standard input}:1269   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 XMC_DMA_CH_TriggerDestinationRequest
    {standard input}:1302   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 $t
    {standard input}:1307   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 XMC_DMA_CH_EnableSourceAddressReload
    {standard input}:1327   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 $t
    {standard input}:1332   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 XMC_DMA_CH_DisableSourceAddressReload
    {standard input}:1352   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 $t
    {standard input}:1357   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 XMC_DMA_CH_EnableDestinationAddressReload
    {standard input}:1377   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 $t
    {standard input}:1382   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 XMC_DMA_CH_DisableDestinationAddressReload
    {standard input}:1402   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 $t
    {standard input}:1407   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 XMC_DMA_CH_RequestLastMultiblockTransfer
    {standard input}:1431   .text.XMC_DMA_CH_SetEventHandler:00000000 $t
    {standard input}:1436   .text.XMC_DMA_CH_SetEventHandler:00000000 XMC_DMA_CH_SetEventHandler
    {standard input}:1457   .text.XMC_DMA_CH_SetEventHandler:00000010 $d
                            *COM*:00000020 dma0_event_handlers
                            *COM*:00000010 dma1_event_handlers
    {standard input}:1464   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 $t
    {standard input}:1469   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 XMC_DMA_CH_ClearSourcePeripheralRequest
    {standard input}:1498   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 $t
    {standard input}:1503   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 XMC_DMA_CH_ClearDestinationPeripheralRequest
    {standard input}:1532   .text.XMC_DMA_IRQHandler:00000000 $t
    {standard input}:1537   .text.XMC_DMA_IRQHandler:00000000 XMC_DMA_IRQHandler
    {standard input}:1855   .text.XMC_DMA_IRQHandler:00000148 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4002528de975c0fcce6c551c15d87b8c
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.48aa5dfcc4adf36b323cf9dbe32c793a
                           .group:00000000 wm4.core_cm4.h.174.824e0532337e90525b645435b961cc25
                           .group:00000000 wm4.mpu_armv7.h.32.7da498ea6f18d3b74a42202d7c1d394e
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:00000000 wm4.xmc_common.h.92.bbcf261068c7c74d7033b80d0dbf155c
                           .group:00000000 wm4.xmc_dma_map.h.50.56139b24aefaee572adb4448246412e9
                           .group:00000000 wm4.xmc_dma.h.99.1b4d594065873d6141687bc3dc3c5ea2
                           .group:00000000 wm4.xmc4_scu.h.83.0449f5880ac071460ec1a8072311ea51

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_IsPeripheralResetAsserted
