   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "xmc4_scu.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.XMC_SCU_lDelay,"ax",%progbits
  19              	 .align 2
  20              	 .thumb
  21              	 .thumb_func
  23              	XMC_SCU_lDelay:
  24              	.LFB169:
  25              	 .file 1 "../Libraries/XMCLib/src/xmc4_scu.c"
   1:../Libraries/XMCLib/src/xmc4_scu.c **** /**
   2:../Libraries/XMCLib/src/xmc4_scu.c ****  * @file xmc4_scu.c
   3:../Libraries/XMCLib/src/xmc4_scu.c ****  * @date 2016-06-15
   4:../Libraries/XMCLib/src/xmc4_scu.c ****  *
   5:../Libraries/XMCLib/src/xmc4_scu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc4_scu.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc4_scu.c ****  *
   9:../Libraries/XMCLib/src/xmc4_scu.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc4_scu.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc4_scu.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc4_scu.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc4_scu.c ****  * 
  18:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc4_scu.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc4_scu.c ****  * 
  21:../Libraries/XMCLib/src/xmc4_scu.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc4_scu.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc4_scu.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc4_scu.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc4_scu.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc4_scu.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc4_scu.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc4_scu.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc4_scu.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc4_scu.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc4_scu.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  36:../Libraries/XMCLib/src/xmc4_scu.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc4_scu.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  39:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc4_scu.c ****  *      
  42:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_ASSERT() hanging issues have fixed.  <br>
  44:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Line indentation aligned with 120 characters. <br>
  45:../Libraries/XMCLib/src/xmc4_scu.c ****  *     
  46:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_EnableEvent,XMC_SCU_INTERRUPT_DisableEvent,
  48:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_TriggerEvent,XMC_SCU_INTERUPT_GetEventStatus,
  49:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_ClearEventStatus are added
  50:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added Weak implementation for OSCHP_GetFrequency()
  51:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  52:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-11-30:
  53:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Documentation improved <br>
  54:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Following API functionalities are improved
  55:../Libraries/XMCLib/src/xmc4_scu.c ****  *       XMC_SCU_CLOCK_GatePeripheralClock, XMC_SCU_CLOCK_UngatePeripheralClock, XMC_SCU_CLOCK_IsPe
  56:../Libraries/XMCLib/src/xmc4_scu.c ****  *       XMC_SCU_RESET_AssertPeripheralReset, XMC_SCU_RESET_DeassertPeripheralReset, XMC_SCU_RESET_
  57:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  58:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-12-08:
  59:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_GetTemperature renamed to XMC_SCU_GetTemperatureMeasurement
  60:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  61:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-03-09:
  62:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Optimize write only registers
  63:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_SetPinMode
  64:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  65:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  66:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  67:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  68:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  69:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  70:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-04-06:
  71:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Fixed XMC_SCU_ReadFromRetentionMemory functionality
  72:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  73:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-05-19:
  74:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Changed XMC_SCU_CLOCK_StartSystemPll to avoid using floating point calculation which might
  75:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_CLOCK_IsLowPowerOscillatorStable() and XMC_SCU_CLOCK_IsHighPerformanceOscill
  76:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(), 
  77:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(),
  78:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus()
  79:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(), 
  80:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(),
  81:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus()
  82:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  83:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-06-15:
  84:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_EnterHibernateStateEx() which allows to select between external or inter
  85:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Extended wakeup hibernate events using LPAC wakeup on events. Only available in XMC44, XMC
  86:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added LPAC APIs. Only available in XMC44, XMC42 and XMC41 series.
  87:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  88:../Libraries/XMCLib/src/xmc4_scu.c ****  * @endcond 
  89:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  90:../Libraries/XMCLib/src/xmc4_scu.c ****  */
  91:../Libraries/XMCLib/src/xmc4_scu.c **** 
  92:../Libraries/XMCLib/src/xmc4_scu.c **** /**
  93:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  94:../Libraries/XMCLib/src/xmc4_scu.c ****  * @brief SCU low level driver API prototype definition for XMC4 family of microcontrollers. 
  95:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  96:../Libraries/XMCLib/src/xmc4_scu.c ****  * <b>Detailed description of file:</b> <br>
  97:../Libraries/XMCLib/src/xmc4_scu.c ****  * APIs provided in this file cover the following functional blocks of SCU: <br>
  98:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- GCU (APIs prefixed with XMC_SCU_GEN_) <br>
  99:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Temperature Monitoring, Bootmode selection, CCU Start, Comparator configuration etc  <br>
 100:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- CCU (APIs prefixed with XMC_SCU_CLOCK_) <br>
 101:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Clock sources init, Clock tree init, Clock gating, Sleep Management etc <br>
 102:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- RCU (APIs prefixed with XMC_SCU_RESET_) <br>
 103:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Reset Init, Cause, Manual Reset Assert/Deassert <br>
 104:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- INTERRUPT (APIs prefixed with XMC_SCU_INTERRUPT_) <br>
 105:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Manual Assert/Deassert, Acknowledge etc <br>
 106:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- PARITY (APIs prefixed with XMC_SCU_PARITY_) <br>
 107:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Acknowledge etc <br>
 108:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- HIBERNATION (APIs prefixed with XMC_SCU_HIB_) <br>
 109:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Hibernation entry/exit config, entry/wakeup sequences, LPAC configuration etc <br>
 110:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- TRAP (APIs prefixed with XMC_SCU_TRAP_) <br>
 111:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Enable/Disable, Acknowledge etc <br>
 112:../Libraries/XMCLib/src/xmc4_scu.c ****  *
 113:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 114:../Libraries/XMCLib/src/xmc4_scu.c **** 
 115:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 116:../Libraries/XMCLib/src/xmc4_scu.c ****  * HEADER FILES
 117:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 118:../Libraries/XMCLib/src/xmc4_scu.c **** #include <xmc_scu.h>
 119:../Libraries/XMCLib/src/xmc4_scu.c **** 
 120:../Libraries/XMCLib/src/xmc4_scu.c **** #if UC_FAMILY == XMC4
 121:../Libraries/XMCLib/src/xmc4_scu.c **** 
 122:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 123:../Libraries/XMCLib/src/xmc4_scu.c ****  * MACROS
 124:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 125:../Libraries/XMCLib/src/xmc4_scu.c **** #define FOSCREF   (2500000UL)    /**< Oscillator reference frequency (fOSCREF) monitored by Oscilla
 126:../Libraries/XMCLib/src/xmc4_scu.c **** #define FREQ_1MHZ (1000000UL)    /**< Used during calculation. */
 127:../Libraries/XMCLib/src/xmc4_scu.c **** 
 128:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OFI_FREQUENCY
 129:../Libraries/XMCLib/src/xmc4_scu.c **** #define OFI_FREQUENCY (24000000UL)    /**< Fast internal backup clock source. */
 130:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 131:../Libraries/XMCLib/src/xmc4_scu.c **** 
 132:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OSI_FREQUENCY
 133:../Libraries/XMCLib/src/xmc4_scu.c **** #define OSI_FREQUENCY (32768UL)    /**< Internal slow clock source. */
 134:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 135:../Libraries/XMCLib/src/xmc4_scu.c **** 
 136:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OSCHP_FREQUENCY
 137:../Libraries/XMCLib/src/xmc4_scu.c **** #define OSCHP_FREQUENCY (12000000U)    /**< External crystal High Precision Oscillator. */
 138:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 139:../Libraries/XMCLib/src/xmc4_scu.c **** 
 140:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_PLL_PLLSTAT_OSC_USABLE  (SCU_PLL_PLLSTAT_PLLHV_Msk | \
 141:../Libraries/XMCLib/src/xmc4_scu.c ****                                          SCU_PLL_PLLSTAT_PLLLV_Msk | \
 142:../Libraries/XMCLib/src/xmc4_scu.c ****                                          SCU_PLL_PLLSTAT_PLLSP_Msk)  /**< Used to verify the OSC fr
 143:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                           usable or not.*/
 144:../Libraries/XMCLib/src/xmc4_scu.c **** 
 145:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_ADC_START_GROUP    (0UL)    /**< The ADC group whose channel input is compared 
 146:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 147:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC star
 148:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this group number. */
 149:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_ADC_END_GROUP      (1UL)    /**< The ADC group whose channel input is compared 
 150:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 151:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC end 
 152:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this group number. */
 153:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_START_ADC_CHANNEL  (6UL)    /**< The ADC channel whose channel input is compare
 154:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 155:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC star
 156:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this channel number. */
 157:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_END_ADC_CHANNEL    (7UL)    /**< The ADC channel whose channel input is compare
 158:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 159:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC ends
 160:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this channel number. */
 161:../Libraries/XMCLib/src/xmc4_scu.c **** 
 162:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_CHECK_GRPNUM(GROUP_NUM)   (((GROUP_NUM) == XMC_SCU_ORC_ADC_START_GROUP) || \
 163:../Libraries/XMCLib/src/xmc4_scu.c ****                                         ((GROUP_NUM) == XMC_SCU_ORC_ADC_END_GROUP) ) /**< Used to v
 164:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       provided ADC 
 165:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       within specif
 166:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       end group num
 167:../Libraries/XMCLib/src/xmc4_scu.c ****                                         
 168:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_CHECK_CHNUM(CH_NUM)       (((CH_NUM) == XMC_SCU_ORC_START_ADC_CHANNEL) || \
 169:../Libraries/XMCLib/src/xmc4_scu.c ****                                         ((CH_NUM) == XMC_SCU_ORC_END_ADC_CHANNEL) )  /**< Used to v
 170:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       provided ADC 
 171:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       within specif
 172:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       end channel n
 173:../Libraries/XMCLib/src/xmc4_scu.c **** 
 174:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX            (32U)      /**< Maximum supported SCU events. */
 175:../Libraries/XMCLib/src/xmc4_scu.c **** 
 176:../Libraries/XMCLib/src/xmc4_scu.c **** #define SCU_HIBERNATE_HDCR_HIBIOSEL_Size (4U)
 177:../Libraries/XMCLib/src/xmc4_scu.c **** 
 178:../Libraries/XMCLib/src/xmc4_scu.c **** #define SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN (0x2U)
 179:../Libraries/XMCLib/src/xmc4_scu.c **** 
 180:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_POWER_LSB13V (0.0058F)
 181:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_POWER_LSB33V (0.0225F)
 182:../Libraries/XMCLib/src/xmc4_scu.c **** 
 183:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 184:../Libraries/XMCLib/src/xmc4_scu.c ****  * LOCAL DATA
 185:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 186:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler_list[XMC_SCU_INTERRUPT_EVENT_MAX]; /**< For registe
 187:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                         functions o
 188:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                         occurrence.
 189:../Libraries/XMCLib/src/xmc4_scu.c **** 
 190:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 191:../Libraries/XMCLib/src/xmc4_scu.c ****  * LOCAL ROUTINES
 192:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 193:../Libraries/XMCLib/src/xmc4_scu.c ****  #if defined(UC_ID)
 194:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a non-weak function, which retrieves high precision external oscillator frequency. */
 195:../Libraries/XMCLib/src/xmc4_scu.c **** __WEAK uint32_t OSCHP_GetFrequency(void)
 196:../Libraries/XMCLib/src/xmc4_scu.c **** {
 197:../Libraries/XMCLib/src/xmc4_scu.c ****   return (OSCHP_FREQUENCY);
 198:../Libraries/XMCLib/src/xmc4_scu.c **** }
 199:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 200:../Libraries/XMCLib/src/xmc4_scu.c **** 
 201:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 202:../Libraries/XMCLib/src/xmc4_scu.c **** static void XMC_SCU_lDelay(uint32_t cycles);
 203:../Libraries/XMCLib/src/xmc4_scu.c **** 
 204:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 205:../Libraries/XMCLib/src/xmc4_scu.c ****  * API IMPLEMENTATION
 206:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 207:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 208:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_lDelay(uint32_t delay)
 209:../Libraries/XMCLib/src/xmc4_scu.c **** {
  26              	 .loc 1 209 0
  27              	 .cfi_startproc
  28              	 
  29              	 
  30              	.LVL0:
  31 0000 10B5     	 push {r4,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 8
  34              	 .cfi_offset 4,-8
  35              	 .cfi_offset 14,-4
  36 0002 0446     	 mov r4,r0
 210:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t i;
 211:../Libraries/XMCLib/src/xmc4_scu.c **** 
 212:../Libraries/XMCLib/src/xmc4_scu.c ****   SystemCoreClockUpdate();
  37              	 .loc 1 212 0
  38 0004 FFF7FEFF 	 bl SystemCoreClockUpdate
  39              	.LVL1:
 213:../Libraries/XMCLib/src/xmc4_scu.c ****   delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
  40              	 .loc 1 213 0
  41 0008 074B     	 ldr r3,.L6
  42 000a 1B68     	 ldr r3,[r3]
  43 000c 0748     	 ldr r0,.L6+4
  44 000e A0FB0330 	 umull r3,r0,r0,r3
  45 0012 800C     	 lsrs r0,r0,#18
  46 0014 00FB04F0 	 mul r0,r0,r4
  47              	.LVL2:
 214:../Libraries/XMCLib/src/xmc4_scu.c **** 
 215:../Libraries/XMCLib/src/xmc4_scu.c ****   for (i = 0U; i < delay; ++i)
  48              	 .loc 1 215 0
  49 0018 20B1     	 cbz r0,.L1
  50 001a 0023     	 movs r3,#0
  51              	.LVL3:
  52              	.L3:
 216:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 217:../Libraries/XMCLib/src/xmc4_scu.c ****     __NOP();
  53              	 .loc 1 217 0 discriminator 3
  54              	
  55 001c 00BF     	 nop
  56              	
 215:../Libraries/XMCLib/src/xmc4_scu.c ****   {
  57              	 .loc 1 215 0 discriminator 3
  58              	 .thumb
  59 001e 0133     	 adds r3,r3,#1
  60              	.LVL4:
  61 0020 8342     	 cmp r3,r0
  62 0022 FBD1     	 bne .L3
  63              	.LVL5:
  64              	.L1:
  65 0024 10BD     	 pop {r4,pc}
  66              	.L7:
  67 0026 00BF     	 .align 2
  68              	.L6:
  69 0028 00000000 	 .word SystemCoreClock
  70 002c 83DE1B43 	 .word 1125899907
  71              	 .cfi_endproc
  72              	.LFE169:
  74              	 .section .text.XMC_SCU_INTERRUPT_EnableEvent,"ax",%progbits
  75              	 .align 2
  76              	 .global XMC_SCU_INTERRUPT_EnableEvent
  77              	 .thumb
  78              	 .thumb_func
  80              	XMC_SCU_INTERRUPT_EnableEvent:
  81              	.LFB170:
 218:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 219:../Libraries/XMCLib/src/xmc4_scu.c **** }
 220:../Libraries/XMCLib/src/xmc4_scu.c **** 
 221:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable the SCU event */
 222:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 223:../Libraries/XMCLib/src/xmc4_scu.c **** {
  82              	 .loc 1 223 0
  83              	 .cfi_startproc
  84              	 
  85              	 
  86              	 
  87              	.LVL6:
 224:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
  88              	 .loc 1 224 0
  89 0000 024A     	 ldr r2,.L9
  90 0002 9368     	 ldr r3,[r2,#8]
  91 0004 1843     	 orrs r0,r0,r3
  92              	.LVL7:
  93 0006 9060     	 str r0,[r2,#8]
  94 0008 7047     	 bx lr
  95              	.L10:
  96 000a 00BF     	 .align 2
  97              	.L9:
  98 000c 74400050 	 .word 1342193780
  99              	 .cfi_endproc
 100              	.LFE170:
 102              	 .section .text.XMC_SCU_INTERRUPT_DisableEvent,"ax",%progbits
 103              	 .align 2
 104              	 .global XMC_SCU_INTERRUPT_DisableEvent
 105              	 .thumb
 106              	 .thumb_func
 108              	XMC_SCU_INTERRUPT_DisableEvent:
 109              	.LFB171:
 225:../Libraries/XMCLib/src/xmc4_scu.c **** }
 226:../Libraries/XMCLib/src/xmc4_scu.c **** 
 227:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable the SCU event */
 228:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 229:../Libraries/XMCLib/src/xmc4_scu.c **** {
 110              	 .loc 1 229 0
 111              	 .cfi_startproc
 112              	 
 113              	 
 114              	 
 115              	.LVL8:
 230:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 116              	 .loc 1 230 0
 117 0000 024A     	 ldr r2,.L12
 118 0002 9368     	 ldr r3,[r2,#8]
 119 0004 23EA0000 	 bic r0,r3,r0
 120              	.LVL9:
 121 0008 9060     	 str r0,[r2,#8]
 122 000a 7047     	 bx lr
 123              	.L13:
 124              	 .align 2
 125              	.L12:
 126 000c 74400050 	 .word 1342193780
 127              	 .cfi_endproc
 128              	.LFE171:
 130              	 .section .text.XMC_SCU_INTERRUPT_TriggerEvent,"ax",%progbits
 131              	 .align 2
 132              	 .global XMC_SCU_INTERRUPT_TriggerEvent
 133              	 .thumb
 134              	 .thumb_func
 136              	XMC_SCU_INTERRUPT_TriggerEvent:
 137              	.LFB172:
 231:../Libraries/XMCLib/src/xmc4_scu.c **** }
 232:../Libraries/XMCLib/src/xmc4_scu.c **** 
 233:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to trigger the SCU event */
 234:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 235:../Libraries/XMCLib/src/xmc4_scu.c **** {
 138              	 .loc 1 235 0
 139              	 .cfi_startproc
 140              	 
 141              	 
 142              	 
 143              	.LVL10:
 236:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 144              	 .loc 1 236 0
 145 0000 024A     	 ldr r2,.L15
 146 0002 1369     	 ldr r3,[r2,#16]
 147 0004 1843     	 orrs r0,r0,r3
 148              	.LVL11:
 149 0006 1061     	 str r0,[r2,#16]
 150 0008 7047     	 bx lr
 151              	.L16:
 152 000a 00BF     	 .align 2
 153              	.L15:
 154 000c 74400050 	 .word 1342193780
 155              	 .cfi_endproc
 156              	.LFE172:
 158              	 .section .text.XMC_SCU_INTERUPT_GetEventStatus,"ax",%progbits
 159              	 .align 2
 160              	 .global XMC_SCU_INTERUPT_GetEventStatus
 161              	 .thumb
 162              	 .thumb_func
 164              	XMC_SCU_INTERUPT_GetEventStatus:
 165              	.LFB173:
 237:../Libraries/XMCLib/src/xmc4_scu.c **** }
 238:../Libraries/XMCLib/src/xmc4_scu.c **** 
 239:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the SCU event status */
 240:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
 241:../Libraries/XMCLib/src/xmc4_scu.c **** {
 166              	 .loc 1 241 0
 167              	 .cfi_startproc
 168              	 
 169              	 
 170              	 
 242:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_INTERRUPT->SRRAW);
 171              	 .loc 1 242 0
 172 0000 014B     	 ldr r3,.L18
 173 0002 5868     	 ldr r0,[r3,#4]
 243:../Libraries/XMCLib/src/xmc4_scu.c **** }
 174              	 .loc 1 243 0
 175 0004 7047     	 bx lr
 176              	.L19:
 177 0006 00BF     	 .align 2
 178              	.L18:
 179 0008 74400050 	 .word 1342193780
 180              	 .cfi_endproc
 181              	.LFE173:
 183              	 .section .text.XMC_SCU_INTERRUPT_ClearEventStatus,"ax",%progbits
 184              	 .align 2
 185              	 .global XMC_SCU_INTERRUPT_ClearEventStatus
 186              	 .thumb
 187              	 .thumb_func
 189              	XMC_SCU_INTERRUPT_ClearEventStatus:
 190              	.LFB174:
 244:../Libraries/XMCLib/src/xmc4_scu.c **** 
 245:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear the SCU event status */
 246:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
 247:../Libraries/XMCLib/src/xmc4_scu.c **** {
 191              	 .loc 1 247 0
 192              	 .cfi_startproc
 193              	 
 194              	 
 195              	 
 196              	.LVL12:
 248:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRCLR = (uint32_t)event;
 197              	 .loc 1 248 0
 198 0000 014B     	 ldr r3,.L21
 199 0002 D860     	 str r0,[r3,#12]
 200 0004 7047     	 bx lr
 201              	.L22:
 202 0006 00BF     	 .align 2
 203              	.L21:
 204 0008 74400050 	 .word 1342193780
 205              	 .cfi_endproc
 206              	.LFE174:
 208              	 .section .text.XMC_SCU_GetBootMode,"ax",%progbits
 209              	 .align 2
 210              	 .global XMC_SCU_GetBootMode
 211              	 .thumb
 212              	 .thumb_func
 214              	XMC_SCU_GetBootMode:
 215              	.LFB175:
 249:../Libraries/XMCLib/src/xmc4_scu.c **** }
 250:../Libraries/XMCLib/src/xmc4_scu.c **** 
 251:../Libraries/XMCLib/src/xmc4_scu.c **** 
 252:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the currently deployed device bootmode */
 253:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_GetBootMode(void)
 254:../Libraries/XMCLib/src/xmc4_scu.c **** {
 216              	 .loc 1 254 0
 217              	 .cfi_startproc
 218              	 
 219              	 
 220              	 
 255:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 221              	 .loc 1 255 0
 222 0000 024B     	 ldr r3,.L24
 223 0002 1869     	 ldr r0,[r3,#16]
 256:../Libraries/XMCLib/src/xmc4_scu.c **** }
 224              	 .loc 1 256 0
 225 0004 00F47060 	 and r0,r0,#3840
 226 0008 7047     	 bx lr
 227              	.L25:
 228 000a 00BF     	 .align 2
 229              	.L24:
 230 000c 00400050 	 .word 1342193664
 231              	 .cfi_endproc
 232              	.LFE175:
 234              	 .section .text.XMC_SCU_SetBootMode,"ax",%progbits
 235              	 .align 2
 236              	 .global XMC_SCU_SetBootMode
 237              	 .thumb
 238              	 .thumb_func
 240              	XMC_SCU_SetBootMode:
 241              	.LFB176:
 257:../Libraries/XMCLib/src/xmc4_scu.c **** 
 258:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program a new device bootmode */
 259:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
 260:../Libraries/XMCLib/src/xmc4_scu.c **** {
 242              	 .loc 1 260 0
 243              	 .cfi_startproc
 244              	 
 245              	 
 246              	 
 247              	.LVL13:
 261:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->STCON = (uint32_t)bootmode;
 248              	 .loc 1 261 0
 249 0000 014B     	 ldr r3,.L27
 250 0002 1861     	 str r0,[r3,#16]
 251 0004 7047     	 bx lr
 252              	.L28:
 253 0006 00BF     	 .align 2
 254              	.L27:
 255 0008 00400050 	 .word 1342193664
 256              	 .cfi_endproc
 257              	.LFE176:
 259              	 .section .text.XMC_SCU_ReadGPR,"ax",%progbits
 260              	 .align 2
 261              	 .global XMC_SCU_ReadGPR
 262              	 .thumb
 263              	 .thumb_func
 265              	XMC_SCU_ReadGPR:
 266              	.LFB177:
 262:../Libraries/XMCLib/src/xmc4_scu.c **** }
 263:../Libraries/XMCLib/src/xmc4_scu.c **** 
 264:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to read from General purpose register */
 265:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_ReadGPR(const uint32_t index)
 266:../Libraries/XMCLib/src/xmc4_scu.c **** {
 267              	 .loc 1 266 0
 268              	 .cfi_startproc
 269              	 
 270              	 
 271              	 
 272              	.LVL14:
 267:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_GENERAL->GPR[index]);
 273              	 .loc 1 267 0
 274 0000 8000     	 lsls r0,r0,#2
 275              	.LVL15:
 276 0002 014B     	 ldr r3,.L30
 277 0004 1858     	 ldr r0,[r3,r0]
 268:../Libraries/XMCLib/src/xmc4_scu.c **** }
 278              	 .loc 1 268 0
 279 0006 7047     	 bx lr
 280              	.L31:
 281              	 .align 2
 282              	.L30:
 283 0008 2C400050 	 .word 1342193708
 284              	 .cfi_endproc
 285              	.LFE177:
 287              	 .section .text.XMC_SCU_WriteGPR,"ax",%progbits
 288              	 .align 2
 289              	 .global XMC_SCU_WriteGPR
 290              	 .thumb
 291              	 .thumb_func
 293              	XMC_SCU_WriteGPR:
 294              	.LFB178:
 269:../Libraries/XMCLib/src/xmc4_scu.c **** 
 270:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to write to GPR */
 271:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
 272:../Libraries/XMCLib/src/xmc4_scu.c **** {
 295              	 .loc 1 272 0
 296              	 .cfi_startproc
 297              	 
 298              	 
 299              	 
 300              	.LVL16:
 273:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GPR[index] = data;
 301              	 .loc 1 273 0
 302 0000 8000     	 lsls r0,r0,#2
 303              	.LVL17:
 304 0002 014B     	 ldr r3,.L33
 305 0004 1950     	 str r1,[r3,r0]
 306 0006 7047     	 bx lr
 307              	.L34:
 308              	 .align 2
 309              	.L33:
 310 0008 2C400050 	 .word 1342193708
 311              	 .cfi_endproc
 312              	.LFE178:
 314              	 .section .text.XMC_SCU_EnableOutOfRangeComparator,"ax",%progbits
 315              	 .align 2
 316              	 .global XMC_SCU_EnableOutOfRangeComparator
 317              	 .thumb
 318              	 .thumb_func
 320              	XMC_SCU_EnableOutOfRangeComparator:
 321              	.LFB179:
 274:../Libraries/XMCLib/src/xmc4_scu.c **** }
 275:../Libraries/XMCLib/src/xmc4_scu.c **** 
 276:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
 277:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
 278:../Libraries/XMCLib/src/xmc4_scu.c **** {
 322              	 .loc 1 278 0
 323              	 .cfi_startproc
 324              	 
 325              	 
 326              	 
 327              	.LVL18:
 328 0000 8000     	 lsls r0,r0,#2
 329              	.LVL19:
 330 0002 00F1A040 	 add r0,r0,#1342177280
 331 0006 00F58040 	 add r0,r0,#16384
 279:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
 280:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel))
 281:../Libraries/XMCLib/src/xmc4_scu.c ****    
 282:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 332              	 .loc 1 282 0
 333 000a D0F8A030 	 ldr r3,[r0,#160]
 334 000e 0122     	 movs r2,#1
 335 0010 8A40     	 lsls r2,r2,r1
 336 0012 1343     	 orrs r3,r3,r2
 337 0014 C0F8A030 	 str r3,[r0,#160]
 338 0018 7047     	 bx lr
 339              	 .cfi_endproc
 340              	.LFE179:
 342 001a 00BF     	 .section .text.XMC_SCU_DisableOutOfRangeComparator,"ax",%progbits
 343              	 .align 2
 344              	 .global XMC_SCU_DisableOutOfRangeComparator
 345              	 .thumb
 346              	 .thumb_func
 348              	XMC_SCU_DisableOutOfRangeComparator:
 349              	.LFB180:
 283:../Libraries/XMCLib/src/xmc4_scu.c **** }
 284:../Libraries/XMCLib/src/xmc4_scu.c **** 
 285:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
 286:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
 287:../Libraries/XMCLib/src/xmc4_scu.c **** {
 350              	 .loc 1 287 0
 351              	 .cfi_startproc
 352              	 
 353              	 
 354              	 
 355              	.LVL20:
 356 0000 8000     	 lsls r0,r0,#2
 357              	.LVL21:
 358 0002 00F1A040 	 add r0,r0,#1342177280
 359 0006 00F58040 	 add r0,r0,#16384
 288:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
 289:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel
 290:../Libraries/XMCLib/src/xmc4_scu.c ****    
 291:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 360              	 .loc 1 291 0
 361 000a D0F8A030 	 ldr r3,[r0,#160]
 362 000e 0122     	 movs r2,#1
 363 0010 8A40     	 lsls r2,r2,r1
 364 0012 23EA0203 	 bic r3,r3,r2
 365 0016 C0F8A030 	 str r3,[r0,#160]
 366 001a 7047     	 bx lr
 367              	 .cfi_endproc
 368              	.LFE180:
 370              	 .section .text.XMC_SCU_CalibrateTemperatureSensor,"ax",%progbits
 371              	 .align 2
 372              	 .global XMC_SCU_CalibrateTemperatureSensor
 373              	 .thumb
 374              	 .thumb_func
 376              	XMC_SCU_CalibrateTemperatureSensor:
 377              	.LFB181:
 292:../Libraries/XMCLib/src/xmc4_scu.c **** }
 293:../Libraries/XMCLib/src/xmc4_scu.c **** 
 294:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to calibrate temperature sensor */
 295:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
 296:../Libraries/XMCLib/src/xmc4_scu.c **** {
 378              	 .loc 1 296 0
 379              	 .cfi_startproc
 380              	 
 381              	 
 382              	 
 383              	.LVL22:
 297:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 298:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 384              	 .loc 1 298 0
 385 0000 C902     	 lsls r1,r1,#11
 386              	.LVL23:
 387 0002 41F40801 	 orr r1,r1,#8912896
 299:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 388              	 .loc 1 299 0
 389 0006 41EA0010 	 orr r0,r1,r0,lsl#4
 390              	.LVL24:
 297:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 391              	 .loc 1 297 0
 392 000a 024B     	 ldr r3,.L38
 393 000c C3F88C00 	 str r0,[r3,#140]
 394 0010 7047     	 bx lr
 395              	.L39:
 396 0012 00BF     	 .align 2
 397              	.L38:
 398 0014 00400050 	 .word 1342193664
 399              	 .cfi_endproc
 400              	.LFE181:
 402              	 .section .text.XMC_SCU_EnableTemperatureSensor,"ax",%progbits
 403              	 .align 2
 404              	 .global XMC_SCU_EnableTemperatureSensor
 405              	 .thumb
 406              	 .thumb_func
 408              	XMC_SCU_EnableTemperatureSensor:
 409              	.LFB182:
 300:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
 301:../Libraries/XMCLib/src/xmc4_scu.c **** }
 302:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable die temperature measurement by powering the DTS module. */
 303:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_EnableTemperatureSensor(void)
 304:../Libraries/XMCLib/src/xmc4_scu.c **** {
 410              	 .loc 1 304 0
 411              	 .cfi_startproc
 412              	 
 413              	 
 414              	 
 305:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 415              	 .loc 1 305 0
 416 0000 034A     	 ldr r2,.L41
 417 0002 D2F88C30 	 ldr r3,[r2,#140]
 418 0006 23F00103 	 bic r3,r3,#1
 419 000a C2F88C30 	 str r3,[r2,#140]
 420 000e 7047     	 bx lr
 421              	.L42:
 422              	 .align 2
 423              	.L41:
 424 0010 00400050 	 .word 1342193664
 425              	 .cfi_endproc
 426              	.LFE182:
 428              	 .section .text.XMC_SCU_DisableTemperatureSensor,"ax",%progbits
 429              	 .align 2
 430              	 .global XMC_SCU_DisableTemperatureSensor
 431              	 .thumb
 432              	 .thumb_func
 434              	XMC_SCU_DisableTemperatureSensor:
 435              	.LFB183:
 306:../Libraries/XMCLib/src/xmc4_scu.c **** }
 307:../Libraries/XMCLib/src/xmc4_scu.c **** 
 308:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable die temperature measurement by powering the DTS module off. */
 309:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_DisableTemperatureSensor(void)
 310:../Libraries/XMCLib/src/xmc4_scu.c **** {
 436              	 .loc 1 310 0
 437              	 .cfi_startproc
 438              	 
 439              	 
 440              	 
 311:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 441              	 .loc 1 311 0
 442 0000 034A     	 ldr r2,.L44
 443 0002 D2F88C30 	 ldr r3,[r2,#140]
 444 0006 43F00103 	 orr r3,r3,#1
 445 000a C2F88C30 	 str r3,[r2,#140]
 446 000e 7047     	 bx lr
 447              	.L45:
 448              	 .align 2
 449              	.L44:
 450 0010 00400050 	 .word 1342193664
 451              	 .cfi_endproc
 452              	.LFE183:
 454              	 .section .text.XMC_SCU_IsTemperatureSensorEnabled,"ax",%progbits
 455              	 .align 2
 456              	 .global XMC_SCU_IsTemperatureSensorEnabled
 457              	 .thumb
 458              	 .thumb_func
 460              	XMC_SCU_IsTemperatureSensorEnabled:
 461              	.LFB184:
 312:../Libraries/XMCLib/src/xmc4_scu.c **** }
 313:../Libraries/XMCLib/src/xmc4_scu.c **** 
 314:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to provide the die temperature sensor power status. */
 315:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorEnabled(void)
 316:../Libraries/XMCLib/src/xmc4_scu.c **** {
 462              	 .loc 1 316 0
 463              	 .cfi_startproc
 464              	 
 465              	 
 466              	 
 317:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 467              	 .loc 1 317 0
 468 0000 034B     	 ldr r3,.L47
 469 0002 D3F88C00 	 ldr r0,[r3,#140]
 470 0006 80F00100 	 eor r0,r0,#1
 318:../Libraries/XMCLib/src/xmc4_scu.c **** }
 471              	 .loc 1 318 0
 472 000a 00F00100 	 and r0,r0,#1
 473 000e 7047     	 bx lr
 474              	.L48:
 475              	 .align 2
 476              	.L47:
 477 0010 00400050 	 .word 1342193664
 478              	 .cfi_endproc
 479              	.LFE184:
 481              	 .section .text.XMC_SCU_IsTemperatureSensorReady,"ax",%progbits
 482              	 .align 2
 483              	 .global XMC_SCU_IsTemperatureSensorReady
 484              	 .thumb
 485              	 .thumb_func
 487              	XMC_SCU_IsTemperatureSensorReady:
 488              	.LFB185:
 319:../Libraries/XMCLib/src/xmc4_scu.c **** 
 320:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check if the die temperature sensor is ready to start a measurement. */
 321:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorReady(void)
 322:../Libraries/XMCLib/src/xmc4_scu.c **** {
 489              	 .loc 1 322 0
 490              	 .cfi_startproc
 491              	 
 492              	 
 493              	 
 323:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 494              	 .loc 1 323 0
 495 0000 024B     	 ldr r3,.L50
 496 0002 D3F89000 	 ldr r0,[r3,#144]
 324:../Libraries/XMCLib/src/xmc4_scu.c **** }
 497              	 .loc 1 324 0
 498 0006 C0F38030 	 ubfx r0,r0,#14,#1
 499 000a 7047     	 bx lr
 500              	.L51:
 501              	 .align 2
 502              	.L50:
 503 000c 00400050 	 .word 1342193664
 504              	 .cfi_endproc
 505              	.LFE185:
 507              	 .section .text.XMC_SCU_GetTemperatureMeasurement,"ax",%progbits
 508              	 .align 2
 509              	 .global XMC_SCU_GetTemperatureMeasurement
 510              	 .thumb
 511              	 .thumb_func
 513              	XMC_SCU_GetTemperatureMeasurement:
 514              	.LFB187:
 325:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to start device temperature measurements */
 326:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
 327:../Libraries/XMCLib/src/xmc4_scu.c **** {
 328:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 329:../Libraries/XMCLib/src/xmc4_scu.c **** 
 330:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 331:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 332:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 333:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 334:../Libraries/XMCLib/src/xmc4_scu.c ****    
 335:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorBusy() == true)
 336:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 337:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_BUSY;
 338:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 339:../Libraries/XMCLib/src/xmc4_scu.c **** 
 340:../Libraries/XMCLib/src/xmc4_scu.c ****   /* And start the measurement */
 341:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 342:../Libraries/XMCLib/src/xmc4_scu.c ****   
 343:../Libraries/XMCLib/src/xmc4_scu.c ****   return (status);
 344:../Libraries/XMCLib/src/xmc4_scu.c **** }
 345:../Libraries/XMCLib/src/xmc4_scu.c **** 
 346:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the temperature measured */
 347:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_GetTemperatureMeasurement(void)
 348:../Libraries/XMCLib/src/xmc4_scu.c **** {
 515              	 .loc 1 348 0
 516              	 .cfi_startproc
 517              	 
 518              	 
 519 0000 08B5     	 push {r3,lr}
 520              	.LCFI1:
 521              	 .cfi_def_cfa_offset 8
 522              	 .cfi_offset 3,-8
 523              	 .cfi_offset 14,-4
 349:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t temperature;
 350:../Libraries/XMCLib/src/xmc4_scu.c **** 
 351:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 524              	 .loc 1 351 0
 525 0002 FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorEnabled
 526              	.LVL25:
 527 0006 28B1     	 cbz r0,.L54
 352:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 353:../Libraries/XMCLib/src/xmc4_scu.c ****     temperature = 0x7FFFFFFFUL;
 354:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 355:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 356:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 357:../Libraries/XMCLib/src/xmc4_scu.c ****     temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL
 528              	 .loc 1 357 0
 529 0008 044B     	 ldr r3,.L56
 530 000a D3F89000 	 ldr r0,[r3,#144]
 531 000e C0F30900 	 ubfx r0,r0,#0,#10
 532              	.LVL26:
 533 0012 08BD     	 pop {r3,pc}
 534              	.LVL27:
 535              	.L54:
 353:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 536              	 .loc 1 353 0
 537 0014 6FF00040 	 mvn r0,#-2147483648
 538              	.LVL28:
 358:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 359:../Libraries/XMCLib/src/xmc4_scu.c ****   
 360:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((uint32_t)temperature);
 361:../Libraries/XMCLib/src/xmc4_scu.c **** }
 539              	 .loc 1 361 0
 540 0018 08BD     	 pop {r3,pc}
 541              	.L57:
 542 001a 00BF     	 .align 2
 543              	.L56:
 544 001c 00400050 	 .word 1342193664
 545              	 .cfi_endproc
 546              	.LFE187:
 548              	 .section .text.XMC_SCU_IsTemperatureSensorBusy,"ax",%progbits
 549              	 .align 2
 550              	 .global XMC_SCU_IsTemperatureSensorBusy
 551              	 .thumb
 552              	 .thumb_func
 554              	XMC_SCU_IsTemperatureSensorBusy:
 555              	.LFB188:
 362:../Libraries/XMCLib/src/xmc4_scu.c **** 
 363:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to know whether Die temperature sensor is busy */
 364:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorBusy(void)
 365:../Libraries/XMCLib/src/xmc4_scu.c **** {
 556              	 .loc 1 365 0
 557              	 .cfi_startproc
 558              	 
 559              	 
 560              	 
 366:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 561              	 .loc 1 366 0
 562 0000 024B     	 ldr r3,.L59
 563 0002 D3F89000 	 ldr r0,[r3,#144]
 367:../Libraries/XMCLib/src/xmc4_scu.c **** }
 564              	 .loc 1 367 0
 565 0006 C0F3C030 	 ubfx r0,r0,#15,#1
 566 000a 7047     	 bx lr
 567              	.L60:
 568              	 .align 2
 569              	.L59:
 570 000c 00400050 	 .word 1342193664
 571              	 .cfi_endproc
 572              	.LFE188:
 574              	 .section .text.XMC_SCU_StartTemperatureMeasurement,"ax",%progbits
 575              	 .align 2
 576              	 .global XMC_SCU_StartTemperatureMeasurement
 577              	 .thumb
 578              	 .thumb_func
 580              	XMC_SCU_StartTemperatureMeasurement:
 581              	.LFB186:
 327:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 582              	 .loc 1 327 0
 583              	 .cfi_startproc
 584              	 
 585              	 
 586 0000 10B5     	 push {r4,lr}
 587              	.LCFI2:
 588              	 .cfi_def_cfa_offset 8
 589              	 .cfi_offset 4,-8
 590              	 .cfi_offset 14,-4
 591              	.LVL29:
 330:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 592              	 .loc 1 330 0
 593 0002 FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorEnabled
 594              	.LVL30:
 595 0006 0446     	 mov r4,r0
 596              	.LVL31:
 335:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 597              	 .loc 1 335 0
 598 0008 FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorBusy
 599              	.LVL32:
 600 000c 18B9     	 cbnz r0,.L63
 330:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 601              	 .loc 1 330 0
 602 000e 84F00100 	 eor r0,r4,#1
 328:../Libraries/XMCLib/src/xmc4_scu.c **** 
 603              	 .loc 1 328 0
 604 0012 C0B2     	 uxtb r0,r0
 605 0014 00E0     	 b .L62
 606              	.L63:
 337:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 607              	 .loc 1 337 0
 608 0016 0220     	 movs r0,#2
 609              	.L62:
 610              	.LVL33:
 341:../Libraries/XMCLib/src/xmc4_scu.c ****   
 611              	 .loc 1 341 0
 612 0018 034A     	 ldr r2,.L65
 613 001a D2F88C30 	 ldr r3,[r2,#140]
 614 001e 43F00203 	 orr r3,r3,#2
 615 0022 C2F88C30 	 str r3,[r2,#140]
 344:../Libraries/XMCLib/src/xmc4_scu.c **** 
 616              	 .loc 1 344 0
 617 0026 10BD     	 pop {r4,pc}
 618              	.L66:
 619              	 .align 2
 620              	.L65:
 621 0028 00400050 	 .word 1342193664
 622              	 .cfi_endproc
 623              	.LFE186:
 625              	 .section .text.XMC_SCU_WriteToRetentionMemory,"ax",%progbits
 626              	 .align 2
 627              	 .global XMC_SCU_WriteToRetentionMemory
 628              	 .thumb
 629              	 .thumb_func
 631              	XMC_SCU_WriteToRetentionMemory:
 632              	.LFB189:
 368:../Libraries/XMCLib/src/xmc4_scu.c **** 
 369:../Libraries/XMCLib/src/xmc4_scu.c **** 
 370:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(SCU_GENERAL_DTEMPLIM_LOWER_Msk) && defined(SCU_GENERAL_DTEMPLIM_UPPER_Msk)
 371:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if device temperature has gone past the ceiling */
 372:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_HighTemperature(void)
 373:../Libraries/XMCLib/src/xmc4_scu.c **** {
 374:../Libraries/XMCLib/src/xmc4_scu.c ****   bool ret_val;
 375:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtscon;
 376:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtempalarm;
 377:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = SCU_GENERAL->DTSCON;
 378:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = dtscon & SCU_GENERAL_DTSCON_PWD_Msk;
 379:../Libraries/XMCLib/src/xmc4_scu.c **** 
 380:../Libraries/XMCLib/src/xmc4_scu.c ****   ret_val = false;
 381:../Libraries/XMCLib/src/xmc4_scu.c **** 
 382:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Any audit makes sense only if the DTS were powered up */  
 383:../Libraries/XMCLib/src/xmc4_scu.c ****   if(dtscon)
 384:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 385:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered down - return false */
 386:../Libraries/XMCLib/src/xmc4_scu.c ****     ret_val = false;
 387:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 388:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 389:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 390:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered up - Read the overflow bit and decide accordingly*/
 391:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = SCU_GENERAL->DTEMPALARM;
 392:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = dtempalarm & SCU_GENERAL_DTEMPALARM_OVERFL_Msk;
 393:../Libraries/XMCLib/src/xmc4_scu.c ****     
 394:../Libraries/XMCLib/src/xmc4_scu.c ****     if(dtempalarm)
 395:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 396:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = true;
 397:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 398:../Libraries/XMCLib/src/xmc4_scu.c ****     else
 399:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 400:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = false;
 401:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 402:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 403:../Libraries/XMCLib/src/xmc4_scu.c ****   return (ret_val);
 404:../Libraries/XMCLib/src/xmc4_scu.c **** }
 405:../Libraries/XMCLib/src/xmc4_scu.c **** 
 406:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program raw values of temperature limits into the DTS */
 407:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp)
 408:../Libraries/XMCLib/src/xmc4_scu.c **** {
 409:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Power up the DTS module */
 410:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON &= (uint32_t)~SCU_GENERAL_DTSCON_PWD_Msk;
 411:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM = 0;
 412:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM = (lower_temp & SCU_GENERAL_DTEMPLIM_LOWER_Msk);
 413:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM |= (uint32_t)((upper_temp & SCU_GENERAL_DTEMPLIM_LOWER_Msk) << SCU_GENERAL_
 414:../Libraries/XMCLib/src/xmc4_scu.c **** }
 415:../Libraries/XMCLib/src/xmc4_scu.c **** 
 416:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if device temperature has gone below the stipulated limit */
 417:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_LowTemperature(void)
 418:../Libraries/XMCLib/src/xmc4_scu.c **** {
 419:../Libraries/XMCLib/src/xmc4_scu.c ****   bool ret_val;
 420:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtscon;
 421:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtempalarm;
 422:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = SCU_GENERAL->DTSCON;
 423:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = dtscon & SCU_GENERAL_DTSCON_PWD_Msk;
 424:../Libraries/XMCLib/src/xmc4_scu.c **** 
 425:../Libraries/XMCLib/src/xmc4_scu.c ****   ret_val = false;
 426:../Libraries/XMCLib/src/xmc4_scu.c **** 
 427:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Any audit makes sense only if the DTS were powered up */  
 428:../Libraries/XMCLib/src/xmc4_scu.c ****   if(dtscon)
 429:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 430:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered down - return false */
 431:../Libraries/XMCLib/src/xmc4_scu.c ****     ret_val = false;
 432:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 433:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 434:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 435:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered up - Read the overflow bit and decide accordingly*/
 436:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = SCU_GENERAL->DTEMPALARM;
 437:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = dtempalarm & SCU_GENERAL_DTEMPALARM_UNDERFL_Msk;
 438:../Libraries/XMCLib/src/xmc4_scu.c ****     
 439:../Libraries/XMCLib/src/xmc4_scu.c ****     if(dtempalarm)
 440:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 441:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = true;
 442:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 443:../Libraries/XMCLib/src/xmc4_scu.c ****     else
 444:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 445:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = false;
 446:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 447:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 448:../Libraries/XMCLib/src/xmc4_scu.c ****   
 449:../Libraries/XMCLib/src/xmc4_scu.c ****   return (ret_val);
 450:../Libraries/XMCLib/src/xmc4_scu.c **** }
 451:../Libraries/XMCLib/src/xmc4_scu.c **** #endif  
 452:../Libraries/XMCLib/src/xmc4_scu.c **** 
 453:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to write into Retention memory in hibernate domain */
 454:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
 455:../Libraries/XMCLib/src/xmc4_scu.c **** {
 633              	 .loc 1 455 0
 634              	 .cfi_startproc
 635              	 
 636              	 
 637              	 
 638              	.LVL34:
 456:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t rmacr;
 457:../Libraries/XMCLib/src/xmc4_scu.c ****   
 458:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Get the address right */  
 459:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk
 639              	 .loc 1 459 0
 640 0000 0004     	 lsls r0,r0,#16
 641              	.LVL35:
 642 0002 00F47020 	 and r0,r0,#983040
 643              	.LVL36:
 460:../Libraries/XMCLib/src/xmc4_scu.c ****   
 461:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Transfer from RMDATA to Retention memory */
 462:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 644              	 .loc 1 462 0
 645 0006 40F00100 	 orr r0,r0,#1
 646              	.LVL37:
 463:../Libraries/XMCLib/src/xmc4_scu.c ****   
 464:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Write desired data into RMDATA register */  
 465:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMDATA = data;
 647              	 .loc 1 465 0
 648 000a 064B     	 ldr r3,.L70
 649 000c C3F8CC10 	 str r1,[r3,#204]
 466:../Libraries/XMCLib/src/xmc4_scu.c ****   
 467:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Write address & direction of transfer into RMACR register */  
 468:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMACR = rmacr;
 650              	 .loc 1 468 0
 651 0010 C3F8C800 	 str r0,[r3,#200]
 469:../Libraries/XMCLib/src/xmc4_scu.c ****   
 470:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of RMX register in hibernate domain is completed */
 471:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 652              	 .loc 1 471 0
 653 0014 1A46     	 mov r2,r3
 654              	.L68:
 655              	 .loc 1 471 0 is_stmt 0 discriminator 1
 656 0016 D2F8C430 	 ldr r3,[r2,#196]
 657 001a 13F4005F 	 tst r3,#8192
 658 001e FAD1     	 bne .L68
 472:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 473:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 474:../Libraries/XMCLib/src/xmc4_scu.c **** }
 659              	 .loc 1 474 0 is_stmt 1
 660 0020 7047     	 bx lr
 661              	.L71:
 662 0022 00BF     	 .align 2
 663              	.L70:
 664 0024 00400050 	 .word 1342193664
 665              	 .cfi_endproc
 666              	.LFE189:
 668              	 .section .text.XMC_SCU_ReadFromRetentionMemory,"ax",%progbits
 669              	 .align 2
 670              	 .global XMC_SCU_ReadFromRetentionMemory
 671              	 .thumb
 672              	 .thumb_func
 674              	XMC_SCU_ReadFromRetentionMemory:
 675              	.LFB190:
 475:../Libraries/XMCLib/src/xmc4_scu.c **** 
 476:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to read from Retention memory in hibernate domain */
 477:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
 478:../Libraries/XMCLib/src/xmc4_scu.c **** {
 676              	 .loc 1 478 0
 677              	 .cfi_startproc
 678              	 
 679              	 
 680              	 
 681              	.LVL38:
 479:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t rmacr;
 480:../Libraries/XMCLib/src/xmc4_scu.c **** 
 481:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Get the address right */  
 482:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk
 682              	 .loc 1 482 0
 683 0000 0004     	 lsls r0,r0,#16
 684              	.LVL39:
 483:../Libraries/XMCLib/src/xmc4_scu.c ****   
 484:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Transfer from RMDATA to Retention memory */
 485:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 685              	 .loc 1 485 0
 686 0002 00F47020 	 and r0,r0,#983040
 687              	.LVL40:
 486:../Libraries/XMCLib/src/xmc4_scu.c ****   
 487:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Writing an adress & direction of transfer into RMACR register */  
 488:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMACR = rmacr;
 688              	 .loc 1 488 0
 689 0006 064B     	 ldr r3,.L75
 690 0008 C3F8C800 	 str r0,[r3,#200]
 489:../Libraries/XMCLib/src/xmc4_scu.c ****   
 490:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of RMX register in hibernate domain is completed */
 491:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 691              	 .loc 1 491 0
 692 000c 1A46     	 mov r2,r3
 693              	.L73:
 694              	 .loc 1 491 0 is_stmt 0 discriminator 1
 695 000e D2F8C430 	 ldr r3,[r2,#196]
 696 0012 13F4005F 	 tst r3,#8192
 697 0016 FAD1     	 bne .L73
 492:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 493:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 494:../Libraries/XMCLib/src/xmc4_scu.c **** 
 495:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_GENERAL->RMDATA);
 698              	 .loc 1 495 0 is_stmt 1
 699 0018 014B     	 ldr r3,.L75
 700 001a D3F8CC00 	 ldr r0,[r3,#204]
 701              	.LVL41:
 496:../Libraries/XMCLib/src/xmc4_scu.c **** }
 702              	 .loc 1 496 0
 703 001e 7047     	 bx lr
 704              	.L76:
 705              	 .align 2
 706              	.L75:
 707 0020 00400050 	 .word 1342193664
 708              	 .cfi_endproc
 709              	.LFE190:
 711              	 .section .text.XMC_SCU_TRAP_Enable,"ax",%progbits
 712              	 .align 2
 713              	 .global XMC_SCU_TRAP_Enable
 714              	 .thumb
 715              	 .thumb_func
 717              	XMC_SCU_TRAP_Enable:
 718              	.LFB192:
 497:../Libraries/XMCLib/src/xmc4_scu.c **** 
 498:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to initialize the clock tree */
 499:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
 500:../Libraries/XMCLib/src/xmc4_scu.c **** {
 501:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fsys_clkdiv != 0);
 502:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fcpu_clkdiv != 0);
 503:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fccu_clkdiv != 0);
 504:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fperipheral_clkdiv != 0);
 505:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.p_div != 0) &&
 506:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)) ||
 507:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR));
 508:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.n_div != 0) &&
 509:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)) ||
 510:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR));
 511:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", (config->syspll_config.k_div != 0) &&
 512:../Libraries/XMCLib/src/xmc4_scu.c ****                  ((config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL) ||
 513:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR)));
 514:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL) ||
 515:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_OFI)) &&
 516:../Libraries/XMCLib/src/xmc4_scu.c ****                  ((config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL) ||
 517:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR)));
 518:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_oscu
 519:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
 520:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
 521:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_
 522:../Libraries/XMCLib/src/xmc4_scu.c **** 
 523:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 524:../Libraries/XMCLib/src/xmc4_scu.c **** 
 525:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_HIB_EnableHibernateDomain();
 526:../Libraries/XMCLib/src/xmc4_scu.c **** 
 527:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->enable_osculp == true)
 528:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 529:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableLowPowerOscillator();
 530:../Libraries/XMCLib/src/xmc4_scu.c ****     while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 531:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 532:../Libraries/XMCLib/src/xmc4_scu.c ****   
 533:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 534:../Libraries/XMCLib/src/xmc4_scu.c ****   while (XMC_SCU_GetMirrorStatus() != 0)
 535:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 536:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until update of the stanby clock source is done in the HIB domain */    
 537:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 538:../Libraries/XMCLib/src/xmc4_scu.c **** 
 539:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 540:../Libraries/XMCLib/src/xmc4_scu.c **** 
 541:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 542:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 543:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 544:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 545:../Libraries/XMCLib/src/xmc4_scu.c **** 
 546:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->enable_oschp == true)
 547:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 548:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 549:../Libraries/XMCLib/src/xmc4_scu.c ****     while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 550:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 551:../Libraries/XMCLib/src/xmc4_scu.c **** 
 552:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 553:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 554:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_DisableSystemPll();
 555:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 556:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 557:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 558:../Libraries/XMCLib/src/xmc4_scu.c **** 
 559:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableSystemPll();
 560:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 561:../Libraries/XMCLib/src/xmc4_scu.c ****                                  config->syspll_config.mode,
 562:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.p_div,
 563:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.n_div,
 564:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.k_div);
 565:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 566:../Libraries/XMCLib/src/xmc4_scu.c **** 
 567:../Libraries/XMCLib/src/xmc4_scu.c ****   /* use SYSPLL? */
 568:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 569:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 570:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 571:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 572:../Libraries/XMCLib/src/xmc4_scu.c ****   SystemCoreClockUpdate();
 573:../Libraries/XMCLib/src/xmc4_scu.c **** }
 574:../Libraries/XMCLib/src/xmc4_scu.c **** 
 575:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable a trap source */
 576:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Enable(const uint32_t trap)
 577:../Libraries/XMCLib/src/xmc4_scu.c **** {
 719              	 .loc 1 577 0
 720              	 .cfi_startproc
 721              	 
 722              	 
 723              	 
 724              	.LVL42:
 578:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 725              	 .loc 1 578 0
 726 0000 024A     	 ldr r2,.L78
 727 0002 9368     	 ldr r3,[r2,#8]
 728 0004 23EA0000 	 bic r0,r3,r0
 729              	.LVL43:
 730 0008 9060     	 str r0,[r2,#8]
 731 000a 7047     	 bx lr
 732              	.L79:
 733              	 .align 2
 734              	.L78:
 735 000c 60410050 	 .word 1342194016
 736              	 .cfi_endproc
 737              	.LFE192:
 739              	 .section .text.XMC_SCU_TRAP_Disable,"ax",%progbits
 740              	 .align 2
 741              	 .global XMC_SCU_TRAP_Disable
 742              	 .thumb
 743              	 .thumb_func
 745              	XMC_SCU_TRAP_Disable:
 746              	.LFB193:
 579:../Libraries/XMCLib/src/xmc4_scu.c **** }
 580:../Libraries/XMCLib/src/xmc4_scu.c **** 
 581:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable a trap source */
 582:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Disable(const uint32_t trap)
 583:../Libraries/XMCLib/src/xmc4_scu.c **** {
 747              	 .loc 1 583 0
 748              	 .cfi_startproc
 749              	 
 750              	 
 751              	 
 752              	.LVL44:
 584:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 753              	 .loc 1 584 0
 754 0000 024A     	 ldr r2,.L81
 755 0002 9368     	 ldr r3,[r2,#8]
 756 0004 1843     	 orrs r0,r0,r3
 757              	.LVL45:
 758 0006 9060     	 str r0,[r2,#8]
 759 0008 7047     	 bx lr
 760              	.L82:
 761 000a 00BF     	 .align 2
 762              	.L81:
 763 000c 60410050 	 .word 1342194016
 764              	 .cfi_endproc
 765              	.LFE193:
 767              	 .section .text.XMC_SCU_TRAP_GetStatus,"ax",%progbits
 768              	 .align 2
 769              	 .global XMC_SCU_TRAP_GetStatus
 770              	 .thumb
 771              	 .thumb_func
 773              	XMC_SCU_TRAP_GetStatus:
 774              	.LFB194:
 585:../Libraries/XMCLib/src/xmc4_scu.c **** }
 586:../Libraries/XMCLib/src/xmc4_scu.c **** 
 587:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if a trap source has generated event */
 588:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_TRAP_GetStatus(void)
 589:../Libraries/XMCLib/src/xmc4_scu.c **** {
 775              	 .loc 1 589 0
 776              	 .cfi_startproc
 777              	 
 778              	 
 779              	 
 590:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_TRAP->TRAPRAW);
 780              	 .loc 1 590 0
 781 0000 014B     	 ldr r3,.L84
 782 0002 5868     	 ldr r0,[r3,#4]
 591:../Libraries/XMCLib/src/xmc4_scu.c **** }
 783              	 .loc 1 591 0
 784 0004 7047     	 bx lr
 785              	.L85:
 786 0006 00BF     	 .align 2
 787              	.L84:
 788 0008 60410050 	 .word 1342194016
 789              	 .cfi_endproc
 790              	.LFE194:
 792              	 .section .text.XMC_SCU_TRAP_Trigger,"ax",%progbits
 793              	 .align 2
 794              	 .global XMC_SCU_TRAP_Trigger
 795              	 .thumb
 796              	 .thumb_func
 798              	XMC_SCU_TRAP_Trigger:
 799              	.LFB195:
 592:../Libraries/XMCLib/src/xmc4_scu.c **** 
 593:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually trigger a trap event */
 594:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Trigger(const uint32_t trap)
 595:../Libraries/XMCLib/src/xmc4_scu.c **** {
 800              	 .loc 1 595 0
 801              	 .cfi_startproc
 802              	 
 803              	 
 804              	 
 805              	.LVL46:
 596:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPSET = (uint32_t)trap;
 806              	 .loc 1 596 0
 807 0000 014B     	 ldr r3,.L87
 808 0002 1861     	 str r0,[r3,#16]
 809 0004 7047     	 bx lr
 810              	.L88:
 811 0006 00BF     	 .align 2
 812              	.L87:
 813 0008 60410050 	 .word 1342194016
 814              	 .cfi_endproc
 815              	.LFE195:
 817              	 .section .text.XMC_SCU_TRAP_ClearStatus,"ax",%progbits
 818              	 .align 2
 819              	 .global XMC_SCU_TRAP_ClearStatus
 820              	 .thumb
 821              	 .thumb_func
 823              	XMC_SCU_TRAP_ClearStatus:
 824              	.LFB196:
 597:../Libraries/XMCLib/src/xmc4_scu.c **** }
 598:../Libraries/XMCLib/src/xmc4_scu.c **** 
 599:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear a trap event */
 600:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
 601:../Libraries/XMCLib/src/xmc4_scu.c **** {
 825              	 .loc 1 601 0
 826              	 .cfi_startproc
 827              	 
 828              	 
 829              	 
 830              	.LVL47:
 602:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPCLR = (uint32_t)trap;
 831              	 .loc 1 602 0
 832 0000 014B     	 ldr r3,.L90
 833 0002 D860     	 str r0,[r3,#12]
 834 0004 7047     	 bx lr
 835              	.L91:
 836 0006 00BF     	 .align 2
 837              	.L90:
 838 0008 60410050 	 .word 1342194016
 839              	 .cfi_endproc
 840              	.LFE196:
 842              	 .section .text.XMC_SCU_PARITY_ClearStatus,"ax",%progbits
 843              	 .align 2
 844              	 .global XMC_SCU_PARITY_ClearStatus
 845              	 .thumb
 846              	 .thumb_func
 848              	XMC_SCU_PARITY_ClearStatus:
 849              	.LFB197:
 603:../Libraries/XMCLib/src/xmc4_scu.c **** }
 604:../Libraries/XMCLib/src/xmc4_scu.c **** 
 605:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear parity error event */
 606:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
 607:../Libraries/XMCLib/src/xmc4_scu.c **** {
 850              	 .loc 1 607 0
 851              	 .cfi_startproc
 852              	 
 853              	 
 854              	 
 855              	.LVL48:
 608:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 856              	 .loc 1 608 0
 857 0000 024A     	 ldr r2,.L93
 858 0002 5369     	 ldr r3,[r2,#20]
 859 0004 1843     	 orrs r0,r0,r3
 860              	.LVL49:
 861 0006 5061     	 str r0,[r2,#20]
 862 0008 7047     	 bx lr
 863              	.L94:
 864 000a 00BF     	 .align 2
 865              	.L93:
 866 000c 3C410050 	 .word 1342193980
 867              	 .cfi_endproc
 868              	.LFE197:
 870              	 .section .text.XMC_SCU_PARITY_GetStatus,"ax",%progbits
 871              	 .align 2
 872              	 .global XMC_SCU_PARITY_GetStatus
 873              	 .thumb
 874              	 .thumb_func
 876              	XMC_SCU_PARITY_GetStatus:
 877              	.LFB198:
 609:../Libraries/XMCLib/src/xmc4_scu.c **** }
 610:../Libraries/XMCLib/src/xmc4_scu.c **** 
 611:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if the specified parity error has occured or not */
 612:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_PARITY_GetStatus(void)
 613:../Libraries/XMCLib/src/xmc4_scu.c **** {
 878              	 .loc 1 613 0
 879              	 .cfi_startproc
 880              	 
 881              	 
 882              	 
 614:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_PARITY->PEFLAG);
 883              	 .loc 1 614 0
 884 0000 014B     	 ldr r3,.L96
 885 0002 5869     	 ldr r0,[r3,#20]
 615:../Libraries/XMCLib/src/xmc4_scu.c **** } 
 886              	 .loc 1 615 0
 887 0004 7047     	 bx lr
 888              	.L97:
 889 0006 00BF     	 .align 2
 890              	.L96:
 891 0008 3C410050 	 .word 1342193980
 892              	 .cfi_endproc
 893              	.LFE198:
 895              	 .section .text.XMC_SCU_PARITY_Enable,"ax",%progbits
 896              	 .align 2
 897              	 .global XMC_SCU_PARITY_Enable
 898              	 .thumb
 899              	 .thumb_func
 901              	XMC_SCU_PARITY_Enable:
 902              	.LFB199:
 616:../Libraries/XMCLib/src/xmc4_scu.c **** 
 617:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable parity error checking for the selected on-chip RAM type */
 618:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_Enable(const uint32_t memory)
 619:../Libraries/XMCLib/src/xmc4_scu.c **** {
 903              	 .loc 1 619 0
 904              	 .cfi_startproc
 905              	 
 906              	 
 907              	 
 908              	.LVL50:
 620:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEEN |= (uint32_t)memory; 
 909              	 .loc 1 620 0
 910 0000 024A     	 ldr r2,.L99
 911 0002 1368     	 ldr r3,[r2]
 912 0004 1843     	 orrs r0,r0,r3
 913              	.LVL51:
 914 0006 1060     	 str r0,[r2]
 915 0008 7047     	 bx lr
 916              	.L100:
 917 000a 00BF     	 .align 2
 918              	.L99:
 919 000c 3C410050 	 .word 1342193980
 920              	 .cfi_endproc
 921              	.LFE199:
 923              	 .section .text.XMC_SCU_PARITY_Disable,"ax",%progbits
 924              	 .align 2
 925              	 .global XMC_SCU_PARITY_Disable
 926              	 .thumb
 927              	 .thumb_func
 929              	XMC_SCU_PARITY_Disable:
 930              	.LFB200:
 621:../Libraries/XMCLib/src/xmc4_scu.c **** }
 622:../Libraries/XMCLib/src/xmc4_scu.c **** 
 623:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable parity error checking for the selected on-chip RAM type */
 624:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_Disable(const uint32_t memory)
 625:../Libraries/XMCLib/src/xmc4_scu.c **** {
 931              	 .loc 1 625 0
 932              	 .cfi_startproc
 933              	 
 934              	 
 935              	 
 936              	.LVL52:
 626:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEEN &= (uint32_t)~memory; 
 937              	 .loc 1 626 0
 938 0000 024A     	 ldr r2,.L102
 939 0002 1368     	 ldr r3,[r2]
 940 0004 23EA0000 	 bic r0,r3,r0
 941              	.LVL53:
 942 0008 1060     	 str r0,[r2]
 943 000a 7047     	 bx lr
 944              	.L103:
 945              	 .align 2
 946              	.L102:
 947 000c 3C410050 	 .word 1342193980
 948              	 .cfi_endproc
 949              	.LFE200:
 951              	 .section .text.XMC_SCU_PARITY_EnableTrapGeneration,"ax",%progbits
 952              	 .align 2
 953              	 .global XMC_SCU_PARITY_EnableTrapGeneration
 954              	 .thumb
 955              	 .thumb_func
 957              	XMC_SCU_PARITY_EnableTrapGeneration:
 958              	.LFB201:
 627:../Libraries/XMCLib/src/xmc4_scu.c **** }
 628:../Libraries/XMCLib/src/xmc4_scu.c **** 
 629:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable trap assertion for the parity error source */
 630:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
 631:../Libraries/XMCLib/src/xmc4_scu.c **** {
 959              	 .loc 1 631 0
 960              	 .cfi_startproc
 961              	 
 962              	 
 963              	 
 964              	.LVL54:
 632:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PETE |= (uint32_t)memory; 
 965              	 .loc 1 632 0
 966 0000 024A     	 ldr r2,.L105
 967 0002 9368     	 ldr r3,[r2,#8]
 968 0004 1843     	 orrs r0,r0,r3
 969              	.LVL55:
 970 0006 9060     	 str r0,[r2,#8]
 971 0008 7047     	 bx lr
 972              	.L106:
 973 000a 00BF     	 .align 2
 974              	.L105:
 975 000c 3C410050 	 .word 1342193980
 976              	 .cfi_endproc
 977              	.LFE201:
 979              	 .section .text.XMC_SCU_PARITY_DisableTrapGeneration,"ax",%progbits
 980              	 .align 2
 981              	 .global XMC_SCU_PARITY_DisableTrapGeneration
 982              	 .thumb
 983              	 .thumb_func
 985              	XMC_SCU_PARITY_DisableTrapGeneration:
 986              	.LFB202:
 633:../Libraries/XMCLib/src/xmc4_scu.c **** }
 634:../Libraries/XMCLib/src/xmc4_scu.c **** 
 635:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable the assertion of trap for the parity error source */
 636:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
 637:../Libraries/XMCLib/src/xmc4_scu.c **** {
 987              	 .loc 1 637 0
 988              	 .cfi_startproc
 989              	 
 990              	 
 991              	 
 992              	.LVL56:
 638:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PETE &= (uint32_t)~memory; 
 993              	 .loc 1 638 0
 994 0000 024A     	 ldr r2,.L108
 995 0002 9368     	 ldr r3,[r2,#8]
 996 0004 23EA0000 	 bic r0,r3,r0
 997              	.LVL57:
 998 0008 9060     	 str r0,[r2,#8]
 999 000a 7047     	 bx lr
 1000              	.L109:
 1001              	 .align 2
 1002              	.L108:
 1003 000c 3C410050 	 .word 1342193980
 1004              	 .cfi_endproc
 1005              	.LFE202:
 1007              	 .section .text.XMC_SCU_INTERRUPT_EnableNmiRequest,"ax",%progbits
 1008              	 .align 2
 1009              	 .global XMC_SCU_INTERRUPT_EnableNmiRequest
 1010              	 .thumb
 1011              	 .thumb_func
 1013              	XMC_SCU_INTERRUPT_EnableNmiRequest:
 1014              	.LFB203:
 639:../Libraries/XMCLib/src/xmc4_scu.c **** }
 640:../Libraries/XMCLib/src/xmc4_scu.c **** 
 641:../Libraries/XMCLib/src/xmc4_scu.c **** /* Enables a NMI source */
 642:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
 643:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1015              	 .loc 1 643 0
 1016              	 .cfi_startproc
 1017              	 
 1018              	 
 1019              	 
 1020              	.LVL58:
 644:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 1021              	 .loc 1 644 0
 1022 0000 024A     	 ldr r2,.L111
 1023 0002 5369     	 ldr r3,[r2,#20]
 1024 0004 1843     	 orrs r0,r0,r3
 1025              	.LVL59:
 1026 0006 5061     	 str r0,[r2,#20]
 1027 0008 7047     	 bx lr
 1028              	.L112:
 1029 000a 00BF     	 .align 2
 1030              	.L111:
 1031 000c 74400050 	 .word 1342193780
 1032              	 .cfi_endproc
 1033              	.LFE203:
 1035              	 .section .text.XMC_SCU_INTERRUPT_DisableNmiRequest,"ax",%progbits
 1036              	 .align 2
 1037              	 .global XMC_SCU_INTERRUPT_DisableNmiRequest
 1038              	 .thumb
 1039              	 .thumb_func
 1041              	XMC_SCU_INTERRUPT_DisableNmiRequest:
 1042              	.LFB204:
 645:../Libraries/XMCLib/src/xmc4_scu.c **** }
 646:../Libraries/XMCLib/src/xmc4_scu.c **** 
 647:../Libraries/XMCLib/src/xmc4_scu.c **** /* Disables a NMI source */
 648:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
 649:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1043              	 .loc 1 649 0
 1044              	 .cfi_startproc
 1045              	 
 1046              	 
 1047              	 
 1048              	.LVL60:
 650:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 1049              	 .loc 1 650 0
 1050 0000 024A     	 ldr r2,.L114
 1051 0002 5369     	 ldr r3,[r2,#20]
 1052 0004 23EA0000 	 bic r0,r3,r0
 1053              	.LVL61:
 1054 0008 5061     	 str r0,[r2,#20]
 1055 000a 7047     	 bx lr
 1056              	.L115:
 1057              	 .align 2
 1058              	.L114:
 1059 000c 74400050 	 .word 1342193780
 1060              	 .cfi_endproc
 1061              	.LFE204:
 1063              	 .section .text.XMC_SCU_RESET_AssertPeripheralReset,"ax",%progbits
 1064              	 .align 2
 1065              	 .global XMC_SCU_RESET_AssertPeripheralReset
 1066              	 .thumb
 1067              	 .thumb_func
 1069              	XMC_SCU_RESET_AssertPeripheralReset:
 1070              	.LFB205:
 651:../Libraries/XMCLib/src/xmc4_scu.c **** }
 652:../Libraries/XMCLib/src/xmc4_scu.c **** 
 653:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually assert a reset request */
 654:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 655:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1071              	 .loc 1 655 0
 1072              	 .cfi_startproc
 1073              	 
 1074              	 
 1075              	 
 1076              	.LVL62:
 656:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 1077              	 .loc 1 656 0
 1078 0000 030F     	 lsrs r3,r0,#28
 1079              	.LVL63:
 657:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 658:../Libraries/XMCLib/src/xmc4_scu.c **** 
 659:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 1080              	 .loc 1 659 0
 1081 0002 03EB4303 	 add r3,r3,r3,lsl#1
 1082              	.LVL64:
 657:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 1083              	 .loc 1 657 0
 1084 0006 20F07040 	 bic r0,r0,#-268435456
 1085              	.LVL65:
 1086              	 .loc 1 659 0
 1087 000a 024A     	 ldr r2,.L117
 1088 000c 42F82300 	 str r0,[r2,r3,lsl#2]
 1089 0010 7047     	 bx lr
 1090              	.L118:
 1091 0012 00BF     	 .align 2
 1092              	.L117:
 1093 0014 10440050 	 .word 1342194704
 1094              	 .cfi_endproc
 1095              	.LFE205:
 1097              	 .section .text.XMC_SCU_RESET_DeassertPeripheralReset,"ax",%progbits
 1098              	 .align 2
 1099              	 .global XMC_SCU_RESET_DeassertPeripheralReset
 1100              	 .thumb
 1101              	 .thumb_func
 1103              	XMC_SCU_RESET_DeassertPeripheralReset:
 1104              	.LFB206:
 660:../Libraries/XMCLib/src/xmc4_scu.c **** }
 661:../Libraries/XMCLib/src/xmc4_scu.c **** 
 662:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually de-assert a reset request */
 663:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 664:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1105              	 .loc 1 664 0
 1106              	 .cfi_startproc
 1107              	 
 1108              	 
 1109              	 
 1110              	.LVL66:
 665:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 1111              	 .loc 1 665 0
 1112 0000 030F     	 lsrs r3,r0,#28
 1113              	.LVL67:
 666:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 667:../Libraries/XMCLib/src/xmc4_scu.c **** 
 668:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 1114              	 .loc 1 668 0
 1115 0002 03EB4303 	 add r3,r3,r3,lsl#1
 1116              	.LVL68:
 666:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 1117              	 .loc 1 666 0
 1118 0006 20F07040 	 bic r0,r0,#-268435456
 1119              	.LVL69:
 1120              	 .loc 1 668 0
 1121 000a 024A     	 ldr r2,.L120
 1122 000c 42F82300 	 str r0,[r2,r3,lsl#2]
 1123 0010 7047     	 bx lr
 1124              	.L121:
 1125 0012 00BF     	 .align 2
 1126              	.L120:
 1127 0014 14440050 	 .word 1342194708
 1128              	 .cfi_endproc
 1129              	.LFE206:
 1131              	 .section .text.XMC_SCU_RESET_IsPeripheralResetAsserted,"ax",%progbits
 1132              	 .align 2
 1133              	 .global XMC_SCU_RESET_IsPeripheralResetAsserted
 1134              	 .thumb
 1135              	 .thumb_func
 1137              	XMC_SCU_RESET_IsPeripheralResetAsserted:
 1138              	.LFB207:
 669:../Libraries/XMCLib/src/xmc4_scu.c **** }
 670:../Libraries/XMCLib/src/xmc4_scu.c **** 
 671:../Libraries/XMCLib/src/xmc4_scu.c **** /* Find out if the peripheral reset is asserted */
 672:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 673:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1139              	 .loc 1 673 0
 1140              	 .cfi_startproc
 1141              	 
 1142              	 
 1143              	 
 1144              	.LVL70:
 674:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 675:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 1145              	 .loc 1 675 0
 1146 0000 20F07042 	 bic r2,r0,#-268435456
 1147              	.LVL71:
 674:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 1148              	 .loc 1 674 0
 1149 0004 000F     	 lsrs r0,r0,#28
 1150              	.LVL72:
 676:../Libraries/XMCLib/src/xmc4_scu.c **** 
 677:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 1151              	 .loc 1 677 0
 1152 0006 00EB4000 	 add r0,r0,r0,lsl#1
 1153              	.LVL73:
 1154 000a 044B     	 ldr r3,.L123
 1155 000c 53F82030 	 ldr r3,[r3,r0,lsl#2]
 1156 0010 1A42     	 tst r2,r3
 678:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1157              	 .loc 1 678 0
 1158 0012 14BF     	 ite ne
 1159 0014 0120     	 movne r0,#1
 1160 0016 0020     	 moveq r0,#0
 1161 0018 7047     	 bx lr
 1162              	.L124:
 1163 001a 00BF     	 .align 2
 1164              	.L123:
 1165 001c 0C440050 	 .word 1342194700
 1166              	 .cfi_endproc
 1167              	.LFE207:
 1169              	 .section .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency,"ax",%progbits
 1170              	 .align 2
 1171              	 .global XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
 1172              	 .thumb
 1173              	 .thumb_func
 1175              	XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:
 1176              	.LFB209:
 679:../Libraries/XMCLib/src/xmc4_scu.c **** 
 680:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 681:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of System PLL output clock
 682:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 683:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
 684:../Libraries/XMCLib/src/xmc4_scu.c **** {
 685:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 686:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t p_div;
 687:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t n_div;
 688:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t k2_div;
 689:../Libraries/XMCLib/src/xmc4_scu.c **** 
 690:../Libraries/XMCLib/src/xmc4_scu.c ****   clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 691:../Libraries/XMCLib/src/xmc4_scu.c ****   if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 692:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 693:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Prescalar mode - fOSC is the parent*/
 694:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (uint32_t)(clock_frequency / 
 695:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_P
 696:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 697:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 698:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 699:../Libraries/XMCLib/src/xmc4_scu.c ****     p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Po
 700:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Po
 701:../Libraries/XMCLib/src/xmc4_scu.c ****     k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_
 702:../Libraries/XMCLib/src/xmc4_scu.c ****        
 703:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 704:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 705:../Libraries/XMCLib/src/xmc4_scu.c **** 
 706:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 707:../Libraries/XMCLib/src/xmc4_scu.c **** }
 708:../Libraries/XMCLib/src/xmc4_scu.c **** 
 709:../Libraries/XMCLib/src/xmc4_scu.c **** /**
 710:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of System PLL VCO input clock
 711:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 712:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
 713:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1177              	 .loc 1 713 0
 1178              	 .cfi_startproc
 1179              	 
 1180              	 
 1181 0000 08B5     	 push {r3,lr}
 1182              	.LCFI3:
 1183              	 .cfi_def_cfa_offset 8
 1184              	 .cfi_offset 3,-8
 1185              	 .cfi_offset 14,-4
 714:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 715:../Libraries/XMCLib/src/xmc4_scu.c **** 
 716:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Prescalar mode - fOSC is the parent*/
 717:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 1186              	 .loc 1 717 0
 1187 0002 054B     	 ldr r3,.L129
 1188 0004 DB68     	 ldr r3,[r3,#12]
 1189 0006 13F0010F 	 tst r3,#1
 1190 000a 02D1     	 bne .L127
 718:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 719:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = OSCHP_GetFrequency();
 1191              	 .loc 1 719 0
 1192 000c FFF7FEFF 	 bl OSCHP_GetFrequency
 1193              	.LVL74:
 1194 0010 08BD     	 pop {r3,pc}
 1195              	.LVL75:
 1196              	.L127:
 720:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 721:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 722:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 723:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = OFI_FREQUENCY;
 1197              	 .loc 1 723 0
 1198 0012 0248     	 ldr r0,.L129+4
 1199              	.LVL76:
 724:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 725:../Libraries/XMCLib/src/xmc4_scu.c ****   
 726:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 727:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1200              	 .loc 1 727 0
 1201 0014 08BD     	 pop {r3,pc}
 1202              	.L130:
 1203 0016 00BF     	 .align 2
 1204              	.L129:
 1205 0018 10470050 	 .word 1342195472
 1206 001c 00366E01 	 .word 24000000
 1207              	 .cfi_endproc
 1208              	.LFE209:
 1210              	 .section .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency,"ax",%progbits
 1211              	 .align 2
 1212              	 .global XMC_SCU_CLOCK_GetSystemPllClockFrequency
 1213              	 .thumb
 1214              	 .thumb_func
 1216              	XMC_SCU_CLOCK_GetSystemPllClockFrequency:
 1217              	.LFB208:
 684:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 1218              	 .loc 1 684 0
 1219              	 .cfi_startproc
 1220              	 
 1221              	 
 1222 0000 08B5     	 push {r3,lr}
 1223              	.LCFI4:
 1224              	 .cfi_def_cfa_offset 8
 1225              	 .cfi_offset 3,-8
 1226              	 .cfi_offset 14,-4
 690:../Libraries/XMCLib/src/xmc4_scu.c ****   if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 1227              	 .loc 1 690 0
 1228 0002 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
 1229              	.LVL77:
 691:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 1230              	 .loc 1 691 0
 1231 0006 0F4B     	 ldr r3,.L135
 1232 0008 1B68     	 ldr r3,[r3]
 1233 000a 13F0010F 	 tst r3,#1
 1234 000e 07D0     	 beq .L132
 695:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 1235              	 .loc 1 695 0
 1236 0010 0C4B     	 ldr r3,.L135
 1237 0012 9B68     	 ldr r3,[r3,#8]
 1238 0014 03F07F03 	 and r3,r3,#127
 1239 0018 0133     	 adds r3,r3,#1
 694:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_P
 1240              	 .loc 1 694 0
 1241 001a B0FBF3F0 	 udiv r0,r0,r3
 1242              	.LVL78:
 1243 001e 08BD     	 pop {r3,pc}
 1244              	.L132:
 699:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Po
 1245              	 .loc 1 699 0
 1246 0020 084B     	 ldr r3,.L135
 1247 0022 9A68     	 ldr r2,[r3,#8]
 1248              	.LVL79:
 700:../Libraries/XMCLib/src/xmc4_scu.c ****     k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_
 1249              	 .loc 1 700 0
 1250 0024 9968     	 ldr r1,[r3,#8]
 1251              	.LVL80:
 701:../Libraries/XMCLib/src/xmc4_scu.c ****        
 1252              	 .loc 1 701 0
 1253 0026 9B68     	 ldr r3,[r3,#8]
 1254              	.LVL81:
 700:../Libraries/XMCLib/src/xmc4_scu.c ****     k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_
 1255              	 .loc 1 700 0
 1256 0028 C1F30621 	 ubfx r1,r1,#8,#7
 1257              	.LVL82:
 703:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 1258              	 .loc 1 703 0
 1259 002c 01FB0000 	 mla r0,r1,r0,r0
 1260              	.LVL83:
 701:../Libraries/XMCLib/src/xmc4_scu.c ****        
 1261              	 .loc 1 701 0
 1262 0030 C3F30641 	 ubfx r1,r3,#16,#7
 699:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Po
 1263              	 .loc 1 699 0
 1264 0034 C2F30362 	 ubfx r2,r2,#24,#4
 1265              	.LVL84:
 1266 0038 531C     	 adds r3,r2,#1
 1267              	.LVL85:
 703:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 1268              	 .loc 1 703 0
 1269 003a 01FB0333 	 mla r3,r1,r3,r3
 1270 003e B0FBF3F0 	 udiv r0,r0,r3
 1271              	.LVL86:
 707:../Libraries/XMCLib/src/xmc4_scu.c **** 
 1272              	 .loc 1 707 0
 1273 0042 08BD     	 pop {r3,pc}
 1274              	.L136:
 1275              	 .align 2
 1276              	.L135:
 1277 0044 10470050 	 .word 1342195472
 1278              	 .cfi_endproc
 1279              	.LFE208:
 1281              	 .section .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency,"ax",%progbits
 1282              	 .align 2
 1283              	 .global XMC_SCU_CLOCK_GetUsbPllClockFrequency
 1284              	 .thumb
 1285              	 .thumb_func
 1287              	XMC_SCU_CLOCK_GetUsbPllClockFrequency:
 1288              	.LFB210:
 728:../Libraries/XMCLib/src/xmc4_scu.c **** 
 729:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 730:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of USB PLL output clock
 731:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 732:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
 733:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1289              	 .loc 1 733 0
 1290              	 .cfi_startproc
 1291              	 
 1292              	 
 1293 0000 08B5     	 push {r3,lr}
 1294              	.LCFI5:
 1295              	 .cfi_def_cfa_offset 8
 1296              	 .cfi_offset 3,-8
 1297              	 .cfi_offset 14,-4
 734:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 735:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t n_div;
 736:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t p_div;
 737:../Libraries/XMCLib/src/xmc4_scu.c ****   
 738:../Libraries/XMCLib/src/xmc4_scu.c ****   clock_frequency = OSCHP_GetFrequency();
 1298              	 .loc 1 738 0
 1299 0002 FFF7FEFF 	 bl OSCHP_GetFrequency
 1300              	.LVL87:
 739:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 1301              	 .loc 1 739 0
 1302 0006 094B     	 ldr r3,.L140
 1303 0008 1B69     	 ldr r3,[r3,#16]
 1304 000a 13F0010F 	 tst r3,#1
 1305 000e 0CD1     	 bne .L138
 740:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 741:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Normal mode - fVCO is the parent*/
 742:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_ND
 1306              	 .loc 1 742 0
 1307 0010 064B     	 ldr r3,.L140
 1308 0012 5A69     	 ldr r2,[r3,#20]
 1309              	.LVL88:
 743:../Libraries/XMCLib/src/xmc4_scu.c ****     p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PD
 1310              	 .loc 1 743 0
 1311 0014 5B69     	 ldr r3,[r3,#20]
 1312              	.LVL89:
 742:../Libraries/XMCLib/src/xmc4_scu.c ****     p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PD
 1313              	 .loc 1 742 0
 1314 0016 C2F30622 	 ubfx r2,r2,#8,#7
 1315              	.LVL90:
 744:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 1316              	 .loc 1 744 0
 1317 001a 02FB0000 	 mla r0,r2,r0,r0
 1318              	.LVL91:
 743:../Libraries/XMCLib/src/xmc4_scu.c ****     p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PD
 1319              	 .loc 1 743 0
 1320 001e C3F30363 	 ubfx r3,r3,#24,#4
 1321              	.LVL92:
 1322 0022 0133     	 adds r3,r3,#1
 1323              	 .loc 1 744 0
 1324 0024 5B00     	 lsls r3,r3,#1
 1325 0026 B0FBF3F0 	 udiv r0,r0,r3
 1326              	.LVL93:
 1327              	.L138:
 745:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 746:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 747:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1328              	 .loc 1 747 0
 1329 002a 08BD     	 pop {r3,pc}
 1330              	.L141:
 1331              	 .align 2
 1332              	.L140:
 1333 002c 10470050 	 .word 1342195472
 1334              	 .cfi_endproc
 1335              	.LFE210:
 1337              	 .section .text.XMC_SCU_CLOCK_GetCcuClockFrequency,"ax",%progbits
 1338              	 .align 2
 1339              	 .global XMC_SCU_CLOCK_GetCcuClockFrequency
 1340              	 .thumb
 1341              	 .thumb_func
 1343              	XMC_SCU_CLOCK_GetCcuClockFrequency:
 1344              	.LFB211:
 748:../Libraries/XMCLib/src/xmc4_scu.c **** 
 749:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 750:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of CCU clock frequency
 751:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 752:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
 753:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1345              	 .loc 1 753 0
 1346              	 .cfi_startproc
 1347              	 
 1348              	 
 1349              	 
 1350              	.LVL94:
 1351              	.LBB18:
 1352              	.LBB19:
 1353              	 .file 2 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc4_scu.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @file xmc4_scu.h
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @date 2016-06-15
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @cond
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * All rights reserved.                        
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                             
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * following conditions are met:   
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer.                        
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Change History
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * --------------
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-06-20:
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Initial version
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-11-30:
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *      
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-03-09:
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_EnableMonitor/XMC_SCU_POWER_DisableMonitor
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_POWER_GetEVRStatus, XMC_SCU_POWER_GetEVR13Voltage, XMC_SCU_POWER_GetEVR33Vol
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-04-15:
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Fixed naming of XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG peripheral clock.
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *       Added enable and disable for peripheral clocks       
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-05-19:
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_IsLowPowerOscillatorStable() and XMC_SCU_CLOCK_IsHighPerformanceOscill
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_WaitForInterrupt() and XMC_SCU_POWER_WaitForEvent()
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(), 
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(),
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus()
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(), 
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(),
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus()
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Removed XMC_SCU_INTERRUPT_EVENT_OSCULSTAT_UPDATED, XMC_SCU_INTERRUPT_EVENT_HDSTAT_UPDATED
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-06-14:
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_IsWakeupEventDetected() and XMC_SCU_HIB_ClearWakeupEventDetectionStatus(
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-06-15:
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_EnterHibernateStateEx() which allows to select between external or inter
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Extended wakeup hibernate events using LPAC wakeup on events. Only available in XMC44, XMC
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added LPAC APIs. Only available in XMC44, XMC42 and XMC41 series.
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @endcond 
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #ifndef XMC4_SCU_H
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC4_SCU_H
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * HEADER FILES
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #include "xmc_common.h"
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if UC_FAMILY == XMC4
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup SCU
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * MACROS
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_8MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8MH
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_8MHZ (89U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8M
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_8MHZ (2U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 8
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_12MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 12
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_12MHZ (79U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_12MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_16MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 16
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_16MHZ (59U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_16MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_WDT_WARN           SCU_INTERRUPT_SRSTAT_PRWARN_Msk /**< Watchdog pr
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC       SCU_INTERRUPT_SRSTAT_PI_Msk     /**< RTC periodi
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_ALARM          SCU_INTERRUPT_SRSTAT_AI_Msk     /**< RTC alarm e
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_DLR_OVERRUN        SCU_INTERRUPT_SRSTAT_DLROVR_Msk /**< DLR overrun
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCR_Msk)
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCR_UPDATED     SCU_INTERRUPT_SRSTAT_LPACCR_Msk /**< LPAC Contro
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH0_Msk)
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH0_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH0_Msk /**< LPAC Thres
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH1_Msk)
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH1_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH1_Msk  /**< LPAC Thre
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACST_Msk)
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACST_UPDATED     SCU_INTERRUPT_SRSTAT_LPACST_Msk  /**< LPAC Statu
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCLR_Msk)
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCLR_UPDATED    SCU_INTERRUPT_SRSTAT_LPACCLR_Msk /**< LPAC event
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACSET_Msk)
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACSET_UPDATED    SCU_INTERRUPT_SRSTAT_LPACSET_Msk /**< LPAC event
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTST_Msk)
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTST_UPDATED     SCU_INTERRUPT_SRSTAT_HINTST_Msk /**< HIB HINTST 
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTCLR_Msk)
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTCLR_UPDATED    SCU_INTERRUPT_SRSTAT_HINTCLR_Msk /**< HIB HINTCL
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTSET_Msk)
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTSET_UPDATED    SCU_INTERRUPT_SRSTAT_HINTSET_Msk /**< HIB HINTSE
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED      SCU_INTERRUPT_SRSTAT_HDCLR_Msk /**< HIB HDCLR re
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDSET_UPDATED      SCU_INTERRUPT_SRSTAT_HDSET_Msk /**< HIB HDSET re
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED       SCU_INTERRUPT_SRSTAT_HDCR_Msk /**< HIB HDCR regi
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCSICTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCSICTRL_Msk /**< HIB OSCS
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCULCTRL_Msk /**< HIB OSCU
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED     SCU_INTERRUPT_SRSTAT_RTC_CTR_Msk /**< HIB RTCCTR
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM0_Msk /**< HIB RTCA
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM1_Msk /**< HIB RTCA
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM0_Msk /**< HIB TIM0 
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM1_Msk /**< HIB TIM1 
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RMX_UPDATED        SCU_INTERRUPT_SRSTAT_RMX_Msk /**< HIB RMX regist
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * ENUMS
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines Capture/Compare unit timer slice trigger, that enables synchronous start function avail
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  CCUCON register. Use type \a XMC_SCU_CCU_TRIGGER_t for accessing these enum parameters.
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CCU_TRIGGER
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU40)
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU40 = SCU_GENERAL_CCUCON_GSC40_Msk, /**< Trigger mask used for Global Start
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU40 peripheral. */
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU41 = SCU_GENERAL_CCUCON_GSC41_Msk, /**< Trigger mask used for Global Start
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU41 peripheral. */
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU42 = SCU_GENERAL_CCUCON_GSC42_Msk, /**< Trigger mask used for Global Start
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU42 peripheral. */
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU43 = SCU_GENERAL_CCUCON_GSC43_Msk, /**< Trigger mask used for Global Start
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU43 peripheral. */
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU80 = SCU_GENERAL_CCUCON_GSC80_Msk, /**< Trigger mask used for Global Start
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU80 peripheral. */
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU81 = SCU_GENERAL_CCUCON_GSC81_Msk /**< Trigger mask used for Global Start 
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU81 peripheral. */
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CCU_TRIGGER_t;
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations representing the status of trap cause. The cause of the trap gets automati
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a TRAPSTAT register and can be checked by user software to determine the state of the syst
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. 
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_TRAP_t for accessing these enum parameters.
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_TRAP 
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_OSC_WDG      = SCU_TRAP_TRAPSTAT_SOSCWDGT_Msk, /**< OSC_HP Oscillator Watchdog trap.
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_VCO_LOCK     = SCU_TRAP_TRAPSTAT_SVCOLCKT_Msk, /**< PLL loss of lock trap. */
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_USB_VCO_LOCK = SCU_TRAP_TRAPSTAT_UVCOLCKT_Msk, /**< USB PLL loss of lock trap. */ 
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PARITY_ERROR = SCU_TRAP_TRAPSTAT_PET_Msk,      /**< Memory Parity error trap. */  
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_BROWNOUT     = SCU_TRAP_TRAPSTAT_BRWNT_Msk,    /**< Brownout trap. */ 
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ULP_WDG      = SCU_TRAP_TRAPSTAT_ULPWDGT_Msk,  /**< Unstable 32KHz clock trap. */ 
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE0  = SCU_TRAP_TRAPSTAT_BWERR0T_Msk,  /**< Bad memory access of peripherals
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE1  = SCU_TRAP_TRAPSTAT_BWERR1T_Msk,  /**< Bad memory access of peripherals
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPHIT_Msk)
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_HIGH = SCU_TRAP_TRAPSTAT_TEMPHIT_Msk,  /**< Die temperature higher than expe
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPLOT_Msk)
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_LOW  = SCU_TRAP_TRAPSTAT_TEMPLOT_Msk,  /**< Die temperature lower than expec
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ECAT_RESET = SCU_TRAP_TRAPSTAT_ECAT0RST_Msk, /**< EtherCat Reset */ 
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_TRAP_t;
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for different parity event generating modules that in turn generate a trap
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Parity can be enabled with \a PETE register in order to get the trap flag reflected in \a TRAPR
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  configure parity error trap generation mechanism bits of \a PETE register.
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PETE register.
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PARITY_t for accessing these enum parameters.
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PARITY
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PSRAM_MEM  = SCU_PARITY_PEEN_PEENPS_Msk,   /**< Program SRAM parity error trap. */
 233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM1_MEM = SCU_PARITY_PEEN_PEENDS1_Msk,  /**< Data SRAM-1 parity error trap. */ 
 234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_DSRAM2_MEM)
 235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM2_MEM = SCU_PARITY_PEEN_PEENDS2_Msk,  /**< Data SRAM-2 parity error trap. */ 
 236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC0_MEM  = SCU_PARITY_PEEN_PEENU0_Msk,   /**< USIC0 memory parity error trap. */
 238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_USIC1_MEM)
 239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC1_MEM  = SCU_PARITY_PEEN_PEENU1_Msk,   /**< USIC1 memory parity error trap. */
 240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_USIC2_MEM)
 242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC2_MEM  = SCU_PARITY_PEEN_PEENU2_Msk,   /**< USIC2 memory parity error trap. */
 243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_MCAN_MEM   = SCU_PARITY_PEEN_PEENMC_Msk,   /**< CAN memory parity error trap. */
 245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PMU_MEM    = SCU_PARITY_PEEN_PEENPPRF_Msk, /**< PMU Prefetch memory parity error t
 246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USB_MEM    = SCU_PARITY_PEEN_PEENUSB_Msk,  /**< USB memory parity error trap. */ 
 247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0TX_Msk)
 248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_TXMEM  = SCU_PARITY_PEEN_PEENETH0TX_Msk, /**< Ethernet transmit memory parity 
 249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0RX_Msk)
 251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_RXMEM  = SCU_PARITY_PEEN_PEENETH0RX_Msk, /**< Ethernet receive memory parity e
 252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD0_Msk)
 254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM0 = SCU_PARITY_PEEN_PEENSD0_Msk, /**< SDMMC Memory-0 parity error trap. *
 255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD1_Msk)
 257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM1 = SCU_PARITY_PEEN_PEENSD1_Msk, /**< SDMMC Memory-1 parity error trap. *
 258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PARITY_t;
 260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the different causes for last reset. The cause of the last reset gets automatically sto
 263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a SCU_RSTSTAT register and can be checked by user software to determine the state of the s
 264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. All the enum items are tabulated as per bits present in \a SCU_RSTSTAT register.
 265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_RESET_REASON_t for accessing these enum parameters.
 266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_RESET_REASON
 268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PORST        = (1UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SWD          = (2UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sup
 271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PV           = (4UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SW           = (8UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sof
 273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_LOCKUP       = (16UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to re
 274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_WATCHDOG     = (32UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Wa
 275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PARITY_ERROR = (128UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to r
 276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_RESET_REASON_t;
 277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for events which can lead to interrupt. These enumeration values represent
 280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * status of one of the bits in \a SRSTAT register. 
 281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_INTERRUPT_EVENT_t for accessing these enum parameters.
 282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef uint32_t XMC_SCU_INTERRUPT_EVENT_t;
 284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  
 286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration for the events that can generate non maskable interrupt(NMI).
 288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The NMI generation can be enabled with \a NMIREQEN register. The event will be reflected in \a 
 289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  mirrored in the TRAPSTAT register. These enums can be used to configure NMI request generation 
 290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  NMIREQEN register.  Once configured, these events can generate non maskable interrupt.
 291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a NMIREQEN register.
 292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_NMIREQ_t for accessing these enum parameters.
 293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_NMIREQ
 295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_WDT_WARN = SCU_INTERRUPT_NMIREQEN_PRWARN_Msk, /**< Watchdog timer Pre-Warning even
 297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_PI   = SCU_INTERRUPT_NMIREQEN_PI_Msk,     /**< RTC Periodic event */ 
 298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_AI   = SCU_INTERRUPT_NMIREQEN_AI_Msk,     /**< RTC Alarm event */ 
 299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_0   = SCU_INTERRUPT_NMIREQEN_ERU00_Msk,  /**< Channel 0 event of ERU0 */  
 300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_1   = SCU_INTERRUPT_NMIREQEN_ERU01_Msk,  /**< Channel 1 event of ERU0 */ 
 301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_2   = SCU_INTERRUPT_NMIREQEN_ERU02_Msk,  /**< Channel 2 event of ERU0 */ 
 302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_3   = SCU_INTERRUPT_NMIREQEN_ERU03_Msk   /**< Channel 3 event of ERU0 */ 
 303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_NMIREQ_t;
 304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   
 305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration representing different peripheral reset bits in the \a PRSTAT registers.
 308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PRSTAT0,  \a PRSTAT1,  \a PRSTAT2,
 309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  \a PRSTAT3 registers. Use type \a XMC_SCU_PERIPHERAL_RESET_t for accessing these enum parameter
 310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Note: Release of reset should be prevented when the peripheral clock is gated in cases where ke
 311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock and bus interface clocks are shared, in order to avoid system hang-up.
 312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_RESET
 314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_VADC   = SCU_RESET_PRSTAT0_VADCRS_Msk,   /**< VADC reset. */ 
 316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DSD    = SCU_RESET_PRSTAT0_DSDRS_Msk,    /**< DSD reset. */
 318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU40  = SCU_RESET_PRSTAT0_CCU40RS_Msk,  /**< CCU40 reset. */
 320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU41  = SCU_RESET_PRSTAT0_CCU41RS_Msk,  /**< CCU41 reset. */
 322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU42  = SCU_RESET_PRSTAT0_CCU42RS_Msk,  /**< CCU42 reset. */
 325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU80  = SCU_RESET_PRSTAT0_CCU80RS_Msk,  /**< CCU80 reset. */
 328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU81  = SCU_RESET_PRSTAT0_CCU81RS_Msk,  /**< CCU81 reset. */
 331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF0 = SCU_RESET_PRSTAT0_POSIF0RS_Msk, /**< POSIF0 reset. */
 334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF1 = SCU_RESET_PRSTAT0_POSIF1RS_Msk, /**< POSIF1 reset.*/
 337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC0  = SCU_RESET_PRSTAT0_USIC0RS_Msk,  /**< USIC0 reset. */
 339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ERU1   = SCU_RESET_PRSTAT0_ERU1RS_Msk,   /**< ERU1 reset. */
 340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_HRPWM0 = SCU_RESET_PRSTAT0_HRPWM0RS_Msk,  /**< HRPWM0 reset. */
 342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU43  = (SCU_RESET_PRSTAT1_CCU43RS_Msk | 0x10000000UL),   /**< CCU43 re
 345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_LEDTS0 = (SCU_RESET_PRSTAT1_LEDTSCU0RS_Msk | 0x10000000UL), /**< LEDTS0 
 348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_MCAN   = (SCU_RESET_PRSTAT1_MCAN0RS_Msk | 0x10000000UL), /**< MCAN reset
 351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DAC    = (SCU_RESET_PRSTAT1_DACRS_Msk | 0x10000000UL),    /**< DAC reset
 354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_SDMMC  = (SCU_RESET_PRSTAT1_MMCIRS_Msk | 0x10000000UL),     /**< SDMMC r
 357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC1  = (SCU_RESET_PRSTAT1_USIC1RS_Msk | 0x10000000UL),    /**< USIC1 r
 360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC2  = (SCU_RESET_PRSTAT1_USIC2RS_Msk | 0x10000000UL),    /**< USIC2 r
 363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_PORTS  = (SCU_RESET_PRSTAT1_PPORTSRS_Msk | 0x10000000UL),   /**< PORTS r
 365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_WDT    = (SCU_RESET_PRSTAT2_WDTRS_Msk | 0x20000000UL),      /**< WDT res
 366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ETH0   = (SCU_RESET_PRSTAT2_ETH0RS_Msk | 0x20000000UL),     /**< ETH0 re
 368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA0 = (SCU_RESET_PRSTAT2_DMA0RS_Msk | 0x20000000UL),     /**< DMA0 re
 370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA1 = (SCU_RESET_PRSTAT2_DMA1RS_Msk | 0x20000000UL),     /**< DMA1 re
 372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_FCE    = (SCU_RESET_PRSTAT2_FCERS_Msk | 0x20000000UL),      /**< FCE res
 375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)  
 377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USB0   = (SCU_RESET_PRSTAT2_USBRS_Msk | 0x20000000UL),      /**< USB0 re
 378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)  
 380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ECAT0  = (SCU_RESET_PRSTAT2_ECAT0RS_Msk | 0x20000000UL),      /**< ECAT0
 381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_EBU    = (SCU_RESET_PRSTAT3_EBURS_Msk | 0x30000000UL)       /**< EBU res
 384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_RESET_t;
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for disabling the clocks sources of peripherals. Disabling of the peripher
 389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock is configured via the \a CLKCLR registers.
 390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK
 393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USB = SCU_CLK_CLKCLR_USBCDI_Msk, /**< USB module clock. */
 395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_MMC = SCU_CLK_CLKCLR_MMCCDI_Msk, /**< MMC module clock. */
 397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ETH = SCU_CLK_CLKCLR_ETH0CDI_Msk, /**< Ethernet module clock. */
 400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EBU = SCU_CLK_CLKCLR_EBUCDI_Msk, /**< EBU module clock. */
 403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_CCU = SCU_CLK_CLKCLR_CCUCDI_Msk, /**< CCU module clock. */
 405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDT = SCU_CLK_CLKCLR_WDTCDI_Msk  /**< WDT module clock. */
 406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_t;
 407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if(UC_SERIES != XMC45)
 409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines enumeration for peripherals that support clock gating. 
 411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The enumerations can be used for gating or ungating the peripheral clocks.
 412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * All the enum items are tabulated as per bits present in \a CGATSTAT0 register.
 413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_CLOCK
 416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_VADC   = SCU_CLK_CGATSTAT0_VADC_Msk,  /**< VADC peripheral gating. */
 418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DSD    = SCU_CLK_CGATSTAT0_DSD_Msk,   /**< DSD peripheral gating. */
 420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU40  = SCU_CLK_CGATSTAT0_CCU40_Msk,  /**< CCU40 peripheral gating. */
 422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU41  = SCU_CLK_CGATSTAT0_CCU41_Msk,  /**< CCU41 peripheral gating. */
 424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU42  = SCU_CLK_CGATSTAT0_CCU42_Msk,  /**< CCU42 peripheral gating. */
 427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU80  = SCU_CLK_CGATSTAT0_CCU80_Msk,  /**< CCU80 peripheral gating. */
 430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU81  = SCU_CLK_CGATSTAT0_CCU81_Msk,  /**< CCU81 peripheral gating. */
 433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF0 = SCU_CLK_CGATSTAT0_POSIF0_Msk,  /**< POSIF0 peripheral gating. *
 436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF1 = SCU_CLK_CGATSTAT0_POSIF1_Msk,   /**< POSIF1 peripheral gating. 
 439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC0  = SCU_CLK_CGATSTAT0_USIC0_Msk,   /**< USIC0 peripheral gating. */
 441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ERU1   = SCU_CLK_CGATSTAT0_ERU1_Msk,    /**< ERU1 peripheral gating. */
 442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_HRPWM0 = SCU_CLK_CGATSTAT0_HRPWM0_Msk,  /**< HRPWM0 peripheral gating. *
 444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU43  = (SCU_CLK_CGATSTAT1_CCU43_Msk | 0x10000000UL),   /**< CCU43 peri
 447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_LEDTS0 = (SCU_CLK_CGATSTAT1_LEDTSCU0_Msk | 0x10000000UL), /**< LEDTS0 pe
 450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_MCAN   = (SCU_CLK_CGATSTAT1_MCAN0_Msk | 0x10000000UL),   /**< MCAN perip
 453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DAC    = (SCU_CLK_CGATSTAT1_DAC_Msk | 0x10000000UL),     /**< DAC periph
 456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_SDMMC  = (SCU_CLK_CGATSTAT1_MMCI_Msk | 0x10000000UL),    /**< SDMMC peri
 459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC1  = (SCU_CLK_CGATSTAT1_USIC1_Msk | 0x10000000UL),   /**< USIC1 peri
 462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC2  = (SCU_CLK_CGATSTAT1_USIC2_Msk | 0x10000000UL),    /**< USIC2 per
 465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_PORTS  = (SCU_CLK_CGATSTAT1_PPORTS_Msk | 0x10000000UL),   /**< PORTS per
 467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_WDT    = (SCU_CLK_CGATSTAT2_WDT_Msk | 0x20000000UL),      /**< WDT perip
 468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ETH0   = (SCU_CLK_CGATSTAT2_ETH0_Msk | 0x20000000UL),     /**< ETH0 peri
 470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA0 = (SCU_CLK_CGATSTAT2_DMA0_Msk | 0x20000000UL),     /**< DMA0 peri
 472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA1 = (SCU_CLK_CGATSTAT2_DMA1_Msk | 0x20000000UL),     /**< DMA1 peri
 474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_FCE    = (SCU_CLK_CGATSTAT2_FCE_Msk | 0x20000000UL),      /**< FCE perip
 477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USB0   = (SCU_CLK_CGATSTAT2_USB_Msk | 0x20000000UL),      /**< USB0 peri
 480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ECAT0   = (SCU_CLK_CGATSTAT2_ECAT0_Msk | 0x20000000UL),      /**< ECAT0 
 483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_EBU    = (SCU_CLK_CGATSTAT3_EBU_Msk | 0x30000000UL)       /**< EBU perip
 486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_CLOCK_t;
 488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for system clock (fSYS) source. These enums are used to configure \a SYSSEL bit
 492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock Control Register. 
 493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_SYSCLKSRC_t for accessing these enum parameters.
 494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSCLKSRC
 496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_OFI = (0UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos), /**< Internal Fast Clock (fOF
 498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_PLL = (1UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos)  /**< PLL output (fPLL) as a
 500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSCLKSRC_t;
 502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the P-Divider input frequency. These enums are used to configure 
 505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. 
 506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_OSCCLKSRC_t for accessing these enum parameters.
 507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLLCLKSRC
 509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP = 0UL,  /**< External crystal oscillator
 511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                 (fOHP) as the source for P-Divider. */
 512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk /**< Ba
 513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                              as the source for P-Di
 514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLLCLKSRC_t;
 515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the USB clock source(fUSB/fSDMMC).
 518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * These enums are used to configure \a USBSEL bits of \a USBCLKCR
 519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. User can choose either fPLL or fUSBPLL clock as a source for USB clock. 
 520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_USBCLKSRC
 523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_USBPLL = (0UL << SCU_CLK_USBCLKCR_USBSEL_Pos), /**< USB PLL(fUSB PLL) as 
 525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_SYSPLL = (1UL << SCU_CLK_USBCLKCR_USBSEL_Pos)  /**< Main PLL output (fPLL
 527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_USBCLKSRC_t;
 529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
 531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the ECAT clock source.
 533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_ECATCLKSRC
 535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_USBPLL = (0UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos), /**< USB PLL (fUSBPLL) 
 537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL = (1UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos)  /**< Main PLL output (f
 538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_ECATCLKSRC_t;
 539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of WDT clock(fWDT). These enums are used to configure 
 543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOFI or fPLL or fSTDBY clock as a source for WDT clock. 
 544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_WDTCLKSRC
 547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_OFI = (0UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos),  /**< Internal Fast Clock 
 549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fOFI) as the source for
 550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_STDBY = (1UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos), /**< Standby clock 
 551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fSTDBY) as the source f
 552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_PLL = (2UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos)   /**< PLL output (fPLL) as th
 553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for WDT clock (fW
 554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_WDTCLKSRC_t;
 555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of external clock out (fEXT). These enums are used to 
 558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fSYS or fPLL or fUSBPLL clock as a source for external clock o
 559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_EXTOUTCLKSRC_t for accessing these enum parameters.
 560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_EXTOUTCLKSRC
 562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS = (0UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos),  /**< System clock (fSYS) 
 564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             the source for external
 565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_USB = (2UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< USB PLL output(fUSB P
 566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL = (3UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Main PLL output(fPLL)
 568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if ((UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY = (4UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Standby clock(fSTDB
 571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_EXTOUTCLKSRC_t;
 574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of RTC Clock (fRTC). These enums are used to configure
 577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either fOSI or fULP clock as a source for RTC Clock (fRTC).
 578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_RTCCLKSRC_t for accessing these enum parameters.
 579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_RTCCLKSRC
 581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_RCS_Pos), /**< Internal Slow Clock
 583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                          (fOSI) as the source for R
 584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_ULP = (1UL << SCU_HIBERNATE_HDCR_RCS_Pos) /**< Ultra Low Power Clock (fULP)
 585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                         as the source for RTC Clock
 586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_RTCCLKSRC_t;
 587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of Standby Clock (fSTDBY). These enums are used to con
 590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOSI or fULP clock as a source for Standby Clock (fSTDBY).
 591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_STDBYCLKSRC_t for accessing these enum parameters.
 592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_STDBYCLKSRC
 594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos), /**< Internal Slow Clock 
 596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fOSI) as the source for 
 597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSCULP = (1UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos) /**< Ultra Low Power Cl
 599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fULP) as the source for 
 600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_STDBYCLKSRC_t;
 602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for backup clock trimming. These enums are used to configure \a AOTREN  \a FOTR
 605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  PLLCON0 register. Use type \a XMC_SCU_CLOCK_BACKUP_TRIM_t for accessing these enum parameters.
 606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE
 608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY   = 0UL,  /**< Factory Oscillator Calibration: 
 610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                         Force adjustment of the internal oscillator
 611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC = 1UL   /**<  Automatic Oscillator Calibration adju
 612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t;
 613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 616:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting device boot mode. These enums are used to configure \a SWCON bits
 617:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose among various boot modes by configuring SWCON bits.
 618:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_BOOTMODE_t for accessing these enum parameters.
 619:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 620:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_BOOTMODE 
 621:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 622:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_NORMAL     = (0UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from start of flash
 623:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ASC_BSL    = (1UL << SCU_GENERAL_STCON_SWCON_Pos), /**< UART bootstrap. */
 624:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_BMI        = (2UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot Mode Index - Custom
 625:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            sequence. */
 626:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_CAN_BSL    = (3UL << SCU_GENERAL_STCON_SWCON_Pos), /**< CAN bootstrap. */
 627:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_PSRAM_BOOT = (4UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from PSRAM. */
 628:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM0       = (8UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed 
 629:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            address 0. */
 630:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM1       = (12UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed
 631:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             address 1. */
 632:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_FABM       = (14UL << SCU_GENERAL_STCON_SWCON_Pos), /**< fallback Alternate Boot
 633:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             Try ABM-0 then try ABM-
 634:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_BOOTMODE_t;
 635:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 636:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 637:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 638:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines various PLL modes of operation. These enums are used to configure \a VCOBYP bit of \a P
 639:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either normal or prescalar mode by configuring VCOBYP bit.
 640:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PLL_MODE_t for accessing these enum parameters.
 641:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 642:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLL_MODE
 643:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 644:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED, /**< fPLL derived from fOSC and PLL operating in prescalar mo
 645:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL,  /**< fPLL derived from fVCO and PLL operating in normal mode. 
 646:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR /**< fPLL derived from fOSC and PLL operating in prescalar mo
 647:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_MODE_t;
 648:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 649:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 650:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in SLEEP state.
 651:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetSleepConfig before going to SLEEP state.
 652:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 653:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The SLEEP state of the system corresponds to the SLEEP state of the CPU. The state is
 654:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 655:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. Peripherals are only clocked when configured to stay enabled. 
 656:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 657:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Peripherals can continue to operate unaffected and eventually generate an event to
 658:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  wake-up the CPU. Any interrupt to the NVIC will bring the CPU back to operation. The
 659:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock tree upon exit from SLEEP state is restored to what it was before entry into SLEEP
 660:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  state.
 661:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  
 662:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 663:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SLEEP_MODE_CONFIG
 664:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 665:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in SLEEP 
 666:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_SLEEPCR_SYSSEL_Msk,  /**< fPLL used as syst
 667:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 668:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in SLEEP state */
 669:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_SLEEPCR_USBCR_Msk,  /**< USB clock enabled i
 670:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 671:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 672:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in SLEEP state */
 673:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_SLEEPCR_MMCCR_Msk,/**< SDMMC clock enabled
 674:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 675:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 676:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in SLEEP state */
 677:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_SLEEPCR_ETH0CR_Msk,  /**< ETH clock enabled 
 678:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 679:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 680:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in SLEEP state */
 681:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_SLEEPCR_EBUCR_Msk,  /**< EBU clock enabled i
 682:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 683:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_CCU = 0,  /**< CCU clock disabled in SLEEP state */
 684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_SLEEPCR_CCUCR_Msk,  /**< CCU clock enabled i
 685:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_WDT = 0,  /**< WDT clock disabled in SLEEP state */
 686:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_SLEEPCR_WDTCR_Msk,  /**< WDT clock enabled i
 687:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_t;
 688:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 689:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 690:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in DEEPSLEEP state.
 691:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In addition the state of FLASH, PLL and PLLVCO during DEEPSLEEP state.
 692:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetDeepSleepConfig before going to DEEPSLEEP state.
 693:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 694:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The DEEPSLEEP state of the system corresponds to the DEEPSLEEP state of the CPU. The state is
 695:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 696:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. 
 697:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 698:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In Deep Sleep state the OSC_HP and the PLL may be switched off. The wake-up logic in the NVIC i
 699:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  by a free-running clock. Peripherals are only clocked when configured to stay enabled. 
 700:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Configuration of peripherals and any SRAM content is preserved.
 701:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The Flash module can be put into low-power mode to achieve a further power reduction.
 702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  On wake-up Flash module will be restarted again before instructions or data access is possible.
 703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Any interrupt will bring the system back to operation via the NVIC.The clock setup before
 704:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entering Deep Sleep state is restored upon wake-up.
 705:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 706:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG
 707:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 708:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in DE
 709:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_DSLEEPCR_SYSSEL_Msk,  /**< fPLL used as
 710:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_FLASH_POWERDOWN = SCU_CLK_DSLEEPCR_FPDN_Msk,/**< Flash power 
 711:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_PLL_POWERDOWN = SCU_CLK_DSLEEPCR_PLLPDN_Msk,  /**<  Switch of
 712:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_VCO_POWERDOWN = SCU_CLK_DSLEEPCR_VCOPDN_Msk,  /**<  Switch of
 713:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 714:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in DEEPSLEEP state 
 715:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_DSLEEPCR_USBCR_Msk,  /**< USB clock enab
 716:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 717:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 718:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in DEEPSLEEP stat
 719:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_DSLEEPCR_MMCCR_Msk,/**< SDMMC clock en
 720:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 721:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 722:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in DEEPSLEEP state 
 723:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_DSLEEPCR_ETH0CR_Msk,  /**< ETH clock ena
 724:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 725:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 726:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in DEEPSLEEP state 
 727:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_DSLEEPCR_EBUCR_Msk,  /**< EBU clock enab
 728:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 729:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_CCU = 0,  /**< CCU clock disabled in DEEPSLEEP state 
 730:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_DSLEEPCR_CCUCR_Msk,  /**< CCU clock enab
 731:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_WDT = 0,  /**< WDT clock disabled in DEEPSLEEP state 
 732:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_DSLEEPCR_WDTCR_Msk,  /**< WDT clock enab
 733:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_t;
 734:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 735:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 736:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines status of EVR13 regulator
 737:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 738:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_EVR_STATUS
 739:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 740:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_OK = 0, /**< EVR13 regulator No overvoltage condition */
 741:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_EVR13_OVERVOLTAGE = SCU_POWER_EVRSTAT_OV13_Msk /**< EVR13 regulator is i
 742:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_POWER_EVR_STATUS_t;
 743:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 744:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 745:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Define status of external hibernate control  
 746:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 747:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_CTRL_STATUS
 748:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 749:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_NO_ACTIVE = 0, /**< Hibernate not driven active to pads */
 750:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_ACTIVE = SCU_HIBERNATE_HDSTAT_HIBNOUT_Msk, /**< Hibernate driven active t
 751:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_CTRL_STATUS_t;
 752:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 753:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 754:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Hibernate domain event status
 755:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 756:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_EVENT
 757:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 758:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_POS_EDGE = SCU_HIBERNATE_HDCR_WKPEP_Msk, /**< Wake-up on positive edg
 759:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_NEG_EDGE = SCU_HIBERNATE_HDCR_WKPEN_Msk, /**< Wake-up on negative edg
 760:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_RTC = SCU_HIBERNATE_HDCR_RTCE_Msk, /**< Wake-up on RTC event */
 761:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_ULPWDG = SCU_HIBERNATE_HDCR_ULPWDGEN_Msk, /**< ULP watchdog alarm status */
 762:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 763:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_VBAT_POSEDGE = SCU_HIBERNATE_HDSTAT_VBATPEV_Msk, /**< Wake-up on LPAC posi
 764:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_VBAT_NEGEDGE = SCU_HIBERNATE_HDSTAT_VBATNEV_Msk, /**< Wake-up on LPAC nega
 765:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_POSEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO0PEV_Msk, /**< Wake-up on LP
 766:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_NEGEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO0NEV_Msk, /**< Wake-up on LP
 767:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))
 768:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Msk, /**< Wake-up on LP
 769:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Msk, /**< Wake-up on LP
 770:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 771:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 772:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_EVENT_t;
 773:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 774:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 775:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   * Hibernate domain dedicated pins
 776:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   */
 777:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO
 778:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 779:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_0 = 0, /**< HIB_IO_0 pin. 
 780:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                              At the first power-up and with every reset of the hibernate domain thi
 781:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 782:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_1 = 1 /**< HIB_IO_1 pin. 
 783:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                             At the first power-up and with every reset of the hibernate domain this
 784:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                             @note : Only available in certain packages*/
 785:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 786:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_t;
 787:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 788:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 789:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB_IOx pin I/O control
 790:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 791:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_PIN_MODE
 792:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 793:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_NONE = 0 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 794:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_DOWN = 1 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 795:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_UP = 2 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, in
 796:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_HIBCTRL = 8 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-
 797:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_WDTSRV = 9 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-p
 798:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_GPIO = 10 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-pu
 799:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_HIBCTRL = 12 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Ope
 800:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_WDTSRV = 13 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open
 801:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_GPIO = 14 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open d
 802:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_PIN_MODE_t;
 803:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 804:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 805:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the output polarity of the HIB_IOx
 806:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 807:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO_OUTPUT_LEVEL
 808:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 809:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_LOW = 0 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos, /**< Direct value */
 810:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_HIGH = 1 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos /**< Inverted value */
 811:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_OUTPUT_LEVEL_t;
 812:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 813:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 814:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects hibernate mode
 815:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 816:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_HIBERNATE_MODE
 817:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 818:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL = 0, /**< Request external hibernate mode */
 819:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 820:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_HIBERNATE_MODE_INTERNAL = 1, /**< Request internal hibernate mode. @note Only availab
 821:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 822:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_HIBERNATE_MODE_t;
 823:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 824:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 825:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects input signal HIB_SR0 of ERU0
 826:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 827:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_SR0_INPUT
 828:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 829:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_HIB_IO_0 = SCU_HIBERNATE_HDCR_GPI0SEL_Msk, /**< Set HIB_SR0 to HIB_IO_0 dig
 830:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 831:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_HIB_IO_1 = 0, /**< Set HIB_SR0 to HIB_IO_1 digital input. @note Only availa
 832:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 833:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 834:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_ACMP0 = SCU_HIBERNATE_HDCR_ADIG0SEL_Msk,  /**< Set HIB_SR0 to LPAC CMP0. @n
 835:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 836:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_SR0_INPUT_t;
 837:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 838:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 839:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 840:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100))
 841:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 842:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects input signal HIB_SR1 of ERU0. @note Only available in XMC44 in certain packages.
 843:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 844:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_SR1_INPUT
 845:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 846:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_HIB_IO_0 = SCU_HIBERNATE_HDCR_GPI1SEL_Msk, /**< Set HIB_SR1 to HIB_IO_0 dig
 847:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_HIB_IO_1 = 0, /**< Set HIB_SR1 to HIB_IO_1 digital input.  */
 848:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_ACMP1 = SCU_HIBERNATE_HDCR_ADIG1SEL_Msk,  /**< Set HIB_SR0 to LPAC CMP1. */
 849:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_XTAL_GPI = SCU_HIBERNATE_HDCR_XTALGPI1SEL_Msk,  /**< Set HIB_SR0 to RTC_XTA
 850:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_SR1_INPUT_t;
 851:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 852:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 853:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 854:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC input selection
 855:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 856:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_INPUT
 857:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 858:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_DISABLED = 0 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator permanen
 859:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_VBAT = 0x1 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activated 
 860:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_HIB_IO_0 = 0x2 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activa
 861:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))      
 862:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_HIB_IO_1 = 0x4 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activa
 863:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 864:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_INPUT_t;
 865:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 866:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 867:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC start trigger selection for selected inputs
 868:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 869:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_TRIGGER
 870:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 871:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_SUBSECOND_INTERVAL_COUNTER = 0 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /*
 872:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_RTC_ALARM_EVENT = 0x1 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< RTC al
 873:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_RTC_PERIODIC_EVENT = 0x2 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< RTC
 874:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_POSITIVE_EDGE_EVENT = 0x3 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Po
 875:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_NEGATIVE_EDGE_EVENT = 0x5 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Po
 876:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_CONTINOUS = 0x6 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< Continuous m
 877:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_SINGLE_SHOT = 0x7 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< Single sho
 878:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_TRIGGER_t;
 879:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 880:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 881:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC status
 882:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 883:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_STATUS
 884:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 885:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_VBAT_COMPARE_DONE = SCU_HIBERNATE_LPACST_VBATSCMP_Msk, /**< VBAT compare 
 886:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_COMPARE_DONE = SCU_HIBERNATE_LPACST_AHIBIO0SCMP_Msk, /**< HBI_IO
 887:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))        
 888:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_COMPARE_DONE = SCU_HIBERNATE_LPACST_AHIBIO1SCMP_Msk, /**< HBI_IO
 889:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 890:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_VBAT_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_VBATVAL_Msk, /**< VBAT compar
 891:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_AHIBIO0VAL_Msk, /**< HBI_
 892:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))        
 893:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_AHIBIO1VAL_Msk, /**< HBI_
 894:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 895:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_STATUS_t;
 896:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 897:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif /* (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41)
 898:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 899:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 900:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * DATA STRUCTURES
 901:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 902:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 903:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 904:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure for initializing the PLL functional block.
 905:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Structure holds divider values for N-DIV, P-DIV, K1-DIV, K2-DIV in order to generate desired 
 906:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  frequency using VCO. It holds the PLL mode of operation either normal or prescaler (VCO bypasse
 907:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_PLL_CONFIG_t for accessing these structure parameters.
 908:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 909:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_SYSPLL_CONFIG
 910:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 911:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t n_div;                       /**<  PLL N-Divider value. */
 912:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t p_div;                       /**<  PLL P-Divider value. */
 913:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t k_div;                       /**<  K1-Divider(Prescalar mode) or K2-Divider (Normal mode)
 914:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_t mode;    /**<  PLL mode of operation. */
 915:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_t clksrc; /**<  PLL divider input frequency. */
 916:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_CONFIG_t;
 917:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 918:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 919:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure used for initializing the clock functional block.
 920:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock functional block configures clock source needed for various peripheral and its divider va
 921:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_CONFIG_t for accessing these structure parameters.
 922:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 923:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_CONFIG
 924:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 925:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_CONFIG_t         syspll_config;      /**< PLL configuration */
 926:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_oschp;       /**< Enable external high precision osc
 927:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fOHP has to
 928:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_osculp;      /**< Enable external ultra low power os
 929:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fULP has to
 930:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t calibration_mode;   /**< Backup clock trimming mode. */
 931:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_t             fstdby_clksrc;      /**< Standby clock source. */
 932:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_t             fsys_clksrc;        /**< Choice of system clock. */
 933:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fsys_clkdiv;        /**< Ratio of fPLL to fSYS. */
 934:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fcpu_clkdiv;        /**< Ratio of fSys to fCPU. */
 935:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fccu_clkdiv;        /**< Ratio of fSys to fCCU. */
 936:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fperipheral_clkdiv; /**< Ratio of fSYS to fPERI. */
 937:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } const XMC_SCU_CLOCK_CONFIG_t;
 938:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 939:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 940:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Low power modes
 941:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 942:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_MODE_t
 943:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 944:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_MODE_SLEEP = 0, /**< sleep mode stops the processor clock */
 945:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_MODE_DEEPSLEEP = SCB_SCR_SLEEPDEEP_Msk /**< deep sleep mode stops the system clock 
 946:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_POWER_MODE_t;
 947:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 948:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 949:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * API PROTOTYPES
 950:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 951:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 952:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #ifdef __cplusplus
 953:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** extern "C" {
 954:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 955:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 956:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 957:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 958:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 959:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 960:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 961:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 962:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 963:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 964:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 965:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 966:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables out of range comparator for the selected ADC group and channel. \n\n
 967:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The ADC channel input is compared by Out of Range Comparator (ORC) for overvoltage monitoring
 968:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * or for detection of out of range analog inputs. ORC must be turned on explicitly
 969:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * to leverage the auditing feature. ORC is enabled by setting the enable bit in the GORCEN registe
 970:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 971:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableOutOfRangeComparator()\n\n\n
 972:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 973:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 974:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 975:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 976:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 977:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 978:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 979:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 980:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 981:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 982:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 983:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 984:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 985:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the out of range comparator for the selected ADC group and the channel. \n\n
 986:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Out of range comparator is disabled by clearing the enable bit in the GORCEN register.
 987:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 988:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableOutOfRangeComparator()\n\n\n
 989:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 990:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 991:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 992:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 993:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 994:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 995:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 996:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables die temperature measurement by powering the DTS module.\n\n
 997:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is enabled by setting the PWD bit of DTSCON register.
 998:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 999:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTempe
1000:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1001:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1002:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableTemperatureSensor(void);
1003:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1004:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1005:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1006:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1007:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1008:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables die temperature measurement by powering the DTS module off.\n\n
1009:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is disabled by clearing the PWD bit of DTSCON register.
1010:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1011:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTemper
1012:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1013:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1014:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableTemperatureSensor(void);
1015:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1016:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1017:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of die temperature sensor. \n
1018:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: true - if temperature sensor is enabled.\n
1019:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    false - if temperature sensor is disabled.
1020:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1021:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1022:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the die temperature sensor power status.\n\n
1023:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading the PWD bit of DTSCON register.
1024:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1025:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
1026:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1027:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1028:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorEnabled(void);
1029:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1030:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1031:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1032:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param offset  Offset value for calibrating the DTS result.\n
1033:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 127.
1034:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param gain    Gain value for calibrating the DTS conversion result.\n
1035:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 63.
1036:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1037:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1038:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1039:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1040:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Calibrates the measurement of temperature by configuring the values of offset and gain of \a DTS
1041:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Allows to improve the accuracy of the temperature measurement with the adjustment of \a OFFSET a
1042:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a DTSCON register.
1043:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset adjustment is defined as a shift of the conversion result. The range of the offset adjust
1044:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * resolution that corresponds to +/- 12.5�C. The offset value gets added to the measure result. 
1045:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset is considered as a signed value.
1046:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Gain adjustment helps in minimizing gain error. When the \a gain value is 0, result is generated
1047:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the \a gain value is 63, result is generated with least gain, i.e, \a RESULT - 63 at the hi
1048:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1049:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1050:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CalibrateTempMonitor with desired offset and gain calibration values to the DT
1051:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1052:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1053:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
1054:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
1055:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
1056:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1057:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(),
1058:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1059:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1060:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain);
1061:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1062:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1063:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_STATUS_t  Result of starting the temperature measurement.\n
1064:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                           \b Range: \n 
1065:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_OK if the measurement is started successfully.\n
1066:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_ERROR if temperature sensor is not enabled.\n
1067:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_BUSY if temperature sensor is busy measuring the tem
1068:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1069:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1070:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1071:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Starts die temperature measurement using internal temperature sensor.\n\n
1072:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks if the temperature sensor is enabled and is not busy in measurement.\n
1073:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1074:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1075:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1076:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1077:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
1078:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
1079:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
1080:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1081:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
1082:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
1083:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1084:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void);
1085:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1086:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1087:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1088:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1089:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Measured temperature value.\n
1090:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Valid temperature range is 0 to 1023. \n
1091:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              If sensor is not enabled, 0x7FFFFFFFH is returned.
1092:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1093:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1094:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads the measured value of die temperature.\n\n
1095:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Temperature measurement result is read from \a RESULT bit field of \a DTSSTAT register.
1096:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The temperature measured in �C is given by (RESULT - 605) / 2.05 [�C]
1097:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1098:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1099:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetTemperatureMeasurement(void);
1101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the die temperature sensor is busy.\n
1104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \b Range: \a true if sensor is busy in temperature measurement.
1105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \a false if sensor is free and can accept a new request for measurement.
1106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks whether Die Temperature Sensor (DTS) is busy in temperature measurement.\n\n
1109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from the \a BUSY bit field of the \a DTSSTAT register.
1110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
1112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorBusy(void);
1114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool Status of die temperature sensor whether it is ready to start measurement. \n
1117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: \n \a true if temperature sensor is ready to start measurement. \n
1118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \a false if temperature sensor is not ready to start measurement.
1119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the die temperature sensor is ready to start a measurement\n\n
1122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading \a RDY bit of \a DTSSTAT register. It is recommended
1123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * to check the ready status of die temperature sensor before starting it.
1124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorReady(void);
1128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (UC_SERIES != XMC45)
1130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has exceeded the configured upper 
1132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has exceeded the configured upper limit.
1133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is less than the configured upper limit.
1134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has exceeded the configured upper limit of temperature.\n\n
1137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a OVERFL bit (Upper Limit Overflow Status bit) of \a DTEMPALARM register.
1138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a OVERFL bit will be set if the measured temperature has exceeded the limit configured in 
1139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a UPPER in the \a DTEMPLIM register.
1140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_LowTemperature() \n\n\n
1142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_HighTemperature(void);
1144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param lower_temp  Lower threshold of die temperature. If measured temperature falls below this 
1148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a UNDERFL bit field of \a DTEMPALARM register.
1149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param upper_temp  Upper threshold of die temperature. If measured temperature exceeds this valu
1150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a OVERFL bit field of \a DTEMPALARM register.
1151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the lower and upper threshold of die temperature.\n\n
1156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * API configures \a DTEMPLIM register for upper and lower die temperature threshold limits.
1157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the measured temperature is outside the range defined by the limits, alarm bits \a UNDERFL 
1158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * will be set in the register \a DTEMPALARM.\n
1159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Use \a XMC_SCU_HighTemperature() and XMC_SCU_LowTemperature() to monitor the temperature.\n
1164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HighTemperature(), XMC_SCU_LowTemperature() \n\n\n
1166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp);
1168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has dropped below the configured l
1171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has dropped below the configured lower l
1172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is higher than the configured lower limit.
1173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has dropped below the configured lower limit of temperature.\
1176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a UNDERFL bit (Lower LimitUnderflow Status bit) of \a DTEMPALARM register.
1177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a UNDERFL bit will be set if the measured temperature has dropped below the limit configure
1178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a LOWER in the \a DTEMPLIM register.
1179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_HighTemperature() \n\n\n
1181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_LowTemperature(void);
1183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
1184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t Configured boot mode for the device.\n
1187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for enumeration of different boot modes.
1188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the boot mode configured for the device.\n\n
1191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The boot mode is read from the \a STCON register bit field \a SWCON.
1192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetBootMode() \n\n\n
1195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetBootMode(void);
1197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param mode Boot mode to be configured for the device.\n
1201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for selecting the boot mode.
1202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the desired boot mode for the device.\n\n
1207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The XMC4 series devices support multiple boot modes. A running application can set a desired boo
1208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * launch it by means of software reset. Switching of boot modes should be handled carefully. User 
1209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the initial boot sequence is executed. A stable execution environment should be maintained when 
1210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * eventually handed over to the application program.\n
1211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to launch requested bootmode:\n
1212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetBootMode() with desired boot mode value.\n
1213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Trigger a software reset using system reset request by enabling a bit \a SYSRESETREQ of AIRCR 
1214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *   (PPB->AIRCR |= PPB_AIRCR_SYSRESETREQ_Msk).\n
1215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetBootMode() \n\n\n
1217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t mode);
1219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be read.\n
1223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Data read from the selected general purpose register.
1226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides stored data from general purpose SCU register.\n\n
1229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API reads from either GPR0 or GPR1 based on the \a index value.
1231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteGPR()\n\n\n
1233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadGPR(const uint32_t index);
1235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  
1236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be written.\n
1239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data  Data to be written to the selected general purpose register.
1241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Stores data in the selected general purpose SCU register.\n\n
1246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API writes data to either GPR0 or GPR1 based on the \a index value.
1248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadGPR()\n\n\n
1250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data);
1252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be written.\n
1256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data    32 bit data to be written into retention memory. The API writes
1260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data to the address specified.\n
1261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Writes input data to the selected address of Retention memory in hibernate domain.\n\n
1267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadFromRetentionMemory() \n\n\n
1273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data);
1275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be read.\n
1279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  32 bit data read from retention memory. The API reads
1284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data from the address specified.\n
1285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads data from selected address of retention memory in hibernate domain.\n\n
1289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteToRetentionMemory() \n\n\n
1295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address);
1297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be enabled.\n
1301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively enables interrupt sources to generate non maskable interrupt(NMI).\n\n
1308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually enabled by setting corresponding bit of an interrupt in the 
1309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \a NMIREQEN register.
1310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_DisableNmiRequest() \n\n\n
1312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request);
1314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be disabled.\n
1318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively disables interrupt sources from generating non maskable interrupt(NMI).\n\n
1325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually disabled by clearing corresponding bits in the \a NMIREQEN reg
1326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request);
1330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be enabled.\n
1334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables assertion of trap for the selected trap event.\n\n
1340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually enabled by clearing respective bit of the 
1341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * event in \a TRAPDIS register in order to get an exception.
1342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Disable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Enable(const uint32_t trap);
1346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be disabled.\n
1350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables assertion of trap for the selected trap event.\n\n
1356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually disabled by setting the respective event bit 
1357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a TRAPDIS register in order to suppress trap generation.
1358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Disable(const uint32_t trap);
1362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap status bit has to be cleared.\n
1366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the trap status of input event.\n\n
1372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Once a trap event is detected, it will have to be acknowledged and later serviced. 
1373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap status bit should be cleared to detect the occurence of trap next time. 
1374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * This is useful while polling for TRAPSTAT without enabling the NMI for trap.
1375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap status can be cleared by setting the event bit in the \a TRAPCLR register.
1376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap);
1380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of trap generating events.\n
1383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event. The returned
1384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * value indicates the status of multiple events at their respective bit positions.
1385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * User should mask the bits of the events of interest using the type specified.
1386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of trap generating events. \n\n
1389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from \a TRAPRAW register. Status of the specific events can be checked
1390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * using their respective bits in the \a TRAPRAW register. The bit masks can be obtained from
1391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the enumeration type @ref XMC_SCU_TRAP_t. Multiple events can be combined using \a OR operation.
1392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * A trap event is considered to be asserted if the respective bit of the event is set to 1.
1393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_ClearStatus() \n\n\n
1395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_TRAP_GetStatus(void);  
1397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap has to be triggered.\n
1401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Triggers trap generation for the event specified. \n\n
1407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap source has to be enabled before invocation of this API. 
1408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be triggered by setting its respective bit in the \a TRAPSET register.
1409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be configured to generate a non maskable interrupt by using the API XMC_SCU_INTER
1410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to manually assert a trap event:\n
1411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_EnableEvent with desired trap request source ID.\n
1412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_SetEvent with same trap request source ID to manually assert a trap event
1413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Trigger(const uint32_t trap);
1417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be reset.\n
1421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Puts the specified peripheral in to reset state. \n\n
1427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API achieves reset of peripherals by setting the respective bit in the \a PRSET0,  \a PRSET1
1428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset assertion automatically stored in the \a PRSTATn register and can be c
1429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * user software to determine the state of the system and for debug purpose.\n
1430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to assert a peripheral reset:\n
1431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_AssertPeripheralReset() with desired peripheral identifier.\n
1432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted with same peripheral identifier to verify whet
1433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * is in reset state.\n
1434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_IsPeripheralResetAsserted() \n\n\n
1436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be moved out of reset state.\n
1442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the specified peripheral by moving it out of reset state.  \n\n
1448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Any peripheral should be moved out of reset state for executing its functionality.
1449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API enables the peripheral by setting its respective bit in the \a PRCLR0,  \a PRCLR1 or  \a
1450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset deassertion is automatically stored in the \a PRSTATn register and can
1451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the user software to determine the state of the system and for debug purpose.\n
1452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to deassert a peripheral reset:\n
1453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_DeassertPeripheralReset() with desired peripheral identifier.\n
1454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted() with desired peripheral identifier to verify
1455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * has been enabled.\n
1456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral, whose reset status has to be checked.\n
1464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals.
1465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral reset. \n
1467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *               \b Range: \a true if peripheral is in reset state. \a false if peripheral is enabl
1468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the reset status of the selected peripheral.\n\n
1471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API reads the reset status from \a PRSTATn register. Returns true if the peripheral is in
1472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset state. On power up of the device, all the peripherals will be in reset state. 
1473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If the peripheral is enabled, \a false will be returned as the status.
1474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n 
1476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  
1479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error status has to be cleared.\n
1482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory status bits can be cleared by using the \a OR operation.
1484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the parity error status bit. \n\n
1489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * When a memory parity error is detected using the status bits in \a PEFLAG register. It has to 
1490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * be cleared by software to detect the parity error from the same memory next time.
1491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API clears the parity error status bit of the selected peripheral by setting the 
1492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * respective bit in the \a PEFLAG register. Status of multiple memory parity errors 
1493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * can be cleared by combining the enum values using \a OR operation.
1494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_GetStatus(), XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_EnableTrapGeneration() \n\n\
1496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory);
1498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error checking has to be enabled.\n
1502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables parity error checking for the selected on-chip RAM type.\n\n
1509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error checking can be enabled by setting respective bits in the \a PEEN register.
1510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Additionally parity error can be configured to generate trap when the error is detected,
1511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * using the API XMC_SCU_PARITY_EnableTrapGeneration(). Such a trap can be further configured
1512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * to generate non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration(), XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Enable(const uint32_t memory);
1517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory   The on-chip RAM type, for which the parity error checking has to be disabled.\n
1521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables parity error checking for the selected on-chip RAM type.\n\n
1528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection can be disabled by clearing the respective bit in the \a PEEN register.
1529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Disable(const uint32_t memory);
1533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be enable
1537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables trap assertion for the parity error source.\n\n
1544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection for different types of on-chip RAM can generate trap.
1545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion for parity error can be individually enabled by setting the respective bits
1546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a PETE register. The generated trap can be additionally configured to generate
1547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory);
1552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be disabl
1556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the assertion of trap for the parity error source.\n\n
1563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be disabled by clearing the respective bit of the RAM type in the \a PETE reg
1564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration() \n\n\n
1567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory);
1569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of parity error detection for the on-chip RAM modules.\n
1573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to get the bit mask of each RAM module type.
1574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of parity error detection for the on-chip RAM modules.\n\n
1577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error status information is obtained from the \a PEFLAG register.
1578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If a particular RAM module has parity error, its respective bit field will be set to 1 in the 
1579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * returned value. A check for the status of a particular RAM module can be done by
1580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * masking the returned value with the RAM module identifier from the type @ref XMC_SCU_PARITY_t.
1581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_ClearStatus() \n\n\n
1583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_PARITY_GetStatus(void);  
1585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be enabled. \n
1589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the source clock for selected peripheral.\n\n
1595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually enabled by setting the pe
1596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bit in the \a CLKSET register.\n
1597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether a source clock of peripheral is enabl
1598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_EnableClock() with desired peripheral identifier.\n
1599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled() with same peripheral identifier to verify whether the c
1600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableClock(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n
1602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock);
1604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be disabled. \n
1608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables source clock for the peripheral selected.\n\n
1614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually disabled  by setting the 
1615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bits in the \a CLKCLR register.\n
1616:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether clock source of the peripheral is ena
1617:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_DisableClock with desired peripheral identifier.\n
1618:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled with same peripheral identifier to verify whether periphe
1619:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1620:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1621:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1622:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock);
1623:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1624:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1625:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1626:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock   Peripheral for which the clock status has to be checked. \n
1627:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1628:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1629:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral clock.\n
1630:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: \a true if peripheral clock is enabled. \a false if peripheral clock is disable
1631:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1632:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1633:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the status of peripheral source clock.\n\n
1634:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status of peripheral source clock is read from the \a CLKSTATn register. 
1635:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Returns \a true if clock is enabled and returns \a false otherwise.
1636:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1637:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_CLOCK_DisableClock() \n\n\n
1638:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1639:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock);
1640:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1641:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1642:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1643:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for fSYS.\n
1644:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1645:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI for selecting internal fast clock as fSYS.\n
1646:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL for selecting the output of PLL fPLL as fSYS.
1647:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1648:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1649:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1650:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1651:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source for system clock (fSYS).\n\n
1652:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock is selected by setting \a SYSSEL bits in the \a SYSCLKCR register.
1653:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSCLKSRC_PLL is selected, then the dividers of the PLL have to be
1654:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * additionally configured to achieve the required system clock frequency. 
1655:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   * \par<b>Related APIs:</b><BR>
1656:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_StartSystemPll(), XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
1657:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1658:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source);
1659:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1660:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1661:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_SYSCLKSRC_t   Source of clock for fSYS.\n
1662:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1663:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI - internal fast clock selected as fSYS.\n
1664:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL - output of PLL fPLL selected as fSYS.
1665:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1666:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1667:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of system clock (fSYS). \n\n
1668:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selected source of fSYS is obtained by reading \a SYSSEL bits of \a SYSCLKCR register.
1669:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1670:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource(), XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
1671:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1672:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSCLKSRC_t XMC_SCU_CLOCK_GetSystemClockSource(void)
1673:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1674:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSCLKSRC_t)(SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk);
1675:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1676:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1677:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1678:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1679:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1680:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to select the source of clock.\n
1681:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL as source of USB clock(fUSB/
1682:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL as source of USB clock(fUSB
1683:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1685:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1686:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1687:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of USB/SDMMC clock (fUSB/SDMMC).\n\n
1688:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * USB and SDMMC use a common clock source. They can either use fUSB PLL or fPLL as the source of c
1689:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selection is done by configuring the \a USBSEL bits of \a USBCLKCR register.
1690:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1691:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1692:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1693:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source);
1694:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1695:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1696:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_USBCLKSRC_t   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1697:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to identify the source of clock.\n
1698:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL is selected as source of USB
1699:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL is selected as source of US
1700:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1701:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of USB and SDMMC clock frequency.\n\n
1703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
1704:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1705:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1706:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1707:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
1708:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1709:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
1710:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1711:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1712:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1713:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1714:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Clock source for watchdog timer.\n
1715:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1716:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1717:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1718:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1719:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1720:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1721:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1722:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1723:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of WDT clock (fWDT).\n\n
1724:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selected value is configured to the \a WDTSEL bits of \a WDTCLKCR register.
1725:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The watchdog timer counts at the frequency selected using this API. So the time for
1726:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * timeout or pre-warning of watchdog has to be calculated based on this selection.
1727:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1728:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1729:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_GetWdtClockFrequency() \n\n\n
1730:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1731:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source);
1732:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1733:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1734:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_WDTCLKSRC_t   Clock source configured for watchdog timer.\n
1735:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1736:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1737:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1738:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1739:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1740:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1741:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of clock used for watchdog timer.\n\n
1742:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTSEL bits of \a WDTCLKCR register.
1743:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The time for timeout or pre-warning of watchdog has to be calculated based on 
1744:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the clock source selected.
1745:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1746:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
1747:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1748:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
1749:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1750:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
1751:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1752:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1753:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1754:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1755:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source for standby clock.\n
1756:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1757:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1758:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1759:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1760:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1761:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1762:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1763:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of Standby clock (fSTDBY).\n\n
1764:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clock source is configured by setting the \a STDBYSEL bits of \a HDCR register.
1765:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Hibernate domain should be enabled explicitly before using the API.
1766:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1767:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
1768:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
1769:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1770:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1771:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetStdbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1772:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1773:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source);
1774:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1775:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1776:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source clock of standby clock(fSTDBY).\n
1777:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1778:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1779:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1780:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1781:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1782:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of standby clock (fSTDBY).\n\n
1783:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a STDBYSEL bits of \a HDCR register.\n
1784:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1785:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetStandbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1786:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1787:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetStdbyClockSource(void)
1788:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1789:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_STDBYSEL_Msk);
1790:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1791:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1792:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1793:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1794:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of RTC clock.\n
1795:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1796:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1797:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1798:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1799:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1800:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1801:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1802:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of RTC clock (fRTC).\n\n
1803:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a RCS bit of \a HDCR register.
1804:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * fULP needs external input powered by VBAT or VDDP. fOSI is internal clock.
1805:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1806:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1807:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
1808:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
1809:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1810:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1811:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetRtcClockSource() \n\n\n
1812:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1813:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source);
1814:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1815:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1816:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source of RTC clock.\n
1817:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1818:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1819:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1820:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1821:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1822:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of RTC clock (fRTC).
1823:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a RCS bit of \a HDCR register.
1824:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1825:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1826:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1827:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1828:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetRtcClockSource(void)
1829:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1830:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_RCS_Msk);
1831:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1832:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1833:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1834:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1835:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Source of external clock output(fEXT).\n
1836:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1837:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1838:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1839:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1840:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1841:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1842:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1843:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1844:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1845:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1846:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1847:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1848:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1849:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1850:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1851:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of external clock out (fEXT).\n\n
1852:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKSEL bits of \a EXTCLKCR register.
1853:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1854:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1855:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1856:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t clock);
1857:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1858:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1859:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_EXTOUTCLKSRC_t   Source of external clock output(fEXT).\n
1860:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1861:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1862:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1863:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1864:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1865:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1866:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1867:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1868:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1869:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1870:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1871:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1872:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of external clock output(fEXT).\n\n
1873:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
1874:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1875:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1876:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1877:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
1878:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1879:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
1880:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1881:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1882:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1883:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1884:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for system PLL.\n
1885:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1886:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1887:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1888:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1889:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1890:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1891:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1892:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of system PLL.\n\n
1893:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a VCOBYP bit of \a PLLCON0 register.
1894:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP is selected, ensure that the high performance oscillator 
1895:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * enabled by using the API XMC_SCU_CLOCK_EnableHighPerformanceOscillator().
1896:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1897:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator()\n\n\n
1898:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1899:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source);
1900:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1901:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1902:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_OSCCLKSRC_t   Source of clock for system PLL.\n
1903:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1904:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1905:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1906:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1907:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1908:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of system PLL clock (fPLL). \n\n
1909:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a VCOBYP bit of \a PLLCON0 register.
1910:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1911:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator(), XMC_SCU_CLOCK_SetSystemPllClockSource()\n\n\n
1912:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1913:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSPLLCLKSRC_t XMC_SCU_CLOCK_GetSystemPllClockSource(void)
1914:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1915:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSPLLCLKSRC_t)(SCU_PLL->PLLCON0 & SCU_PLL_PLLCON0_VCOBYP_Msk);
1916:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1917:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1918:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
1919:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1920:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1921:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of ECAT clock.\n
1922:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
1923:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
1924:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
1925:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1926:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1927:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1928:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1929:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of ECAT clock (fECAT).\n\n
1930:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
1931:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1932:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
1933:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1934:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
1935:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1936:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
1937:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                       ((uint32_t)source);
1938:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1939:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1940:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1941:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_ECATCLKSRC_t   Source of ECAT clock.\n
1942:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
1943:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
1944:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
1945:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1946:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1947:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of ECAT clock (fECAT).
1948:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECATSEL bit of \a ECATCLKCR register.
1949:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1950:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1951:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1952:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_ECATCLKSRC_t XMC_SCU_CLOCK_GetECATClockSource(void)
1953:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1954:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_ECATCLKSRC_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) >> SCU_C
1955:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1956:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
1957:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1958:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1959:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1960:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param divider   Ratio of fSYS clock source to the value of fSYS.
1961:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 to 256.
1962:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1963:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1964:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1965:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1966:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ratio of system clock source to the value of system clock frequency.\n\n
1967:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured as \a SYSDIV bits of \a SYSCLKCR register. The divider value is 
1968:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * decremented by 1 before configuring.
1969:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1970:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
1971:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1972:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider);
1973:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1974:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1975:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio of fSYS clock source to the value of fSYS.
1976:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 to 255.
1977:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1978:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1979:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of ratio between the source of system clock to the the value of system clock 
1980:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a SYSDIV bits of \a SYSCLKCR register.
1981:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1982:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
1983:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1984:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockDivider(void)
1985:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1986:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) >> SCU_CLK_SYSCLKCR_SYSDIV_Po
1987:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1988:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1989:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1990:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1991:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of fCCU clock source to the value of fCCU.
1992:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 or 2.\n
1993:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS \n
1994:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  2-> fCCU= fSYS/2.
1995:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1996:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1997:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1998:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1999:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the divider for CCU clock source. \n\n
2000:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Capture compare unit(CCU) can take either fSYS or fSYS/2 as the source of clock.
2001:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The configuration is set to \a CCUDIV bit of \a CCUCLKCR register. The CCUDIV bit is 1 bit wide.
2002:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2003:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2004:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider() \n\n\n
2005:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2006:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t ratio);
2007:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2008:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2009:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of fCCU clock source to the value of fCCU.
2010:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 or 1.\n
2011:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0-> fCCU= fSYS \n
2012:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS/2.
2013:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2014:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2015:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CCU clock(fCCU) to system clock(fSYS).\n\n
2016:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CCUDIV bit of \a CCUCLKCR register.
2017:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2018:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2019:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCcuClockDivider() \n\n\n
2020:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2021:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCcuClockDivider(void)
2022:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2023:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >> SCU_CLK_CCUCLKCR_CCUDIV_Po
2024:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2025:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2026:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2027:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2028:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between system clock(fSYS) and CPU clock(fCPU).
2029:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
2030:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS. \n
2031:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            2-> fCPU= fSYS/2.
2032:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2033:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2034:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2035:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2036:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the CPU clock by setting the divider value for the system clock. \n\n
2037:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is set to the \a CPUDIV bit of \a CPUCLKCR register.
2038:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2039:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockDivider() \n\n\n
2040:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2041:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t ratio);
2042:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2043:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2044:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio between system clock(fSYS) and CPU clock(fCPU).
2045:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
2046:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            0-> fCPU= fSYS. \n
2047:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS/2.
2048:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2049:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2050:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between system clock(fSYS) and CPU clock(fCPU). \n\n
2051:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CPUDIV bit of \a CPUCLKCR register.
2052:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2053:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCpuClockDivider() \n\n\n
2054:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2055:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockDivider(void)
2056:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2057:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Po
2058:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2059:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2060:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2061:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2062:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of peripheral clock source to the value of peripheral clock.\n
2063:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
2064:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU.\n
2065:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                2-> fPERIPH= fCPU/2.
2066:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2067:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2068:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2069:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2070:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the peripheral clock by setting the divider for CPU clock(fCPU).\n\n
2071:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The peripheral clock can be equal to either fCPU or fCPU/2. The value is configured to \a PBDIV 
2072:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2073:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2074:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockDivider() \n\n\n
2075:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2076:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t ratio);
2077:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2078:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2079:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of peripheral clock source to the value of peripheral clock.\n
2080:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
2081:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                0-> fPERIPH= fCPU.\n
2082:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU/2.
2083:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2084:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2085:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CPU clock(fCPU) to peripheral clock(fPERIPH).\n\n
2086:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a PBDIV bit of \a PBCLKCR register.
2087:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2088:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetPeripheralClockDivider() \n\n\n
2089:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2090:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetPeripheralClockDivider(void)
2091:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2092:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos);
2093:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2094:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2095:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2096:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2097:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio of PLL output clock(fPLL) to USB clock(fUSB).
2098:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 8.
2099:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the USB clock(fUSB) by setting the USB clock divider. \n\n
2104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is decremented by 1 before setting it to \a USBDIV bits of \a USBCLKCR register.
2105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockDivider(), XMC_SCU_CLOCK_SetUsbClockSource() \n\n\n
2108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t ratio);
2110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL output clock(fPLL) to USB clock(fUSB).
2114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 7.
2115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL output frequency(fPLL) and USB clock(fUSB).\n\n
2118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a USBDIV bit of \a USBCLKCR register.
2119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbClockSource() \n\n\n
2121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetUsbClockDivider(void)
2123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >> SCU_CLK_USBCLKCR_USBDIV_Po
2125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
2130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 64.
2134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the EBU clock(fEBU) by setting the divider value.\n\n
2139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock divider is configured to the \a EBUDIV bits of \a EBUCLKCR register.
2140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetEbuClockDivider() \n\n\n
2142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t ratio);
2144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 63.
2149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL clock(fPLL) and EBU clock(fEBU).\n\n
2152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EBUDIV bits of \a EBUCLKCR register.
2153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetEbuClockDivider() \n\n\n
2155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEbuClockDivider(void)
2157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >> SCU_CLK_EBUCLKCR_EBUDIV_Po
2159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between the source of WDT clock and the WDT clock.\n
2165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 256.
2166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the WDT clock by setting the clock divider for the WDT clock source.\n\n
2171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a WDTDIV bits of \a WDTCLKCR register. The value of divider
2172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring. Check the selected clock source for the WDT clock
2173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * before configuring the divider using the API XMC_SCU_CLOCK_SetWdtClockSource().
2174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_GetWdtClockDivider() \n\n\n
2176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t ratio);
2178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of WDT clock and the WDT clock.\n
2182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 255.
2183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the WDT parent clock and the WDT clock. \n\n
2186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTDIV bits of \a WDTCLKCR register.
2187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the WDT parent clock is considered before using the value of
2188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the divider value.
2189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_SetWdtClockDivider() \n\n\n
2191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetWdtClockDivider(void)
2193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >> SCU_CLK_WDTCLKCR_WDTDIV_Po
2195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the external output parent clock selected and the output clock.\n
2200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 512.
2201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the external output clock by setting the divider value for the parent clock. \n\n
2206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKDIV bits of \a EXTCLKCR register.
2207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The divider value is decremented by 1 before storing it to the bit fields.
2208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the source of external output clock is configured appropriately using the API
2209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource().
2210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_GetExternalOutputClockDivider() \n\n
2212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t ratio);
2214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the external output parent clock selected and the output clock.\
2218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 511.
2219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the divider value applied on parent clock before the generation of external output cloc
2222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EXTDIV bit of \a EXTCLKCR register.
2223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
2225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetExternalOutputClockDivider(void)
2227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >> SCU_CLK_EXTCLKCR_ECKDIV_Po
2229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
2232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the source of ECAT clock and the ECAT clock.\n
2235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 4.
2236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ECAT clock by setting the clock divider for the ECAT clock source.\n\n
2241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECADIV bits of \a ECATCLKCR register. The value of divider
2242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring.
2243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_GetECATClockDivider() \n\n\n
2245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider);
2247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of ECAT clock and the ECAT clock.\n
2251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 3.
2252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the ECAT parent clock and the ECAT clock. \n\n
2255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECADIV bits of \a ECATCLKCR register.
2256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_SetECATClockDivider() \n\n\n
2258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetECATClockDivider(void)
2260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECADIV_Msk) >> SCU_CLK_ECATCLKCR_ECADIV
2262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the high precision oscillator by configuring external crystal mode.\n\n
2271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 0, there by configuring the 
2272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * external clock input.
2273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The System Oscillator Watchdog is enabled. The user should check the status 
2274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * of the oscillator using XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable()
2275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void);
2279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the high precision oscillator by disabling the external oscillator.\n\n
2285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 1, there by disabling the 
2286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * external oscillator. 
2287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void);
2291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of high performance oscillator
2295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the OSC_HP oscillator is stable and usable
2298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void);
2302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables XTAL1 input of OSC_ULP as general purpose input.
2309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus to monitor the status of
2310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @Note OSC_ULP should be disabled previously using XMC_SCU_CLOCK_DisableHighPerformanceOscillator
2311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void);
2315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables XTAL1 input of OSC_ULP as general purpose input.
2322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput() \n\n\n
2324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void);
2326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status OSC_HP XTAL1 pin
2330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Monitor the status of OSC_HP XTAL1 pin.
2333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput() \n\n\n
2335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void);
2337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables ultra low power oscillator(ULP). \n\n
2344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It enables the hibernate domain, configures the ultra low power oscillator
2345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * uisng the \a MODE bits of the \a OSCULCTRL register. The \a Mode bits will be
2346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset to 0 to enable the low power oscillator. Mirror register update delays 
2347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * are handled internally.
2348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The OSC_ULP Oscillator Watchdog is enabled. The user should check the status 
2349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * of the oscillator using XMC_SCU_CLOCK_IsLowPowerOscillatorStable()
2350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() 
2352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_IsLowPowerOscillatorStable() \n\n\n
2353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void);
2355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables ultra low power oscillator.\n\n
2362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is disabled by setting the \a MODE bits of \a OSCULCTRL register to value 2.
2363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * By default on power up, the ultra low power osciallator is disabled.
2364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void);
2368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of low power oscillator
2372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the OSC_ULP oscillator is stable and usable
2375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void);
2379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables XTAL1 input of OSC_ULP as general purpose input.
2386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus to monitor the status of OSC_UL
2387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @Note OSC_ULP should be disabled previously using XMC_SCU_CLOCK_DisableLowPowerOscillator().
2388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
2390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
2391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() \n\n\n
2394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void);
2396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables XTAL1 input of OSC_ULP as general purpose input.
2403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
2406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
2407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput() \n\n\n
2409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void);
2411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status OSC_ULP XTAL1 pin 
2415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Monitor the status of OSC_ULP XTAL1 pin.
2418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput() \n\n\n
2420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void);
2422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System frequency in Hertz.\n
2426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: clock frequency in Hertz. Range of the value depends on the source clock fr
2427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            and the configured values of dividers.
2428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of system PLL output clock frequency(fPLL).\n\n
2431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API uses \a N-DIV,  \a P-DIV,  \a K1-DIV,  \a K2-DIV bits information from \a PLLCON1 regist
2432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * VCOBYP bit information from \a PLLCON0 register. It calculates frequency of system pll clock usi
2433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If normal Mode : fPLL = (fOSC * N)/(P * K2).
2434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If prescaler mode: fPLL = fOSC/ K1.
2435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void);
2439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Source clock used for deriving system clock.\n
2443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: fOHP frequency if external high precision frequency is used. \n
2444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    fOFI fast internal clock frequency.
2445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of the input clock frequency for deriving the system clock.
2448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API retrieves frequency of system PLL input clock (fPLLin).
2449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on \a PINSEL bits information from \a PLLCON2 register, the parent clock source is obtaine
2450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * This bit field specifies if fOHP or fOFI is used for deriving system clock.
2451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock frequency is obtained by dividing the source clock frequency with different divider
2452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockFrequency() \n\n\n
2454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void);
2456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   USB PLL output clock frequency.
2460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of USB PLL output clock (fUSBPLL).\n\n
2463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It obtains the \a VCOBYP bits information from \a USBPLLCON register and decides if USB PLL mode
2464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If USB PLL mode is used, the USB clock frequency is obtained by dividing the source clock by USB
2465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency is obtained using following formula:\n
2466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Normal Mode : fUSBPLL = (fOSC * N)/(P * 2).\n
2467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Prescaler mode: fPLL = fOSC.
2468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
2470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void);
2472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System clock frequency in Hertz.
2476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of system clock (fSYS).\n\n
2479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value obtained by dividing \a CPUDIV bits information of \a CPUCLKCR register with SystemCor
2480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values, fSYS clock frequency is derived using the following formula:\n
2481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * fSYS = fCPU << CPUDIV.
2482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
2484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
2486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_
 1354              	 .loc 2 2487 0
 1355 0000 054B     	 ldr r3,.L143
 1356 0002 1A69     	 ldr r2,[r3,#16]
 1357              	.LVL95:
 1358              	.LBE19:
 1359              	.LBE18:
 754:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 755:../Libraries/XMCLib/src/xmc4_scu.c ****   frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 756:../Libraries/XMCLib/src/xmc4_scu.c ****   
 757:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 1360              	 .loc 1 757 0
 1361 0004 1B6A     	 ldr r3,[r3,#32]
 1362              	.LBB21:
 1363              	.LBB20:
 1364              	 .loc 2 2487 0
 1365 0006 02F00102 	 and r2,r2,#1
 1366 000a 0449     	 ldr r1,.L143+4
 1367 000c 0868     	 ldr r0,[r1]
 1368 000e 9040     	 lsls r0,r0,r2
 1369              	.LBE20:
 1370              	.LBE21:
 1371              	 .loc 1 757 0
 1372 0010 03F00103 	 and r3,r3,#1
 758:../Libraries/XMCLib/src/xmc4_scu.c ****                                               SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
 759:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1373              	 .loc 1 759 0
 1374 0014 D840     	 lsrs r0,r0,r3
 1375 0016 7047     	 bx lr
 1376              	.L144:
 1377              	 .align 2
 1378              	.L143:
 1379 0018 00460050 	 .word 1342195200
 1380 001c 00000000 	 .word SystemCoreClock
 1381              	 .cfi_endproc
 1382              	.LFE211:
 1384              	 .section .text.XMC_SCU_CLOCK_GetUsbClockFrequency,"ax",%progbits
 1385              	 .align 2
 1386              	 .global XMC_SCU_CLOCK_GetUsbClockFrequency
 1387              	 .thumb
 1388              	 .thumb_func
 1390              	XMC_SCU_CLOCK_GetUsbClockFrequency:
 1391              	.LFB212:
 760:../Libraries/XMCLib/src/xmc4_scu.c **** 
 761:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 762:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve USB and SDMMC clock frequency
 763:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 764:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
 765:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1392              	 .loc 1 765 0
 1393              	 .cfi_startproc
 1394              	 
 1395              	 
 1396 0000 08B5     	 push {r3,lr}
 1397              	.LCFI6:
 1398              	 .cfi_def_cfa_offset 8
 1399              	 .cfi_offset 3,-8
 1400              	 .cfi_offset 14,-4
 1401              	.LVL96:
 1402              	.LBB22:
 1403              	.LBB23:
1709:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1404              	 .loc 2 1709 0
 1405 0002 0A4B     	 ldr r3,.L150
 1406 0004 9B69     	 ldr r3,[r3,#24]
 1407              	.LBE23:
 1408              	.LBE22:
 766:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 767:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_USBCLKSRC_t clksrc;
 768:../Libraries/XMCLib/src/xmc4_scu.c **** 
 769:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 770:../Libraries/XMCLib/src/xmc4_scu.c **** 
 771:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 1409              	 .loc 1 771 0
 1410 0006 13F48033 	 ands r3,r3,#65536
 1411 000a 02D0     	 beq .L146
 772:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 773:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 1412              	 .loc 1 773 0
 1413 000c FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 1414              	.LVL97:
 1415 0010 04E0     	 b .L147
 1416              	.LVL98:
 1417              	.L146:
 774:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 775:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 1418              	 .loc 1 775 0
 1419 0012 13B9     	 cbnz r3,.L148
 776:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 777:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 1420              	 .loc 1 777 0
 1421 0014 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetUsbPllClockFrequency
 1422              	.LVL99:
 1423 0018 00E0     	 b .L147
 1424              	.LVL100:
 1425              	.L148:
 766:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_USBCLKSRC_t clksrc;
 1426              	 .loc 1 766 0
 1427 001a 0020     	 movs r0,#0
 1428              	.LVL101:
 1429              	.L147:
 778:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 779:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 780:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 781:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 782:../Libraries/XMCLib/src/xmc4_scu.c **** 
 783:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 1430              	 .loc 1 783 0
 1431 001c 034B     	 ldr r3,.L150
 1432 001e 9B69     	 ldr r3,[r3,#24]
 1433 0020 03F00703 	 and r3,r3,#7
 784:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 1434              	 .loc 1 784 0
 1435 0024 0133     	 adds r3,r3,#1
 785:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1436              	 .loc 1 785 0
 1437 0026 B0FBF3F0 	 udiv r0,r0,r3
 1438              	.LVL102:
 1439 002a 08BD     	 pop {r3,pc}
 1440              	.L151:
 1441              	 .align 2
 1442              	.L150:
 1443 002c 00460050 	 .word 1342195200
 1444              	 .cfi_endproc
 1445              	.LFE212:
 1447              	 .section .text.XMC_SCU_CLOCK_GetEbuClockFrequency,"ax",%progbits
 1448              	 .align 2
 1449              	 .global XMC_SCU_CLOCK_GetEbuClockFrequency
 1450              	 .thumb
 1451              	 .thumb_func
 1453              	XMC_SCU_CLOCK_GetEbuClockFrequency:
 1454              	.LFB213:
 786:../Libraries/XMCLib/src/xmc4_scu.c **** 
 787:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(EBU)
 788:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 789:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve EBU clock frequency
 790:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 791:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
 792:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1455              	 .loc 1 792 0
 1456              	 .cfi_startproc
 1457              	 
 1458              	 
 1459 0000 08B5     	 push {r3,lr}
 1460              	.LCFI7:
 1461              	 .cfi_def_cfa_offset 8
 1462              	 .cfi_offset 3,-8
 1463              	 .cfi_offset 14,-4
 793:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 1464              	 .loc 1 793 0
 1465 0002 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 1466              	.LVL103:
 794:../Libraries/XMCLib/src/xmc4_scu.c ****   
 795:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 1467              	 .loc 1 795 0
 1468 0006 044B     	 ldr r3,.L154
 1469 0008 DB69     	 ldr r3,[r3,#28]
 1470 000a 03F03F03 	 and r3,r3,#63
 796:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 1471              	 .loc 1 796 0
 1472 000e 0133     	 adds r3,r3,#1
 797:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1473              	 .loc 1 797 0
 1474 0010 B0FBF3F0 	 udiv r0,r0,r3
 1475              	.LVL104:
 1476 0014 08BD     	 pop {r3,pc}
 1477              	.L155:
 1478 0016 00BF     	 .align 2
 1479              	.L154:
 1480 0018 00460050 	 .word 1342195200
 1481              	 .cfi_endproc
 1482              	.LFE213:
 1484              	 .section .text.XMC_SCU_CLOCK_GetWdtClockFrequency,"ax",%progbits
 1485              	 .align 2
 1486              	 .global XMC_SCU_CLOCK_GetWdtClockFrequency
 1487              	 .thumb
 1488              	 .thumb_func
 1490              	XMC_SCU_CLOCK_GetWdtClockFrequency:
 1491              	.LFB214:
 798:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 799:../Libraries/XMCLib/src/xmc4_scu.c **** 
 800:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(ECAT0)
 801:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 802:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve ECAT clock frequency
 803:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 804:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetECATClockFrequency(void)
 805:../Libraries/XMCLib/src/xmc4_scu.c **** {
 806:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency;
 807:../Libraries/XMCLib/src/xmc4_scu.c **** 
 808:../Libraries/XMCLib/src/xmc4_scu.c ****   if ((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) != 0U)
 809:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 810:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency =  XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 811:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 812:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 813:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 814:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency =  XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 815:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 816:../Libraries/XMCLib/src/xmc4_scu.c **** 
 817:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency / (XMC_SCU_CLOCK_GetECATClockDivider() + 1UL)));
 818:../Libraries/XMCLib/src/xmc4_scu.c **** }
 819:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 820:../Libraries/XMCLib/src/xmc4_scu.c **** 
 821:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 822:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve WDT clock frequency
 823:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 824:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
 825:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1492              	 .loc 1 825 0
 1493              	 .cfi_startproc
 1494              	 
 1495              	 
 1496 0000 08B5     	 push {r3,lr}
 1497              	.LCFI8:
 1498              	 .cfi_def_cfa_offset 8
 1499              	 .cfi_offset 3,-8
 1500              	 .cfi_offset 14,-4
 1501              	.LVL105:
 1502              	.LBB24:
 1503              	.LBB25:
1750:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1504              	 .loc 2 1750 0
 1505 0002 0D4B     	 ldr r3,.L162
 1506 0004 5B6A     	 ldr r3,[r3,#36]
 1507 0006 03F44033 	 and r3,r3,#196608
 1508              	.LBE25:
 1509              	.LBE24:
 826:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 827:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;
 828:../Libraries/XMCLib/src/xmc4_scu.c **** 
 829:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 830:../Libraries/XMCLib/src/xmc4_scu.c **** 
 831:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 1510              	 .loc 1 831 0
 1511 000a B3F5003F 	 cmp r3,#131072
 1512 000e 02D1     	 bne .L157
 832:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 833:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 1513              	 .loc 1 833 0
 1514 0010 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 1515              	.LVL106:
 1516 0014 08E0     	 b .L158
 1517              	.LVL107:
 1518              	.L157:
 834:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 835:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 1519              	 .loc 1 835 0
 1520 0016 33B1     	 cbz r3,.L159
 836:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 837:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = OFI_FREQUENCY;
 838:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 839:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 840:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 841:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = OSI_FREQUENCY;
 1521              	 .loc 1 841 0
 1522 0018 B3F5803F 	 cmp r3,#65536
 1523 001c 14BF     	 ite ne
 1524 001e 0020     	 movne r0,#0
 1525 0020 4FF40040 	 moveq r0,#32768
 1526 0024 00E0     	 b .L158
 1527              	.L159:
 837:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 1528              	 .loc 1 837 0
 1529 0026 0548     	 ldr r0,.L162+4
 1530              	.LVL108:
 1531              	.L158:
 842:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 843:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 844:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 845:../Libraries/XMCLib/src/xmc4_scu.c **** 
 846:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 847:../Libraries/XMCLib/src/xmc4_scu.c **** 
 848:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 1532              	 .loc 1 848 0
 1533 0028 034B     	 ldr r3,.L162
 1534 002a 5B6A     	 ldr r3,[r3,#36]
 1535 002c DBB2     	 uxtb r3,r3
 849:../Libraries/XMCLib/src/xmc4_scu.c ****                                     SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 1536              	 .loc 1 849 0
 1537 002e 0133     	 adds r3,r3,#1
 850:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1538              	 .loc 1 850 0
 1539 0030 B0FBF3F0 	 udiv r0,r0,r3
 1540              	.LVL109:
 1541 0034 08BD     	 pop {r3,pc}
 1542              	.L163:
 1543 0036 00BF     	 .align 2
 1544              	.L162:
 1545 0038 00460050 	 .word 1342195200
 1546 003c 00366E01 	 .word 24000000
 1547              	 .cfi_endproc
 1548              	.LFE214:
 1550              	 .section .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency,"ax",%progbits
 1551              	 .align 2
 1552              	 .global XMC_SCU_CLOCK_GetExternalOutputClockFrequency
 1553              	 .thumb
 1554              	 .thumb_func
 1556              	XMC_SCU_CLOCK_GetExternalOutputClockFrequency:
 1557              	.LFB215:
 851:../Libraries/XMCLib/src/xmc4_scu.c **** 
 852:../Libraries/XMCLib/src/xmc4_scu.c **** /**
 853:../Libraries/XMCLib/src/xmc4_scu.c ****  * @brief API to retrieve EXTERNAL-OUT clock frequency
 854:../Libraries/XMCLib/src/xmc4_scu.c ****  * @retval Clock frequency
 855:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 856:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
 857:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1558              	 .loc 1 857 0
 1559              	 .cfi_startproc
 1560              	 
 1561              	 
 1562 0000 08B5     	 push {r3,lr}
 1563              	.LCFI9:
 1564              	 .cfi_def_cfa_offset 8
 1565              	 .cfi_offset 3,-8
 1566              	 .cfi_offset 14,-4
 1567              	.LVL110:
 1568              	.LBB26:
 1569              	.LBB27:
1879:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1570              	 .loc 2 1879 0
 1571 0002 134B     	 ldr r3,.L170
 1572 0004 9B6A     	 ldr r3,[r3,#40]
 1573 0006 03F00303 	 and r3,r3,#3
 1574              	.LBE27:
 1575              	.LBE26:
 858:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 859:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;
 860:../Libraries/XMCLib/src/xmc4_scu.c **** 
 861:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 862:../Libraries/XMCLib/src/xmc4_scu.c **** 
 863:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 1576              	 .loc 1 863 0
 1577 000a 032B     	 cmp r3,#3
 1578 000c 09D1     	 bne .L165
 864:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 865:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 1579              	 .loc 1 865 0
 1580 000e FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 1581              	.LVL111:
 866:../Libraries/XMCLib/src/xmc4_scu.c ****     
 867:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 1582              	 .loc 1 867 0
 1583 0012 0F4B     	 ldr r3,.L170
 1584 0014 9B6A     	 ldr r3,[r3,#40]
 1585 0016 C3F30843 	 ubfx r3,r3,#16,#9
 868:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 1586              	 .loc 1 868 0
 1587 001a 0133     	 adds r3,r3,#1
 867:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 1588              	 .loc 1 867 0
 1589 001c B0FBF3F0 	 udiv r0,r0,r3
 1590              	.LVL112:
 1591 0020 08BD     	 pop {r3,pc}
 1592              	.LVL113:
 1593              	.L165:
 869:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 870:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 1594              	 .loc 1 870 0
 1595 0022 3BB9     	 cbnz r3,.L167
 1596              	.LBB28:
 1597              	.LBB29:
 1598              	 .loc 2 2487 0
 1599 0024 0A4B     	 ldr r3,.L170
 1600 0026 1B69     	 ldr r3,[r3,#16]
 1601 0028 03F00103 	 and r3,r3,#1
 1602 002c 094A     	 ldr r2,.L170+4
 1603 002e 1068     	 ldr r0,[r2]
 1604 0030 9840     	 lsls r0,r0,r3
 1605              	.LVL114:
 1606              	.LBE29:
 1607              	.LBE28:
 1608 0032 08BD     	 pop {r3,pc}
 1609              	.LVL115:
 1610              	.L167:
 871:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 872:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 873:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 874:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 1611              	 .loc 1 874 0
 1612 0034 022B     	 cmp r3,#2
 1613 0036 09D1     	 bne .L168
 875:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 876:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 1614              	 .loc 1 876 0
 1615 0038 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetUsbPllClockFrequency
 1616              	.LVL116:
 877:../Libraries/XMCLib/src/xmc4_scu.c ****     
 878:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 1617              	 .loc 1 878 0
 1618 003c 044B     	 ldr r3,.L170
 1619 003e 9B6A     	 ldr r3,[r3,#40]
 1620 0040 C3F30843 	 ubfx r3,r3,#16,#9
 879:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 1621              	 .loc 1 879 0
 1622 0044 0133     	 adds r3,r3,#1
 878:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 1623              	 .loc 1 878 0
 1624 0046 B0FBF3F0 	 udiv r0,r0,r3
 1625              	.LVL117:
 1626 004a 08BD     	 pop {r3,pc}
 1627              	.LVL118:
 1628              	.L168:
 858:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;
 1629              	 .loc 1 858 0
 1630 004c 0020     	 movs r0,#0
 1631              	.LVL119:
 880:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 881:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 882:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 883:../Libraries/XMCLib/src/xmc4_scu.c **** 
 884:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 885:../Libraries/XMCLib/src/xmc4_scu.c **** 
 886:../Libraries/XMCLib/src/xmc4_scu.c ****   return (frequency);
 887:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1632              	 .loc 1 887 0
 1633 004e 08BD     	 pop {r3,pc}
 1634              	.L171:
 1635              	 .align 2
 1636              	.L170:
 1637 0050 00460050 	 .word 1342195200
 1638 0054 00000000 	 .word SystemCoreClock
 1639              	 .cfi_endproc
 1640              	.LFE215:
 1642              	 .section .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency,"ax",%progbits
 1643              	 .align 2
 1644              	 .global XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1645              	 .thumb
 1646              	 .thumb_func
 1648              	XMC_SCU_CLOCK_GetPeripheralClockFrequency:
 1649              	.LFB216:
 888:../Libraries/XMCLib/src/xmc4_scu.c **** 
 889:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 890:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional c
 891:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 892:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
 893:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1650              	 .loc 1 893 0
 1651              	 .cfi_startproc
 1652              	 
 1653              	 
 1654              	 
 894:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 895:../Libraries/XMCLib/src/xmc4_scu.c ****          ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 1655              	 .loc 1 895 0
 1656 0000 034B     	 ldr r3,.L173
 1657 0002 5B69     	 ldr r3,[r3,#20]
 894:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 1658              	 .loc 1 894 0
 1659 0004 03F00103 	 and r3,r3,#1
 1660 0008 024A     	 ldr r2,.L173+4
 1661 000a 1068     	 ldr r0,[r2]
 896:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1662              	 .loc 1 896 0
 1663 000c D840     	 lsrs r0,r0,r3
 1664 000e 7047     	 bx lr
 1665              	.L174:
 1666              	 .align 2
 1667              	.L173:
 1668 0010 00460050 	 .word 1342195200
 1669 0014 00000000 	 .word SystemCoreClock
 1670              	 .cfi_endproc
 1671              	.LFE216:
 1673              	 .section .text.XMC_SCU_CLOCK_SetSystemClockSource,"ax",%progbits
 1674              	 .align 2
 1675              	 .global XMC_SCU_CLOCK_SetSystemClockSource
 1676              	 .thumb
 1677              	 .thumb_func
 1679              	XMC_SCU_CLOCK_SetSystemClockSource:
 1680              	.LFB217:
 897:../Libraries/XMCLib/src/xmc4_scu.c **** 
 898:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fSYS */
 899:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
 900:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1681              	 .loc 1 900 0
 1682              	 .cfi_startproc
 1683              	 
 1684              	 
 1685              	 
 1686              	.LVL120:
 901:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 1687              	 .loc 1 901 0
 1688 0000 034A     	 ldr r2,.L176
 1689 0002 D368     	 ldr r3,[r2,#12]
 1690 0004 23F48033 	 bic r3,r3,#65536
 1691 0008 1843     	 orrs r0,r0,r3
 1692              	.LVL121:
 1693 000a D060     	 str r0,[r2,#12]
 1694 000c 7047     	 bx lr
 1695              	.L177:
 1696 000e 00BF     	 .align 2
 1697              	.L176:
 1698 0010 00460050 	 .word 1342195200
 1699              	 .cfi_endproc
 1700              	.LFE217:
 1702              	 .section .text.XMC_SCU_CLOCK_SetUsbClockSource,"ax",%progbits
 1703              	 .align 2
 1704              	 .global XMC_SCU_CLOCK_SetUsbClockSource
 1705              	 .thumb
 1706              	 .thumb_func
 1708              	XMC_SCU_CLOCK_SetUsbClockSource:
 1709              	.LFB218:
 902:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 903:../Libraries/XMCLib/src/xmc4_scu.c **** }
 904:../Libraries/XMCLib/src/xmc4_scu.c **** 
 905:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fUSB */
 906:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
 907:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1710              	 .loc 1 907 0
 1711              	 .cfi_startproc
 1712              	 
 1713              	 
 1714              	 
 1715              	.LVL122:
 908:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 1716              	 .loc 1 908 0
 1717 0000 034A     	 ldr r2,.L179
 1718 0002 9369     	 ldr r3,[r2,#24]
 1719 0004 23F48033 	 bic r3,r3,#65536
 1720 0008 1843     	 orrs r0,r0,r3
 1721              	.LVL123:
 1722 000a 9061     	 str r0,[r2,#24]
 1723 000c 7047     	 bx lr
 1724              	.L180:
 1725 000e 00BF     	 .align 2
 1726              	.L179:
 1727 0010 00460050 	 .word 1342195200
 1728              	 .cfi_endproc
 1729              	.LFE218:
 1731              	 .section .text.XMC_SCU_CLOCK_SetWdtClockSource,"ax",%progbits
 1732              	 .align 2
 1733              	 .global XMC_SCU_CLOCK_SetWdtClockSource
 1734              	 .thumb
 1735              	 .thumb_func
 1737              	XMC_SCU_CLOCK_SetWdtClockSource:
 1738              	.LFB219:
 909:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 910:../Libraries/XMCLib/src/xmc4_scu.c **** }
 911:../Libraries/XMCLib/src/xmc4_scu.c **** 
 912:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fWDT */
 913:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
 914:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1739              	 .loc 1 914 0
 1740              	 .cfi_startproc
 1741              	 
 1742              	 
 1743              	 
 1744              	.LVL124:
 915:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 1745              	 .loc 1 915 0
 1746 0000 034A     	 ldr r2,.L182
 1747 0002 536A     	 ldr r3,[r2,#36]
 1748 0004 23F44033 	 bic r3,r3,#196608
 1749 0008 1843     	 orrs r0,r0,r3
 1750              	.LVL125:
 1751 000a 5062     	 str r0,[r2,#36]
 1752 000c 7047     	 bx lr
 1753              	.L183:
 1754 000e 00BF     	 .align 2
 1755              	.L182:
 1756 0010 00460050 	 .word 1342195200
 1757              	 .cfi_endproc
 1758              	.LFE219:
 1760              	 .section .text.XMC_SCU_CLOCK_SetExternalOutputClockSource,"ax",%progbits
 1761              	 .align 2
 1762              	 .global XMC_SCU_CLOCK_SetExternalOutputClockSource
 1763              	 .thumb
 1764              	 .thumb_func
 1766              	XMC_SCU_CLOCK_SetExternalOutputClockSource:
 1767              	.LFB220:
 916:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 917:../Libraries/XMCLib/src/xmc4_scu.c **** }
 918:../Libraries/XMCLib/src/xmc4_scu.c **** 
 919:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fEXT */
 920:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
 921:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1768              	 .loc 1 921 0
 1769              	 .cfi_startproc
 1770              	 
 1771              	 
 1772              	 
 1773              	.LVL126:
 922:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 1774              	 .loc 1 922 0
 1775 0000 034A     	 ldr r2,.L185
 1776 0002 936A     	 ldr r3,[r2,#40]
 1777 0004 23F00303 	 bic r3,r3,#3
 1778 0008 1843     	 orrs r0,r0,r3
 1779              	.LVL127:
 1780 000a 9062     	 str r0,[r2,#40]
 1781 000c 7047     	 bx lr
 1782              	.L186:
 1783 000e 00BF     	 .align 2
 1784              	.L185:
 1785 0010 00460050 	 .word 1342195200
 1786              	 .cfi_endproc
 1787              	.LFE220:
 1789              	 .section .text.XMC_SCU_CLOCK_SetSystemPllClockSource,"ax",%progbits
 1790              	 .align 2
 1791              	 .global XMC_SCU_CLOCK_SetSystemPllClockSource
 1792              	 .thumb
 1793              	 .thumb_func
 1795              	XMC_SCU_CLOCK_SetSystemPllClockSource:
 1796              	.LFB221:
 923:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 924:../Libraries/XMCLib/src/xmc4_scu.c **** }
 925:../Libraries/XMCLib/src/xmc4_scu.c **** 
 926:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fPLL */
 927:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
 928:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1797              	 .loc 1 928 0
 1798              	 .cfi_startproc
 1799              	 
 1800              	 
 1801              	 
 1802              	.LVL128:
 929:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Check input clock */
 930:../Libraries/XMCLib/src/xmc4_scu.c ****   if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 1803              	 .loc 1 930 0
 1804 0000 38B9     	 cbnz r0,.L188
 931:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 932:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 1805              	 .loc 1 932 0
 1806 0002 084A     	 ldr r2,.L190
 1807 0004 D368     	 ldr r3,[r2,#12]
 1808 0006 23F48073 	 bic r3,r3,#256
 1809 000a 23F00103 	 bic r3,r3,#1
 1810 000e D360     	 str r3,[r2,#12]
 1811 0010 7047     	 bx lr
 1812              	.L188:
 933:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 934:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 935:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 936:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 1813              	 .loc 1 936 0
 1814 0012 044A     	 ldr r2,.L190
 1815 0014 D368     	 ldr r3,[r2,#12]
 1816 0016 43F48073 	 orr r3,r3,#256
 1817 001a 43F00103 	 orr r3,r3,#1
 1818 001e D360     	 str r3,[r2,#12]
 1819 0020 7047     	 bx lr
 1820              	.L191:
 1821 0022 00BF     	 .align 2
 1822              	.L190:
 1823 0024 10470050 	 .word 1342195472
 1824              	 .cfi_endproc
 1825              	.LFE221:
 1827              	 .section .text.XMC_SCU_HIB_SetRtcClockSource,"ax",%progbits
 1828              	 .align 2
 1829              	 .global XMC_SCU_HIB_SetRtcClockSource
 1830              	 .thumb
 1831              	 .thumb_func
 1833              	XMC_SCU_HIB_SetRtcClockSource:
 1834              	.LFB222:
 937:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 938:../Libraries/XMCLib/src/xmc4_scu.c **** }
 939:../Libraries/XMCLib/src/xmc4_scu.c **** 
 940:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fRTC */
 941:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
 942:../Libraries/XMCLib/src/xmc4_scu.c **** { 
 1835              	 .loc 1 942 0
 1836              	 .cfi_startproc
 1837              	 
 1838              	 
 1839              	 
 1840              	.LVL129:
 943:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of HDCR register in hibernate domain is completed */
 944:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 1841              	 .loc 1 944 0
 1842 0000 064A     	 ldr r2,.L195
 1843              	.L193:
 1844              	 .loc 1 944 0 is_stmt 0 discriminator 1
 1845 0002 D2F8C430 	 ldr r3,[r2,#196]
 1846 0006 13F0080F 	 tst r3,#8
 1847 000a FAD1     	 bne .L193
 945:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 946:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 947:../Libraries/XMCLib/src/xmc4_scu.c **** 
 948:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 1848              	 .loc 1 948 0 is_stmt 1
 1849 000c 044A     	 ldr r2,.L195+4
 1850 000e D368     	 ldr r3,[r2,#12]
 1851 0010 23F04003 	 bic r3,r3,#64
 1852 0014 1843     	 orrs r0,r0,r3
 1853              	.LVL130:
 1854 0016 D060     	 str r0,[r2,#12]
 1855 0018 7047     	 bx lr
 1856              	.L196:
 1857 001a 00BF     	 .align 2
 1858              	.L195:
 1859 001c 00400050 	 .word 1342193664
 1860 0020 00430050 	 .word 1342194432
 1861              	 .cfi_endproc
 1862              	.LFE222:
 1864              	 .section .text.XMC_SCU_HIB_SetStandbyClockSource,"ax",%progbits
 1865              	 .align 2
 1866              	 .global XMC_SCU_HIB_SetStandbyClockSource
 1867              	 .thumb
 1868              	 .thumb_func
 1870              	XMC_SCU_HIB_SetStandbyClockSource:
 1871              	.LFB223:
 949:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 950:../Libraries/XMCLib/src/xmc4_scu.c **** }
 951:../Libraries/XMCLib/src/xmc4_scu.c **** 
 952:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fSTDBY */
 953:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
 954:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1872              	 .loc 1 954 0
 1873              	 .cfi_startproc
 1874              	 
 1875              	 
 1876              	 
 1877              	.LVL131:
 955:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 1878              	 .loc 1 955 0
 1879 0000 064A     	 ldr r2,.L200
 1880              	.L198:
 1881              	 .loc 1 955 0 is_stmt 0 discriminator 1
 1882 0002 D2F8C430 	 ldr r3,[r2,#196]
 1883 0006 13F0080F 	 tst r3,#8
 1884 000a FAD1     	 bne .L198
 956:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 957:../Libraries/XMCLib/src/xmc4_scu.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 958:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 959:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 1885              	 .loc 1 959 0 is_stmt 1
 1886 000c 044A     	 ldr r2,.L200+4
 1887 000e D368     	 ldr r3,[r2,#12]
 1888 0010 23F08003 	 bic r3,r3,#128
 1889 0014 1843     	 orrs r0,r0,r3
 1890              	.LVL132:
 1891 0016 D060     	 str r0,[r2,#12]
 1892 0018 7047     	 bx lr
 1893              	.L201:
 1894 001a 00BF     	 .align 2
 1895              	.L200:
 1896 001c 00400050 	 .word 1342193664
 1897 0020 00430050 	 .word 1342194432
 1898              	 .cfi_endproc
 1899              	.LFE223:
 1901              	 .section .text.XMC_SCU_CLOCK_SetSystemClockDivider,"ax",%progbits
 1902              	 .align 2
 1903              	 .global XMC_SCU_CLOCK_SetSystemClockDivider
 1904              	 .thumb
 1905              	 .thumb_func
 1907              	XMC_SCU_CLOCK_SetSystemClockDivider:
 1908              	.LFB224:
 960:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 961:../Libraries/XMCLib/src/xmc4_scu.c **** }
 962:../Libraries/XMCLib/src/xmc4_scu.c **** 
 963:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fsys and its parent */
 964:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
 965:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1909              	 .loc 1 965 0
 1910              	 .cfi_startproc
 1911              	 
 1912              	 
 1913              	 
 1914              	.LVL133:
 966:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
 967:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );
 968:../Libraries/XMCLib/src/xmc4_scu.c **** 
 969:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 1915              	 .loc 1 969 0
 1916 0000 034A     	 ldr r2,.L203
 1917 0002 D368     	 ldr r3,[r2,#12]
 970:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 1918              	 .loc 1 970 0
 1919 0004 0138     	 subs r0,r0,#1
 1920              	.LVL134:
 969:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 1921              	 .loc 1 969 0
 1922 0006 23F0FF03 	 bic r3,r3,#255
 1923 000a 0343     	 orrs r3,r3,r0
 1924 000c D360     	 str r3,[r2,#12]
 1925 000e 7047     	 bx lr
 1926              	.L204:
 1927              	 .align 2
 1928              	.L203:
 1929 0010 00460050 	 .word 1342195200
 1930              	 .cfi_endproc
 1931              	.LFE224:
 1933              	 .section .text.XMC_SCU_CLOCK_SetCcuClockDivider,"ax",%progbits
 1934              	 .align 2
 1935              	 .global XMC_SCU_CLOCK_SetCcuClockDivider
 1936              	 .thumb
 1937              	 .thumb_func
 1939              	XMC_SCU_CLOCK_SetCcuClockDivider:
 1940              	.LFB225:
 971:../Libraries/XMCLib/src/xmc4_scu.c **** }
 972:../Libraries/XMCLib/src/xmc4_scu.c **** 
 973:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fccu and its parent */
 974:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
 975:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1941              	 .loc 1 975 0
 1942              	 .cfi_startproc
 1943              	 
 1944              	 
 1945              	 
 1946              	.LVL135:
 976:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );
 977:../Libraries/XMCLib/src/xmc4_scu.c **** 
 978:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 1947              	 .loc 1 978 0
 1948 0000 034A     	 ldr r2,.L206
 1949 0002 136A     	 ldr r3,[r2,#32]
 979:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 1950              	 .loc 1 979 0
 1951 0004 0138     	 subs r0,r0,#1
 1952              	.LVL136:
 978:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 1953              	 .loc 1 978 0
 1954 0006 23F00103 	 bic r3,r3,#1
 1955 000a 0343     	 orrs r3,r3,r0
 1956 000c 1362     	 str r3,[r2,#32]
 1957 000e 7047     	 bx lr
 1958              	.L207:
 1959              	 .align 2
 1960              	.L206:
 1961 0010 00460050 	 .word 1342195200
 1962              	 .cfi_endproc
 1963              	.LFE225:
 1965              	 .section .text.XMC_SCU_CLOCK_SetCpuClockDivider,"ax",%progbits
 1966              	 .align 2
 1967              	 .global XMC_SCU_CLOCK_SetCpuClockDivider
 1968              	 .thumb
 1969              	 .thumb_func
 1971              	XMC_SCU_CLOCK_SetCpuClockDivider:
 1972              	.LFB226:
 980:../Libraries/XMCLib/src/xmc4_scu.c **** }
 981:../Libraries/XMCLib/src/xmc4_scu.c **** 
 982:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fcpu and its parent */
 983:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
 984:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1973              	 .loc 1 984 0
 1974              	 .cfi_startproc
 1975              	 
 1976              	 
 1977              	 
 1978              	.LVL137:
 985:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );
 986:../Libraries/XMCLib/src/xmc4_scu.c **** 
 987:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 1979              	 .loc 1 987 0
 1980 0000 034A     	 ldr r2,.L209
 1981 0002 1369     	 ldr r3,[r2,#16]
 988:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 1982              	 .loc 1 988 0
 1983 0004 0138     	 subs r0,r0,#1
 1984              	.LVL138:
 987:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 1985              	 .loc 1 987 0
 1986 0006 23F00103 	 bic r3,r3,#1
 1987 000a 0343     	 orrs r3,r3,r0
 1988 000c 1361     	 str r3,[r2,#16]
 1989 000e 7047     	 bx lr
 1990              	.L210:
 1991              	 .align 2
 1992              	.L209:
 1993 0010 00460050 	 .word 1342195200
 1994              	 .cfi_endproc
 1995              	.LFE226:
 1997              	 .section .text.XMC_SCU_CLOCK_SetPeripheralClockDivider,"ax",%progbits
 1998              	 .align 2
 1999              	 .global XMC_SCU_CLOCK_SetPeripheralClockDivider
 2000              	 .thumb
 2001              	 .thumb_func
 2003              	XMC_SCU_CLOCK_SetPeripheralClockDivider:
 2004              	.LFB227:
 989:../Libraries/XMCLib/src/xmc4_scu.c **** }
 990:../Libraries/XMCLib/src/xmc4_scu.c **** 
 991:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fperiph and its parent */
 992:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
 993:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2005              	 .loc 1 993 0
 2006              	 .cfi_startproc
 2007              	 
 2008              	 
 2009              	 
 2010              	.LVL139:
 994:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) 
 995:../Libraries/XMCLib/src/xmc4_scu.c **** 
 996:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 2011              	 .loc 1 996 0
 2012 0000 034A     	 ldr r2,.L212
 2013 0002 5369     	 ldr r3,[r2,#20]
 997:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 2014              	 .loc 1 997 0
 2015 0004 0138     	 subs r0,r0,#1
 2016              	.LVL140:
 996:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 2017              	 .loc 1 996 0
 2018 0006 23F00103 	 bic r3,r3,#1
 2019 000a 0343     	 orrs r3,r3,r0
 2020 000c 5361     	 str r3,[r2,#20]
 2021 000e 7047     	 bx lr
 2022              	.L213:
 2023              	 .align 2
 2024              	.L212:
 2025 0010 00460050 	 .word 1342195200
 2026              	 .cfi_endproc
 2027              	.LFE227:
 2029              	 .section .text.XMC_SCU_CLOCK_SetUsbClockDivider,"ax",%progbits
 2030              	 .align 2
 2031              	 .global XMC_SCU_CLOCK_SetUsbClockDivider
 2032              	 .thumb
 2033              	 .thumb_func
 2035              	XMC_SCU_CLOCK_SetUsbClockDivider:
 2036              	.LFB228:
 998:../Libraries/XMCLib/src/xmc4_scu.c **** }
 999:../Libraries/XMCLib/src/xmc4_scu.c **** 
1000:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fsdmmc and its parent */
1001:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
1002:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2037              	 .loc 1 1002 0
 2038              	 .cfi_startproc
 2039              	 
 2040              	 
 2041              	 
 2042              	.LVL141:
1003:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
1004:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );
1005:../Libraries/XMCLib/src/xmc4_scu.c **** 
1006:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 2043              	 .loc 1 1006 0
 2044 0000 034A     	 ldr r2,.L215
 2045 0002 9369     	 ldr r3,[r2,#24]
1007:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 2046              	 .loc 1 1007 0
 2047 0004 0138     	 subs r0,r0,#1
 2048              	.LVL142:
1006:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 2049              	 .loc 1 1006 0
 2050 0006 23F00703 	 bic r3,r3,#7
 2051 000a 0343     	 orrs r3,r3,r0
 2052 000c 9361     	 str r3,[r2,#24]
 2053 000e 7047     	 bx lr
 2054              	.L216:
 2055              	 .align 2
 2056              	.L215:
 2057 0010 00460050 	 .word 1342195200
 2058              	 .cfi_endproc
 2059              	.LFE228:
 2061              	 .section .text.XMC_SCU_CLOCK_SetEbuClockDivider,"ax",%progbits
 2062              	 .align 2
 2063              	 .global XMC_SCU_CLOCK_SetEbuClockDivider
 2064              	 .thumb
 2065              	 .thumb_func
 2067              	XMC_SCU_CLOCK_SetEbuClockDivider:
 2068              	.LFB229:
1008:../Libraries/XMCLib/src/xmc4_scu.c **** }
1009:../Libraries/XMCLib/src/xmc4_scu.c **** 
1010:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(EBU)
1011:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between febu and its parent */
1012:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
1013:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2069              	 .loc 1 1013 0
 2070              	 .cfi_startproc
 2071              	 
 2072              	 
 2073              	 
 2074              	.LVL143:
1014:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
1015:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );
1016:../Libraries/XMCLib/src/xmc4_scu.c **** 
1017:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 2075              	 .loc 1 1017 0
 2076 0000 034A     	 ldr r2,.L218
 2077 0002 D369     	 ldr r3,[r2,#28]
1018:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 2078              	 .loc 1 1018 0
 2079 0004 0138     	 subs r0,r0,#1
 2080              	.LVL144:
1017:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 2081              	 .loc 1 1017 0
 2082 0006 23F03F03 	 bic r3,r3,#63
 2083 000a 0343     	 orrs r3,r3,r0
 2084 000c D361     	 str r3,[r2,#28]
 2085 000e 7047     	 bx lr
 2086              	.L219:
 2087              	 .align 2
 2088              	.L218:
 2089 0010 00460050 	 .word 1342195200
 2090              	 .cfi_endproc
 2091              	.LFE229:
 2093              	 .section .text.XMC_SCU_CLOCK_SetWdtClockDivider,"ax",%progbits
 2094              	 .align 2
 2095              	 .global XMC_SCU_CLOCK_SetWdtClockDivider
 2096              	 .thumb
 2097              	 .thumb_func
 2099              	XMC_SCU_CLOCK_SetWdtClockDivider:
 2100              	.LFB230:
1019:../Libraries/XMCLib/src/xmc4_scu.c **** }
1020:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1021:../Libraries/XMCLib/src/xmc4_scu.c **** 
1022:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fwdt and its parent */
1023:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
1024:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2101              	 .loc 1 1024 0
 2102              	 .cfi_startproc
 2103              	 
 2104              	 
 2105              	 
 2106              	.LVL145:
1025:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
1026:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );
1027:../Libraries/XMCLib/src/xmc4_scu.c **** 
1028:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 2107              	 .loc 1 1028 0
 2108 0000 034A     	 ldr r2,.L221
 2109 0002 536A     	 ldr r3,[r2,#36]
1029:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 2110              	 .loc 1 1029 0
 2111 0004 0138     	 subs r0,r0,#1
 2112              	.LVL146:
1028:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 2113              	 .loc 1 1028 0
 2114 0006 23F0FF03 	 bic r3,r3,#255
 2115 000a 0343     	 orrs r3,r3,r0
 2116 000c 5362     	 str r3,[r2,#36]
 2117 000e 7047     	 bx lr
 2118              	.L222:
 2119              	 .align 2
 2120              	.L221:
 2121 0010 00460050 	 .word 1342195200
 2122              	 .cfi_endproc
 2123              	.LFE230:
 2125              	 .section .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider,"ax",%progbits
 2126              	 .align 2
 2127              	 .global XMC_SCU_CLOCK_SetExternalOutputClockDivider
 2128              	 .thumb
 2129              	 .thumb_func
 2131              	XMC_SCU_CLOCK_SetExternalOutputClockDivider:
 2132              	.LFB231:
1030:../Libraries/XMCLib/src/xmc4_scu.c **** }
1031:../Libraries/XMCLib/src/xmc4_scu.c **** 
1032:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fext and its parent */
1033:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
1034:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2133              	 .loc 1 1034 0
 2134              	 .cfi_startproc
 2135              	 
 2136              	 
 2137              	 
 2138              	.LVL147:
1035:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
1036:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );
1037:../Libraries/XMCLib/src/xmc4_scu.c **** 
1038:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 2139              	 .loc 1 1038 0
 2140 0000 054A     	 ldr r2,.L224
 2141 0002 936A     	 ldr r3,[r2,#40]
1039:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 2142              	 .loc 1 1039 0
 2143 0004 0138     	 subs r0,r0,#1
 2144              	.LVL148:
1038:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 2145              	 .loc 1 1038 0
 2146 0006 23F0FF73 	 bic r3,r3,#33423360
 2147 000a 23F48033 	 bic r3,r3,#65536
 2148 000e 43EA0043 	 orr r3,r3,r0,lsl#16
 2149 0012 9362     	 str r3,[r2,#40]
 2150 0014 7047     	 bx lr
 2151              	.L225:
 2152 0016 00BF     	 .align 2
 2153              	.L224:
 2154 0018 00460050 	 .word 1342195200
 2155              	 .cfi_endproc
 2156              	.LFE231:
 2158              	 .section .text.XMC_SCU_CLOCK_EnableClock,"ax",%progbits
 2159              	 .align 2
 2160              	 .global XMC_SCU_CLOCK_EnableClock
 2161              	 .thumb
 2162              	 .thumb_func
 2164              	XMC_SCU_CLOCK_EnableClock:
 2165              	.LFB232:
1040:../Libraries/XMCLib/src/xmc4_scu.c **** }
1041:../Libraries/XMCLib/src/xmc4_scu.c **** 
1042:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(ECAT0)
1043:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
1044:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
1045:../Libraries/XMCLib/src/xmc4_scu.c **** {
1046:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
1047:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
1048:../Libraries/XMCLib/src/xmc4_scu.c **** }
1049:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1050:../Libraries/XMCLib/src/xmc4_scu.c **** 
1051:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable a given module clock */
1052:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
1053:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2166              	 .loc 1 1053 0
 2167              	 .cfi_startproc
 2168              	 
 2169              	 
 2170              	 
 2171              	.LVL149:
1054:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CLKSET = ((uint32_t)clock);
 2172              	 .loc 1 1054 0
 2173 0000 014B     	 ldr r3,.L227
 2174 0002 5860     	 str r0,[r3,#4]
 2175 0004 7047     	 bx lr
 2176              	.L228:
 2177 0006 00BF     	 .align 2
 2178              	.L227:
 2179 0008 00460050 	 .word 1342195200
 2180              	 .cfi_endproc
 2181              	.LFE232:
 2183              	 .section .text.XMC_SCU_CLOCK_DisableClock,"ax",%progbits
 2184              	 .align 2
 2185              	 .global XMC_SCU_CLOCK_DisableClock
 2186              	 .thumb
 2187              	 .thumb_func
 2189              	XMC_SCU_CLOCK_DisableClock:
 2190              	.LFB233:
1055:../Libraries/XMCLib/src/xmc4_scu.c **** }
1056:../Libraries/XMCLib/src/xmc4_scu.c **** 
1057:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable a given module clock */
1058:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
1059:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2191              	 .loc 1 1059 0
 2192              	 .cfi_startproc
 2193              	 
 2194              	 
 2195              	 
 2196              	.LVL150:
1060:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CLKCLR = ((uint32_t)clock);
 2197              	 .loc 1 1060 0
 2198 0000 014B     	 ldr r3,.L230
 2199 0002 9860     	 str r0,[r3,#8]
 2200 0004 7047     	 bx lr
 2201              	.L231:
 2202 0006 00BF     	 .align 2
 2203              	.L230:
 2204 0008 00460050 	 .word 1342195200
 2205              	 .cfi_endproc
 2206              	.LFE233:
 2208              	 .section .text.XMC_SCU_CLOCK_IsClockEnabled,"ax",%progbits
 2209              	 .align 2
 2210              	 .global XMC_SCU_CLOCK_IsClockEnabled
 2211              	 .thumb
 2212              	 .thumb_func
 2214              	XMC_SCU_CLOCK_IsClockEnabled:
 2215              	.LFB234:
1061:../Libraries/XMCLib/src/xmc4_scu.c **** }
1062:../Libraries/XMCLib/src/xmc4_scu.c **** 
1063:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if module clock of the given peripheral is enabled */
1064:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
1065:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2216              	 .loc 1 1065 0
 2217              	 .cfi_startproc
 2218              	 
 2219              	 
 2220              	 
 2221              	.LVL151:
1066:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 2222              	 .loc 1 1066 0
 2223 0000 034B     	 ldr r3,.L233
 2224 0002 1B68     	 ldr r3,[r3]
 2225 0004 1842     	 tst r0,r3
1067:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2226              	 .loc 1 1067 0
 2227 0006 14BF     	 ite ne
 2228 0008 0120     	 movne r0,#1
 2229              	.LVL152:
 2230 000a 0020     	 moveq r0,#0
 2231 000c 7047     	 bx lr
 2232              	.L234:
 2233 000e 00BF     	 .align 2
 2234              	.L233:
 2235 0010 00460050 	 .word 1342195200
 2236              	 .cfi_endproc
 2237              	.LFE234:
 2239              	 .section .text.XMC_SCU_POWER_GetEVR13Voltage,"ax",%progbits
 2240              	 .align 2
 2241              	 .global XMC_SCU_POWER_GetEVR13Voltage
 2242              	 .thumb
 2243              	 .thumb_func
 2245              	XMC_SCU_POWER_GetEVR13Voltage:
 2246              	.LFB235:
1068:../Libraries/XMCLib/src/xmc4_scu.c **** 
1069:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(CLOCK_GATING_SUPPORTED)
1070:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to gate a given module clock */
1071:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1072:../Libraries/XMCLib/src/xmc4_scu.c **** {
1073:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
1074:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
1075:../Libraries/XMCLib/src/xmc4_scu.c **** 
1076:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
1077:../Libraries/XMCLib/src/xmc4_scu.c **** }
1078:../Libraries/XMCLib/src/xmc4_scu.c **** 
1079:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to ungate a given module clock */
1080:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1081:../Libraries/XMCLib/src/xmc4_scu.c **** {
1082:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
1083:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
1084:../Libraries/XMCLib/src/xmc4_scu.c **** 
1085:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
1086:../Libraries/XMCLib/src/xmc4_scu.c **** }
1087:../Libraries/XMCLib/src/xmc4_scu.c **** 
1088:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to ungate a given module clock */
1089:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1090:../Libraries/XMCLib/src/xmc4_scu.c **** {
1091:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
1092:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
1093:../Libraries/XMCLib/src/xmc4_scu.c **** 
1094:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
1095:../Libraries/XMCLib/src/xmc4_scu.c **** }
1096:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1097:../Libraries/XMCLib/src/xmc4_scu.c **** 
1098:../Libraries/XMCLib/src/xmc4_scu.c **** float XMC_SCU_POWER_GetEVR13Voltage(void)
1099:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2247              	 .loc 1 1099 0
 2248              	 .cfi_startproc
 2249              	 
 2250              	 
 2251              	 
1100:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 2252              	 .loc 1 1100 0
 2253 0000 054B     	 ldr r3,.L236
 2254 0002 5B69     	 ldr r3,[r3,#20]
 2255 0004 DBB2     	 uxtb r3,r3
 2256 0006 00EE103A 	 fmsr s0,r3
 2257 000a B8EE400A 	 fuitos s0,s0
1101:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2258              	 .loc 1 1101 0
 2259 000e DFED037A 	 flds s15,.L236+4
 2260 0012 20EE270A 	 fmuls s0,s0,s15
 2261 0016 7047     	 bx lr
 2262              	.L237:
 2263              	 .align 2
 2264              	.L236:
 2265 0018 00420050 	 .word 1342194176
 2266 001c ED0DBE3B 	 .word 1002311149
 2267              	 .cfi_endproc
 2268              	.LFE235:
 2270              	 .section .text.XMC_SCU_POWER_GetEVR33Voltage,"ax",%progbits
 2271              	 .align 2
 2272              	 .global XMC_SCU_POWER_GetEVR33Voltage
 2273              	 .thumb
 2274              	 .thumb_func
 2276              	XMC_SCU_POWER_GetEVR33Voltage:
 2277              	.LFB236:
1102:../Libraries/XMCLib/src/xmc4_scu.c **** 
1103:../Libraries/XMCLib/src/xmc4_scu.c **** float XMC_SCU_POWER_GetEVR33Voltage(void)
1104:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2278              	 .loc 1 1104 0
 2279              	 .cfi_startproc
 2280              	 
 2281              	 
 2282              	 
1105:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VAD
 2283              	 .loc 1 1105 0
 2284 0000 064B     	 ldr r3,.L239
 2285 0002 5B69     	 ldr r3,[r3,#20]
 2286 0004 C3F30723 	 ubfx r3,r3,#8,#8
 2287 0008 00EE103A 	 fmsr s0,r3
 2288 000c B8EE400A 	 fuitos s0,s0
1106:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2289              	 .loc 1 1106 0
 2290 0010 DFED037A 	 flds s15,.L239+4
 2291 0014 20EE270A 	 fmuls s0,s0,s15
 2292 0018 7047     	 bx lr
 2293              	.L240:
 2294 001a 00BF     	 .align 2
 2295              	.L239:
 2296 001c 00420050 	 .word 1342194176
 2297 0020 EC51B83C 	 .word 1018712556
 2298              	 .cfi_endproc
 2299              	.LFE236:
 2301              	 .section .text.XMC_SCU_CLOCK_EnableUsbPll,"ax",%progbits
 2302              	 .align 2
 2303              	 .global XMC_SCU_CLOCK_EnableUsbPll
 2304              	 .thumb
 2305              	 .thumb_func
 2307              	XMC_SCU_CLOCK_EnableUsbPll:
 2308              	.LFB237:
1107:../Libraries/XMCLib/src/xmc4_scu.c **** 
1108:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable USB PLL for USB clock */
1109:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableUsbPll(void)
1110:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2309              	 .loc 1 1110 0
 2310              	 .cfi_startproc
 2311              	 
 2312              	 
 2313              	 
1111:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 2314              	 .loc 1 1111 0
 2315 0000 034A     	 ldr r2,.L242
 2316 0002 5369     	 ldr r3,[r2,#20]
 2317 0004 23F48033 	 bic r3,r3,#65536
 2318 0008 23F00203 	 bic r3,r3,#2
 2319 000c 5361     	 str r3,[r2,#20]
 2320 000e 7047     	 bx lr
 2321              	.L243:
 2322              	 .align 2
 2323              	.L242:
 2324 0010 10470050 	 .word 1342195472
 2325              	 .cfi_endproc
 2326              	.LFE237:
 2328              	 .section .text.XMC_SCU_CLOCK_DisableUsbPll,"ax",%progbits
 2329              	 .align 2
 2330              	 .global XMC_SCU_CLOCK_DisableUsbPll
 2331              	 .thumb
 2332              	 .thumb_func
 2334              	XMC_SCU_CLOCK_DisableUsbPll:
 2335              	.LFB238:
1112:../Libraries/XMCLib/src/xmc4_scu.c **** }
1113:../Libraries/XMCLib/src/xmc4_scu.c **** 
1114:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable USB PLL for USB clock */
1115:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableUsbPll(void)
1116:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2336              	 .loc 1 1116 0
 2337              	 .cfi_startproc
 2338              	 
 2339              	 
 2340              	 
1117:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 2341              	 .loc 1 1117 0
 2342 0000 034A     	 ldr r2,.L245
 2343 0002 5369     	 ldr r3,[r2,#20]
 2344 0004 43F48033 	 orr r3,r3,#65536
 2345 0008 43F00203 	 orr r3,r3,#2
 2346 000c 5361     	 str r3,[r2,#20]
 2347 000e 7047     	 bx lr
 2348              	.L246:
 2349              	 .align 2
 2350              	.L245:
 2351 0010 10470050 	 .word 1342195472
 2352              	 .cfi_endproc
 2353              	.LFE238:
 2355              	 .section .text.XMC_SCU_CLOCK_StartUsbPll,"ax",%progbits
 2356              	 .align 2
 2357              	 .global XMC_SCU_CLOCK_StartUsbPll
 2358              	 .thumb
 2359              	 .thumb_func
 2361              	XMC_SCU_CLOCK_StartUsbPll:
 2362              	.LFB239:
1118:../Libraries/XMCLib/src/xmc4_scu.c **** }
1119:../Libraries/XMCLib/src/xmc4_scu.c **** 
1120:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure USB PLL */
1121:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
1122:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2363              	 .loc 1 1122 0
 2364              	 .cfi_startproc
 2365              	 
 2366              	 
 2367              	 
 2368              	.LVL153:
1123:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Go to bypass the USB PLL */
1124:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 2369              	 .loc 1 1124 0
 2370 0000 104B     	 ldr r3,.L250
 2371 0002 5A69     	 ldr r2,[r3,#20]
 2372 0004 42F00102 	 orr r2,r2,#1
 2373 0008 5A61     	 str r2,[r3,#20]
1125:../Libraries/XMCLib/src/xmc4_scu.c **** 
1126:../Libraries/XMCLib/src/xmc4_scu.c ****   /* disconnect Oscillator from USB PLL */
1127:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 2374              	 .loc 1 1127 0
 2375 000a 5A69     	 ldr r2,[r3,#20]
 2376 000c 42F01002 	 orr r2,r2,#16
 2377 0010 5A61     	 str r2,[r3,#20]
1128:../Libraries/XMCLib/src/xmc4_scu.c **** 
1129:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Setup Divider settings for USB PLL */
1130:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 2378              	 .loc 1 1130 0
 2379 0012 0139     	 subs r1,r1,#1
 2380              	.LVL154:
1131:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 2381              	 .loc 1 1131 0
 2382 0014 0138     	 subs r0,r0,#1
 2383              	.LVL155:
 2384 0016 0006     	 lsls r0,r0,#24
 2385              	.LVL156:
1130:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 2386              	 .loc 1 1130 0
 2387 0018 40EA0121 	 orr r1,r0,r1,lsl#8
 2388              	.LVL157:
 2389 001c 5961     	 str r1,[r3,#20]
1132:../Libraries/XMCLib/src/xmc4_scu.c **** 
1133:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Set OSCDISCDIS */
1134:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 2390              	 .loc 1 1134 0
 2391 001e 5A69     	 ldr r2,[r3,#20]
 2392 0020 42F04002 	 orr r2,r2,#64
 2393 0024 5A61     	 str r2,[r3,#20]
1135:../Libraries/XMCLib/src/xmc4_scu.c **** 
1136:../Libraries/XMCLib/src/xmc4_scu.c ****   /* connect Oscillator to USB PLL */
1137:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 2394              	 .loc 1 1137 0
 2395 0026 5A69     	 ldr r2,[r3,#20]
 2396 0028 22F01002 	 bic r2,r2,#16
 2397 002c 5A61     	 str r2,[r3,#20]
1138:../Libraries/XMCLib/src/xmc4_scu.c **** 
1139:../Libraries/XMCLib/src/xmc4_scu.c ****   /* restart PLL Lock detection */
1140:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 2398              	 .loc 1 1140 0
 2399 002e 5A69     	 ldr r2,[r3,#20]
 2400 0030 42F48022 	 orr r2,r2,#262144
 2401 0034 5A61     	 str r2,[r3,#20]
1141:../Libraries/XMCLib/src/xmc4_scu.c **** 
1142:../Libraries/XMCLib/src/xmc4_scu.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 2402              	 .loc 1 1142 0
 2403 0036 1A46     	 mov r2,r3
 2404              	.L248:
 2405              	 .loc 1 1142 0 is_stmt 0 discriminator 1
 2406 0038 1369     	 ldr r3,[r2,#16]
 2407 003a 13F0040F 	 tst r3,#4
 2408 003e FBD0     	 beq .L248
1143:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1144:../Libraries/XMCLib/src/xmc4_scu.c ****     /* wait for PLL Lock */
1145:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1146:../Libraries/XMCLib/src/xmc4_scu.c **** 
1147:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2409              	 .loc 1 1147 0 is_stmt 1
 2410 0040 7047     	 bx lr
 2411              	.L251:
 2412 0042 00BF     	 .align 2
 2413              	.L250:
 2414 0044 10470050 	 .word 1342195472
 2415              	 .cfi_endproc
 2416              	.LFE239:
 2418              	 .section .text.XMC_SCU_CLOCK_StopUsbPll,"ax",%progbits
 2419              	 .align 2
 2420              	 .global XMC_SCU_CLOCK_StopUsbPll
 2421              	 .thumb
 2422              	 .thumb_func
 2424              	XMC_SCU_CLOCK_StopUsbPll:
 2425              	.LFB240:
1148:../Libraries/XMCLib/src/xmc4_scu.c **** 
1149:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable USB PLL operation */
1150:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StopUsbPll(void)
1151:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2426              	 .loc 1 1151 0
 2427              	 .cfi_startproc
 2428              	 
 2429              	 
 2430              	 
1152:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 2431              	 .loc 1 1152 0
 2432 0000 014A     	 ldr r2,.L253
 2433 0002 024B     	 ldr r3,.L253+4
 2434 0004 5A61     	 str r2,[r3,#20]
 2435 0006 7047     	 bx lr
 2436              	.L254:
 2437              	 .align 2
 2438              	.L253:
 2439 0008 03000100 	 .word 65539
 2440 000c 10470050 	 .word 1342195472
 2441              	 .cfi_endproc
 2442              	.LFE240:
 2444              	 .section .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode,"ax",%progbits
 2445              	 .align 2
 2446              	 .global XMC_SCU_CLOCK_SetBackupClockCalibrationMode
 2447              	 .thumb
 2448              	 .thumb_func
 2450              	XMC_SCU_CLOCK_SetBackupClockCalibrationMode:
 2451              	.LFB241:
1153:../Libraries/XMCLib/src/xmc4_scu.c ****                                   SCU_PLL_USBPLLCON_VCOBYP_Msk);
1154:../Libraries/XMCLib/src/xmc4_scu.c **** }
1155:../Libraries/XMCLib/src/xmc4_scu.c **** 
1156:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to onfigure the calibration mode for internal oscillator */
1157:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
1158:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2452              	 .loc 1 1158 0
 2453              	 .cfi_startproc
 2454              	 
 2455              	 
 2456              	.LVL158:
 2457 0000 10B5     	 push {r4,lr}
 2458              	.LCFI10:
 2459              	 .cfi_def_cfa_offset 8
 2460              	 .cfi_offset 4,-8
 2461              	 .cfi_offset 14,-4
1159:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Enable factory calibration based trimming */
1160:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 2462              	 .loc 1 1160 0
 2463 0002 0B4A     	 ldr r2,.L258
 2464 0004 5368     	 ldr r3,[r2,#4]
 2465 0006 43F48013 	 orr r3,r3,#1048576
 2466 000a 5360     	 str r3,[r2,#4]
1161:../Libraries/XMCLib/src/xmc4_scu.c **** 
1162:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 2467              	 .loc 1 1162 0
 2468 000c 0128     	 cmp r0,#1
 2469 000e 0BD1     	 bne .L256
1163:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1164:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Disable factory calibration based trimming */
1165:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 2470              	 .loc 1 1165 0
 2471 0010 1446     	 mov r4,r2
 2472 0012 5368     	 ldr r3,[r2,#4]
 2473 0014 23F48013 	 bic r3,r3,#1048576
 2474 0018 5360     	 str r3,[r2,#4]
1166:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_lDelay(100UL);
 2475              	 .loc 1 1166 0
 2476 001a 6420     	 movs r0,#100
 2477              	.LVL159:
 2478 001c FFF7FEFF 	 bl XMC_SCU_lDelay
 2479              	.LVL160:
1167:../Libraries/XMCLib/src/xmc4_scu.c **** 
1168:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Enable automatic calibration */
1169:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 2480              	 .loc 1 1169 0
 2481 0020 6368     	 ldr r3,[r4,#4]
 2482 0022 43F40023 	 orr r3,r3,#524288
 2483 0026 6360     	 str r3,[r4,#4]
 2484              	.L256:
1170:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1171:../Libraries/XMCLib/src/xmc4_scu.c **** 
1172:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_lDelay(100UL);
 2485              	 .loc 1 1172 0
 2486 0028 6420     	 movs r0,#100
 2487 002a FFF7FEFF 	 bl XMC_SCU_lDelay
 2488              	.LVL161:
 2489 002e 10BD     	 pop {r4,pc}
 2490              	.L259:
 2491              	 .align 2
 2492              	.L258:
 2493 0030 10470050 	 .word 1342195472
 2494              	 .cfi_endproc
 2495              	.LFE241:
 2497              	 .section .text.XMC_SCU_POWER_EnableUsb,"ax",%progbits
 2498              	 .align 2
 2499              	 .global XMC_SCU_POWER_EnableUsb
 2500              	 .thumb
 2501              	 .thumb_func
 2503              	XMC_SCU_POWER_EnableUsb:
 2504              	.LFB242:
1173:../Libraries/XMCLib/src/xmc4_scu.c **** }
1174:../Libraries/XMCLib/src/xmc4_scu.c **** 
1175:../Libraries/XMCLib/src/xmc4_scu.c **** 
1176:../Libraries/XMCLib/src/xmc4_scu.c **** 
1177:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable USB Phy and comparator */
1178:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_POWER_EnableUsb(void)
1179:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2505              	 .loc 1 1179 0
 2506              	 .cfi_startproc
 2507              	 
 2508              	 
 2509              	 
1180:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(USB_OTG_SUPPORTED)
1181:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 2510              	 .loc 1 1181 0
 2511 0000 4FF44032 	 mov r2,#196608
 2512 0004 014B     	 ldr r3,.L261
 2513 0006 5A60     	 str r2,[r3,#4]
 2514 0008 7047     	 bx lr
 2515              	.L262:
 2516 000a 00BF     	 .align 2
 2517              	.L261:
 2518 000c 00420050 	 .word 1342194176
 2519              	 .cfi_endproc
 2520              	.LFE242:
 2522              	 .section .text.XMC_SCU_POWER_DisableUsb,"ax",%progbits
 2523              	 .align 2
 2524              	 .global XMC_SCU_POWER_DisableUsb
 2525              	 .thumb
 2526              	 .thumb_func
 2528              	XMC_SCU_POWER_DisableUsb:
 2529              	.LFB243:
1182:../Libraries/XMCLib/src/xmc4_scu.c **** #else
1183:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
1184:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1185:../Libraries/XMCLib/src/xmc4_scu.c **** }
1186:../Libraries/XMCLib/src/xmc4_scu.c **** 
1187:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power down USB Phy and comparator */
1188:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_POWER_DisableUsb(void)
1189:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2530              	 .loc 1 1189 0
 2531              	 .cfi_startproc
 2532              	 
 2533              	 
 2534              	 
1190:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(USB_OTG_SUPPORTED)
1191:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 2535              	 .loc 1 1191 0
 2536 0000 4FF44032 	 mov r2,#196608
 2537 0004 014B     	 ldr r3,.L264
 2538 0006 9A60     	 str r2,[r3,#8]
 2539 0008 7047     	 bx lr
 2540              	.L265:
 2541 000a 00BF     	 .align 2
 2542              	.L264:
 2543 000c 00420050 	 .word 1342194176
 2544              	 .cfi_endproc
 2545              	.LFE243:
 2547              	 .section .text.XMC_SCU_CLOCK_IsUsbPllLocked,"ax",%progbits
 2548              	 .align 2
 2549              	 .global XMC_SCU_CLOCK_IsUsbPllLocked
 2550              	 .thumb
 2551              	 .thumb_func
 2553              	XMC_SCU_CLOCK_IsUsbPllLocked:
 2554              	.LFB244:
1192:../Libraries/XMCLib/src/xmc4_scu.c **** #else
1193:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
1194:../Libraries/XMCLib/src/xmc4_scu.c **** #endif    
1195:../Libraries/XMCLib/src/xmc4_scu.c **** }
1196:../Libraries/XMCLib/src/xmc4_scu.c **** 
1197:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check USB PLL is locked or not */
1198:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
1199:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2555              	 .loc 1 1199 0
 2556              	 .cfi_startproc
 2557              	 
 2558              	 
 2559              	 
1200:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 2560              	 .loc 1 1200 0
 2561 0000 024B     	 ldr r3,.L267
 2562 0002 1869     	 ldr r0,[r3,#16]
1201:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2563              	 .loc 1 1201 0
 2564 0004 C0F38000 	 ubfx r0,r0,#2,#1
 2565 0008 7047     	 bx lr
 2566              	.L268:
 2567 000a 00BF     	 .align 2
 2568              	.L267:
 2569 000c 10470050 	 .word 1342195472
 2570              	 .cfi_endproc
 2571              	.LFE244:
 2573              	 .section .text.XMC_SCU_HIB_EnableHibernateDomain,"ax",%progbits
 2574              	 .align 2
 2575              	 .global XMC_SCU_HIB_EnableHibernateDomain
 2576              	 .thumb
 2577              	 .thumb_func
 2579              	XMC_SCU_HIB_EnableHibernateDomain:
 2580              	.LFB245:
1202:../Libraries/XMCLib/src/xmc4_scu.c **** 
1203:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power up the hibernation domain */
1204:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableHibernateDomain(void)
1205:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2581              	 .loc 1 1205 0
 2582              	 .cfi_startproc
 2583              	 
 2584              	 
 2585              	 
1206:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Power up HIB domain if and only if it is currently powered down */
1207:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 2586              	 .loc 1 1207 0
 2587 0000 0D4B     	 ldr r3,.L276
 2588 0002 1B68     	 ldr r3,[r3]
 2589 0004 13F0010F 	 tst r3,#1
 2590 0008 07D1     	 bne .L270
1208:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1209:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 2591              	 .loc 1 1209 0
 2592 000a 0122     	 movs r2,#1
 2593 000c 0A4B     	 ldr r3,.L276
 2594 000e 5A60     	 str r2,[r3,#4]
1210:../Libraries/XMCLib/src/xmc4_scu.c ****     
1211:../Libraries/XMCLib/src/xmc4_scu.c ****     while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 2595              	 .loc 1 1211 0
 2596 0010 1A46     	 mov r2,r3
 2597              	.L271:
 2598              	 .loc 1 1211 0 is_stmt 0 discriminator 1
 2599 0012 1368     	 ldr r3,[r2]
 2600 0014 13F0010F 	 tst r3,#1
 2601 0018 FBD0     	 beq .L271
 2602              	.L270:
1212:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1213:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait until HIB domain is enabled */
1214:../Libraries/XMCLib/src/xmc4_scu.c ****     }    
1215:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1216:../Libraries/XMCLib/src/xmc4_scu.c ****   
1217:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Remove the reset only if HIB domain were in a state of reset */
1218:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 2603              	 .loc 1 1218 0 is_stmt 1
 2604 001a 084B     	 ldr r3,.L276+4
 2605 001c 1B68     	 ldr r3,[r3]
 2606 001e 13F4007F 	 tst r3,#512
 2607 0022 08D0     	 beq .L269
1219:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1220:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 2608              	 .loc 1 1220 0
 2609 0024 4FF40072 	 mov r2,#512
 2610 0028 044B     	 ldr r3,.L276+4
 2611 002a 9A60     	 str r2,[r3,#8]
1221:../Libraries/XMCLib/src/xmc4_scu.c ****     while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 2612              	 .loc 1 1221 0
 2613 002c 1A46     	 mov r2,r3
 2614              	.L273:
 2615              	 .loc 1 1221 0 is_stmt 0 discriminator 1
 2616 002e 1368     	 ldr r3,[r2]
 2617 0030 13F4007F 	 tst r3,#512
 2618 0034 FBD1     	 bne .L273
 2619              	.L269:
 2620 0036 7047     	 bx lr
 2621              	.L277:
 2622              	 .align 2
 2623              	.L276:
 2624 0038 00420050 	 .word 1342194176
 2625 003c 00440050 	 .word 1342194688
 2626              	 .cfi_endproc
 2627              	.LFE245:
 2629              	 .section .text.XMC_SCU_HIB_DisableHibernateDomain,"ax",%progbits
 2630              	 .align 2
 2631              	 .global XMC_SCU_HIB_DisableHibernateDomain
 2632              	 .thumb
 2633              	 .thumb_func
 2635              	XMC_SCU_HIB_DisableHibernateDomain:
 2636              	.LFB246:
1222:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1223:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait until HIB domain is enabled */
1224:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1225:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1226:../Libraries/XMCLib/src/xmc4_scu.c **** }
1227:../Libraries/XMCLib/src/xmc4_scu.c **** 
1228:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power down the hibernation domain */
1229:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableHibernateDomain(void)
1230:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2637              	 .loc 1 1230 0 is_stmt 1
 2638              	 .cfi_startproc
 2639              	 
 2640              	 
 2641              	 
1231:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Disable hibernate domain */   
1232:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 2642              	 .loc 1 1232 0
 2643 0000 0122     	 movs r2,#1
 2644 0002 044B     	 ldr r3,.L279
 2645 0004 9A60     	 str r2,[r3,#8]
1233:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Reset of hibernate domain reset */  
1234:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 2646              	 .loc 1 1234 0
 2647 0006 4FF40072 	 mov r2,#512
 2648 000a 03F50073 	 add r3,r3,#512
 2649 000e 5A60     	 str r2,[r3,#4]
 2650 0010 7047     	 bx lr
 2651              	.L280:
 2652 0012 00BF     	 .align 2
 2653              	.L279:
 2654 0014 00420050 	 .word 1342194176
 2655              	 .cfi_endproc
 2656              	.LFE246:
 2658              	 .section .text.XMC_SCU_HIB_IsHibernateDomainEnabled,"ax",%progbits
 2659              	 .align 2
 2660              	 .global XMC_SCU_HIB_IsHibernateDomainEnabled
 2661              	 .thumb
 2662              	 .thumb_func
 2664              	XMC_SCU_HIB_IsHibernateDomainEnabled:
 2665              	.LFB247:
1235:../Libraries/XMCLib/src/xmc4_scu.c **** }
1236:../Libraries/XMCLib/src/xmc4_scu.c **** 
1237:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check the hibernation domain is enabled or not */
1238:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
1239:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2666              	 .loc 1 1239 0
 2667              	 .cfi_startproc
 2668              	 
 2669              	 
 2670              	 
1240:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 2671              	 .loc 1 1240 0
 2672 0000 064B     	 ldr r3,.L284
 2673 0002 1B68     	 ldr r3,[r3]
 2674 0004 13F0010F 	 tst r3,#1
 2675 0008 06D0     	 beq .L283
1241:../Libraries/XMCLib/src/xmc4_scu.c ****           !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 2676              	 .loc 1 1241 0 discriminator 1
 2677 000a 054B     	 ldr r3,.L284+4
 2678 000c 1868     	 ldr r0,[r3]
1240:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 2679              	 .loc 1 1240 0 discriminator 1
 2680 000e 80F40070 	 eor r0,r0,#512
 2681 0012 C0F34020 	 ubfx r0,r0,#9,#1
 2682 0016 7047     	 bx lr
 2683              	.L283:
1240:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 2684              	 .loc 1 1240 0 is_stmt 0
 2685 0018 0020     	 movs r0,#0
1242:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2686              	 .loc 1 1242 0 is_stmt 1
 2687 001a 7047     	 bx lr
 2688              	.L285:
 2689              	 .align 2
 2690              	.L284:
 2691 001c 00420050 	 .word 1342194176
 2692 0020 00440050 	 .word 1342194688
 2693              	 .cfi_endproc
 2694              	.LFE247:
 2696              	 .section .text.XMC_SCU_HIB_EnableInternalSlowClock,"ax",%progbits
 2697              	 .align 2
 2698              	 .global XMC_SCU_HIB_EnableInternalSlowClock
 2699              	 .thumb
 2700              	 .thumb_func
 2702              	XMC_SCU_HIB_EnableInternalSlowClock:
 2703              	.LFB248:
1243:../Libraries/XMCLib/src/xmc4_scu.c **** 
1244:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
1245:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableInternalSlowClock(void)
1246:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2704              	 .loc 1 1246 0
 2705              	 .cfi_startproc
 2706              	 
 2707              	 
 2708              	 
1247:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 2709              	 .loc 1 1247 0
 2710 0000 054A     	 ldr r2,.L289
 2711              	.L287:
 2712              	 .loc 1 1247 0 is_stmt 0 discriminator 1
 2713 0002 D2F8C430 	 ldr r3,[r2,#196]
 2714 0006 13F0200F 	 tst r3,#32
 2715 000a FAD1     	 bne .L287
1248:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1249:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
1250:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1251:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 2716              	 .loc 1 1251 0 is_stmt 1
 2717 000c 034A     	 ldr r2,.L289+4
 2718 000e 5369     	 ldr r3,[r2,#20]
 2719 0010 23F00103 	 bic r3,r3,#1
 2720 0014 5361     	 str r3,[r2,#20]
 2721 0016 7047     	 bx lr
 2722              	.L290:
 2723              	 .align 2
 2724              	.L289:
 2725 0018 00400050 	 .word 1342193664
 2726 001c 00430050 	 .word 1342194432
 2727              	 .cfi_endproc
 2728              	.LFE248:
 2730              	 .section .text.XMC_SCU_HIB_DisableInternalSlowClock,"ax",%progbits
 2731              	 .align 2
 2732              	 .global XMC_SCU_HIB_DisableInternalSlowClock
 2733              	 .thumb
 2734              	 .thumb_func
 2736              	XMC_SCU_HIB_DisableInternalSlowClock:
 2737              	.LFB249:
1252:../Libraries/XMCLib/src/xmc4_scu.c **** }
1253:../Libraries/XMCLib/src/xmc4_scu.c **** 
1254:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
1255:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableInternalSlowClock(void)
1256:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2738              	 .loc 1 1256 0
 2739              	 .cfi_startproc
 2740              	 
 2741              	 
 2742              	 
1257:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 2743              	 .loc 1 1257 0
 2744 0000 054A     	 ldr r2,.L294
 2745              	.L292:
 2746              	 .loc 1 1257 0 is_stmt 0 discriminator 1
 2747 0002 D2F8C430 	 ldr r3,[r2,#196]
 2748 0006 13F0200F 	 tst r3,#32
 2749 000a FAD1     	 bne .L292
1258:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1259:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
1260:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1261:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 2750              	 .loc 1 1261 0 is_stmt 1
 2751 000c 034A     	 ldr r2,.L294+4
 2752 000e 5369     	 ldr r3,[r2,#20]
 2753 0010 43F00103 	 orr r3,r3,#1
 2754 0014 5361     	 str r3,[r2,#20]
 2755 0016 7047     	 bx lr
 2756              	.L295:
 2757              	 .align 2
 2758              	.L294:
 2759 0018 00400050 	 .word 1342193664
 2760 001c 00430050 	 .word 1342194432
 2761              	 .cfi_endproc
 2762              	.LFE249:
 2764              	 .section .text.XMC_SCU_HIB_ClearEventStatus,"ax",%progbits
 2765              	 .align 2
 2766              	 .global XMC_SCU_HIB_ClearEventStatus
 2767              	 .thumb
 2768              	 .thumb_func
 2770              	XMC_SCU_HIB_ClearEventStatus:
 2771              	.LFB250:
1262:../Libraries/XMCLib/src/xmc4_scu.c **** }
1263:../Libraries/XMCLib/src/xmc4_scu.c **** 
1264:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_ClearEventStatus(int32_t event)
1265:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2772              	 .loc 1 1265 0
 2773              	 .cfi_startproc
 2774              	 
 2775              	 
 2776              	 
 2777              	.LVL162:
1266:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 2778              	 .loc 1 1266 0
 2779 0000 044A     	 ldr r2,.L299
 2780              	.L297:
 2781              	 .loc 1 1266 0 is_stmt 0 discriminator 1
 2782 0002 D2F8C430 	 ldr r3,[r2,#196]
 2783 0006 13F0020F 	 tst r3,#2
 2784 000a FAD1     	 bne .L297
1267:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1268:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
1269:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1270:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCLR = event;
 2785              	 .loc 1 1270 0 is_stmt 1
 2786 000c 024B     	 ldr r3,.L299+4
 2787 000e 5860     	 str r0,[r3,#4]
 2788 0010 7047     	 bx lr
 2789              	.L300:
 2790 0012 00BF     	 .align 2
 2791              	.L299:
 2792 0014 00400050 	 .word 1342193664
 2793 0018 00430050 	 .word 1342194432
 2794              	 .cfi_endproc
 2795              	.LFE250:
 2797              	 .section .text.XMC_SCU_HIB_TriggerEvent,"ax",%progbits
 2798              	 .align 2
 2799              	 .global XMC_SCU_HIB_TriggerEvent
 2800              	 .thumb
 2801              	 .thumb_func
 2803              	XMC_SCU_HIB_TriggerEvent:
 2804              	.LFB251:
1271:../Libraries/XMCLib/src/xmc4_scu.c **** }
1272:../Libraries/XMCLib/src/xmc4_scu.c **** 
1273:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_TriggerEvent(int32_t event)
1274:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2805              	 .loc 1 1274 0
 2806              	 .cfi_startproc
 2807              	 
 2808              	 
 2809              	 
 2810              	.LVL163:
1275:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 2811              	 .loc 1 1275 0
 2812 0000 044A     	 ldr r2,.L304
 2813              	.L302:
 2814              	 .loc 1 1275 0 is_stmt 0 discriminator 1
 2815 0002 D2F8C430 	 ldr r3,[r2,#196]
 2816 0006 13F0040F 	 tst r3,#4
 2817 000a FAD1     	 bne .L302
1276:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1277:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDSET register in hibernate domain is ready to accept a write */    
1278:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1279:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDSET = event;
 2818              	 .loc 1 1279 0 is_stmt 1
 2819 000c 024B     	 ldr r3,.L304+4
 2820 000e 9860     	 str r0,[r3,#8]
 2821 0010 7047     	 bx lr
 2822              	.L305:
 2823 0012 00BF     	 .align 2
 2824              	.L304:
 2825 0014 00400050 	 .word 1342193664
 2826 0018 00430050 	 .word 1342194432
 2827              	 .cfi_endproc
 2828              	.LFE251:
 2830              	 .section .text.XMC_SCU_HIB_EnableEvent,"ax",%progbits
 2831              	 .align 2
 2832              	 .global XMC_SCU_HIB_EnableEvent
 2833              	 .thumb
 2834              	 .thumb_func
 2836              	XMC_SCU_HIB_EnableEvent:
 2837              	.LFB252:
1280:../Libraries/XMCLib/src/xmc4_scu.c **** }
1281:../Libraries/XMCLib/src/xmc4_scu.c **** 
1282:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableEvent(int32_t event)
1283:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2838              	 .loc 1 1283 0
 2839              	 .cfi_startproc
 2840              	 
 2841              	 
 2842              	 
 2843              	.LVL164:
1284:../Libraries/XMCLib/src/xmc4_scu.c **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
1285:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_VBAT_POSEDGE) << (SCU_HIBERNATE_HDCR_VBATHI_Pos - SCU_HI
1286:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_VBAT_NEGEDGE) << (SCU_HIBERNATE_HDCR_VBATLO_Pos - SCU_HI
1287:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO0HI_Pos -
1288:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO0LO_Pos -
1289:../Libraries/XMCLib/src/xmc4_scu.c **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))
1290:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos -
1291:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos -
1292:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1293:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1294:../Libraries/XMCLib/src/xmc4_scu.c **** 
1295:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 2844              	 .loc 1 1295 0
 2845 0000 054A     	 ldr r2,.L309
 2846              	.L307:
 2847              	 .loc 1 1295 0 is_stmt 0 discriminator 1
 2848 0002 D2F8C430 	 ldr r3,[r2,#196]
 2849 0006 13F0080F 	 tst r3,#8
 2850 000a FAD1     	 bne .L307
1296:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1297:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1298:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1299:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= event;
 2851              	 .loc 1 1299 0 is_stmt 1
 2852 000c 034A     	 ldr r2,.L309+4
 2853 000e D368     	 ldr r3,[r2,#12]
 2854 0010 1843     	 orrs r0,r0,r3
 2855              	.LVL165:
 2856 0012 D060     	 str r0,[r2,#12]
 2857 0014 7047     	 bx lr
 2858              	.L310:
 2859 0016 00BF     	 .align 2
 2860              	.L309:
 2861 0018 00400050 	 .word 1342193664
 2862 001c 00430050 	 .word 1342194432
 2863              	 .cfi_endproc
 2864              	.LFE252:
 2866              	 .section .text.XMC_SCU_HIB_DisableEvent,"ax",%progbits
 2867              	 .align 2
 2868              	 .global XMC_SCU_HIB_DisableEvent
 2869              	 .thumb
 2870              	 .thumb_func
 2872              	XMC_SCU_HIB_DisableEvent:
 2873              	.LFB253:
1300:../Libraries/XMCLib/src/xmc4_scu.c **** }
1301:../Libraries/XMCLib/src/xmc4_scu.c **** 
1302:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableEvent(int32_t event)
1303:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2874              	 .loc 1 1303 0
 2875              	 .cfi_startproc
 2876              	 
 2877              	 
 2878              	 
 2879              	.LVL166:
1304:../Libraries/XMCLib/src/xmc4_scu.c **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
1305:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_VBAT_POSEDGE) << (SCU_HIBERNATE_HDCR_VBATHI_Pos - SCU_HI
1306:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_VBAT_NEGEDGE) << (SCU_HIBERNATE_HDCR_VBATLO_Pos - SCU_HI
1307:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO0HI_Pos -
1308:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO0LO_Pos -
1309:../Libraries/XMCLib/src/xmc4_scu.c **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))
1310:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos -
1311:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos -
1312:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1313:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1314:../Libraries/XMCLib/src/xmc4_scu.c **** 
1315:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 2880              	 .loc 1 1315 0
 2881 0000 054A     	 ldr r2,.L314
 2882              	.L312:
 2883              	 .loc 1 1315 0 is_stmt 0 discriminator 1
 2884 0002 D2F8C430 	 ldr r3,[r2,#196]
 2885 0006 13F0080F 	 tst r3,#8
 2886 000a FAD1     	 bne .L312
1316:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1317:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1318:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1319:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR &= ~event;
 2887              	 .loc 1 1319 0 is_stmt 1
 2888 000c 034A     	 ldr r2,.L314+4
 2889 000e D368     	 ldr r3,[r2,#12]
 2890 0010 23EA0000 	 bic r0,r3,r0
 2891              	.LVL167:
 2892 0014 D060     	 str r0,[r2,#12]
 2893 0016 7047     	 bx lr
 2894              	.L315:
 2895              	 .align 2
 2896              	.L314:
 2897 0018 00400050 	 .word 1342193664
 2898 001c 00430050 	 .word 1342194432
 2899              	 .cfi_endproc
 2900              	.LFE253:
 2902              	 .section .text.XMC_SCU_HIB_EnterHibernateState,"ax",%progbits
 2903              	 .align 2
 2904              	 .global XMC_SCU_HIB_EnterHibernateState
 2905              	 .thumb
 2906              	 .thumb_func
 2908              	XMC_SCU_HIB_EnterHibernateState:
 2909              	.LFB254:
1320:../Libraries/XMCLib/src/xmc4_scu.c **** }
1321:../Libraries/XMCLib/src/xmc4_scu.c **** 
1322:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnterHibernateState(void) 
1323:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2910              	 .loc 1 1323 0
 2911              	 .cfi_startproc
 2912              	 
 2913              	 
 2914              	 
1324:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 2915              	 .loc 1 1324 0
 2916 0000 054A     	 ldr r2,.L319
 2917              	.L317:
 2918              	 .loc 1 1324 0 is_stmt 0 discriminator 1
 2919 0002 D2F8C430 	 ldr r3,[r2,#196]
 2920 0006 13F0080F 	 tst r3,#8
 2921 000a FAD1     	 bne .L317
1325:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1326:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1327:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1328:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 2922              	 .loc 1 1328 0 is_stmt 1
 2923 000c 034A     	 ldr r2,.L319+4
 2924 000e D368     	 ldr r3,[r2,#12]
 2925 0010 43F01003 	 orr r3,r3,#16
 2926 0014 D360     	 str r3,[r2,#12]
 2927 0016 7047     	 bx lr
 2928              	.L320:
 2929              	 .align 2
 2930              	.L319:
 2931 0018 00400050 	 .word 1342193664
 2932 001c 00430050 	 .word 1342194432
 2933              	 .cfi_endproc
 2934              	.LFE254:
 2936              	 .section .text.XMC_SCU_HIB_EnterHibernateStateEx,"ax",%progbits
 2937              	 .align 2
 2938              	 .global XMC_SCU_HIB_EnterHibernateStateEx
 2939              	 .thumb
 2940              	 .thumb_func
 2942              	XMC_SCU_HIB_EnterHibernateStateEx:
 2943              	.LFB255:
1329:../Libraries/XMCLib/src/xmc4_scu.c **** }
1330:../Libraries/XMCLib/src/xmc4_scu.c **** 
1331:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
1332:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2944              	 .loc 1 1332 0
 2945              	 .cfi_startproc
 2946              	 
 2947              	 
 2948              	.LVL168:
1333:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 2949              	 .loc 1 1333 0
 2950 0000 18B9     	 cbnz r0,.L324
1332:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 2951              	 .loc 1 1332 0
 2952 0002 08B5     	 push {r3,lr}
 2953              	.LCFI11:
 2954              	 .cfi_def_cfa_offset 8
 2955              	 .cfi_offset 3,-8
 2956              	 .cfi_offset 14,-4
1334:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1335:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_HIB_EnterHibernateState();
 2957              	 .loc 1 1335 0
 2958 0004 FFF7FEFF 	 bl XMC_SCU_HIB_EnterHibernateState
 2959              	.LVL169:
 2960 0008 08BD     	 pop {r3,pc}
 2961              	.LVL170:
 2962              	.L324:
 2963              	.LCFI12:
 2964              	 .cfi_def_cfa_offset 0
 2965              	 .cfi_restore 3
 2966              	 .cfi_restore 14
 2967 000a 7047     	 bx lr
 2968              	 .cfi_endproc
 2969              	.LFE255:
 2971              	 .section .text.XMC_SCU_HIB_SetWakeupTriggerInput,"ax",%progbits
 2972              	 .align 2
 2973              	 .global XMC_SCU_HIB_SetWakeupTriggerInput
 2974              	 .thumb
 2975              	 .thumb_func
 2977              	XMC_SCU_HIB_SetWakeupTriggerInput:
 2978              	.LFB256:
1336:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1337:../Libraries/XMCLib/src/xmc4_scu.c **** #if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
1338:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_HIB_HIBERNATE_MODE_INTERNAL)
1339:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1340:../Libraries/XMCLib/src/xmc4_scu.c ****     while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HINTSET_Msk)
1341:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1342:../Libraries/XMCLib/src/xmc4_scu.c ****       /* Wait until HDCR register in hibernate domain is ready to accept a write */
1343:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1344:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
1345:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1346:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1347:../Libraries/XMCLib/src/xmc4_scu.c **** }
1348:../Libraries/XMCLib/src/xmc4_scu.c **** 
1349:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
1350:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2979              	 .loc 1 1350 0
 2980              	 .cfi_startproc
 2981              	 
 2982              	 
 2983              	 
 2984              	.LVL171:
1351:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 2985              	 .loc 1 1351 0
 2986 0000 094A     	 ldr r2,.L330
 2987              	.L326:
 2988              	 .loc 1 1351 0 is_stmt 0 discriminator 1
 2989 0002 D2F8C430 	 ldr r3,[r2,#196]
 2990 0006 13F0080F 	 tst r3,#8
 2991 000a FAD1     	 bne .L326
1352:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1353:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1354:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1355:../Libraries/XMCLib/src/xmc4_scu.c **** 
1356:../Libraries/XMCLib/src/xmc4_scu.c ****   if (pin == XMC_SCU_HIB_IO_0)
 2992              	 .loc 1 1356 0 is_stmt 1
 2993 000c 28B9     	 cbnz r0,.L327
1357:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1358:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 2994              	 .loc 1 1358 0
 2995 000e 074A     	 ldr r2,.L330+4
 2996 0010 D368     	 ldr r3,[r2,#12]
 2997 0012 43F48073 	 orr r3,r3,#256
 2998 0016 D360     	 str r3,[r2,#12]
 2999 0018 7047     	 bx lr
 3000              	.L327:
1359:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1360:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1361:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1362:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 3001              	 .loc 1 1362 0
 3002 001a 044A     	 ldr r2,.L330+4
 3003 001c D368     	 ldr r3,[r2,#12]
 3004 001e 23F48073 	 bic r3,r3,#256
 3005 0022 D360     	 str r3,[r2,#12]
 3006 0024 7047     	 bx lr
 3007              	.L331:
 3008 0026 00BF     	 .align 2
 3009              	.L330:
 3010 0028 00400050 	 .word 1342193664
 3011 002c 00430050 	 .word 1342194432
 3012              	 .cfi_endproc
 3013              	.LFE256:
 3015              	 .section .text.XMC_SCU_HIB_SetPinMode,"ax",%progbits
 3016              	 .align 2
 3017              	 .global XMC_SCU_HIB_SetPinMode
 3018              	 .thumb
 3019              	 .thumb_func
 3021              	XMC_SCU_HIB_SetPinMode:
 3022              	.LFB257:
1363:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1364:../Libraries/XMCLib/src/xmc4_scu.c **** }
1365:../Libraries/XMCLib/src/xmc4_scu.c **** 
1366:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
1367:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3023              	 .loc 1 1367 0
 3024              	 .cfi_startproc
 3025              	 
 3026              	 
 3027              	 
 3028              	.LVL172:
1368:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3029              	 .loc 1 1368 0
 3030 0000 0A4A     	 ldr r2,.L336
 3031              	.L333:
 3032              	 .loc 1 1368 0 is_stmt 0 discriminator 1
 3033 0002 D2F8C430 	 ldr r3,[r2,#196]
 3034 0006 13F0080F 	 tst r3,#8
 3035 000a FAD1     	 bne .L333
1367:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3036              	 .loc 1 1367 0 is_stmt 1
 3037 000c 10B4     	 push {r4}
 3038              	.LCFI13:
 3039              	 .cfi_def_cfa_offset 4
 3040              	 .cfi_offset 4,-4
1369:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1370:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1371:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1372:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE
 3041              	 .loc 1 1372 0
 3042 000e 084C     	 ldr r4,.L336+4
 3043 0010 E268     	 ldr r2,[r4,#12]
 3044 0012 8000     	 lsls r0,r0,#2
 3045              	.LVL173:
 3046 0014 4FF47023 	 mov r3,#983040
 3047 0018 8340     	 lsls r3,r3,r0
 3048 001a 22EA0303 	 bic r3,r2,r3
1373:../Libraries/XMCLib/src/xmc4_scu.c ****                         (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 3049              	 .loc 1 1373 0
 3050 001e 8140     	 lsls r1,r1,r0
 3051              	.LVL174:
1372:../Libraries/XMCLib/src/xmc4_scu.c ****                         (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 3052              	 .loc 1 1372 0
 3053 0020 1943     	 orrs r1,r1,r3
 3054 0022 E160     	 str r1,[r4,#12]
1374:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3055              	 .loc 1 1374 0
 3056 0024 5DF8044B 	 ldr r4,[sp],#4
 3057              	.LCFI14:
 3058              	 .cfi_restore 4
 3059              	 .cfi_def_cfa_offset 0
 3060 0028 7047     	 bx lr
 3061              	.L337:
 3062 002a 00BF     	 .align 2
 3063              	.L336:
 3064 002c 00400050 	 .word 1342193664
 3065 0030 00430050 	 .word 1342194432
 3066              	 .cfi_endproc
 3067              	.LFE257:
 3069              	 .section .text.XMC_SCU_HIB_SetPinOutputLevel,"ax",%progbits
 3070              	 .align 2
 3071              	 .global XMC_SCU_HIB_SetPinOutputLevel
 3072              	 .thumb
 3073              	 .thumb_func
 3075              	XMC_SCU_HIB_SetPinOutputLevel:
 3076              	.LFB258:
1375:../Libraries/XMCLib/src/xmc4_scu.c **** 
1376:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
1377:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3077              	 .loc 1 1377 0
 3078              	 .cfi_startproc
 3079              	 
 3080              	 
 3081              	 
 3082              	.LVL175:
1378:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3083              	 .loc 1 1378 0
 3084 0000 094A     	 ldr r2,.L342
 3085              	.L339:
 3086              	 .loc 1 1378 0 is_stmt 0 discriminator 1
 3087 0002 D2F8C430 	 ldr r3,[r2,#196]
 3088 0006 13F0080F 	 tst r3,#8
 3089 000a FAD1     	 bne .L339
1377:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3090              	 .loc 1 1377 0 is_stmt 1
 3091 000c 10B4     	 push {r4}
 3092              	.LCFI15:
 3093              	 .cfi_def_cfa_offset 4
 3094              	 .cfi_offset 4,-4
1379:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1380:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1381:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1382:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 3095              	 .loc 1 1382 0
 3096 000e 074C     	 ldr r4,.L342+4
 3097 0010 E268     	 ldr r2,[r4,#12]
 3098 0012 4FF48053 	 mov r3,#4096
 3099 0016 8340     	 lsls r3,r3,r0
 3100 0018 22EA0303 	 bic r3,r2,r3
1383:../Libraries/XMCLib/src/xmc4_scu.c ****                         (level << pin);
 3101              	 .loc 1 1383 0
 3102 001c 8140     	 lsls r1,r1,r0
 3103              	.LVL176:
1382:../Libraries/XMCLib/src/xmc4_scu.c ****                         (level << pin);
 3104              	 .loc 1 1382 0
 3105 001e 1943     	 orrs r1,r1,r3
 3106 0020 E160     	 str r1,[r4,#12]
1384:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3107              	 .loc 1 1384 0
 3108 0022 5DF8044B 	 ldr r4,[sp],#4
 3109              	.LCFI16:
 3110              	 .cfi_restore 4
 3111              	 .cfi_def_cfa_offset 0
 3112 0026 7047     	 bx lr
 3113              	.L343:
 3114              	 .align 2
 3115              	.L342:
 3116 0028 00400050 	 .word 1342193664
 3117 002c 00430050 	 .word 1342194432
 3118              	 .cfi_endproc
 3119              	.LFE258:
 3121              	 .section .text.XMC_SCU_HIB_SetInput0,"ax",%progbits
 3122              	 .align 2
 3123              	 .global XMC_SCU_HIB_SetInput0
 3124              	 .thumb
 3125              	 .thumb_func
 3127              	XMC_SCU_HIB_SetInput0:
 3128              	.LFB259:
1385:../Libraries/XMCLib/src/xmc4_scu.c **** 
1386:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
1387:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3129              	 .loc 1 1387 0
 3130              	 .cfi_startproc
 3131              	 
 3132              	 
 3133              	 
 3134              	.LVL177:
1388:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3135              	 .loc 1 1388 0
 3136 0000 094A     	 ldr r2,.L349
 3137              	.L345:
 3138              	 .loc 1 1388 0 is_stmt 0 discriminator 1
 3139 0002 D2F8C430 	 ldr r3,[r2,#196]
 3140 0006 13F0080F 	 tst r3,#8
 3141 000a FAD1     	 bne .L345
1389:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1390:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1391:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1392:../Libraries/XMCLib/src/xmc4_scu.c **** 
1393:../Libraries/XMCLib/src/xmc4_scu.c ****   if (pin == XMC_SCU_HIB_IO_0)
 3142              	 .loc 1 1393 0 is_stmt 1
 3143 000c 28B9     	 cbnz r0,.L346
1394:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1395:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 3144              	 .loc 1 1395 0
 3145 000e 074A     	 ldr r2,.L349+4
 3146 0010 D368     	 ldr r3,[r2,#12]
 3147 0012 43F48063 	 orr r3,r3,#1024
 3148 0016 D360     	 str r3,[r2,#12]
 3149 0018 7047     	 bx lr
 3150              	.L346:
1396:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1397:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1398:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1399:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 3151              	 .loc 1 1399 0
 3152 001a 044A     	 ldr r2,.L349+4
 3153 001c D368     	 ldr r3,[r2,#12]
 3154 001e 23F48063 	 bic r3,r3,#1024
 3155 0022 D360     	 str r3,[r2,#12]
 3156 0024 7047     	 bx lr
 3157              	.L350:
 3158 0026 00BF     	 .align 2
 3159              	.L349:
 3160 0028 00400050 	 .word 1342193664
 3161 002c 00430050 	 .word 1342194432
 3162              	 .cfi_endproc
 3163              	.LFE259:
 3165              	 .section .text.XMC_SCU_HIB_SetSR0Input,"ax",%progbits
 3166              	 .align 2
 3167              	 .global XMC_SCU_HIB_SetSR0Input
 3168              	 .thumb
 3169              	 .thumb_func
 3171              	XMC_SCU_HIB_SetSR0Input:
 3172              	.LFB260:
1400:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1401:../Libraries/XMCLib/src/xmc4_scu.c **** }
1402:../Libraries/XMCLib/src/xmc4_scu.c **** 
1403:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
1404:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3173              	 .loc 1 1404 0
 3174              	 .cfi_startproc
 3175              	 
 3176              	 
 3177              	 
 3178              	.LVL178:
1405:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3179              	 .loc 1 1405 0
 3180 0000 064A     	 ldr r2,.L354
 3181              	.L352:
 3182              	 .loc 1 1405 0 is_stmt 0 discriminator 1
 3183 0002 D2F8C430 	 ldr r3,[r2,#196]
 3184 0006 13F0080F 	 tst r3,#8
 3185 000a FAD1     	 bne .L352
1406:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1407:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1408:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1409:../Libraries/XMCLib/src/xmc4_scu.c **** #if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
1410:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIB
1411:../Libraries/XMCLib/src/xmc4_scu.c **** #else
1412:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 3186              	 .loc 1 1412 0 is_stmt 1
 3187 000c 044A     	 ldr r2,.L354+4
 3188 000e D368     	 ldr r3,[r2,#12]
 3189 0010 23F48063 	 bic r3,r3,#1024
 3190 0014 1843     	 orrs r0,r0,r3
 3191              	.LVL179:
 3192 0016 D060     	 str r0,[r2,#12]
 3193 0018 7047     	 bx lr
 3194              	.L355:
 3195 001a 00BF     	 .align 2
 3196              	.L354:
 3197 001c 00400050 	 .word 1342193664
 3198 0020 00430050 	 .word 1342194432
 3199              	 .cfi_endproc
 3200              	.LFE260:
 3202              	 .section .text.XMC_SCU_CLOCK_IsLowPowerOscillatorStable,"ax",%progbits
 3203              	 .align 2
 3204              	 .global XMC_SCU_CLOCK_IsLowPowerOscillatorStable
 3205              	 .thumb
 3206              	 .thumb_func
 3208              	XMC_SCU_CLOCK_IsLowPowerOscillatorStable:
 3209              	.LFB261:
1413:../Libraries/XMCLib/src/xmc4_scu.c **** #endif  
1414:../Libraries/XMCLib/src/xmc4_scu.c ****                         input;
1415:../Libraries/XMCLib/src/xmc4_scu.c **** }
1416:../Libraries/XMCLib/src/xmc4_scu.c **** 
1417:../Libraries/XMCLib/src/xmc4_scu.c **** #if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
1418:../Libraries/XMCLib/src/xmc4_scu.c **** 
1419:../Libraries/XMCLib/src/xmc4_scu.c **** #if ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100))
1420:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetSR1Input(XMC_SCU_HIB_SR1_INPUT_t input)
1421:../Libraries/XMCLib/src/xmc4_scu.c **** {
1422:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
1423:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1424:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1425:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1426:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIB
1427:../Libraries/XMCLib/src/xmc4_scu.c ****                         input;
1428:../Libraries/XMCLib/src/xmc4_scu.c **** }
1429:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1430:../Libraries/XMCLib/src/xmc4_scu.c **** 
1431:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetInput(XMC_SCU_HIB_LPAC_INPUT_t input)
1432:../Libraries/XMCLib/src/xmc4_scu.c **** {
1433:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACCONF_Msk)
1434:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1435:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1436:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1437:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACCONF = (SCU_HIBERNATE->LPACCONF &  (uint32_t)~SCU_HIBERNATE_LPACCONF_CMPEN_Msk
1438:../Libraries/XMCLib/src/xmc4_scu.c ****                             input;
1439:../Libraries/XMCLib/src/xmc4_scu.c **** }
1440:../Libraries/XMCLib/src/xmc4_scu.c **** 
1441:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetTrigger(XMC_SCU_HIB_LPAC_TRIGGER_t trigger)
1442:../Libraries/XMCLib/src/xmc4_scu.c **** {
1443:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACCONF_Msk)
1444:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1445:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1446:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1447:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACCONF = (SCU_HIBERNATE->LPACCONF &  (uint32_t)~SCU_HIBERNATE_LPACCONF_TRIGSEL_M
1448:../Libraries/XMCLib/src/xmc4_scu.c ****                             trigger;
1449:../Libraries/XMCLib/src/xmc4_scu.c **** }
1450:../Libraries/XMCLib/src/xmc4_scu.c **** 
1451:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetTiming(bool enable_delay, uint16_t interval_count, uint8_t settle_count)
1452:../Libraries/XMCLib/src/xmc4_scu.c **** {
1453:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t config = 0;
1454:../Libraries/XMCLib/src/xmc4_scu.c **** 
1455:../Libraries/XMCLib/src/xmc4_scu.c ****   if (enable_delay)
1456:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1457:../Libraries/XMCLib/src/xmc4_scu.c ****     config = SCU_HIBERNATE_LPACCONF_CONVDEL_Msk;
1458:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1459:../Libraries/XMCLib/src/xmc4_scu.c **** 
1460:../Libraries/XMCLib/src/xmc4_scu.c ****   config |= interval_count << SCU_HIBERNATE_LPACCONF_INTERVCNT_Pos;
1461:../Libraries/XMCLib/src/xmc4_scu.c ****   config |= settle_count << SCU_HIBERNATE_LPACCONF_SETTLECNT_Pos;
1462:../Libraries/XMCLib/src/xmc4_scu.c **** 
1463:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACCONF_Msk)
1464:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1465:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1466:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1467:../Libraries/XMCLib/src/xmc4_scu.c **** 
1468:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACCONF = (SCU_HIBERNATE->LPACCONF &  (uint32_t)~(SCU_HIBERNATE_LPACCONF_CONVDEL_
1469:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                     SCU_HIBERNATE_LPACCONF_INTERVCN
1470:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                     SCU_HIBERNATE_LPACCONF_SETTLECN
1471:../Libraries/XMCLib/src/xmc4_scu.c ****                             config;
1472:../Libraries/XMCLib/src/xmc4_scu.c **** 
1473:../Libraries/XMCLib/src/xmc4_scu.c **** }
1474:../Libraries/XMCLib/src/xmc4_scu.c **** 
1475:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetVBATThresholds(uint8_t lower, uint8_t upper)
1476:../Libraries/XMCLib/src/xmc4_scu.c **** {
1477:../Libraries/XMCLib/src/xmc4_scu.c **** 
1478:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACTH0_Msk)
1479:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1480:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1481:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1482:../Libraries/XMCLib/src/xmc4_scu.c **** 
1483:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACTH0 = (lower << SCU_HIBERNATE_LPACTH0_VBATLO_Pos) | (upper << SCU_HIBERNATE_LP
1484:../Libraries/XMCLib/src/xmc4_scu.c **** 
1485:../Libraries/XMCLib/src/xmc4_scu.c **** 
1486:../Libraries/XMCLib/src/xmc4_scu.c **** 
1487:../Libraries/XMCLib/src/xmc4_scu.c **** }
1488:../Libraries/XMCLib/src/xmc4_scu.c **** 
1489:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetHIBIO0Thresholds(uint8_t lower, uint8_t upper)
1490:../Libraries/XMCLib/src/xmc4_scu.c **** {
1491:../Libraries/XMCLib/src/xmc4_scu.c **** 
1492:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACTH1_Msk)
1493:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1494:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1495:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1496:../Libraries/XMCLib/src/xmc4_scu.c **** 
1497:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACTH1 = (SCU_HIBERNATE->LPACTH1 & (uint32_t)~(SCU_HIBERNATE_LPACTH1_AHIBIO0LO_Ms
1498:../Libraries/XMCLib/src/xmc4_scu.c ****                            (lower << SCU_HIBERNATE_LPACTH1_AHIBIO0LO_Pos) |
1499:../Libraries/XMCLib/src/xmc4_scu.c ****                            (upper << SCU_HIBERNATE_LPACTH1_AHIBIO0HI_Pos);
1500:../Libraries/XMCLib/src/xmc4_scu.c **** 
1501:../Libraries/XMCLib/src/xmc4_scu.c **** }
1502:../Libraries/XMCLib/src/xmc4_scu.c **** #if ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100))
1503:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetHIBIO1Thresholds(uint8_t lower, uint8_t upper)
1504:../Libraries/XMCLib/src/xmc4_scu.c **** {
1505:../Libraries/XMCLib/src/xmc4_scu.c **** 
1506:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACTH1_Msk)
1507:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1508:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1509:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1510:../Libraries/XMCLib/src/xmc4_scu.c **** 
1511:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACTH1 = (SCU_HIBERNATE->LPACTH1 & (uint32_t)~(SCU_HIBERNATE_LPACTH1_AHIBIO1LO_Ms
1512:../Libraries/XMCLib/src/xmc4_scu.c ****                            (lower << SCU_HIBERNATE_LPACTH1_AHIBIO1LO_Pos) |
1513:../Libraries/XMCLib/src/xmc4_scu.c ****                            (upper << SCU_HIBERNATE_LPACTH1_AHIBIO1HI_Pos);
1514:../Libraries/XMCLib/src/xmc4_scu.c **** 
1515:../Libraries/XMCLib/src/xmc4_scu.c **** }
1516:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1517:../Libraries/XMCLib/src/xmc4_scu.c **** int32_t XMC_SCU_HIB_LPAC_GetStatus(void)
1518:../Libraries/XMCLib/src/xmc4_scu.c **** {
1519:../Libraries/XMCLib/src/xmc4_scu.c ****   return SCU_HIBERNATE->LPACST;
1520:../Libraries/XMCLib/src/xmc4_scu.c **** }
1521:../Libraries/XMCLib/src/xmc4_scu.c **** 
1522:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_ClearStatus(int32_t status)
1523:../Libraries/XMCLib/src/xmc4_scu.c **** {
1524:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACCLR_Msk)
1525:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1526:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until LPACCLR register in hibernate domain is ready to accept a write */
1527:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1528:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACCLR = status;;
1529:../Libraries/XMCLib/src/xmc4_scu.c **** }
1530:../Libraries/XMCLib/src/xmc4_scu.c **** 
1531:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_TriggerCompare(XMC_SCU_HIB_LPAC_INPUT_t input)
1532:../Libraries/XMCLib/src/xmc4_scu.c **** {
1533:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACSET_Msk)
1534:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1535:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until LPACSET register in hibernate domain is ready to accept a write */
1536:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1537:../Libraries/XMCLib/src/xmc4_scu.c **** 
1538:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACSET = input;
1539:../Libraries/XMCLib/src/xmc4_scu.c **** }
1540:../Libraries/XMCLib/src/xmc4_scu.c **** 
1541:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1542:../Libraries/XMCLib/src/xmc4_scu.c **** 
1543:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
1544:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3210              	 .loc 1 1544 0
 3211              	 .cfi_startproc
 3212              	 
 3213              	 
 3214              	 
1545:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 3215              	 .loc 1 1545 0
 3216 0000 034B     	 ldr r3,.L357
 3217 0002 1868     	 ldr r0,[r3]
 3218 0004 80F00800 	 eor r0,r0,#8
1546:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3219              	 .loc 1 1546 0
 3220 0008 C0F3C000 	 ubfx r0,r0,#3,#1
 3221 000c 7047     	 bx lr
 3222              	.L358:
 3223 000e 00BF     	 .align 2
 3224              	.L357:
 3225 0010 00430050 	 .word 1342194432
 3226              	 .cfi_endproc
 3227              	.LFE261:
 3229              	 .section .text.XMC_SCU_CLOCK_EnableLowPowerOscillator,"ax",%progbits
 3230              	 .align 2
 3231              	 .global XMC_SCU_CLOCK_EnableLowPowerOscillator
 3232              	 .thumb
 3233              	 .thumb_func
 3235              	XMC_SCU_CLOCK_EnableLowPowerOscillator:
 3236              	.LFB262:
1547:../Libraries/XMCLib/src/xmc4_scu.c **** 
1548:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the 32khz Ultra Low Power oscillator */
1549:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
1550:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3237              	 .loc 1 1550 0
 3238              	 .cfi_startproc
 3239              	 
 3240              	 
 3241              	 
1551:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Enable OSC_ULP */
1552:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 3242              	 .loc 1 1552 0
 3243 0000 134A     	 ldr r2,.L368
 3244              	.L360:
 3245              	 .loc 1 1552 0 is_stmt 0 discriminator 1
 3246 0002 D2F8C430 	 ldr r3,[r2,#196]
 3247 0006 13F0800F 	 tst r3,#128
 3248 000a FAD1     	 bne .L360
1553:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1554:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until no pending update to OSCULCTRL register in hibernate domain */
1555:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1556:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 3249              	 .loc 1 1556 0 is_stmt 1
 3250 000c 114A     	 ldr r2,.L368+4
 3251 000e D369     	 ldr r3,[r2,#28]
 3252 0010 23F03003 	 bic r3,r3,#48
 3253 0014 D361     	 str r3,[r2,#28]
1557:../Libraries/XMCLib/src/xmc4_scu.c **** 
1558:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Enable OSC_ULP Oscillator Watchdog*/
1559:../Libraries/XMCLib/src/xmc4_scu.c ****   while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3254              	 .loc 1 1559 0
 3255 0016 A2F54072 	 sub r2,r2,#768
 3256              	.L361:
 3257              	 .loc 1 1559 0 is_stmt 0 discriminator 1
 3258 001a D2F8C430 	 ldr r3,[r2,#196]
 3259 001e 13F0080F 	 tst r3,#8
 3260 0022 FAD1     	 bne .L361
1560:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1561:../Libraries/XMCLib/src/xmc4_scu.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
1562:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1563:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 3261              	 .loc 1 1563 0 is_stmt 1
 3262 0024 0B4A     	 ldr r2,.L368+4
 3263 0026 D368     	 ldr r3,[r2,#12]
 3264 0028 43F00803 	 orr r3,r3,#8
 3265 002c D360     	 str r3,[r2,#12]
1564:../Libraries/XMCLib/src/xmc4_scu.c **** 
1565:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Enable OSC_ULP Oscillator Watchdog*/
1566:../Libraries/XMCLib/src/xmc4_scu.c ****   while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 3266              	 .loc 1 1566 0
 3267 002e A2F54072 	 sub r2,r2,#768
 3268              	.L362:
 3269              	 .loc 1 1566 0 is_stmt 0 discriminator 1
 3270 0032 D2F8C430 	 ldr r3,[r2,#196]
 3271 0036 13F0040F 	 tst r3,#4
 3272 003a FAD1     	 bne .L362
1567:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1568:../Libraries/XMCLib/src/xmc4_scu.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
1569:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1570:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 3273              	 .loc 1 1570 0 is_stmt 1
 3274 003c 0822     	 movs r2,#8
 3275 003e 054B     	 ldr r3,.L368+4
 3276 0040 9A60     	 str r2,[r3,#8]
 3277              	.LBB30:
 3278              	.LBB31:
 3279              	 .file 3 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc_scu.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @file xmc_scu.h
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @date 2016-03-09
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @cond
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * All rights reserved.                        
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                                             
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * following conditions are met:   
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * disclaimer.                        
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * 
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * 
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Change History
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * --------------
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-02-20:
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Initial <br>
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-05-20:
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Documentation improved <br>
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *     - XMC_ASSERT() hanging issues have fixed for XMC4 devices. <br>
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-06-20:
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Removed STATIC_INLINE property for the below APIs and declared as void
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_EnableEvent, XMC_SCU_INTERRUPT_DisableEvent,
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_TriggerEvent, XMC_SCU_INTERUPT_GetEventStatus,
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERUPT_ClearEventStatus
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-11-30:
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Documentation improved <br>
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *      
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * 2016-03-09:
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Optimization of write only registers
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *      
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @endcond 
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #ifndef XMC_SCU_H
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #define XMC_SCU_H
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * HEADER FILES
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc_common.h>
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @{
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @addtogroup SCU
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @brief System Control Unit(SCU) driver for XMC microcontroller family.
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * System control unit is the SoC power, reset and a clock manager with additional responsibility o
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * providing system stability protection and other auxiliary functions.<br>
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * SCU provides the following features,
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Power control
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4 
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Hibernate control 
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Reset control
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Clock control
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Miscellaneous control(boot mode, system interrupts etc.)<br><br>
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The SCU driver is divided in to clock control logic, reset control logic, system interrupt contr
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * , hibernate control logic, trap control logic, parity control logic 
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * and miscellaneous control logic.<br>
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Clock driver features:
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows clock configuration using the structure XMC_SCU_CLOCK_CONFIG_t and API XMC_SCU_CLOCK_I
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides structure XMC_SCU_CLOCK_SYSPLL_CONFIG_t for configuring the system PLL
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of clock source for system PLL, XMC_SCU_CLOCK_GetSystemPllClockSource()
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for configuring different module clock frequencies XMC_SCU_CLOCK_SetWdtClockDiv
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of clock source for external output, XMC_SCU_CLOCK_SetExternalOutputClockSou
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for enabling external high power oscillator and ultra low power oscillator, XMC
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for getting various clock frequencies XMC_SCU_CLOCK_GetPeripheralClockFrequency
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  XMC_SCU_CLOCK_GetCpuClockFrequency(), XMC_SCU_CLOCK_GetSystemClockFrequency()<br>
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of peripheral clock frequency, XMC_SCU_CLOCK_SetFastPeripheralClockSource()
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API to get the peripheral clock frequency, XMC_SCU_CLOCK_GetFastPeripheralClockFrequ
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Reset driver features:
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to handle peripheral reset XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_Deasse
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of NMI generation for selected events, XMC_SCU_INTERRUPT_EnableNmiReques
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to trigger device reset XMC_SCU_RESET_AssertMasterReset()
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to configure multiple sources for reset, XMC_SCU_RESET_EnableResetRequest()
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \endif <br>
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Interrupt driver features:
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for enabling/ disabling interrupt event generation XMC_SCU_INTERRUPT_EnableEven
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  XMC_SCU_INTERRUPT_DisableEvent()
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API for registering callback function for events XMC_SCU_INTERRUPT_SetEventHandler()
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Hibernate driver features:
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of hibernate domain XMC_SCU_HIB_EnableHibernateDomain(), XMC_SCU_HIB_Dis
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of standby clock source, XMC_SCU_HIB_SetStandbyClockSource()
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of RTC clock source, XMC_SCU_HIB_SetRtcClockSource()
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API for enabling slow internal clock used for backup clock, XMC_SCU_HIB_EnableIntern
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Trap driver features:
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows handling of trap XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_GetStatus(), XMC_SCU_TRAP_Trigger
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Parity driver features:
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Parity error generated by on-chip RAM can be monitored, XMC_SCU_PARITY_Enable(), XMC_SCU_PARI
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of trap generation on detection of parity error, XMC_SCU_PARITY_EnableTr
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Power driver features:
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to power the USB module XMC_SCU_POWER_EnableUsb(), XMC_SCU_POWER_DisableUsb()
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Miscellaneous features:
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to trigger multiple capture compare unit(CCU) channels to be started together XMC_SCU_
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of out of range comparator (ORC) XMC_SCU_EnableOutOfRangeComparator()
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_EnableTemperatureSensor(), XMC_SCU_Ca
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of device boot mode XMC_SCU_SetBootMode()<br>
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_StartTempMeasurement(), XMC_SCU_SetRa
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuring supply monitor unit using the structure XMC_SCU_SUPPLYMONITOR_t and API XM
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows handling of protected bits XMC_SCU_LockProtectedBits(), XMC_SCU_UnlockProtectedBits()<
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @{
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * MACROS
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * ENUMS
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *  Defines the status of SCU API execution, used to verify the SCU related API calls.
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** typedef enum XMC_SCU_STATUS 
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** {
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_OK   = 0UL, /**< SCU related operation successfully completed.*/
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_ERROR,      /**< SCU related operation failed. When API cannot fulfill request, th
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_BUSY,       /**< Cannot execute the SCU related operation request because
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****                                   another operation is in progress. \a XMC_SCU_STATUS_BUSY is retur
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****                                   processing another request. */
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** } XMC_SCU_STATUS_t;
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * DATA TYPES
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Function pointer type used for registering callback functions on SCU event occurrence.
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** typedef void (*XMC_SCU_INTERRUPT_EVENT_HANDLER_t)(void);
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * DEVICE EXTENSIONS
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #if (UC_FAMILY == XMC1)
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc1_scu.h>
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #elif (UC_FAMILY == XMC4)
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc4_scu.h>
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #else
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #error "Unspecified chipset"
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #endif
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * API Prototypes
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #ifdef __cplusplus
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** extern "C" {
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #endif
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @param trigger    CCU slices to be triggered synchronously via software. The value is a bitmask 
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    combined using \a OR operation.
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Generates active edge(low to high) trigger for multiple CCU units at the same time.\n\n
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The edge of the start signal should be selected as active edge.
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * the timer using this API.<BR>
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** {
 232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** }
 234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @param trigger  CCU slices to be triggered synchronously via software. The value is a bitmask of
 238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    combined using \a OR operation.
 241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Generates passive edge(high to low) trigger for multiple CCU units at the same time.\n\n
 246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The edge of the start signal should be selected as passive edge.
 248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * the timer using this API.<BR>
 252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
 256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** {
 257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** }
 259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @param config Pointer to structure holding the clock prescaler values and divider values for 
 263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                configuring clock generators and clock tree.\n
 264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                \b Range: Configure the members of structure @ref XMC_SCU_CLOCK_CONFIG_t for vari
 265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                parameters of clock setup.
 266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Initializes clock generators and clock tree.\n\n
 271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Peripheral clock and system clock are configured based on the input configuration \a config.
 273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The system clock frequency is tuned by configuring the FDIV and IDIV values of CLKCR register.
 274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The values of FDIV and IDIV can be provided as part of input configuration.
 275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The PCLK divider determines the ratio of peripheral clock to the system clock. 
 276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The source of RTC clock is set based on the input configuration. 
 277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \a SystemCoreClock variable will be updated with the value of
 278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * system clock frequency. Access to protected bit fields are handled internally.
 279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Enables the high precision oscillator(fOHP) input and configures the system and peripheral clock
 282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Based on the system clock source selected in \a config, either fPLL or fOFI will be chosen as sy
 283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Based on PLL mode(normal or prescaler mode) used, PLL ramps up in steps to achieve target freque
 284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The clock dividers for CPU, CCU and peripheral clocks will be set based on the input configurati
 285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The \a SystemCoreClock variable is set with the value of system clock frequency.
 286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GetCpuClockFrequency() \n\n\n
 289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config);
 291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the event to enable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Enables the generation of interrupt for the input events.\n\n
 301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are enabled by setting the respective bit fields in the SRMSK register. \n
 302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: User should separately enable the NVIC node responsible for handling the SCU interrupt.
 303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The interrupt will be generated when the respective event occurs.
 304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERRUPT_DisableEvent()\n\n\n
 306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the event to disable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_
 313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Disables generation of interrupt on occurrence of the input event.\n\n
 319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are disabled by resetting the respective bit fields in the SRMSK register. \n
 320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_DisableIRQ(), XMC_SCU_INTERRUPT_EnableEvent()\n\n\n
 322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event Bit mask of the event to be triggered. \b Range: Use type @ref XMC_SCU_INTERRUPT_EV
 328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Triggers the event as if the hardware raised it.\n\n
 334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Event will be triggered by setting the respective bitfield in the SRSET register.\n
 335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: User should enable the NVIC node that handles the respective event for interrupt generatio
 336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_ClearEventStatus() \n\n\n
 338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t  event);
 340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Status of the SCU events.
 343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the status of all SCU events.\n\n
 346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The status is read from the SRRAW register. To check the status of a particular 
 347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * event, the returned value should be masked with the bit mask of the event. The bitmask
 348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * of events can be obtained using the type @ref XMC_SCU_INTERRUPT_EVENT_t. Multiple events'
 349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * status can be checked by combining the bit masks using \a OR operation. 
 350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * After detecting the event, the event status should be cleared using software to detect the event
 351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_INTERRUPT_ClearEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent(), XMC_SCU_INTERRUPT_SetEve
 353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void);
 355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the events to clear. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Clears the event status bit in SRRAW register.\n\n
 365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are cleared by writing value 1 to their bit positions in the SRCLR register.
 366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The API can be used when polling method is used. After detecting the event, the event status
 367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * should be cleared using software to detect the event again.
 368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent() \n\n\n
 371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event);
 373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Status representing the reason for device reset.
 377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the value representing the reason for device reset.\n\n
 380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The return value is an encoded word, which can indicate multiple reasons for the last reset. Eac
 381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * returned word is representative of a last reset cause. The returned value should be appropriatel
 382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * the cause of reset. 
 383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The cause of the last reset gets automatically stored in 
 384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * the \a SCU_RSTSTAT register. The reset status shall be reset after each
 385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * startup in order to ensure consistent source indication after the next reset.
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \b Range: The type @ref XMC_SCU_RESET_REASON_t can be used to get the bit masks of the reset cau
 387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_RESET_ClearDeviceResetReason() \n\n\n
 390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_RESET_GetDeviceResetReason(void)
 392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** {
 393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****   return ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_RSTSTAT_Msk);
 394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** }
 395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None 
 397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Clears the reset reason bits in the reset status register. \n\n
 400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Clearing of the reset status information in the \a SCU_RSTSTAT register via register bit \a RSTC
 401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * recommended to ensure a clear indication of the cause of next reset.
 402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_RESET_GetDeviceResetReason() \n\n\n
 405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_RESET_ClearDeviceResetReason(void)
 407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** {
 408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****   /* Clear RSTSTAT.RSTSTAT bitfield */
 409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_RSCLR_Msk;
 410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** }
 411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  
 412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Value of CPU clock frequency.
 414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the vlaue of CPU clock frequency.\n\n
 417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The value is stored in a global variable \a \b SystemCoreClock.
 418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * It is updated when the clock configuration is done using the SCU LLD APIs.
 419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The value represents the frequency of clock used for CPU operation.
 420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \b Range: Value is of type uint32_t, and gives the value of frequency in Hertz.
 421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
 426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** {
 427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****   return SystemCoreClock;
 428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** }
 429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Value of peripheral clock frequency in Hertz.
 432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the vlaue of clock frequency at which the peripherals are working.\n\n
 435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The value is derived from the CPU frequency. \b Range: Value is of type uint32_t. It is represen
 436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockFrequency(),XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void); 
 440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #if(UC_SERIES != XMC45)
 442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  
 443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @param  peripheral The peripheral for which the clock has to be gated. \b Range: Use type @ref X
 446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    to identify the peripheral clock to be gated.
 447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Blocks the supply of clock to the selected peripheral.\n\n
 452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Clock gating helps in reducing the power consumption. User can selectively gate the clocks of un
 453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * fPCLK is the source of clock to various peripherals. Some peripherals support clock gate. Such a
 455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * the clock supply for the selected peripheral.
 456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual gating of such peripheral clocks by enabling the \a SCU_CGAT
 457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * register bit field. Every bit in \a SCU_CGATSET0 register is protected by the bit protection sch
 458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * bit fields are handled internally.
 459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * fPERI is the source of clock to various peripherals. Some peripherals support clock gate. Such a
 462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * the clock supply for the selected peripheral.
 463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual gating of such peripheral clocks by enabling one of the \a
 464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * SCU_CGATSET0, \a SCU_CGATSET1 or \a SCU_CGATSET2 register bitfields.
 465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * 
 466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: Clock gating shall not be activated unless the module is in reset state. So use \a
 468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated() API before enabling the gating of any peripheral.
 469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated(), XMC_SCU_CLOCK_UngatePeripheralClock() \n\n\n
 471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  
 474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @param  peripheral  The peripheral for which the clock has to be ungated. \b Range: Use type @re
 477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    to identify the peripheral.
 478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Enables the supply of clock to the selected peripheral.\n\n
 483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * By default when the device powers on, the peripheral clock will be gated for the 
 484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * peripherals that support clock gating.
 485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The peripheral clock should be enabled before using it for any functionality.
 486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * fPCLK is the source of clock to various peripherals. Some peripherals support clock gate.
 488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual ungating of such peripheral clocks by setting respective bit
 489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * in the \a SCU_CGATCLR0 register.
 490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * fPERI is the source of clock to various peripherals. Some peripherals support clock gate.
 493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual ungating of such peripheral clocks by setting the respective
 494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * SCU_CGATCLR0, \a SCU_CGATCLR1 or \a SCU_CGATCLR2 registers.
 495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @param  peripheral  The peripheral for which the check for clock gating has to be done. 
 505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_PERIPHERAL_CLOCK_t to identify the peripheral
 506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return bool Status of the peripheral clock gating. \b Range: true if the peripheral clock is ga
 508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *              false if the peripheral clock ungated(gate de-asserted).
 509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Gives the status of peripheral clock gating.\n\n
 512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Checks the status of peripheral clock gating using the register CGATSTAT0.
 514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Checks the status of peripheral clock gating using one of CGATSTAT0, CGATSTAT1 or CGATSTAT2 regi
 517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * It is recommended to use this API before
 519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * enabling the gating of any peripherals through \a XMC_SCU_CLOCK_GatePeripheralClock() API.
 520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_UngatePeripheralClock(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** #endif
 526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** 
 528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** /**
 529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * @return  uint32_t  Status of the register mirror update.\n
 530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use the bit mask of the SCU_GENERAL_MIRRSTS register for the mirror
 531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    interest. e.g.: SCU_GENERAL_MIRRSTS_RTC_CTR_Msk. Multiple update events can b
 532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *                    using \a OR operation.
 533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  *
 534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the status of hibernate domain register update, when the respective mirror registers ar
 536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * The hibernate domain is connected to the core domain via SPI serial communication. MIRRSTS is a 
 537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * representing the communication of changed value of a mirror register to its corresponding regist
 538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * hibernate domain. The bit fields of the register indicate
 539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * that a corresponding register of the hibernate domain is ready to accept a write or that the com
 540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * is busy with executing the previous operation.\n
 541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpos
 542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****  */
 543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
 544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h **** {
 545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_scu.h ****   return(SCU_GENERAL->MIRRSTS);
 3280              	 .loc 3 545 0
 3281 0042 034A     	 ldr r2,.L368
 3282              	.L363:
 3283              	 .loc 3 545 0 is_stmt 0 discriminator 1
 3284 0044 D2F8C430 	 ldr r3,[r2,#196]
 3285              	.LBE31:
 3286              	.LBE30:
1571:../Libraries/XMCLib/src/xmc4_scu.c **** 
1572:../Libraries/XMCLib/src/xmc4_scu.c ****   while (XMC_SCU_GetMirrorStatus() != 0)
 3287              	 .loc 1 1572 0 is_stmt 1 discriminator 1
 3288 0048 002B     	 cmp r3,#0
 3289 004a FBD1     	 bne .L363
1573:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1574:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until update of the stanby clock source is done in the HIB domain */    
1575:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1576:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3290              	 .loc 1 1576 0
 3291 004c 7047     	 bx lr
 3292              	.L369:
 3293 004e 00BF     	 .align 2
 3294              	.L368:
 3295 0050 00400050 	 .word 1342193664
 3296 0054 00430050 	 .word 1342194432
 3297              	 .cfi_endproc
 3298              	.LFE262:
 3300              	 .section .text.XMC_SCU_CLOCK_DisableLowPowerOscillator,"ax",%progbits
 3301              	 .align 2
 3302              	 .global XMC_SCU_CLOCK_DisableLowPowerOscillator
 3303              	 .thumb
 3304              	 .thumb_func
 3306              	XMC_SCU_CLOCK_DisableLowPowerOscillator:
 3307              	.LFB263:
1577:../Libraries/XMCLib/src/xmc4_scu.c **** 
1578:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the 32khz Ultra Low Power oscillator */
1579:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
1580:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3308              	 .loc 1 1580 0
 3309              	 .cfi_startproc
 3310              	 
 3311              	 
 3312              	 
1581:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 3313              	 .loc 1 1581 0
 3314 0000 054A     	 ldr r2,.L373
 3315              	.L371:
 3316              	 .loc 1 1581 0 is_stmt 0 discriminator 1
 3317 0002 D2F8C430 	 ldr r3,[r2,#196]
 3318 0006 13F0800F 	 tst r3,#128
 3319 000a FAD1     	 bne .L371
1582:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1583:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
1584:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1585:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 3320              	 .loc 1 1585 0 is_stmt 1
 3321 000c 034A     	 ldr r2,.L373+4
 3322 000e D369     	 ldr r3,[r2,#28]
 3323 0010 43F03003 	 orr r3,r3,#48
 3324 0014 D361     	 str r3,[r2,#28]
 3325 0016 7047     	 bx lr
 3326              	.L374:
 3327              	 .align 2
 3328              	.L373:
 3329 0018 00400050 	 .word 1342193664
 3330 001c 00430050 	 .word 1342194432
 3331              	 .cfi_endproc
 3332              	.LFE263:
 3334              	 .section .text.XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput,"ax",%progbits
 3335              	 .align 2
 3336              	 .global XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput
 3337              	 .thumb
 3338              	 .thumb_func
 3340              	XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput:
 3341              	.LFB264:
1586:../Libraries/XMCLib/src/xmc4_scu.c **** }
1587:../Libraries/XMCLib/src/xmc4_scu.c **** 
1588:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
1589:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3342              	 .loc 1 1589 0
 3343              	 .cfi_startproc
 3344              	 
 3345              	 
 3346              	 
1590:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 3347              	 .loc 1 1590 0
 3348 0000 054A     	 ldr r2,.L378
 3349              	.L376:
 3350              	 .loc 1 1590 0 is_stmt 0 discriminator 1
 3351 0002 D2F8C430 	 ldr r3,[r2,#196]
 3352 0006 13F0800F 	 tst r3,#128
 3353 000a FAD1     	 bne .L376
1591:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1592:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
1593:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1594:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 3354              	 .loc 1 1594 0 is_stmt 1
 3355 000c 034A     	 ldr r2,.L378+4
 3356 000e D369     	 ldr r3,[r2,#28]
 3357 0010 43F03103 	 orr r3,r3,#49
 3358 0014 D361     	 str r3,[r2,#28]
 3359 0016 7047     	 bx lr
 3360              	.L379:
 3361              	 .align 2
 3362              	.L378:
 3363 0018 00400050 	 .word 1342193664
 3364 001c 00430050 	 .word 1342194432
 3365              	 .cfi_endproc
 3366              	.LFE264:
 3368              	 .section .text.XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput,"ax",%progbits
 3369              	 .align 2
 3370              	 .global XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput
 3371              	 .thumb
 3372              	 .thumb_func
 3374              	XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput:
 3375              	.LFB265:
1595:../Libraries/XMCLib/src/xmc4_scu.c **** }
1596:../Libraries/XMCLib/src/xmc4_scu.c **** 
1597:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
1598:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3376              	 .loc 1 1598 0
 3377              	 .cfi_startproc
 3378              	 
 3379              	 
 3380              	 
1599:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 3381              	 .loc 1 1599 0
 3382 0000 064A     	 ldr r2,.L383
 3383              	.L381:
 3384              	 .loc 1 1599 0 is_stmt 0 discriminator 1
 3385 0002 D2F8C430 	 ldr r3,[r2,#196]
 3386 0006 13F0800F 	 tst r3,#128
 3387 000a FAD1     	 bne .L381
1600:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1601:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
1602:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1603:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_
 3388              	 .loc 1 1603 0 is_stmt 1
 3389 000c 044A     	 ldr r2,.L383+4
 3390 000e D369     	 ldr r3,[r2,#28]
 3391 0010 23F03103 	 bic r3,r3,#49
 3392 0014 43F02003 	 orr r3,r3,#32
 3393 0018 D361     	 str r3,[r2,#28]
 3394 001a 7047     	 bx lr
 3395              	.L384:
 3396              	 .align 2
 3397              	.L383:
 3398 001c 00400050 	 .word 1342193664
 3399 0020 00430050 	 .word 1342194432
 3400              	 .cfi_endproc
 3401              	.LFE265:
 3403              	 .section .text.XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus,"ax",%progbits
 3404              	 .align 2
 3405              	 .global XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus
 3406              	 .thumb
 3407              	 .thumb_func
 3409              	XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus:
 3410              	.LFB266:
1604:../Libraries/XMCLib/src/xmc4_scu.c ****                              (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTR
1605:../Libraries/XMCLib/src/xmc4_scu.c **** }
1606:../Libraries/XMCLib/src/xmc4_scu.c **** 
1607:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
1608:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3411              	 .loc 1 1608 0
 3412              	 .cfi_startproc
 3413              	 
 3414              	 
 3415              	 
1609:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 3416              	 .loc 1 1609 0
 3417 0000 024B     	 ldr r3,.L386
 3418 0002 9869     	 ldr r0,[r3,#24]
1610:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3419              	 .loc 1 1610 0
 3420 0004 00F00100 	 and r0,r0,#1
 3421 0008 7047     	 bx lr
 3422              	.L387:
 3423 000a 00BF     	 .align 2
 3424              	.L386:
 3425 000c 00430050 	 .word 1342194432
 3426              	 .cfi_endproc
 3427              	.LFE266:
 3429              	 .section .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator,"ax",%progbits
 3430              	 .align 2
 3431              	 .global XMC_SCU_CLOCK_EnableHighPerformanceOscillator
 3432              	 .thumb
 3433              	 .thumb_func
 3435              	XMC_SCU_CLOCK_EnableHighPerformanceOscillator:
 3436              	.LFB267:
1611:../Libraries/XMCLib/src/xmc4_scu.c **** 
1612:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable High Precision High Speed oscillator */
1613:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
1614:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3437              	 .loc 1 1614 0
 3438              	 .cfi_startproc
 3439              	 
 3440              	 
 3441 0000 70B5     	 push {r4,r5,r6,lr}
 3442              	.LCFI17:
 3443              	 .cfi_def_cfa_offset 16
 3444              	 .cfi_offset 4,-16
 3445              	 .cfi_offset 5,-12
 3446              	 .cfi_offset 6,-8
 3447              	 .cfi_offset 14,-4
1615:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 3448              	 .loc 1 1615 0
 3449 0002 0D4D     	 ldr r5,.L390
 3450 0004 6B68     	 ldr r3,[r5,#4]
 3451 0006 23F48033 	 bic r3,r3,#65536
 3452 000a 6B60     	 str r3,[r5,#4]
1616:../Libraries/XMCLib/src/xmc4_scu.c **** 
1617:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCH
 3453              	 .loc 1 1617 0
 3454 000c 0B4E     	 ldr r6,.L390+4
 3455 000e 7468     	 ldr r4,[r6,#4]
1618:../Libraries/XMCLib/src/xmc4_scu.c ****                                   (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OS
 3456              	 .loc 1 1618 0
 3457 0010 FFF7FEFF 	 bl OSCHP_GetFrequency
 3458              	.LVL180:
 3459 0014 0A4B     	 ldr r3,.L390+8
 3460 0016 A3FB0030 	 umull r3,r0,r3,r0
 3461 001a 030D     	 lsrs r3,r0,#20
 3462 001c 581E     	 subs r0,r3,#1
1617:../Libraries/XMCLib/src/xmc4_scu.c ****                                   (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OS
 3463              	 .loc 1 1617 0
 3464 001e 24F47023 	 bic r3,r4,#983040
 3465 0022 23F03003 	 bic r3,r3,#48
 3466 0026 43EA0043 	 orr r3,r3,r0,lsl#16
 3467 002a 7360     	 str r3,[r6,#4]
1619:../Libraries/XMCLib/src/xmc4_scu.c **** 
1620:../Libraries/XMCLib/src/xmc4_scu.c ****   /* restart OSC Watchdog */
1621:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 3468              	 .loc 1 1621 0
 3469 002c 6B68     	 ldr r3,[r5,#4]
 3470 002e 23F40033 	 bic r3,r3,#131072
 3471 0032 6B60     	 str r3,[r5,#4]
 3472 0034 70BD     	 pop {r4,r5,r6,pc}
 3473              	.L391:
 3474 0036 00BF     	 .align 2
 3475              	.L390:
 3476 0038 10470050 	 .word 1342195472
 3477 003c 00470050 	 .word 1342195456
 3478 0040 6BCA5F6B 	 .word 1801439851
 3479              	 .cfi_endproc
 3480              	.LFE267:
 3482              	 .section .text.XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable,"ax",%progbits
 3483              	 .align 2
 3484              	 .global XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable
 3485              	 .thumb
 3486              	 .thumb_func
 3488              	XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable:
 3489              	.LFB268:
1622:../Libraries/XMCLib/src/xmc4_scu.c **** }
1623:../Libraries/XMCLib/src/xmc4_scu.c **** 
1624:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
1625:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3490              	 .loc 1 1625 0
 3491              	 .cfi_startproc
 3492              	 
 3493              	 
 3494              	 
1626:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 3495              	 .loc 1 1626 0
 3496 0000 044B     	 ldr r3,.L393
 3497 0002 1868     	 ldr r0,[r3]
 3498 0004 00F46070 	 and r0,r0,#896
1627:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3499              	 .loc 1 1627 0
 3500 0008 B0F5607F 	 cmp r0,#896
 3501 000c 14BF     	 ite ne
 3502 000e 0020     	 movne r0,#0
 3503 0010 0120     	 moveq r0,#1
 3504 0012 7047     	 bx lr
 3505              	.L394:
 3506              	 .align 2
 3507              	.L393:
 3508 0014 10470050 	 .word 1342195472
 3509              	 .cfi_endproc
 3510              	.LFE268:
 3512              	 .section .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator,"ax",%progbits
 3513              	 .align 2
 3514              	 .global XMC_SCU_CLOCK_DisableHighPerformanceOscillator
 3515              	 .thumb
 3516              	 .thumb_func
 3518              	XMC_SCU_CLOCK_DisableHighPerformanceOscillator:
 3519              	.LFB269:
1628:../Libraries/XMCLib/src/xmc4_scu.c **** 
1629:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable High Precision High Speed oscillator */
1630:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
1631:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3520              	 .loc 1 1631 0
 3521              	 .cfi_startproc
 3522              	 
 3523              	 
 3524              	 
1632:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 3525              	 .loc 1 1632 0
 3526 0000 024A     	 ldr r2,.L396
 3527 0002 5368     	 ldr r3,[r2,#4]
 3528 0004 43F03003 	 orr r3,r3,#48
 3529 0008 5360     	 str r3,[r2,#4]
 3530 000a 7047     	 bx lr
 3531              	.L397:
 3532              	 .align 2
 3533              	.L396:
 3534 000c 00470050 	 .word 1342195456
 3535              	 .cfi_endproc
 3536              	.LFE269:
 3538              	 .section .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput,"ax",%progbits
 3539              	 .align 2
 3540              	 .global XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput
 3541              	 .thumb
 3542              	 .thumb_func
 3544              	XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput:
 3545              	.LFB270:
1633:../Libraries/XMCLib/src/xmc4_scu.c **** }
1634:../Libraries/XMCLib/src/xmc4_scu.c **** 
1635:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
1636:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3546              	 .loc 1 1636 0
 3547              	 .cfi_startproc
 3548              	 
 3549              	 
 3550              	 
1637:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 3551              	 .loc 1 1637 0
 3552 0000 024A     	 ldr r2,.L399
 3553 0002 5368     	 ldr r3,[r2,#4]
 3554 0004 43F00103 	 orr r3,r3,#1
 3555 0008 5360     	 str r3,[r2,#4]
 3556 000a 7047     	 bx lr
 3557              	.L400:
 3558              	 .align 2
 3559              	.L399:
 3560 000c 00470050 	 .word 1342195456
 3561              	 .cfi_endproc
 3562              	.LFE270:
 3564              	 .section .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput,"ax",%progbits
 3565              	 .align 2
 3566              	 .global XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput
 3567              	 .thumb
 3568              	 .thumb_func
 3570              	XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput:
 3571              	.LFB271:
1638:../Libraries/XMCLib/src/xmc4_scu.c **** }
1639:../Libraries/XMCLib/src/xmc4_scu.c **** 
1640:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
1641:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3572              	 .loc 1 1641 0
 3573              	 .cfi_startproc
 3574              	 
 3575              	 
 3576              	 
1642:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 3577              	 .loc 1 1642 0
 3578 0000 024A     	 ldr r2,.L402
 3579 0002 5368     	 ldr r3,[r2,#4]
 3580 0004 23F00103 	 bic r3,r3,#1
 3581 0008 5360     	 str r3,[r2,#4]
 3582 000a 7047     	 bx lr
 3583              	.L403:
 3584              	 .align 2
 3585              	.L402:
 3586 000c 00470050 	 .word 1342195456
 3587              	 .cfi_endproc
 3588              	.LFE271:
 3590              	 .section .text.XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus,"ax",%progbits
 3591              	 .align 2
 3592              	 .global XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus
 3593              	 .thumb
 3594              	 .thumb_func
 3596              	XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus:
 3597              	.LFB272:
1643:../Libraries/XMCLib/src/xmc4_scu.c **** }
1644:../Libraries/XMCLib/src/xmc4_scu.c **** 
1645:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
1646:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3598              	 .loc 1 1646 0
 3599              	 .cfi_startproc
 3600              	 
 3601              	 
 3602              	 
1647:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 3603              	 .loc 1 1647 0
 3604 0000 024B     	 ldr r3,.L405
 3605 0002 1868     	 ldr r0,[r3]
1648:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3606              	 .loc 1 1648 0
 3607 0004 00F00100 	 and r0,r0,#1
 3608 0008 7047     	 bx lr
 3609              	.L406:
 3610 000a 00BF     	 .align 2
 3611              	.L405:
 3612 000c 00470050 	 .word 1342195456
 3613              	 .cfi_endproc
 3614              	.LFE272:
 3616              	 .section .text.XMC_SCU_CLOCK_EnableSystemPll,"ax",%progbits
 3617              	 .align 2
 3618              	 .global XMC_SCU_CLOCK_EnableSystemPll
 3619              	 .thumb
 3620              	 .thumb_func
 3622              	XMC_SCU_CLOCK_EnableSystemPll:
 3623              	.LFB273:
1649:../Libraries/XMCLib/src/xmc4_scu.c **** 
1650:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable main PLL */
1651:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableSystemPll(void)
1652:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3624              	 .loc 1 1652 0
 3625              	 .cfi_startproc
 3626              	 
 3627              	 
 3628              	 
1653:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 3629              	 .loc 1 1653 0
 3630 0000 034A     	 ldr r2,.L408
 3631 0002 5368     	 ldr r3,[r2,#4]
 3632 0004 23F48033 	 bic r3,r3,#65536
 3633 0008 23F00203 	 bic r3,r3,#2
 3634 000c 5360     	 str r3,[r2,#4]
 3635 000e 7047     	 bx lr
 3636              	.L409:
 3637              	 .align 2
 3638              	.L408:
 3639 0010 10470050 	 .word 1342195472
 3640              	 .cfi_endproc
 3641              	.LFE273:
 3643              	 .section .text.XMC_SCU_CLOCK_DisableSystemPll,"ax",%progbits
 3644              	 .align 2
 3645              	 .global XMC_SCU_CLOCK_DisableSystemPll
 3646              	 .thumb
 3647              	 .thumb_func
 3649              	XMC_SCU_CLOCK_DisableSystemPll:
 3650              	.LFB274:
1654:../Libraries/XMCLib/src/xmc4_scu.c **** }
1655:../Libraries/XMCLib/src/xmc4_scu.c **** 
1656:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable main PLL */
1657:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableSystemPll(void)
1658:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3651              	 .loc 1 1658 0
 3652              	 .cfi_startproc
 3653              	 
 3654              	 
 3655              	 
1659:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 3656              	 .loc 1 1659 0
 3657 0000 034A     	 ldr r2,.L411
 3658 0002 5368     	 ldr r3,[r2,#4]
 3659 0004 43F48033 	 orr r3,r3,#65536
 3660 0008 43F00203 	 orr r3,r3,#2
 3661 000c 5360     	 str r3,[r2,#4]
 3662 000e 7047     	 bx lr
 3663              	.L412:
 3664              	 .align 2
 3665              	.L411:
 3666 0010 10470050 	 .word 1342195472
 3667              	 .cfi_endproc
 3668              	.LFE274:
 3670              	 .section .text.XMC_SCU_CLOCK_StopSystemPll,"ax",%progbits
 3671              	 .align 2
 3672              	 .global XMC_SCU_CLOCK_StopSystemPll
 3673              	 .thumb
 3674              	 .thumb_func
 3676              	XMC_SCU_CLOCK_StopSystemPll:
 3677              	.LFB276:
1660:../Libraries/XMCLib/src/xmc4_scu.c **** }
1661:../Libraries/XMCLib/src/xmc4_scu.c **** 
1662:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure main PLL */
1663:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
1664:../Libraries/XMCLib/src/xmc4_scu.c ****                                   XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
1665:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t pdiv,
1666:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t ndiv,
1667:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t kdiv)
1668:../Libraries/XMCLib/src/xmc4_scu.c **** {
1669:../Libraries/XMCLib/src/xmc4_scu.c **** 
1670:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
1671:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t kdiv_temp;
1672:../Libraries/XMCLib/src/xmc4_scu.c **** 
1673:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemPllClockSource(source);
1674:../Libraries/XMCLib/src/xmc4_scu.c **** 
1675:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
1676:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1677:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Calculate initial step to be close to fOFI */
1678:../Libraries/XMCLib/src/xmc4_scu.c ****     if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
1679:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1680:../Libraries/XMCLib/src/xmc4_scu.c ****       vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
1681:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1682:../Libraries/XMCLib/src/xmc4_scu.c ****     else
1683:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1684:../Libraries/XMCLib/src/xmc4_scu.c ****       vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
1685:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1686:../Libraries/XMCLib/src/xmc4_scu.c ****     vco_frequency = ((vco_frequency * ndiv) / pdiv);
1687:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
1688:../Libraries/XMCLib/src/xmc4_scu.c **** 
1689:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to prescaler mode */
1690:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
1691:../Libraries/XMCLib/src/xmc4_scu.c **** 
1692:../Libraries/XMCLib/src/xmc4_scu.c ****     /* disconnect Oscillator from PLL */
1693:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
1694:../Libraries/XMCLib/src/xmc4_scu.c **** 
1695:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Setup divider settings for main PLL */
1696:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_
1697:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
1698:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
1699:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
1700:../Libraries/XMCLib/src/xmc4_scu.c **** 
1701:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
1702:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
1703:../Libraries/XMCLib/src/xmc4_scu.c **** 
1704:../Libraries/XMCLib/src/xmc4_scu.c ****     /* connect Oscillator to PLL */
1705:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
1706:../Libraries/XMCLib/src/xmc4_scu.c **** 
1707:../Libraries/XMCLib/src/xmc4_scu.c ****     /* restart PLL Lock detection */
1708:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
1709:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
1710:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1711:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for PLL Lock */
1712:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1713:../Libraries/XMCLib/src/xmc4_scu.c **** 
1714:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to normal mode */
1715:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
1716:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
1717:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1718:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for normal mode */
1719:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1720:../Libraries/XMCLib/src/xmc4_scu.c **** 
1721:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Ramp up PLL frequency in steps */
1722:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (vco_frequency / 60UL) >> 22;
1723:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
1724:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1725:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
1726:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1727:../Libraries/XMCLib/src/xmc4_scu.c **** 
1728:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (vco_frequency / 90UL) >> 22;
1729:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
1730:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1731:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
1732:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1733:../Libraries/XMCLib/src/xmc4_scu.c **** 
1734:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
1735:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1736:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1737:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1738:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
1739:../Libraries/XMCLib/src/xmc4_scu.c ****                        ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
1740:../Libraries/XMCLib/src/xmc4_scu.c **** 
1741:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to prescaler mode */
1742:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
1743:../Libraries/XMCLib/src/xmc4_scu.c **** 
1744:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
1745:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1746:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for prescaler mode */
1747:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1748:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1749:../Libraries/XMCLib/src/xmc4_scu.c **** }
1750:../Libraries/XMCLib/src/xmc4_scu.c **** 
1751:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to stop main PLL operation */
1752:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StopSystemPll(void)
1753:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3678              	 .loc 1 1753 0
 3679              	 .cfi_startproc
 3680              	 
 3681              	 
 3682              	 
1754:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 3683              	 .loc 1 1754 0
 3684 0000 024A     	 ldr r2,.L414
 3685 0002 5368     	 ldr r3,[r2,#4]
 3686 0004 43F48033 	 orr r3,r3,#65536
 3687 0008 5360     	 str r3,[r2,#4]
 3688 000a 7047     	 bx lr
 3689              	.L415:
 3690              	 .align 2
 3691              	.L414:
 3692 000c 10470050 	 .word 1342195472
 3693              	 .cfi_endproc
 3694              	.LFE276:
 3696              	 .section .text.XMC_SCU_CLOCK_StepSystemPllFrequency,"ax",%progbits
 3697              	 .align 2
 3698              	 .global XMC_SCU_CLOCK_StepSystemPllFrequency
 3699              	 .thumb
 3700              	 .thumb_func
 3702              	XMC_SCU_CLOCK_StepSystemPllFrequency:
 3703              	.LFB277:
1755:../Libraries/XMCLib/src/xmc4_scu.c **** }
1756:../Libraries/XMCLib/src/xmc4_scu.c **** 
1757:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to step up/down the main PLL frequency */
1758:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
1759:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3704              	 .loc 1 1759 0
 3705              	 .cfi_startproc
 3706              	 
 3707              	 
 3708              	.LVL181:
 3709 0000 08B5     	 push {r3,lr}
 3710              	.LCFI18:
 3711              	 .cfi_def_cfa_offset 8
 3712              	 .cfi_offset 3,-8
 3713              	 .cfi_offset 14,-4
1760:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 3714              	 .loc 1 1760 0
 3715 0002 064A     	 ldr r2,.L418
 3716 0004 9368     	 ldr r3,[r2,#8]
1761:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 3717              	 .loc 1 1761 0
 3718 0006 0138     	 subs r0,r0,#1
 3719              	.LVL182:
1760:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 3720              	 .loc 1 1760 0
 3721 0008 23F4FE03 	 bic r3,r3,#8323072
 3722 000c 43EA0043 	 orr r3,r3,r0,lsl#16
 3723 0010 9360     	 str r3,[r2,#8]
1762:../Libraries/XMCLib/src/xmc4_scu.c **** 
1763:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_lDelay(50U);
 3724              	 .loc 1 1763 0
 3725 0012 3220     	 movs r0,#50
 3726              	.LVL183:
 3727 0014 FFF7FEFF 	 bl XMC_SCU_lDelay
 3728              	.LVL184:
 3729 0018 08BD     	 pop {r3,pc}
 3730              	.L419:
 3731 001a 00BF     	 .align 2
 3732              	.L418:
 3733 001c 10470050 	 .word 1342195472
 3734              	 .cfi_endproc
 3735              	.LFE277:
 3737              	 .section .text.XMC_SCU_CLOCK_StartSystemPll,"ax",%progbits
 3738              	 .align 2
 3739              	 .global XMC_SCU_CLOCK_StartSystemPll
 3740              	 .thumb
 3741              	 .thumb_func
 3743              	XMC_SCU_CLOCK_StartSystemPll:
 3744              	.LFB275:
1668:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3745              	 .loc 1 1668 0
 3746              	 .cfi_startproc
 3747              	 
 3748              	 
 3749              	.LVL185:
 3750 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 3751              	.LCFI19:
 3752              	 .cfi_def_cfa_offset 24
 3753              	 .cfi_offset 4,-24
 3754              	 .cfi_offset 5,-20
 3755              	 .cfi_offset 6,-16
 3756              	 .cfi_offset 7,-12
 3757              	 .cfi_offset 8,-8
 3758              	 .cfi_offset 14,-4
 3759 0004 8046     	 mov r8,r0
 3760 0006 0C46     	 mov r4,r1
 3761 0008 1746     	 mov r7,r2
 3762 000a 1E46     	 mov r6,r3
 3763 000c 069D     	 ldr r5,[sp,#24]
1673:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3764              	 .loc 1 1673 0
 3765 000e FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemPllClockSource
 3766              	.LVL186:
1675:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 3767              	 .loc 1 1675 0
 3768 0012 012C     	 cmp r4,#1
 3769 0014 5AD1     	 bne .L421
1678:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3770              	 .loc 1 1678 0
 3771 0016 B8F1000F 	 cmp r8,#0
 3772 001a 07D1     	 bne .L429
1680:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 3773              	 .loc 1 1680 0
 3774 001c FFF7FEFF 	 bl OSCHP_GetFrequency
 3775              	.LVL187:
 3776 0020 334C     	 ldr r4,.L434
 3777 0022 A4FB0034 	 umull r3,r4,r4,r0
 3778 0026 A40C     	 lsrs r4,r4,#18
 3779 0028 A405     	 lsls r4,r4,#22
 3780              	.LVL188:
 3781 002a 01E0     	 b .L422
 3782              	.LVL189:
 3783              	.L429:
1684:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 3784              	 .loc 1 1684 0
 3785 002c 4FF0C064 	 mov r4,#100663296
 3786              	.L422:
 3787              	.LVL190:
1686:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 3788              	 .loc 1 1686 0
 3789 0030 06FB04F4 	 mul r4,r6,r4
 3790              	.LVL191:
 3791 0034 B4FBF7F4 	 udiv r4,r4,r7
 3792              	.LVL192:
1690:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3793              	 .loc 1 1690 0
 3794 0038 2E49     	 ldr r1,.L434+4
 3795 003a 4B68     	 ldr r3,[r1,#4]
 3796 003c 43F00103 	 orr r3,r3,#1
 3797 0040 4B60     	 str r3,[r1,#4]
1693:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3798              	 .loc 1 1693 0
 3799 0042 4B68     	 ldr r3,[r1,#4]
 3800 0044 43F01003 	 orr r3,r3,#16
 3801 0048 4B60     	 str r3,[r1,#4]
1696:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 3802              	 .loc 1 1696 0
 3803 004a 8A68     	 ldr r2,[r1,#8]
1699:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3804              	 .loc 1 1699 0
 3805 004c 013F     	 subs r7,r7,#1
 3806              	.LVL193:
1696:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 3807              	 .loc 1 1696 0
 3808 004e 2A4B     	 ldr r3,.L434+8
 3809 0050 1340     	 ands r3,r3,r2
 3810 0052 43EA0763 	 orr r3,r3,r7,lsl#24
1697:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 3811              	 .loc 1 1697 0
 3812 0056 013E     	 subs r6,r6,#1
 3813              	.LVL194:
 3814 0058 43EA0623 	 orr r3,r3,r6,lsl#8
1687:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3815              	 .loc 1 1687 0
 3816 005c 274A     	 ldr r2,.L434+12
 3817 005e A2FB0402 	 umull r0,r2,r2,r4
 3818 0062 920E     	 lsrs r2,r2,#26
1698:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 3819              	 .loc 1 1698 0
 3820 0064 013A     	 subs r2,r2,#1
1696:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 3821              	 .loc 1 1696 0
 3822 0066 43EA0243 	 orr r3,r3,r2,lsl#16
 3823 006a 8B60     	 str r3,[r1,#8]
1702:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3824              	 .loc 1 1702 0
 3825 006c 4B68     	 ldr r3,[r1,#4]
 3826 006e 43F04003 	 orr r3,r3,#64
 3827 0072 4B60     	 str r3,[r1,#4]
1705:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3828              	 .loc 1 1705 0
 3829 0074 4B68     	 ldr r3,[r1,#4]
 3830 0076 23F01003 	 bic r3,r3,#16
 3831 007a 4B60     	 str r3,[r1,#4]
1708:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 3832              	 .loc 1 1708 0
 3833 007c 4B68     	 ldr r3,[r1,#4]
 3834 007e 43F48023 	 orr r3,r3,#262144
 3835 0082 4B60     	 str r3,[r1,#4]
1709:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3836              	 .loc 1 1709 0
 3837 0084 0A46     	 mov r2,r1
 3838              	.L423:
1709:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3839              	 .loc 1 1709 0 is_stmt 0 discriminator 1
 3840 0086 1368     	 ldr r3,[r2]
 3841 0088 13F0040F 	 tst r3,#4
 3842 008c FBD0     	 beq .L423
1715:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 3843              	 .loc 1 1715 0 is_stmt 1
 3844 008e 194A     	 ldr r2,.L434+4
 3845 0090 5368     	 ldr r3,[r2,#4]
 3846 0092 23F00103 	 bic r3,r3,#1
 3847 0096 5360     	 str r3,[r2,#4]
 3848              	.L424:
1716:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3849              	 .loc 1 1716 0 discriminator 1
 3850 0098 1368     	 ldr r3,[r2]
 3851 009a 13F0010F 	 tst r3,#1
 3852 009e FBD1     	 bne .L424
1722:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
 3853              	 .loc 1 1722 0
 3854 00a0 1748     	 ldr r0,.L434+16
 3855 00a2 A0FB0430 	 umull r3,r0,r0,r4
 3856 00a6 C00E     	 lsrs r0,r0,#27
 3857              	.LVL195:
1723:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3858              	 .loc 1 1723 0
 3859 00a8 A842     	 cmp r0,r5
 3860 00aa 01D9     	 bls .L425
1725:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 3861              	 .loc 1 1725 0
 3862 00ac FFF7FEFF 	 bl XMC_SCU_CLOCK_StepSystemPllFrequency
 3863              	.LVL196:
 3864              	.L425:
1728:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
 3865              	 .loc 1 1728 0
 3866 00b0 6408     	 lsrs r4,r4,#1
 3867              	.LVL197:
 3868 00b2 1448     	 ldr r0,.L434+20
 3869 00b4 A0FB0430 	 umull r3,r0,r0,r4
 3870 00b8 C00E     	 lsrs r0,r0,#27
 3871              	.LVL198:
1729:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3872              	 .loc 1 1729 0
 3873 00ba 8542     	 cmp r5,r0
 3874 00bc 01D2     	 bcs .L426
1731:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 3875              	 .loc 1 1731 0
 3876 00be FFF7FEFF 	 bl XMC_SCU_CLOCK_StepSystemPllFrequency
 3877              	.LVL199:
 3878              	.L426:
1734:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 3879              	 .loc 1 1734 0
 3880 00c2 2846     	 mov r0,r5
 3881 00c4 FFF7FEFF 	 bl XMC_SCU_CLOCK_StepSystemPllFrequency
 3882              	.LVL200:
 3883 00c8 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 3884              	.LVL201:
 3885              	.L421:
1738:../Libraries/XMCLib/src/xmc4_scu.c ****                        ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 3886              	 .loc 1 1738 0
 3887 00cc 094A     	 ldr r2,.L434+4
 3888 00ce 9368     	 ldr r3,[r2,#8]
1739:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3889              	 .loc 1 1739 0
 3890 00d0 013D     	 subs r5,r5,#1
1738:../Libraries/XMCLib/src/xmc4_scu.c ****                        ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 3891              	 .loc 1 1738 0
 3892 00d2 23F07F03 	 bic r3,r3,#127
 3893 00d6 2B43     	 orrs r3,r3,r5
 3894 00d8 9360     	 str r3,[r2,#8]
1742:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3895              	 .loc 1 1742 0
 3896 00da 5368     	 ldr r3,[r2,#4]
 3897 00dc 43F00103 	 orr r3,r3,#1
 3898 00e0 5360     	 str r3,[r2,#4]
 3899              	.L428:
1744:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3900              	 .loc 1 1744 0 discriminator 1
 3901 00e2 1368     	 ldr r3,[r2]
 3902 00e4 13F0010F 	 tst r3,#1
 3903 00e8 FBD0     	 beq .L428
 3904 00ea BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 3905              	.LVL202:
 3906              	.L435:
 3907 00ee 00BF     	 .align 2
 3908              	.L434:
 3909 00f0 83DE1B43 	 .word 1125899907
 3910 00f4 10470050 	 .word 1342195472
 3911 00f8 FF8080F0 	 .word -260013825
 3912 00fc ABAAAAAA 	 .word -1431655765
 3913 0100 89888888 	 .word -2004318071
 3914 0104 B7600BB6 	 .word -1240768329
 3915              	 .cfi_endproc
 3916              	.LFE275:
 3918              	 .section .text.XMC_SCU_CLOCK_Init,"ax",%progbits
 3919              	 .align 2
 3920              	 .global XMC_SCU_CLOCK_Init
 3921              	 .thumb
 3922              	 .thumb_func
 3924              	XMC_SCU_CLOCK_Init:
 3925              	.LFB191:
 500:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fsys_clkdiv != 0);
 3926              	 .loc 1 500 0
 3927              	 .cfi_startproc
 3928              	 
 3929              	 
 3930              	.LVL203:
 3931 0000 30B5     	 push {r4,r5,lr}
 3932              	.LCFI20:
 3933              	 .cfi_def_cfa_offset 12
 3934              	 .cfi_offset 4,-12
 3935              	 .cfi_offset 5,-8
 3936              	 .cfi_offset 14,-4
 3937 0002 83B0     	 sub sp,sp,#12
 3938              	.LCFI21:
 3939              	 .cfi_def_cfa_offset 24
 3940 0004 0446     	 mov r4,r0
 523:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3941              	 .loc 1 523 0
 3942 0006 0020     	 movs r0,#0
 3943              	.LVL204:
 3944 0008 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockSource
 3945              	.LVL205:
 525:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3946              	 .loc 1 525 0
 3947 000c FFF7FEFF 	 bl XMC_SCU_HIB_EnableHibernateDomain
 3948              	.LVL206:
 527:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 3949              	 .loc 1 527 0
 3950 0010 E379     	 ldrb r3,[r4,#7]
 3951 0012 2BB1     	 cbz r3,.L437
 529:../Libraries/XMCLib/src/xmc4_scu.c ****     while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 3952              	 .loc 1 529 0
 3953 0014 FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableLowPowerOscillator
 3954              	.LVL207:
 3955              	.L438:
 530:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 3956              	 .loc 1 530 0 discriminator 1
 3957 0018 FFF7FEFF 	 bl XMC_SCU_CLOCK_IsLowPowerOscillatorStable
 3958              	.LVL208:
 3959 001c 0028     	 cmp r0,#0
 3960 001e FBD0     	 beq .L438
 3961              	.L437:
 533:../Libraries/XMCLib/src/xmc4_scu.c ****   while (XMC_SCU_GetMirrorStatus() != 0)
 3962              	 .loc 1 533 0
 3963 0020 607A     	 ldrb r0,[r4,#9]
 3964 0022 FFF7FEFF 	 bl XMC_SCU_HIB_SetStandbyClockSource
 3965              	.LVL209:
 3966              	.LBB32:
 3967              	.LBB33:
 3968              	 .loc 3 545 0
 3969 0026 1B4A     	 ldr r2,.L449
 3970              	.L439:
 3971              	 .loc 3 545 0 is_stmt 0 discriminator 1
 3972 0028 D2F8C430 	 ldr r3,[r2,#196]
 3973              	.LBE33:
 3974              	.LBE32:
 534:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 3975              	 .loc 1 534 0 is_stmt 1 discriminator 1
 3976 002c 002B     	 cmp r3,#0
 3977 002e FBD1     	 bne .L439
 539:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3978              	 .loc 1 539 0
 3979 0030 207A     	 ldrb r0,[r4,#8]
 3980 0032 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetBackupClockCalibrationMode
 3981              	.LVL210:
 541:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 3982              	 .loc 1 541 0
 3983 0036 207C     	 ldrb r0,[r4,#16]
 3984 0038 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockDivider
 3985              	.LVL211:
 542:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 3986              	 .loc 1 542 0
 3987 003c 607C     	 ldrb r0,[r4,#17]
 3988 003e FFF7FEFF 	 bl XMC_SCU_CLOCK_SetCpuClockDivider
 3989              	.LVL212:
 543:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 3990              	 .loc 1 543 0
 3991 0042 A07C     	 ldrb r0,[r4,#18]
 3992 0044 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetCcuClockDivider
 3993              	.LVL213:
 544:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3994              	 .loc 1 544 0
 3995 0048 E07C     	 ldrb r0,[r4,#19]
 3996 004a FFF7FEFF 	 bl XMC_SCU_CLOCK_SetPeripheralClockDivider
 3997              	.LVL214:
 546:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 3998              	 .loc 1 546 0
 3999 004e A379     	 ldrb r3,[r4,#6]
 4000 0050 2BB1     	 cbz r3,.L440
 548:../Libraries/XMCLib/src/xmc4_scu.c ****     while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 4001              	 .loc 1 548 0
 4002 0052 FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableHighPerformanceOscillator
 4003              	.LVL215:
 4004              	.L441:
 549:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 4005              	 .loc 1 549 0 discriminator 1
 4006 0056 FFF7FEFF 	 bl XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable
 4007              	.LVL216:
 4008 005a 0028     	 cmp r0,#0
 4009 005c FBD0     	 beq .L441
 4010              	.L440:
 552:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 4011              	 .loc 1 552 0
 4012 005e E378     	 ldrb r3,[r4,#3]
 4013 0060 13B9     	 cbnz r3,.L442
 554:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 4014              	 .loc 1 554 0
 4015 0062 FFF7FEFF 	 bl XMC_SCU_CLOCK_DisableSystemPll
 4016              	.LVL217:
 4017 0066 09E0     	 b .L443
 4018              	.L442:
 559:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 4019              	 .loc 1 559 0
 4020 0068 FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableSystemPll
 4021              	.LVL218:
 560:../Libraries/XMCLib/src/xmc4_scu.c ****                                  config->syspll_config.mode,
 4022              	 .loc 1 560 0
 4023 006c A088     	 ldrh r0,[r4,#4]
 4024 006e E178     	 ldrb r1,[r4,#3]
 4025 0070 6278     	 ldrb r2,[r4,#1]
 4026 0072 2378     	 ldrb r3,[r4]
 4027 0074 A578     	 ldrb r5,[r4,#2]
 4028 0076 0095     	 str r5,[sp]
 4029 0078 FFF7FEFF 	 bl XMC_SCU_CLOCK_StartSystemPll
 4030              	.LVL219:
 4031              	.L443:
 568:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 4032              	 .loc 1 568 0
 4033 007c E368     	 ldr r3,[r4,#12]
 4034 007e B3F5803F 	 cmp r3,#65536
 4035 0082 03D1     	 bne .L444
 570:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 4036              	 .loc 1 570 0
 4037 0084 4FF48030 	 mov r0,#65536
 4038 0088 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockSource
 4039              	.LVL220:
 4040              	.L444:
 572:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4041              	 .loc 1 572 0
 4042 008c FFF7FEFF 	 bl SystemCoreClockUpdate
 4043              	.LVL221:
 573:../Libraries/XMCLib/src/xmc4_scu.c **** 
 4044              	 .loc 1 573 0
 4045 0090 03B0     	 add sp,sp,#12
 4046              	.LCFI22:
 4047              	 .cfi_def_cfa_offset 12
 4048              	 
 4049 0092 30BD     	 pop {r4,r5,pc}
 4050              	.LVL222:
 4051              	.L450:
 4052              	 .align 2
 4053              	.L449:
 4054 0094 00400050 	 .word 1342193664
 4055              	 .cfi_endproc
 4056              	.LFE191:
 4058              	 .section .text.XMC_SCU_CLOCK_IsSystemPllLocked,"ax",%progbits
 4059              	 .align 2
 4060              	 .global XMC_SCU_CLOCK_IsSystemPllLocked
 4061              	 .thumb
 4062              	 .thumb_func
 4064              	XMC_SCU_CLOCK_IsSystemPllLocked:
 4065              	.LFB278:
1764:../Libraries/XMCLib/src/xmc4_scu.c **** }
1765:../Libraries/XMCLib/src/xmc4_scu.c **** 
1766:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check main PLL is locked or not */
1767:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
1768:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4066              	 .loc 1 1768 0
 4067              	 .cfi_startproc
 4068              	 
 4069              	 
 4070              	 
1769:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 4071              	 .loc 1 1769 0
 4072 0000 024B     	 ldr r3,.L452
 4073 0002 1868     	 ldr r0,[r3]
1770:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4074              	 .loc 1 1770 0
 4075 0004 C0F38000 	 ubfx r0,r0,#2,#1
 4076 0008 7047     	 bx lr
 4077              	.L453:
 4078 000a 00BF     	 .align 2
 4079              	.L452:
 4080 000c 10470050 	 .word 1342195472
 4081              	 .cfi_endproc
 4082              	.LFE278:
 4084              	 .section .text.XMC_SCU_INTERRUPT_SetEventHandler,"ax",%progbits
 4085              	 .align 2
 4086              	 .global XMC_SCU_INTERRUPT_SetEventHandler
 4087              	 .thumb
 4088              	 .thumb_func
 4090              	XMC_SCU_INTERRUPT_SetEventHandler:
 4091              	.LFB279:
1771:../Libraries/XMCLib/src/xmc4_scu.c **** 
1772:../Libraries/XMCLib/src/xmc4_scu.c **** /*
1773:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to assign the event handler function to be executed on occurrence of the selected event.
1774:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1775:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
1776:../Libraries/XMCLib/src/xmc4_scu.c ****                                                    const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
1777:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4092              	 .loc 1 1777 0
 4093              	 .cfi_startproc
 4094              	 
 4095              	 
 4096              	 
 4097              	.LVL223:
1778:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index;
1779:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_STATUS_t status;
1780:../Libraries/XMCLib/src/xmc4_scu.c ****   
1781:../Libraries/XMCLib/src/xmc4_scu.c ****   index = 0U;
1782:../Libraries/XMCLib/src/xmc4_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 4098              	 .loc 1 1782 0
 4099 0000 10F0010F 	 tst r0,#1
 4100 0004 0DD1     	 bne .L459
 4101 0006 0023     	 movs r3,#0
 4102              	.LVL224:
 4103              	.L457:
1783:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1784:../Libraries/XMCLib/src/xmc4_scu.c ****     index++;
 4104              	 .loc 1 1784 0
 4105 0008 0133     	 adds r3,r3,#1
 4106              	.LVL225:
1782:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 4107              	 .loc 1 1782 0
 4108 000a 20FA03F2 	 lsr r2,r0,r3
 4109 000e 12F0010F 	 tst r2,#1
 4110 0012 03D1     	 bne .L456
1782:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 4111              	 .loc 1 1782 0 is_stmt 0 discriminator 1
 4112 0014 202B     	 cmp r3,#32
 4113 0016 F7D1     	 bne .L457
1785:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1786:../Libraries/XMCLib/src/xmc4_scu.c ****   
1787:../Libraries/XMCLib/src/xmc4_scu.c ****   if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
1788:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1789:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 4114              	 .loc 1 1789 0 is_stmt 1
 4115 0018 0120     	 movs r0,#1
 4116              	.LVL226:
 4117 001a 7047     	 bx lr
 4118              	.LVL227:
 4119              	.L456:
1787:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 4120              	 .loc 1 1787 0
 4121 001c 202B     	 cmp r3,#32
 4122 001e 01D1     	 bne .L455
 4123 0020 05E0     	 b .L460
 4124              	.LVL228:
 4125              	.L459:
1781:../Libraries/XMCLib/src/xmc4_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 4126              	 .loc 1 1781 0
 4127 0022 0023     	 movs r3,#0
 4128              	.LVL229:
 4129              	.L455:
1790:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1791:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1792:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1793:../Libraries/XMCLib/src/xmc4_scu.c ****     event_handler_list[index] = handler;
 4130              	 .loc 1 1793 0
 4131 0024 034A     	 ldr r2,.L462
 4132 0026 42F82310 	 str r1,[r2,r3,lsl#2]
 4133              	.LVL230:
1794:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_OK;      
 4134              	 .loc 1 1794 0
 4135 002a 0020     	 movs r0,#0
 4136              	.LVL231:
 4137 002c 7047     	 bx lr
 4138              	.LVL232:
 4139              	.L460:
1789:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 4140              	 .loc 1 1789 0
 4141 002e 0120     	 movs r0,#1
 4142              	.LVL233:
1795:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1796:../Libraries/XMCLib/src/xmc4_scu.c ****   
1797:../Libraries/XMCLib/src/xmc4_scu.c ****   return (status);
1798:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4143              	 .loc 1 1798 0
 4144 0030 7047     	 bx lr
 4145              	.L463:
 4146 0032 00BF     	 .align 2
 4147              	.L462:
 4148 0034 00000000 	 .word event_handler_list
 4149              	 .cfi_endproc
 4150              	.LFE279:
 4152              	 .section .text.XMC_SCU_IRQHandler,"ax",%progbits
 4153              	 .align 2
 4154              	 .global XMC_SCU_IRQHandler
 4155              	 .thumb
 4156              	 .thumb_func
 4158              	XMC_SCU_IRQHandler:
 4159              	.LFB280:
1799:../Libraries/XMCLib/src/xmc4_scu.c **** 
1800:../Libraries/XMCLib/src/xmc4_scu.c **** /*
1801:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to execute callback functions for multiple events.
1802:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1803:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_IRQHandler(uint32_t sr_num)
1804:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4160              	 .loc 1 1804 0
 4161              	 .cfi_startproc
 4162              	 
 4163              	 
 4164              	.LVL234:
 4165 0000 10B5     	 push {r4,lr}
 4166              	.LCFI23:
 4167              	 .cfi_def_cfa_offset 8
 4168              	 .cfi_offset 4,-8
 4169              	 .cfi_offset 14,-4
 4170              	.LVL235:
 4171              	.LBB38:
 4172              	.LBB39:
 242:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4173              	 .loc 1 242 0
 4174 0002 0E4B     	 ldr r3,.L473
 4175 0004 5968     	 ldr r1,[r3,#4]
 4176              	.LBE39:
 4177              	.LBE38:
1805:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index;
1806:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t event;
1807:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
1808:../Libraries/XMCLib/src/xmc4_scu.c ****   
1809:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_UNUSED_ARG(sr_num);
1810:../Libraries/XMCLib/src/xmc4_scu.c ****   
1811:../Libraries/XMCLib/src/xmc4_scu.c ****   index = 0U;
1812:../Libraries/XMCLib/src/xmc4_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus();
1813:../Libraries/XMCLib/src/xmc4_scu.c ****   while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
1814:../Libraries/XMCLib/src/xmc4_scu.c ****   {    
1815:../Libraries/XMCLib/src/xmc4_scu.c ****     if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 4178              	 .loc 1 1815 0
 4179 0006 11F0010F 	 tst r1,#1
 4180 000a 07D1     	 bne .L470
 4181 000c 0123     	 movs r3,#1
 4182              	.LVL236:
 4183              	.L469:
 4184 000e 1C46     	 mov r4,r3
 4185 0010 21FA03F2 	 lsr r2,r1,r3
 4186 0014 12F0010F 	 tst r2,#1
 4187 0018 0CD0     	 beq .L466
 4188 001a 01E0     	 b .L465
 4189              	.LVL237:
 4190              	.L470:
 4191 001c 0024     	 movs r4,#0
1811:../Libraries/XMCLib/src/xmc4_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus();
 4192              	 .loc 1 1811 0
 4193 001e 2346     	 mov r3,r4
 4194              	.LVL238:
 4195              	.L465:
1816:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1817:../Libraries/XMCLib/src/xmc4_scu.c ****       event_handler = event_handler_list[index];
 4196              	 .loc 1 1817 0
 4197 0020 074A     	 ldr r2,.L473+4
 4198 0022 52F82330 	 ldr r3,[r2,r3,lsl#2]
 4199              	.LVL239:
1818:../Libraries/XMCLib/src/xmc4_scu.c ****       if (event_handler != NULL)
 4200              	 .loc 1 1818 0
 4201 0026 03B1     	 cbz r3,.L467
1819:../Libraries/XMCLib/src/xmc4_scu.c ****       {
1820:../Libraries/XMCLib/src/xmc4_scu.c ****           (event_handler)();
 4202              	 .loc 1 1820 0
 4203 0028 9847     	 blx r3
 4204              	.LVL240:
 4205              	.L467:
1821:../Libraries/XMCLib/src/xmc4_scu.c ****       }
1822:../Libraries/XMCLib/src/xmc4_scu.c ****       
1823:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 4206              	 .loc 1 1823 0
 4207 002a 0123     	 movs r3,#1
 4208 002c A340     	 lsls r3,r3,r4
 4209              	.LVL241:
 4210              	.LBB40:
 4211              	.LBB41:
 248:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4212              	 .loc 1 248 0
 4213 002e 034A     	 ldr r2,.L473
 4214 0030 D360     	 str r3,[r2,#12]
 4215 0032 10BD     	 pop {r4,pc}
 4216              	.LVL242:
 4217              	.L466:
 4218              	.LBE41:
 4219              	.LBE40:
1824:../Libraries/XMCLib/src/xmc4_scu.c ****       
1825:../Libraries/XMCLib/src/xmc4_scu.c ****       break;
1826:../Libraries/XMCLib/src/xmc4_scu.c ****     }   
1827:../Libraries/XMCLib/src/xmc4_scu.c ****     index++;    
 4220              	 .loc 1 1827 0
 4221 0034 0133     	 adds r3,r3,#1
 4222              	.LVL243:
1813:../Libraries/XMCLib/src/xmc4_scu.c ****   {    
 4223              	 .loc 1 1813 0
 4224 0036 202B     	 cmp r3,#32
 4225 0038 E9D1     	 bne .L469
 4226 003a 10BD     	 pop {r4,pc}
 4227              	.L474:
 4228              	 .align 2
 4229              	.L473:
 4230 003c 74400050 	 .word 1342193780
 4231 0040 00000000 	 .word event_handler_list
 4232              	 .cfi_endproc
 4233              	.LFE280:
 4235              	 .comm event_handler_list,128,4
 4236              	 .text
 4237              	.Letext0:
 4238              	 .file 4 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 4239              	 .file 5 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 4240              	 .file 6 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 4241              	 .file 7 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include/core_cm4.h"
 4242              	 .file 8 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc4_scu.c
    {standard input}:19     .text.XMC_SCU_lDelay:00000000 $t
    {standard input}:23     .text.XMC_SCU_lDelay:00000000 XMC_SCU_lDelay
    {standard input}:69     .text.XMC_SCU_lDelay:00000028 $d
    {standard input}:75     .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 $t
    {standard input}:80     .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 XMC_SCU_INTERRUPT_EnableEvent
    {standard input}:98     .text.XMC_SCU_INTERRUPT_EnableEvent:0000000c $d
    {standard input}:103    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 $t
    {standard input}:108    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 XMC_SCU_INTERRUPT_DisableEvent
    {standard input}:126    .text.XMC_SCU_INTERRUPT_DisableEvent:0000000c $d
    {standard input}:131    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 $t
    {standard input}:136    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 XMC_SCU_INTERRUPT_TriggerEvent
    {standard input}:154    .text.XMC_SCU_INTERRUPT_TriggerEvent:0000000c $d
    {standard input}:159    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 $t
    {standard input}:164    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 XMC_SCU_INTERUPT_GetEventStatus
    {standard input}:179    .text.XMC_SCU_INTERUPT_GetEventStatus:00000008 $d
    {standard input}:184    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 $t
    {standard input}:189    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 XMC_SCU_INTERRUPT_ClearEventStatus
    {standard input}:204    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000008 $d
    {standard input}:209    .text.XMC_SCU_GetBootMode:00000000 $t
    {standard input}:214    .text.XMC_SCU_GetBootMode:00000000 XMC_SCU_GetBootMode
    {standard input}:230    .text.XMC_SCU_GetBootMode:0000000c $d
    {standard input}:235    .text.XMC_SCU_SetBootMode:00000000 $t
    {standard input}:240    .text.XMC_SCU_SetBootMode:00000000 XMC_SCU_SetBootMode
    {standard input}:255    .text.XMC_SCU_SetBootMode:00000008 $d
    {standard input}:260    .text.XMC_SCU_ReadGPR:00000000 $t
    {standard input}:265    .text.XMC_SCU_ReadGPR:00000000 XMC_SCU_ReadGPR
    {standard input}:283    .text.XMC_SCU_ReadGPR:00000008 $d
    {standard input}:288    .text.XMC_SCU_WriteGPR:00000000 $t
    {standard input}:293    .text.XMC_SCU_WriteGPR:00000000 XMC_SCU_WriteGPR
    {standard input}:310    .text.XMC_SCU_WriteGPR:00000008 $d
    {standard input}:315    .text.XMC_SCU_EnableOutOfRangeComparator:00000000 $t
    {standard input}:320    .text.XMC_SCU_EnableOutOfRangeComparator:00000000 XMC_SCU_EnableOutOfRangeComparator
    {standard input}:343    .text.XMC_SCU_DisableOutOfRangeComparator:00000000 $t
    {standard input}:348    .text.XMC_SCU_DisableOutOfRangeComparator:00000000 XMC_SCU_DisableOutOfRangeComparator
    {standard input}:371    .text.XMC_SCU_CalibrateTemperatureSensor:00000000 $t
    {standard input}:376    .text.XMC_SCU_CalibrateTemperatureSensor:00000000 XMC_SCU_CalibrateTemperatureSensor
    {standard input}:398    .text.XMC_SCU_CalibrateTemperatureSensor:00000014 $d
    {standard input}:403    .text.XMC_SCU_EnableTemperatureSensor:00000000 $t
    {standard input}:408    .text.XMC_SCU_EnableTemperatureSensor:00000000 XMC_SCU_EnableTemperatureSensor
    {standard input}:424    .text.XMC_SCU_EnableTemperatureSensor:00000010 $d
    {standard input}:429    .text.XMC_SCU_DisableTemperatureSensor:00000000 $t
    {standard input}:434    .text.XMC_SCU_DisableTemperatureSensor:00000000 XMC_SCU_DisableTemperatureSensor
    {standard input}:450    .text.XMC_SCU_DisableTemperatureSensor:00000010 $d
    {standard input}:455    .text.XMC_SCU_IsTemperatureSensorEnabled:00000000 $t
    {standard input}:460    .text.XMC_SCU_IsTemperatureSensorEnabled:00000000 XMC_SCU_IsTemperatureSensorEnabled
    {standard input}:477    .text.XMC_SCU_IsTemperatureSensorEnabled:00000010 $d
    {standard input}:482    .text.XMC_SCU_IsTemperatureSensorReady:00000000 $t
    {standard input}:487    .text.XMC_SCU_IsTemperatureSensorReady:00000000 XMC_SCU_IsTemperatureSensorReady
    {standard input}:503    .text.XMC_SCU_IsTemperatureSensorReady:0000000c $d
    {standard input}:508    .text.XMC_SCU_GetTemperatureMeasurement:00000000 $t
    {standard input}:513    .text.XMC_SCU_GetTemperatureMeasurement:00000000 XMC_SCU_GetTemperatureMeasurement
    {standard input}:544    .text.XMC_SCU_GetTemperatureMeasurement:0000001c $d
    {standard input}:549    .text.XMC_SCU_IsTemperatureSensorBusy:00000000 $t
    {standard input}:554    .text.XMC_SCU_IsTemperatureSensorBusy:00000000 XMC_SCU_IsTemperatureSensorBusy
    {standard input}:570    .text.XMC_SCU_IsTemperatureSensorBusy:0000000c $d
    {standard input}:575    .text.XMC_SCU_StartTemperatureMeasurement:00000000 $t
    {standard input}:580    .text.XMC_SCU_StartTemperatureMeasurement:00000000 XMC_SCU_StartTemperatureMeasurement
    {standard input}:621    .text.XMC_SCU_StartTemperatureMeasurement:00000028 $d
    {standard input}:626    .text.XMC_SCU_WriteToRetentionMemory:00000000 $t
    {standard input}:631    .text.XMC_SCU_WriteToRetentionMemory:00000000 XMC_SCU_WriteToRetentionMemory
    {standard input}:664    .text.XMC_SCU_WriteToRetentionMemory:00000024 $d
    {standard input}:669    .text.XMC_SCU_ReadFromRetentionMemory:00000000 $t
    {standard input}:674    .text.XMC_SCU_ReadFromRetentionMemory:00000000 XMC_SCU_ReadFromRetentionMemory
    {standard input}:707    .text.XMC_SCU_ReadFromRetentionMemory:00000020 $d
    {standard input}:712    .text.XMC_SCU_TRAP_Enable:00000000 $t
    {standard input}:717    .text.XMC_SCU_TRAP_Enable:00000000 XMC_SCU_TRAP_Enable
    {standard input}:735    .text.XMC_SCU_TRAP_Enable:0000000c $d
    {standard input}:740    .text.XMC_SCU_TRAP_Disable:00000000 $t
    {standard input}:745    .text.XMC_SCU_TRAP_Disable:00000000 XMC_SCU_TRAP_Disable
    {standard input}:763    .text.XMC_SCU_TRAP_Disable:0000000c $d
    {standard input}:768    .text.XMC_SCU_TRAP_GetStatus:00000000 $t
    {standard input}:773    .text.XMC_SCU_TRAP_GetStatus:00000000 XMC_SCU_TRAP_GetStatus
    {standard input}:788    .text.XMC_SCU_TRAP_GetStatus:00000008 $d
    {standard input}:793    .text.XMC_SCU_TRAP_Trigger:00000000 $t
    {standard input}:798    .text.XMC_SCU_TRAP_Trigger:00000000 XMC_SCU_TRAP_Trigger
    {standard input}:813    .text.XMC_SCU_TRAP_Trigger:00000008 $d
    {standard input}:818    .text.XMC_SCU_TRAP_ClearStatus:00000000 $t
    {standard input}:823    .text.XMC_SCU_TRAP_ClearStatus:00000000 XMC_SCU_TRAP_ClearStatus
    {standard input}:838    .text.XMC_SCU_TRAP_ClearStatus:00000008 $d
    {standard input}:843    .text.XMC_SCU_PARITY_ClearStatus:00000000 $t
    {standard input}:848    .text.XMC_SCU_PARITY_ClearStatus:00000000 XMC_SCU_PARITY_ClearStatus
    {standard input}:866    .text.XMC_SCU_PARITY_ClearStatus:0000000c $d
    {standard input}:871    .text.XMC_SCU_PARITY_GetStatus:00000000 $t
    {standard input}:876    .text.XMC_SCU_PARITY_GetStatus:00000000 XMC_SCU_PARITY_GetStatus
    {standard input}:891    .text.XMC_SCU_PARITY_GetStatus:00000008 $d
    {standard input}:896    .text.XMC_SCU_PARITY_Enable:00000000 $t
    {standard input}:901    .text.XMC_SCU_PARITY_Enable:00000000 XMC_SCU_PARITY_Enable
    {standard input}:919    .text.XMC_SCU_PARITY_Enable:0000000c $d
    {standard input}:924    .text.XMC_SCU_PARITY_Disable:00000000 $t
    {standard input}:929    .text.XMC_SCU_PARITY_Disable:00000000 XMC_SCU_PARITY_Disable
    {standard input}:947    .text.XMC_SCU_PARITY_Disable:0000000c $d
    {standard input}:952    .text.XMC_SCU_PARITY_EnableTrapGeneration:00000000 $t
    {standard input}:957    .text.XMC_SCU_PARITY_EnableTrapGeneration:00000000 XMC_SCU_PARITY_EnableTrapGeneration
    {standard input}:975    .text.XMC_SCU_PARITY_EnableTrapGeneration:0000000c $d
    {standard input}:980    .text.XMC_SCU_PARITY_DisableTrapGeneration:00000000 $t
    {standard input}:985    .text.XMC_SCU_PARITY_DisableTrapGeneration:00000000 XMC_SCU_PARITY_DisableTrapGeneration
    {standard input}:1003   .text.XMC_SCU_PARITY_DisableTrapGeneration:0000000c $d
    {standard input}:1008   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:00000000 $t
    {standard input}:1013   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:00000000 XMC_SCU_INTERRUPT_EnableNmiRequest
    {standard input}:1031   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:0000000c $d
    {standard input}:1036   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:00000000 $t
    {standard input}:1041   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:00000000 XMC_SCU_INTERRUPT_DisableNmiRequest
    {standard input}:1059   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:0000000c $d
    {standard input}:1064   .text.XMC_SCU_RESET_AssertPeripheralReset:00000000 $t
    {standard input}:1069   .text.XMC_SCU_RESET_AssertPeripheralReset:00000000 XMC_SCU_RESET_AssertPeripheralReset
    {standard input}:1093   .text.XMC_SCU_RESET_AssertPeripheralReset:00000014 $d
    {standard input}:1098   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000000 $t
    {standard input}:1103   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000000 XMC_SCU_RESET_DeassertPeripheralReset
    {standard input}:1127   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000014 $d
    {standard input}:1132   .text.XMC_SCU_RESET_IsPeripheralResetAsserted:00000000 $t
    {standard input}:1137   .text.XMC_SCU_RESET_IsPeripheralResetAsserted:00000000 XMC_SCU_RESET_IsPeripheralResetAsserted
    {standard input}:1165   .text.XMC_SCU_RESET_IsPeripheralResetAsserted:0000001c $d
    {standard input}:1170   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000000 $t
    {standard input}:1175   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000000 XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
    {standard input}:1205   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000018 $d
    {standard input}:1211   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:00000000 $t
    {standard input}:1216   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:00000000 XMC_SCU_CLOCK_GetSystemPllClockFrequency
    {standard input}:1277   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:00000044 $d
    {standard input}:1282   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:00000000 $t
    {standard input}:1287   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:00000000 XMC_SCU_CLOCK_GetUsbPllClockFrequency
    {standard input}:1333   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:0000002c $d
    {standard input}:1338   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000000 $t
    {standard input}:1343   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000000 XMC_SCU_CLOCK_GetCcuClockFrequency
    {standard input}:1379   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000018 $d
    {standard input}:1385   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:00000000 $t
    {standard input}:1390   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:00000000 XMC_SCU_CLOCK_GetUsbClockFrequency
    {standard input}:1443   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:0000002c $d
    {standard input}:1448   .text.XMC_SCU_CLOCK_GetEbuClockFrequency:00000000 $t
    {standard input}:1453   .text.XMC_SCU_CLOCK_GetEbuClockFrequency:00000000 XMC_SCU_CLOCK_GetEbuClockFrequency
    {standard input}:1480   .text.XMC_SCU_CLOCK_GetEbuClockFrequency:00000018 $d
    {standard input}:1485   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000000 $t
    {standard input}:1490   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000000 XMC_SCU_CLOCK_GetWdtClockFrequency
    {standard input}:1545   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000038 $d
    {standard input}:1551   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:00000000 $t
    {standard input}:1556   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:00000000 XMC_SCU_CLOCK_GetExternalOutputClockFrequency
    {standard input}:1637   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:00000050 $d
    {standard input}:1643   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 $t
    {standard input}:1648   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetPeripheralClockFrequency
    {standard input}:1668   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000010 $d
    {standard input}:1674   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000000 $t
    {standard input}:1679   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000000 XMC_SCU_CLOCK_SetSystemClockSource
    {standard input}:1698   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000010 $d
    {standard input}:1703   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000000 $t
    {standard input}:1708   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000000 XMC_SCU_CLOCK_SetUsbClockSource
    {standard input}:1727   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000010 $d
    {standard input}:1732   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000000 $t
    {standard input}:1737   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000000 XMC_SCU_CLOCK_SetWdtClockSource
    {standard input}:1756   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000010 $d
    {standard input}:1761   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000000 $t
    {standard input}:1766   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000000 XMC_SCU_CLOCK_SetExternalOutputClockSource
    {standard input}:1785   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000010 $d
    {standard input}:1790   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:00000000 $t
    {standard input}:1795   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:00000000 XMC_SCU_CLOCK_SetSystemPllClockSource
    {standard input}:1823   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:00000024 $d
    {standard input}:1828   .text.XMC_SCU_HIB_SetRtcClockSource:00000000 $t
    {standard input}:1833   .text.XMC_SCU_HIB_SetRtcClockSource:00000000 XMC_SCU_HIB_SetRtcClockSource
    {standard input}:1859   .text.XMC_SCU_HIB_SetRtcClockSource:0000001c $d
    {standard input}:1865   .text.XMC_SCU_HIB_SetStandbyClockSource:00000000 $t
    {standard input}:1870   .text.XMC_SCU_HIB_SetStandbyClockSource:00000000 XMC_SCU_HIB_SetStandbyClockSource
    {standard input}:1896   .text.XMC_SCU_HIB_SetStandbyClockSource:0000001c $d
    {standard input}:1902   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000000 $t
    {standard input}:1907   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000000 XMC_SCU_CLOCK_SetSystemClockDivider
    {standard input}:1929   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000010 $d
    {standard input}:1934   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000000 $t
    {standard input}:1939   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000000 XMC_SCU_CLOCK_SetCcuClockDivider
    {standard input}:1961   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000010 $d
    {standard input}:1966   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000000 $t
    {standard input}:1971   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000000 XMC_SCU_CLOCK_SetCpuClockDivider
    {standard input}:1993   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000010 $d
    {standard input}:1998   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000000 $t
    {standard input}:2003   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000000 XMC_SCU_CLOCK_SetPeripheralClockDivider
    {standard input}:2025   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000010 $d
    {standard input}:2030   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000000 $t
    {standard input}:2035   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000000 XMC_SCU_CLOCK_SetUsbClockDivider
    {standard input}:2057   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000010 $d
    {standard input}:2062   .text.XMC_SCU_CLOCK_SetEbuClockDivider:00000000 $t
    {standard input}:2067   .text.XMC_SCU_CLOCK_SetEbuClockDivider:00000000 XMC_SCU_CLOCK_SetEbuClockDivider
    {standard input}:2089   .text.XMC_SCU_CLOCK_SetEbuClockDivider:00000010 $d
    {standard input}:2094   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000000 $t
    {standard input}:2099   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000000 XMC_SCU_CLOCK_SetWdtClockDivider
    {standard input}:2121   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000010 $d
    {standard input}:2126   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:00000000 $t
    {standard input}:2131   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:00000000 XMC_SCU_CLOCK_SetExternalOutputClockDivider
    {standard input}:2154   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:00000018 $d
    {standard input}:2159   .text.XMC_SCU_CLOCK_EnableClock:00000000 $t
    {standard input}:2164   .text.XMC_SCU_CLOCK_EnableClock:00000000 XMC_SCU_CLOCK_EnableClock
    {standard input}:2179   .text.XMC_SCU_CLOCK_EnableClock:00000008 $d
    {standard input}:2184   .text.XMC_SCU_CLOCK_DisableClock:00000000 $t
    {standard input}:2189   .text.XMC_SCU_CLOCK_DisableClock:00000000 XMC_SCU_CLOCK_DisableClock
    {standard input}:2204   .text.XMC_SCU_CLOCK_DisableClock:00000008 $d
    {standard input}:2209   .text.XMC_SCU_CLOCK_IsClockEnabled:00000000 $t
    {standard input}:2214   .text.XMC_SCU_CLOCK_IsClockEnabled:00000000 XMC_SCU_CLOCK_IsClockEnabled
    {standard input}:2235   .text.XMC_SCU_CLOCK_IsClockEnabled:00000010 $d
    {standard input}:2240   .text.XMC_SCU_POWER_GetEVR13Voltage:00000000 $t
    {standard input}:2245   .text.XMC_SCU_POWER_GetEVR13Voltage:00000000 XMC_SCU_POWER_GetEVR13Voltage
    {standard input}:2265   .text.XMC_SCU_POWER_GetEVR13Voltage:00000018 $d
    {standard input}:2271   .text.XMC_SCU_POWER_GetEVR33Voltage:00000000 $t
    {standard input}:2276   .text.XMC_SCU_POWER_GetEVR33Voltage:00000000 XMC_SCU_POWER_GetEVR33Voltage
    {standard input}:2296   .text.XMC_SCU_POWER_GetEVR33Voltage:0000001c $d
    {standard input}:2302   .text.XMC_SCU_CLOCK_EnableUsbPll:00000000 $t
    {standard input}:2307   .text.XMC_SCU_CLOCK_EnableUsbPll:00000000 XMC_SCU_CLOCK_EnableUsbPll
    {standard input}:2324   .text.XMC_SCU_CLOCK_EnableUsbPll:00000010 $d
    {standard input}:2329   .text.XMC_SCU_CLOCK_DisableUsbPll:00000000 $t
    {standard input}:2334   .text.XMC_SCU_CLOCK_DisableUsbPll:00000000 XMC_SCU_CLOCK_DisableUsbPll
    {standard input}:2351   .text.XMC_SCU_CLOCK_DisableUsbPll:00000010 $d
    {standard input}:2356   .text.XMC_SCU_CLOCK_StartUsbPll:00000000 $t
    {standard input}:2361   .text.XMC_SCU_CLOCK_StartUsbPll:00000000 XMC_SCU_CLOCK_StartUsbPll
    {standard input}:2414   .text.XMC_SCU_CLOCK_StartUsbPll:00000044 $d
    {standard input}:2419   .text.XMC_SCU_CLOCK_StopUsbPll:00000000 $t
    {standard input}:2424   .text.XMC_SCU_CLOCK_StopUsbPll:00000000 XMC_SCU_CLOCK_StopUsbPll
    {standard input}:2439   .text.XMC_SCU_CLOCK_StopUsbPll:00000008 $d
    {standard input}:2445   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000000 $t
    {standard input}:2450   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000000 XMC_SCU_CLOCK_SetBackupClockCalibrationMode
    {standard input}:2493   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000030 $d
    {standard input}:2498   .text.XMC_SCU_POWER_EnableUsb:00000000 $t
    {standard input}:2503   .text.XMC_SCU_POWER_EnableUsb:00000000 XMC_SCU_POWER_EnableUsb
    {standard input}:2518   .text.XMC_SCU_POWER_EnableUsb:0000000c $d
    {standard input}:2523   .text.XMC_SCU_POWER_DisableUsb:00000000 $t
    {standard input}:2528   .text.XMC_SCU_POWER_DisableUsb:00000000 XMC_SCU_POWER_DisableUsb
    {standard input}:2543   .text.XMC_SCU_POWER_DisableUsb:0000000c $d
    {standard input}:2548   .text.XMC_SCU_CLOCK_IsUsbPllLocked:00000000 $t
    {standard input}:2553   .text.XMC_SCU_CLOCK_IsUsbPllLocked:00000000 XMC_SCU_CLOCK_IsUsbPllLocked
    {standard input}:2569   .text.XMC_SCU_CLOCK_IsUsbPllLocked:0000000c $d
    {standard input}:2574   .text.XMC_SCU_HIB_EnableHibernateDomain:00000000 $t
    {standard input}:2579   .text.XMC_SCU_HIB_EnableHibernateDomain:00000000 XMC_SCU_HIB_EnableHibernateDomain
    {standard input}:2624   .text.XMC_SCU_HIB_EnableHibernateDomain:00000038 $d
    {standard input}:2630   .text.XMC_SCU_HIB_DisableHibernateDomain:00000000 $t
    {standard input}:2635   .text.XMC_SCU_HIB_DisableHibernateDomain:00000000 XMC_SCU_HIB_DisableHibernateDomain
    {standard input}:2654   .text.XMC_SCU_HIB_DisableHibernateDomain:00000014 $d
    {standard input}:2659   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:00000000 $t
    {standard input}:2664   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:00000000 XMC_SCU_HIB_IsHibernateDomainEnabled
    {standard input}:2691   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:0000001c $d
    {standard input}:2697   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000000 $t
    {standard input}:2702   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000000 XMC_SCU_HIB_EnableInternalSlowClock
    {standard input}:2725   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000018 $d
    {standard input}:2731   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000000 $t
    {standard input}:2736   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000000 XMC_SCU_HIB_DisableInternalSlowClock
    {standard input}:2759   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000018 $d
    {standard input}:2765   .text.XMC_SCU_HIB_ClearEventStatus:00000000 $t
    {standard input}:2770   .text.XMC_SCU_HIB_ClearEventStatus:00000000 XMC_SCU_HIB_ClearEventStatus
    {standard input}:2792   .text.XMC_SCU_HIB_ClearEventStatus:00000014 $d
    {standard input}:2798   .text.XMC_SCU_HIB_TriggerEvent:00000000 $t
    {standard input}:2803   .text.XMC_SCU_HIB_TriggerEvent:00000000 XMC_SCU_HIB_TriggerEvent
    {standard input}:2825   .text.XMC_SCU_HIB_TriggerEvent:00000014 $d
    {standard input}:2831   .text.XMC_SCU_HIB_EnableEvent:00000000 $t
    {standard input}:2836   .text.XMC_SCU_HIB_EnableEvent:00000000 XMC_SCU_HIB_EnableEvent
    {standard input}:2861   .text.XMC_SCU_HIB_EnableEvent:00000018 $d
    {standard input}:2867   .text.XMC_SCU_HIB_DisableEvent:00000000 $t
    {standard input}:2872   .text.XMC_SCU_HIB_DisableEvent:00000000 XMC_SCU_HIB_DisableEvent
    {standard input}:2897   .text.XMC_SCU_HIB_DisableEvent:00000018 $d
    {standard input}:2903   .text.XMC_SCU_HIB_EnterHibernateState:00000000 $t
    {standard input}:2908   .text.XMC_SCU_HIB_EnterHibernateState:00000000 XMC_SCU_HIB_EnterHibernateState
    {standard input}:2931   .text.XMC_SCU_HIB_EnterHibernateState:00000018 $d
    {standard input}:2937   .text.XMC_SCU_HIB_EnterHibernateStateEx:00000000 $t
    {standard input}:2942   .text.XMC_SCU_HIB_EnterHibernateStateEx:00000000 XMC_SCU_HIB_EnterHibernateStateEx
    {standard input}:2972   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000000 $t
    {standard input}:2977   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000000 XMC_SCU_HIB_SetWakeupTriggerInput
    {standard input}:3010   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000028 $d
    {standard input}:3016   .text.XMC_SCU_HIB_SetPinMode:00000000 $t
    {standard input}:3021   .text.XMC_SCU_HIB_SetPinMode:00000000 XMC_SCU_HIB_SetPinMode
    {standard input}:3064   .text.XMC_SCU_HIB_SetPinMode:0000002c $d
    {standard input}:3070   .text.XMC_SCU_HIB_SetPinOutputLevel:00000000 $t
    {standard input}:3075   .text.XMC_SCU_HIB_SetPinOutputLevel:00000000 XMC_SCU_HIB_SetPinOutputLevel
    {standard input}:3116   .text.XMC_SCU_HIB_SetPinOutputLevel:00000028 $d
    {standard input}:3122   .text.XMC_SCU_HIB_SetInput0:00000000 $t
    {standard input}:3127   .text.XMC_SCU_HIB_SetInput0:00000000 XMC_SCU_HIB_SetInput0
    {standard input}:3160   .text.XMC_SCU_HIB_SetInput0:00000028 $d
    {standard input}:3166   .text.XMC_SCU_HIB_SetSR0Input:00000000 $t
    {standard input}:3171   .text.XMC_SCU_HIB_SetSR0Input:00000000 XMC_SCU_HIB_SetSR0Input
    {standard input}:3197   .text.XMC_SCU_HIB_SetSR0Input:0000001c $d
    {standard input}:3203   .text.XMC_SCU_CLOCK_IsLowPowerOscillatorStable:00000000 $t
    {standard input}:3208   .text.XMC_SCU_CLOCK_IsLowPowerOscillatorStable:00000000 XMC_SCU_CLOCK_IsLowPowerOscillatorStable
    {standard input}:3225   .text.XMC_SCU_CLOCK_IsLowPowerOscillatorStable:00000010 $d
    {standard input}:3230   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:00000000 $t
    {standard input}:3235   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:00000000 XMC_SCU_CLOCK_EnableLowPowerOscillator
    {standard input}:3295   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:00000050 $d
    {standard input}:3301   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000000 $t
    {standard input}:3306   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000000 XMC_SCU_CLOCK_DisableLowPowerOscillator
    {standard input}:3329   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000018 $d
    {standard input}:3335   .text.XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput:00000000 $t
    {standard input}:3340   .text.XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput:00000000 XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput
    {standard input}:3363   .text.XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput:00000018 $d
    {standard input}:3369   .text.XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput:00000000 $t
    {standard input}:3374   .text.XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput:00000000 XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput
    {standard input}:3398   .text.XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput:0000001c $d
    {standard input}:3404   .text.XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus:00000000 $t
    {standard input}:3409   .text.XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus:00000000 XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus
    {standard input}:3425   .text.XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus:0000000c $d
    {standard input}:3430   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000000 $t
    {standard input}:3435   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000000 XMC_SCU_CLOCK_EnableHighPerformanceOscillator
    {standard input}:3476   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000038 $d
    {standard input}:3483   .text.XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable:00000000 $t
    {standard input}:3488   .text.XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable:00000000 XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable
    {standard input}:3508   .text.XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable:00000014 $d
    {standard input}:3513   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:00000000 $t
    {standard input}:3518   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:00000000 XMC_SCU_CLOCK_DisableHighPerformanceOscillator
    {standard input}:3534   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:0000000c $d
    {standard input}:3539   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput:00000000 $t
    {standard input}:3544   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput:00000000 XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput
    {standard input}:3560   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput:0000000c $d
    {standard input}:3565   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput:00000000 $t
    {standard input}:3570   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput:00000000 XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput
    {standard input}:3586   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput:0000000c $d
    {standard input}:3591   .text.XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus:00000000 $t
    {standard input}:3596   .text.XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus:00000000 XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus
    {standard input}:3612   .text.XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus:0000000c $d
    {standard input}:3617   .text.XMC_SCU_CLOCK_EnableSystemPll:00000000 $t
    {standard input}:3622   .text.XMC_SCU_CLOCK_EnableSystemPll:00000000 XMC_SCU_CLOCK_EnableSystemPll
    {standard input}:3639   .text.XMC_SCU_CLOCK_EnableSystemPll:00000010 $d
    {standard input}:3644   .text.XMC_SCU_CLOCK_DisableSystemPll:00000000 $t
    {standard input}:3649   .text.XMC_SCU_CLOCK_DisableSystemPll:00000000 XMC_SCU_CLOCK_DisableSystemPll
    {standard input}:3666   .text.XMC_SCU_CLOCK_DisableSystemPll:00000010 $d
    {standard input}:3671   .text.XMC_SCU_CLOCK_StopSystemPll:00000000 $t
    {standard input}:3676   .text.XMC_SCU_CLOCK_StopSystemPll:00000000 XMC_SCU_CLOCK_StopSystemPll
    {standard input}:3692   .text.XMC_SCU_CLOCK_StopSystemPll:0000000c $d
    {standard input}:3697   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:00000000 $t
    {standard input}:3702   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:00000000 XMC_SCU_CLOCK_StepSystemPllFrequency
    {standard input}:3733   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:0000001c $d
    {standard input}:3738   .text.XMC_SCU_CLOCK_StartSystemPll:00000000 $t
    {standard input}:3743   .text.XMC_SCU_CLOCK_StartSystemPll:00000000 XMC_SCU_CLOCK_StartSystemPll
    {standard input}:3909   .text.XMC_SCU_CLOCK_StartSystemPll:000000f0 $d
    {standard input}:3919   .text.XMC_SCU_CLOCK_Init:00000000 $t
    {standard input}:3924   .text.XMC_SCU_CLOCK_Init:00000000 XMC_SCU_CLOCK_Init
    {standard input}:4054   .text.XMC_SCU_CLOCK_Init:00000094 $d
    {standard input}:4059   .text.XMC_SCU_CLOCK_IsSystemPllLocked:00000000 $t
    {standard input}:4064   .text.XMC_SCU_CLOCK_IsSystemPllLocked:00000000 XMC_SCU_CLOCK_IsSystemPllLocked
    {standard input}:4080   .text.XMC_SCU_CLOCK_IsSystemPllLocked:0000000c $d
    {standard input}:4085   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 $t
    {standard input}:4090   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 XMC_SCU_INTERRUPT_SetEventHandler
    {standard input}:4148   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000034 $d
                            *COM*:00000080 event_handler_list
    {standard input}:4153   .text.XMC_SCU_IRQHandler:00000000 $t
    {standard input}:4158   .text.XMC_SCU_IRQHandler:00000000 XMC_SCU_IRQHandler
    {standard input}:4230   .text.XMC_SCU_IRQHandler:0000003c $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4002528de975c0fcce6c551c15d87b8c
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.48aa5dfcc4adf36b323cf9dbe32c793a
                           .group:00000000 wm4.core_cm4.h.174.824e0532337e90525b645435b961cc25
                           .group:00000000 wm4.mpu_armv7.h.32.7da498ea6f18d3b74a42202d7c1d394e
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:00000000 wm4.xmc_common.h.92.bbcf261068c7c74d7033b80d0dbf155c
                           .group:00000000 wm4.xmc4_scu.h.106.b7d8d773976d331f6820948fe093a27d

UNDEFINED SYMBOLS
SystemCoreClockUpdate
SystemCoreClock
OSCHP_GetFrequency
