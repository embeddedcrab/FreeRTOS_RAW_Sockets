   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "xmc_eth_mac.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.XMC_ETH_MAC_InitRxDescriptors,"ax",%progbits
  19              	 .align 2
  20              	 .global XMC_ETH_MAC_InitRxDescriptors
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_ETH_MAC_InitRxDescriptors:
  25              	.LFB229:
  26              	 .file 1 "../Libraries/XMCLib/src/xmc_eth_mac.c"
   1:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
   2:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
   3:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @file xmc_eth_mac.c
   4:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @date 2017-09-27
   5:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
   6:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_eth_mac.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library
   9:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  10:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 
  19:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  21:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 
  22:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_eth_mac.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  37:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  40:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-06-20:
  41:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Initial
  42:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  43:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-09-01:
  44:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Add clock gating control in enable/disable APIs
  45:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Add transmit polling if run out of buffers
  46:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  47:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-11-30:
  48:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fix XMC_ETH_MAC_GetRxFrameSize return value in case of errors
  49:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  50:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-03-16:
  51:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fix XMC_ETH_MAC_DisableEvent
  52:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  53:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-05-19:
  54:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_ReturnTxDescriptor and XMC_ETH_MAC_ReturnRxDescriptor
  55:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  56:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-08-30:
  57:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to disable MMC interrupt events
  58:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  59:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-11-22:
  60:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to optimize access to bus
  61:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  62:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-02-25:
  63:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - XMC_ETH_MAC_Enable() and XMC_ETH_MAC_Disable(), fixed compilation warnings
  64:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  65:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-03-27:
  66:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to disable PMT and timestamp interrupt events
  67:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  68:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-02:
  69:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_InitPTPEx()
  70:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_SetPTPTime()
  71:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_UpdateAddend() 
  72:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fixed XMC_ETH_MAC_InitPTP(), XMC_ETH_MAC_UpdatePTPTime(), XMC_ETH_MAC_SetPTPAlarm()
  73:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *       - nanoseconds initializazion
  74:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *       - added polling to wait for setup
  75:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  76:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-04:
  77:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to disable MMC IPC receive interrupt events
  78:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  79:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-11:
  80:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fixed XMC_ETH_MAC_SetPTPAlarm() nanoseconds conversion
  81:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  82:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-17:
  83:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_GetTxTimeStamp() and XMC_ETH_MAC_GetRxTimeStamp() return the timestamp
  84:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  85:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-27:
  86:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fixed XMC_ETH_MAC_GetRxTimeStamp() and XMC_ETH_MAC_GetTxTimeStamp() fixed returned nanosec
  87:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  88:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-08-03:
  89:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_InitPTP(), XMC_ETH_MAC_InitPTPEx(), XMC_ETH_MAC_GetPTPTime(), XMC_ETH_
  90:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *       rollover mode of nanosecond counter from binary to digital mode, i.e 1ns resolution
  91:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  92:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-09-27:
  93:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_InitEx()
  94:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - XMC_ETH_MAC_SetAddressEx(), XMC_ETH_MAC_GetAddressEx() and XMC_ETH_MAC_SetAddressPerfectFi
  95:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  96:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @endcond
  97:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
  98:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
  99:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
 100:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * HEADER FILES
 101:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
 102:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <xmc_eth_mac.h>
 103:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 104:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if defined (ETH0)
 105:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 106:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <stdlib.h>
 107:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <xmc_scu.h>
 108:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 109:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
 110:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * MACROS
 111:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
 112:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 113:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 114:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * ETH MAC clock speed
 115:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 116:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_35MHZ  (35000000U)  /**< ETH MAC clock speed 35 MHZ */
 117:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_60MHZ  (60000000U)  /**< ETH MAC clock speed 60 MHZ */
 118:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_100MHZ (100000000U) /**< ETH MAC clock speed 100 MHZ */
 119:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_150MHZ (150000000U) /**< ETH MAC clock speed 150 MHZ */
 120:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_200MHZ (200000000U) /**< ETH MAC clock speed 200 MHZ */
 121:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_250MHZ (250000000U) /**< ETH MAC clock speed 250 MHZ */
 122:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 123:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 124:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * ETH MAC MDC divider
 125:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 126:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_16  (2U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/16 */
 127:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_26  (3U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/26 */
 128:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_42  (0U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/42 */
 129:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_62  (1U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/62 */
 130:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_102 (4U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/102 *
 131:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_124 (5U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/124 *
 132:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 133:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 134:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 135:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * RDES1 Descriptor RX Packet Control
 136:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 137:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RBS2 (0x1FFF0000U) /**< Receive buffer 2 size */
 138:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RER  (0x00008000U) /**< Receive end of ring */
 139:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RCH  (0x00004000U) /**< Second address chained */
 140:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RBS1 (0x00001FFFU) /**< Receive buffer 1 size */
 141:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 142:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 143:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Interrupt masking
 144:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 145:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DISABLE_MMC_INTERRUPT_MSK              (0x03ffffffU) /**< Bit mask to disable MMMC 
 146:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK  (0x3fff3fffU) /**< Bit mask to disable MMC I
 147:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 148:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 149:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Normal MAC events
 150:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 151:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_EVENT_NORMAL (XMC_ETH_MAC_EVENT_TRANSMIT |\
 152:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |\
 153:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_RECEIVE |\
 154:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_EARLY_RECEIVE)
 155:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 156:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 157:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Abnormal MAC events
 158:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 159:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_EVENT_ABNORMAL (XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |\
 160:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT |\
 161:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW |\
 162:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW |\
 163:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |\
 164:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |\
 165:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |\
 166:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |\
 167:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_BUS_ERROR)
 168:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 169:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Definition needed in case of device header file previous to v1.5.1*/
 170:../Libraries/XMCLib/src/xmc_eth_mac.c **** #ifndef ETH_BUS_MODE_ATDS_Msk
 171:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_BUS_MODE_ATDS_Msk  (0x00000080UL)
 172:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 173:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 174:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Resolution of sub second counter ~ 20ns */
 175:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_SUB_SECOND_UPDATE_FREQ (50000000)
 176:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 177:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
 178:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * API IMPLEMENTATION
 179:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
 180:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 181:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the event passed is a normal event */
 182:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XCM_ETH_MAC_IsNormalEvent(uint32_t event)
 183:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 184:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT |
 185:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
 186:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE |
 187:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_EARLY_RECEIVE)) != (uint32_t)0);
 188:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 189:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 190:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the event passed is an abnormal event */
 191:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XCM_ETH_MAC_IsAbnormalEvent(uint32_t event)
 192:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 193:../Libraries/XMCLib/src/xmc_eth_mac.c ****    return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |
 194:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT |
 195:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW |
 196:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW |
 197:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |
 198:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |
 199:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |
 200:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |
 201:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_BUS_ERROR)) != (uint32_t)0);
 202:../Libraries/XMCLib/src/xmc_eth_mac.c ****  }
 203:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 204:../Libraries/XMCLib/src/xmc_eth_mac.c **** #ifdef XMC_ASSERT_ENABLE 
 205:../Libraries/XMCLib/src/xmc_eth_mac.c ****  
 206:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the passed argument is a valid ETH module */ 
 207:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XMC_ETH_MAC_IsValidModule(ETH_GLOBAL_TypeDef *const eth)
 208:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 209:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (eth == ETH0);
 210:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 211:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 212:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 213:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 214:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitEx(XMC_ETH_MAC_t *const eth_mac)
 215:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 216:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitEx: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 217:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 218:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_Reset(eth_mac);
 219:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 220:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize MAC configuration */
 221:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MAC_CONFIGURATION = (uint32_t)ETH_MAC_CONFIGURATION_IPC_Msk;
 222:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 223:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize Filter registers */
 224:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->FLOW_CONTROL = ETH_FLOW_CONTROL_DZPQ_Msk; /* Disable Zero Quanta Pause */
 225:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 226:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE = (uint32_t)ETH_OPERATION_MODE_RSF_Msk |
 227:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                              (uint32_t)ETH_OPERATION_MODE_TSF_Msk |
 228:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                              (uint32_t)ETH_OPERATION_MODE_OSF_Msk;
 229:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 230:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Increase enhanced descriptor to 8 WORDS, required when the Advanced Time-Stamp feature or Full
 231:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->BUS_MODE = (uint32_t)ETH_BUS_MODE_ATDS_Msk |
 232:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                        (uint32_t)ETH_BUS_MODE_AAL_Msk | /* the AHB interface generates all bursts
 233:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                        (uint32_t)ETH_BUS_MODE_FB_Msk | /* DMA attempts to execute fixed-length Bu
 234:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                        (uint32_t)(0x20 << ETH_BUS_MODE_PBL_Pos); /* maximum Burst length */
 235:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 236:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize DMA Descriptors */
 237:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 238:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 239:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 240:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Clear interrupts */
 241:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->STATUS = 0xFFFFFFFFUL;
 242:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 243:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Disable MMC interrupt events */
 244:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_TRANSMIT_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 245:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 246:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_IPC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK;
 247:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 248:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Disable PMT and timestamp interrupt events */
 249:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK = ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRUPT_MASK_TSIM_Msk;
 250:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 251:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->frame_end = NULL;
 252:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 253:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 254:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC initialize */
 255:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac)
 256:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 257:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 258:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 259:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_Init: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 260:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 261:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_Enable(eth_mac);
 262:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = XMC_ETH_MAC_SetManagmentClockDivider(eth_mac);
 263:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 264:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitEx(eth_mac);
 265:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 266:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_SetAddress(eth_mac, eth_mac->address);
 267:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 268:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 269:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 270:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 271:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize RX descriptors */
 272:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac)
 273:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
  27              	 .loc 1 273 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 F0B4     	 push {r4,r5,r6,r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 16
  36              	 .cfi_offset 4,-16
  37              	 .cfi_offset 5,-12
  38              	 .cfi_offset 6,-8
  39              	 .cfi_offset 7,-4
  40              	.LVL1:
 274:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i;
 275:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t next;
 276:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 277:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitRxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac
 278:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 279:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /*
 280:../Libraries/XMCLib/src/xmc_eth_mac.c ****    * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
 281:../Libraries/XMCLib/src/xmc_eth_mac.c ****    * (buffer2) is the next descriptor address
 282:../Libraries/XMCLib/src/xmc_eth_mac.c ****    */
 283:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < eth_mac->num_rx_buf; ++i)
  41              	 .loc 1 283 0
  42 0002 90F82430 	 ldrb r3,[r0,#36]
  43 0006 13B3     	 cbz r3,.L2
  44 0008 0025     	 movs r5,#0
  45 000a 2A46     	 mov r2,r5
 284:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 285:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[i].status = (uint32_t)ETH_MAC_DMA_RDES0_OWN;
  46              	 .loc 1 285 0
  47 000c 4FF00047 	 mov r7,#-2147483648
 286:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
  48              	 .loc 1 286 0
  49 0010 44F2F456 	 movw r6,#17908
  50              	.LVL2:
  51              	.L4:
  52 0014 5301     	 lsls r3,r2,#5
 285:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
  53              	 .loc 1 285 0
  54 0016 0169     	 ldr r1,[r0,#16]
  55 0018 CF50     	 str r7,[r1,r3]
  56              	 .loc 1 286 0
  57 001a 0169     	 ldr r1,[r0,#16]
  58 001c 1944     	 add r1,r1,r3
  59 001e 4E60     	 str r6,[r1,#4]
 287:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[i].buffer1 = (uint32_t)&(eth_mac->rx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
  60              	 .loc 1 287 0
  61 0020 0169     	 ldr r1,[r0,#16]
  62 0022 1944     	 add r1,r1,r3
  63 0024 8469     	 ldr r4,[r0,#24]
  64 0026 2C44     	 add r4,r4,r5
  65 0028 8C60     	 str r4,[r1,#8]
 288:../Libraries/XMCLib/src/xmc_eth_mac.c ****     next = i + 1U;
  66              	 .loc 1 288 0
  67 002a 0132     	 adds r2,r2,#1
  68              	.LVL3:
 289:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (next == eth_mac->num_rx_buf)
  69              	 .loc 1 289 0
  70 002c 90F82410 	 ldrb r1,[r0,#36]
 290:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 291:../Libraries/XMCLib/src/xmc_eth_mac.c ****       next = 0U;
  71              	 .loc 1 291 0
  72 0030 9142     	 cmp r1,r2
  73 0032 14BF     	 ite ne
  74 0034 1446     	 movne r4,r2
  75 0036 0024     	 moveq r4,#0
  76              	.LVL4:
 292:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 293:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
  77              	 .loc 1 293 0
  78 0038 0169     	 ldr r1,[r0,#16]
  79 003a 0B44     	 add r3,r3,r1
  80 003c 01EB4411 	 add r1,r1,r4,lsl#5
  81 0040 D960     	 str r1,[r3,#12]
  82              	.LVL5:
  83 0042 05F2F455 	 addw r5,r5,#1524
 283:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
  84              	 .loc 1 283 0
  85 0046 90F82430 	 ldrb r3,[r0,#36]
  86 004a 9342     	 cmp r3,r2
  87 004c E2D8     	 bhi .L4
  88              	.LVL6:
  89              	.L2:
 294:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 295:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->RECEIVE_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->rx_desc[0]);
  90              	 .loc 1 295 0
  91 004e 0268     	 ldr r2,[r0]
  92 0050 0169     	 ldr r1,[r0,#16]
  93 0052 41F20C03 	 movw r3,#4108
  94 0056 D150     	 str r1,[r2,r3]
 296:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index = 0U;
  95              	 .loc 1 296 0
  96 0058 0023     	 movs r3,#0
  97 005a 80F82730 	 strb r3,[r0,#39]
 297:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
  98              	 .loc 1 297 0
  99 005e F0BC     	 pop {r4,r5,r6,r7}
 100              	.LCFI1:
 101              	 .cfi_restore 7
 102              	 .cfi_restore 6
 103              	 .cfi_restore 5
 104              	 .cfi_restore 4
 105              	 .cfi_def_cfa_offset 0
 106 0060 7047     	 bx lr
 107              	 .cfi_endproc
 108              	.LFE229:
 110 0062 00BF     	 .section .text.XMC_ETH_MAC_InitTxDescriptors,"ax",%progbits
 111              	 .align 2
 112              	 .global XMC_ETH_MAC_InitTxDescriptors
 113              	 .thumb
 114              	 .thumb_func
 116              	XMC_ETH_MAC_InitTxDescriptors:
 117              	.LFB230:
 298:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 299:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize TX descriptors */
 300:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac)
 301:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 118              	 .loc 1 301 0
 119              	 .cfi_startproc
 120              	 
 121              	 
 122              	 
 123              	.LVL7:
 124 0000 70B4     	 push {r4,r5,r6}
 125              	.LCFI2:
 126              	 .cfi_def_cfa_offset 12
 127              	 .cfi_offset 4,-12
 128              	 .cfi_offset 5,-8
 129              	 .cfi_offset 6,-4
 130              	.LVL8:
 302:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i;
 303:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t next;
 304:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 305:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac
 306:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 307:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the n
 308:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 131              	 .loc 1 308 0
 132 0002 90F82530 	 ldrb r3,[r0,#37]
 133 0006 E3B1     	 cbz r3,.L9
 134 0008 0025     	 movs r5,#0
 135 000a 2B46     	 mov r3,r5
 309:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 310:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_desc[i].status = ETH_MAC_DMA_TDES0_TCH | ETH_MAC_DMA_TDES0_LS | ETH_MAC_DMA_TDES0_FS;
 136              	 .loc 1 310 0
 137 000c 124E     	 ldr r6,.L15
 138              	.LVL9:
 139              	.L11:
 140 000e 5A01     	 lsls r2,r3,#5
 141 0010 4169     	 ldr r1,[r0,#20]
 142 0012 8E50     	 str r6,[r1,r2]
 311:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_desc[i].buffer1 = (uint32_t)&(eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 143              	 .loc 1 311 0
 144 0014 4169     	 ldr r1,[r0,#20]
 145 0016 1144     	 add r1,r1,r2
 146 0018 C469     	 ldr r4,[r0,#28]
 147 001a 2C44     	 add r4,r4,r5
 148 001c 8C60     	 str r4,[r1,#8]
 312:../Libraries/XMCLib/src/xmc_eth_mac.c ****     next = i + 1U;
 149              	 .loc 1 312 0
 150 001e 0133     	 adds r3,r3,#1
 151              	.LVL10:
 313:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (next == eth_mac->num_tx_buf)
 152              	 .loc 1 313 0
 153 0020 90F82510 	 ldrb r1,[r0,#37]
 314:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 315:../Libraries/XMCLib/src/xmc_eth_mac.c ****         next = 0U;
 154              	 .loc 1 315 0
 155 0024 9942     	 cmp r1,r3
 156 0026 14BF     	 ite ne
 157 0028 1C46     	 movne r4,r3
 158 002a 0024     	 moveq r4,#0
 159              	.LVL11:
 316:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 317:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
 160              	 .loc 1 317 0
 161 002c 4169     	 ldr r1,[r0,#20]
 162 002e 0A44     	 add r2,r2,r1
 163 0030 01EB4411 	 add r1,r1,r4,lsl#5
 164 0034 D160     	 str r1,[r2,#12]
 165              	.LVL12:
 166 0036 05F2F455 	 addw r5,r5,#1524
 308:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 167              	 .loc 1 308 0
 168 003a 90F82520 	 ldrb r2,[r0,#37]
 169 003e 9A42     	 cmp r2,r3
 170 0040 E5D8     	 bhi .L11
 171              	.LVL13:
 172              	.L9:
 318:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 319:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TRANSMIT_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->tx_desc[0]);
 173              	 .loc 1 319 0
 174 0042 0268     	 ldr r2,[r0]
 175 0044 4169     	 ldr r1,[r0,#20]
 176 0046 41F21003 	 movw r3,#4112
 177 004a D150     	 str r1,[r2,r3]
 320:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_index = 0U;
 178              	 .loc 1 320 0
 179 004c 0023     	 movs r3,#0
 180 004e 80F82630 	 strb r3,[r0,#38]
 321:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 181              	 .loc 1 321 0
 182 0052 70BC     	 pop {r4,r5,r6}
 183              	.LCFI3:
 184              	 .cfi_restore 6
 185              	 .cfi_restore 5
 186              	 .cfi_restore 4
 187              	 .cfi_def_cfa_offset 0
 188 0054 7047     	 bx lr
 189              	.L16:
 190 0056 00BF     	 .align 2
 191              	.L15:
 192 0058 00001030 	 .word 806354944
 193              	 .cfi_endproc
 194              	.LFE230:
 196              	 .section .text.XMC_ETH_MAC_InitEx,"ax",%progbits
 197              	 .align 2
 198              	 .global XMC_ETH_MAC_InitEx
 199              	 .thumb
 200              	 .thumb_func
 202              	XMC_ETH_MAC_InitEx:
 203              	.LFB227:
 215:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitEx: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 204              	 .loc 1 215 0
 205              	 .cfi_startproc
 206              	 
 207              	 
 208              	.LVL14:
 209 0000 10B5     	 push {r4,lr}
 210              	.LCFI4:
 211              	 .cfi_def_cfa_offset 8
 212              	 .cfi_offset 4,-8
 213              	 .cfi_offset 14,-4
 214 0002 0446     	 mov r4,r0
 215              	.LVL15:
 216              	.LBB21:
 217              	.LBB22:
 218              	 .file 2 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc_eth_mac.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @file xmc_eth_mac.h
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @date 2017-09-27
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @cond
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * All rights reserved.                        
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                             
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * following conditions are met:   
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * disclaimer.                        
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * products derived from this software without specific prior written permission.                  
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Change History
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * --------------
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2015-06-20:
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Initial
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-04-25:
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Change XMC_ETH_MAC_BUF_SIZE to 1524 to allow for Tagged MAC frame format
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *  
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-05-19:
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_GetTxBuffer() and XMC_ETH_MAC_GetRxBuffer()
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_SetTxBufferSize()
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-06-08:
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_IsRxDescriptorOwnedByDma()
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-02-25:
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - XMC_ETH_MAC_SetPortControl() fixed compilation warning
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-02:
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_InitPTPEx()
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_SetPTPTime()
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_UpdateAddend()
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-11:
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_EnablePTPAlarm() and XMC_ETH_MAC_DisablePTPAlarm
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-17:
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Fixed ordering of PTP nanoseconds and seconds in XMC_ETH_MAC_DMA_DESC_t
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-08-07:
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_TIMESTAMP_STATUS_t
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-09-27:
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_InitEx()
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - XMC_ETH_MAC_SetAddressEx(), XMC_ETH_MAC_GetAddressEx() and XMC_ETH_MAC_SetAddressPerfectFi
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @endcond
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @addtogroup XMClib XMC Peripheral Library
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @{
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @addtogroup ETH_MAC
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @brief Ethernet Low level driver for XMC4000 microcontroller family.
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The Ethernet MAC (ETH) is a major communication peripheral that supports 10/100
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MBit/s data transfer rates in compliance with the IEEE 802.3-2002 standard. The ETH
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * may be used to implement internet connected applications using IPv4 and IPv6. The
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH also includes support for IEEE1588 time synchronisation to allow implementation
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * of Real Time Ethernet protocols.
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The XMC_ETH_MAC low level driver provides functions to configure and initialize
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the ETH_MAC hardware peripheral.
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @{
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #ifndef XMC_ETH_MAC_H
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_H
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * HEADER FILES
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #include "xmc_common.h"
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (ETH0)
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #include "xmc_eth_mac_map.h"
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MACROS
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_BUF_SIZE           (1524)     /**< ETH MAC buffer size */
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_PHY_MAX_RETRIES    (0xffffUL) /**< Maximum retries */
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_WAKEUP_REGISTER_LENGTH (8U)       /**< Remote wakeup frame reg length */
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * TDES0 Descriptor TX Packet Control/Status
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_OWN  (0x80000000U) /**< Own bit 1=DMA, 0=CPU */
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IC   (0x40000000U) /**< Interrupt on competition */
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LS   (0x20000000U) /**< Last segment */
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_FS   (0x10000000U) /**< First segment */
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DC   (0x08000000U) /**< Disable CRC */
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DP   (0x04000000U) /**< Disable pad */
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TTSE (0x02000000U) /**< Transmit time stamp enable */
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_CIC  (0x00C00000U) /**< Checksum insertion control */
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TER  (0x00200000U) /**< Transmit end of ring */
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TCH  (0x00100000U) /**< Second address chained */
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TTSS (0x00020000U) /**< Transmit time stamp status */
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IHE  (0x00010000U) /**< IP header error */
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_ES   (0x00008000U) /**< Error summary */
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_JT   (0x00004000U) /**< Jabber timeout */
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_FF   (0x00002000U) /**< Frame flushed */
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IPE  (0x00001000U) /**< IP payload error */
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LOC  (0x00000800U) /**< Loss of carrier */
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_NC   (0x00000400U) /**< No carrier */
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LC   (0x00000200U) /**< Late collision */
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_EC   (0x00000100U) /**< Excessive collision */
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_VF   (0x00000080U) /**< VLAN frame */
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_CC   (0x00000078U) /**< Collision count */
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_ED   (0x00000004U) /**< Excessive deferral */
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_UF   (0x00000002U) /**< Underflow error */
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DB   (0x00000001U) /**< Deferred bit */
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * RDES0 Descriptor RX Packet Status
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_OWN  (0x80000000U) /**< Own bit 1=DMA, 0=CPU */
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_AFM  (0x40000000U) /**< Destination address filter fail */
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FL   (0x3FFF0000U) /**< Frame length mask */
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_ES   (0x00008000U) /**< Error summary */
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_DE   (0x00004000U) /**< Descriptor error */
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_SAF  (0x00002000U) /**< Source address filter fail */
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LE   (0x00001000U) /**< Length error */
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_OE   (0x00000800U) /**< Overflow error */
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_VLAN (0x00000400U) /**< VLAN tag */
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FS   (0x00000200U) /**< First descriptor */
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LS   (0x00000100U) /**< Last descriptor */
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_TSA  (0x00000080U) /**< Timestamp available */
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LC   (0x00000040U) /**< Late collision */
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FT   (0x00000020U) /**< Frame type */
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_RWT  (0x00000010U) /**< Receive watchdog timeout */
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_RE   (0x00000008U) /**< Receive error */
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_DBE  (0x00000004U) /**< Dribble bit error */
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_CE   (0x00000002U) /**< CRC error */
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_ESA  (0x00000001U) /**< Extended Status/Rx MAC address */
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ENUMS
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Ethernet MAC status return values
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_STATUS
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_OK    = 0U, /**< Driver accepted application request */
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_BUSY  = 1U, /**< Driver is busy and cannot handle request */
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_ERROR = 2U  /**< Driver could not fulfil application request */
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_STATUS_t;
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Transmission frame
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TX_FRAME
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_FRAGMENT  = 0x1U, /**< Indicate frame fragment */
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_EVENT     = 0x2U, /**< Generate event when frame is transmitted */
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_TIMESTAMP = 0x4U  /**< Capture frame time stamp */
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TX_FRAME_t;
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC event
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_EVENT
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_PMT = ETH_INTERRUPT_MASK_PMTIM_Msk << 16,        /**< Power management event */
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TIMESTAMP = ETH_INTERRUPT_MASK_TSIM_Msk << 16,   /**< Time stamp event */
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_EARLY_RECEIVE = ETH_STATUS_ERI_Msk,              /**< Early receive */
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_BUS_ERROR = ETH_STATUS_FBI_Msk,                  /**< Bus error */
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_EARLY_TRANSMIT = ETH_STATUS_ETI_Msk,             /**< Early transmit */
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT = ETH_STATUS_RWT_Msk,   /**< Receive watchdog time-out
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED = ETH_STATUS_RPS_Msk,    /**< Receive process stopped *
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE = ETH_STATUS_RU_Msk,  /**< Receive buffer unavailabl
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE = ETH_STATUS_RI_Msk,                     /**< Receive event */
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW = ETH_STATUS_UNF_Msk,         /**< Transmit underflow */
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW = ETH_STATUS_OVF_Msk,           /**< Receive overflow */
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT = ETH_STATUS_TJT_Msk,    /**< Transmit jabber time-out 
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE = ETH_STATUS_TU_Msk, /**< Transmit buffer unavailab
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED = ETH_STATUS_TPS_Msk,   /**< Transmit process stopped 
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT = ETH_STATUS_TI_Msk                     /**< Transmit event */
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_EVENT_t;
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Link interface
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_INTERFACE
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_INTERFACE_MII, /**< Link interface: Media independent interface */
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_INTERFACE_RMII /**< Link interface: Reduced media independent interface */
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_INTERFACE_t;
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH link status
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_STATUS
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_STATUS_DOWN, /**< Link status down */
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_STATUS_UP    /**< Link status up */
 232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_STATUS_t;
 233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH link speed
 236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_SPEED
 238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_SPEED_10M  = 0UL << ETH_MAC_CONFIGURATION_FES_Pos, /**< Link speed: 10M */
 240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_SPEED_100M = 1UL << ETH_MAC_CONFIGURATION_FES_Pos  /**< Link speed: 100M */
 241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_SPEED_t;
 242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH duplex settings (full/half?)
 245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_DUPLEX
 247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_DUPLEX_HALF = 0UL << ETH_MAC_CONFIGURATION_DM_Pos, /**< Half duplex */
 249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_DUPLEX_FULL = 1UL << ETH_MAC_CONFIGURATION_DM_Pos  /**< Full duplex */
 250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_DUPLEX_t;
 251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MAC address filter
 254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_ADDR_FILTER
 256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE0 = 0x01000000UL, /**< Address filter mask: byte 0 */
 258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE1 = 0x02000000UL, /**< Address filter mask: byte 1 */
 259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE2 = 0x04000000UL, /**< Address filter mask: byte 2 */
 260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE3 = 0x08000000UL, /**< Address filter mask: byte 3 */
 261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE4 = 0x10000000UL, /**< Address filter mask: byte 4 */
 262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE5 = 0x20000000UL, /**< Address filter mask: byte 5 */
 263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_SA         = 0x40000000UL  /**< Address filter SA */
 264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_ADDR_FILTER_t;
 265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Power management events that triggers a PMT interrupt
 268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_PMT_EVENT
 270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_WAKEUP_FRAME         = ETH_PMT_CONTROL_STATUS_RWKPKTEN_Msk,  /**< Wakeup
 272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_MAGIC_PACKET         = ETH_PMT_CONTROL_STATUS_MGKPKTEN_Msk,  /**< Magic 
 273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_UNICAST_FRAME_FILTER = ETH_PMT_CONTROL_STATUS_GLBLUCAST_Msk  /**< Unicas
 274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_PMT_EVENT_t;
 275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time-stamp configuration enable
 279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TIMESTAMP_CONFIG
 281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE = ETH_TIMESTAMP_CONTROL_TSCFUPDT_Msk,             /**< F
 283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_TS_INTERRUPT = ETH_TIMESTAMP_CONTROL_TSTRIG_Msk,       /**< T
 284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_ALL_FRAMES = ETH_TIMESTAMP_CONTROL_TSENALL_Msk,        /**< E
 285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTPV2 = ETH_TIMESTAMP_CONTROL_TSVER2ENA_Msk,           /**< P
 286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_ETHERNET = ETH_TIMESTAMP_CONTROL_TSIPENA_Msk, /**< P
 287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV6 = ETH_TIMESTAMP_CONTROL_TSIPV6ENA_Msk,   /**< P
 288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV4 = ETH_TIMESTAMP_CONTROL_TSIPV4ENA_Msk,   /**< P
 289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_MAC_ADDRESS_FILTER = ETH_TIMESTAMP_CONTROL_TSENMACADDR_Msk /*
 290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIMESTAMP_CONFIG_t;
 291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time-stamp status
 294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TIMESTAMP_STATUS
 296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_SECONDS_OVERFLOW = ETH_TIMESTAMP_STATUS_TSSOVF_Msk,           /**< I
 298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_TARGET_TIME_REACHED = ETH_TIMESTAMP_STATUS_TSTARGT_Msk,       /**< I
 299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_TARGET_TIMER_ERROR = ETH_TIMESTAMP_STATUS_TSTRGTERR_Msk,      /**< S
 300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIMESTAMP_STATUS_t;
 301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * DATA STRUCTURES
 305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /* Anonymous structure/union guard start */
 308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (__CC_ARM)
 309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma push
 310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma anon_unions
 311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #elif defined (__TASKING__)
 312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma warning 586
 313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC port control
 317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef union XMC_ETH_MAC_PORT_CTRL
 319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   struct
 321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   {
 322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd0: 2;     /**< Receive data bit 0 (::XMC_ETH_MAC_PORT_CTRL_RXD0_t) */
 323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd1: 2;     /**< Receive data bit 1 (::XMC_ETH_MAC_PORT_CTRL_RXD1_t) */
 324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd2: 2;     /**< Receive data bit 2 (only MII) (::XMC_ETH_MAC_PORT_CTRL_RXD2_t) */
 325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd3: 2;     /**< Receive data bit 3 (only MII) (::XMC_ETH_MAC_PORT_CTRL_RXD3_t) */
 326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t clk_rmii: 2; /**< RMII: Continuous 50 MHz reference clock.
 327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                MII: Receive clock, 25 MHz for 100Mbit/s, 2.5 MHz for 10Mbit/s
 328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                (::XMC_ETH_MAC_PORT_CTRL_CLK_RMII_t) */
 329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t crs_dv: 2;   /**< RMII: carrier sense/RX_Data valid. MII: RX_Data valid (::XMC_ETH_MAC
 330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t crs: 2;      /**< Carrier sense for only MII (::XMC_ETH_MAC_PORT_CTRL_CRS_t) */
 331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxer: 2;     /**< Receive error (::XMC_ETH_MAC_PORT_CTRL_RXER_t) */
 332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t col: 2;      /**< Collision Detect for only MII (::XMC_ETH_MAC_PORT_CTRL_COL_t) */
 333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t clk_tx: 2;   /**< Transmit clock (only MII), 25 MHz for 100Mbit/s, 2.5 MHz for 10Mbit/
 334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t: 2;          /**< Reserved bits */
 335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t mdio: 2;     /**< Bidirectional, push-pull management data I/O line (::XMC_ETH_MAC_POR
 336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t: 2;          /**< Reserved bits */
 337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t mode: 1;     /**< RMII or MII (::XMC_ETH_MAC_PORT_CTRL_MODE_t) */
 338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   };
 339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t raw;
 341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_PORT_CTRL_t;
 342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC DMA descriptor
 345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC_DMA_DESC
 347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t status;                 /**< DMA descriptor status */
 349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t length;                 /**< Descriptor length */
 350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t buffer1;                /**< Buffer 1 */
 351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t buffer2;                /**< Buffer 2 */
 352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t extended_status;        /**< Extended status */
 353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t reserved;               /**< Reserved */
 354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t time_stamp_nanoseconds; /**< Time stamp low */
 355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t time_stamp_seconds;     /**< Time stamp high */
 356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_DMA_DESC_t;
 357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time
 360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC_TIME
 362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t seconds;                 /**< Seconds */
 364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   int32_t nanoseconds;              /**< Nanoseconds */
 365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIME_t;
 366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH driver structure
 369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC
 371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   ETH_GLOBAL_TypeDef *regs;        /**< ETH module 0 (now, we have a single ETH module) */
 373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint64_t address;              /**< MAC address */
 374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_DMA_DESC_t *rx_desc; /**< DMA descriptor: RX */
 375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_DMA_DESC_t *tx_desc; /**< DMA descriptor: TX */
 376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *rx_buf;                /**< RX buffer */
 377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *tx_buf;                /**< TX buffer */
 378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *frame_end;              /**< End of assembled frame fragments */
 379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t num_rx_buf;              /**< How many RX descriptors? */
 380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t num_tx_buf;              /**< How many TX descriptors? */
 381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t tx_index;                /**< Transmit descriptor index */
 382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t rx_index;                /**< Receive descriptor index */
 383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t tx_ts_index;             /**< Transmit time-stamp descriptor index */
 384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_t;
 385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /* Anonymous structure/union guard end */
 387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (__CC_ARM)
 388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma pop
 389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #elif defined (__TASKING__)
 390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma warning restore
 391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * API PROTOTYPES
 395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #ifdef __cplusplus
 398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** extern "C" {
 399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t Initialization status
 404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the Ethernet MAC peripheral <br>
 407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the link speed, applies the duplex mode, sets auto-negotiation
 410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * and loop-back settings.
 411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac);
 413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the Ethernet MAC peripheral. <br>
 420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Required when initializing the PHY, to deliver the clocks to the MAC, before MAC is reseted.
 421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \note The module needs to be enabled before using XMC_ETH_MAC_Enable() <br>
 422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the link speed, applies the duplex mode, sets auto-negotiation
 425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * and loop-back settings.
 426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitEx(XMC_ETH_MAC_t *const eth_mac);
 428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the RX DMA descriptors <br>
 435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function initializes the RX descriptors in a chained configuration. It sets
 438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * up the status bit, control bit, buffer length and the buffer pointer.
 439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac);
 441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the TX DMA descriptors <br>
 448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function initializes the TX descriptors in a chained configuration. It sets
 451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * up the status bit, control bit, buffer length and the buffer pointer.
 452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac);
 454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  
 455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable the Ethernet MAC peripheral <br>
 461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function de-asserts the peripheral reset.
 464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac);
 466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable the Ethernet MAC peripheral <br>
 473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function asserts the peripheral reset.
 476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_Disable(XMC_ETH_MAC_t *const eth_mac);
 478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return bool
 482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Check if the ETH MAC is enabled <br>
 485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function checks if the ETH MAC is enabled or not. It returns "true" if the
 488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * peripheral is enabled, "false" otherwise.
 489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** bool XMC_ETH_MAC_IsEnabled(const XMC_ETH_MAC_t *const eth_mac);
 491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Reset the ETH MAC peripheral <br>
 498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function resets the ETH MAC peripheral. It blocks until reset.
 501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_Reset(XMC_ETH_MAC_t *const eth_mac)
 503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
 219              	 .loc 2 504 0
 220 0004 0368     	 ldr r3,[r0]
 221 0006 03F58053 	 add r3,r3,#4096
 222 000a 1A68     	 ldr r2,[r3]
 223 000c 42F00102 	 orr r2,r2,#1
 224 0010 1A60     	 str r2,[r3]
 505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
 225              	 .loc 2 505 0
 226 0012 0168     	 ldr r1,[r0]
 227 0014 01F58052 	 add r2,r1,#4096
 228              	.L18:
 229 0018 1368     	 ldr r3,[r2]
 230 001a 13F0010F 	 tst r3,#1
 231 001e FBD1     	 bne .L18
 232              	.LBE22:
 233              	.LBE21:
 221:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 234              	 .loc 1 221 0
 235 0020 4FF48063 	 mov r3,#1024
 236 0024 0B60     	 str r3,[r1]
 224:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 237              	 .loc 1 224 0
 238 0026 2368     	 ldr r3,[r4]
 239 0028 8022     	 movs r2,#128
 240 002a 9A61     	 str r2,[r3,#24]
 226:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                              (uint32_t)ETH_OPERATION_MODE_TSF_Msk |
 241              	 .loc 1 226 0
 242 002c 2268     	 ldr r2,[r4]
 243 002e 1449     	 ldr r1,.L21
 244 0030 41F21803 	 movw r3,#4120
 245 0034 D150     	 str r1,[r2,r3]
 231:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                        (uint32_t)ETH_BUS_MODE_AAL_Msk | /* the AHB interface generates all bursts
 246              	 .loc 1 231 0
 247 0036 2368     	 ldr r3,[r4]
 248 0038 03F58053 	 add r3,r3,#4096
 249 003c 114A     	 ldr r2,.L21+4
 250 003e 1A60     	 str r2,[r3]
 237:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 251              	 .loc 1 237 0
 252 0040 2046     	 mov r0,r4
 253              	.LVL16:
 254 0042 FFF7FEFF 	 bl XMC_ETH_MAC_InitRxDescriptors
 255              	.LVL17:
 238:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 256              	 .loc 1 238 0
 257 0046 2046     	 mov r0,r4
 258 0048 FFF7FEFF 	 bl XMC_ETH_MAC_InitTxDescriptors
 259              	.LVL18:
 241:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 260              	 .loc 1 241 0
 261 004c 2268     	 ldr r2,[r4]
 262 004e 4FF0FF31 	 mov r1,#-1
 263 0052 41F21403 	 movw r3,#4116
 264 0056 D150     	 str r1,[r2,r3]
 244:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 265              	 .loc 1 244 0
 266 0058 2268     	 ldr r2,[r4]
 267 005a 6FF07C43 	 mvn r3,#-67108864
 268 005e C2F81031 	 str r3,[r2,#272]
 245:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_IPC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK;
 269              	 .loc 1 245 0
 270 0062 2268     	 ldr r2,[r4]
 271 0064 C2F80C31 	 str r3,[r2,#268]
 246:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 272              	 .loc 1 246 0
 273 0068 2368     	 ldr r3,[r4]
 274 006a 6FF0C022 	 mvn r2,#-1073692672
 275 006e C3F80022 	 str r2,[r3,#512]
 249:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 276              	 .loc 1 249 0
 277 0072 2368     	 ldr r3,[r4]
 278 0074 4FF40272 	 mov r2,#520
 279 0078 DA63     	 str r2,[r3,#60]
 251:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 280              	 .loc 1 251 0
 281 007a 0023     	 movs r3,#0
 282 007c 2362     	 str r3,[r4,#32]
 283 007e 10BD     	 pop {r4,pc}
 284              	.LVL19:
 285              	.L22:
 286              	 .align 2
 287              	.L21:
 288 0080 04002002 	 .word 35651588
 289 0084 80200102 	 .word 33628288
 290              	 .cfi_endproc
 291              	.LFE227:
 293              	 .section .text.XMC_ETH_MAC_SetAddressEx,"ax",%progbits
 294              	 .align 2
 295              	 .global XMC_ETH_MAC_SetAddressEx
 296              	 .thumb
 297              	 .thumb_func
 299              	XMC_ETH_MAC_SetAddressEx:
 300              	.LFB231:
 322:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 323:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressEx(XMC_ETH_MAC_t *const eth_mac, uint8_t *const addr)
 324:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 301              	 .loc 1 324 0
 302              	 .cfi_startproc
 303              	 
 304              	 
 305              	 
 306              	.LVL20:
 307 0000 10B4     	 push {r4}
 308              	.LCFI5:
 309              	 .cfi_def_cfa_offset 4
 310              	 .cfi_offset 4,-4
 325:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MAC_ADDRESS0_HIGH = addr[4] | (addr[5] << 8); 
 311              	 .loc 1 325 0
 312 0002 0268     	 ldr r2,[r0]
 313 0004 4C79     	 ldrb r4,[r1,#5]
 314 0006 0B79     	 ldrb r3,[r1,#4]
 315 0008 43EA0423 	 orr r3,r3,r4,lsl#8
 316 000c 1364     	 str r3,[r2,#64]
 326:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MAC_ADDRESS0_LOW = addr[0] | (addr[1] << 8) | (addr[2] << 16) | (addr[3] << 24); 
 317              	 .loc 1 326 0
 318 000e 0068     	 ldr r0,[r0]
 319              	.LVL21:
 320 0010 4A78     	 ldrb r2,[r1,#1]
 321 0012 8B78     	 ldrb r3,[r1,#2]
 322 0014 1B04     	 lsls r3,r3,#16
 323 0016 43EA0223 	 orr r3,r3,r2,lsl#8
 324 001a 0A78     	 ldrb r2,[r1]
 325 001c 1343     	 orrs r3,r3,r2
 326 001e CA78     	 ldrb r2,[r1,#3]
 327 0020 43EA0263 	 orr r3,r3,r2,lsl#24
 328 0024 4364     	 str r3,[r0,#68]
 327:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 329              	 .loc 1 327 0
 330 0026 5DF8044B 	 ldr r4,[sp],#4
 331              	.LCFI6:
 332              	 .cfi_restore 4
 333              	 .cfi_def_cfa_offset 0
 334 002a 7047     	 bx lr
 335              	 .cfi_endproc
 336              	.LFE231:
 338              	 .section .text.XMC_ETH_MAC_GetAddressEx,"ax",%progbits
 339              	 .align 2
 340              	 .global XMC_ETH_MAC_GetAddressEx
 341              	 .thumb
 342              	 .thumb_func
 344              	XMC_ETH_MAC_GetAddressEx:
 345              	.LFB232:
 328:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 329:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_GetAddressEx(XMC_ETH_MAC_t *const eth_mac, uint8_t *const addr)
 330:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 346              	 .loc 1 330 0
 347              	 .cfi_startproc
 348              	 
 349              	 
 350              	 
 351              	.LVL22:
 331:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t low_addr = eth_mac->regs->MAC_ADDRESS0_LOW;
 352              	 .loc 1 331 0
 353 0000 0268     	 ldr r2,[r0]
 354 0002 536C     	 ldr r3,[r2,#68]
 355              	.LVL23:
 332:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t high_addr = eth_mac->regs->MAC_ADDRESS0_HIGH;
 356              	 .loc 1 332 0
 357 0004 126C     	 ldr r2,[r2,#64]
 358              	.LVL24:
 333:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 334:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[0] = low_addr & 0xff;
 359              	 .loc 1 334 0
 360 0006 0B70     	 strb r3,[r1]
 335:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[1] = (low_addr >> 8) & 0xff;
 361              	 .loc 1 335 0
 362 0008 180A     	 lsrs r0,r3,#8
 363              	.LVL25:
 364 000a 4870     	 strb r0,[r1,#1]
 336:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[2] = (low_addr >> 16) & 0xff;
 365              	 .loc 1 336 0
 366 000c 180C     	 lsrs r0,r3,#16
 367 000e 8870     	 strb r0,[r1,#2]
 337:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[3] = (low_addr >> 24) & 0xff;
 368              	 .loc 1 337 0
 369 0010 1B0E     	 lsrs r3,r3,#24
 370              	.LVL26:
 371 0012 CB70     	 strb r3,[r1,#3]
 338:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[4] = high_addr & 0xff;
 372              	 .loc 1 338 0
 373 0014 0A71     	 strb r2,[r1,#4]
 339:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[5] = (high_addr >> 8) & 0xff;
 374              	 .loc 1 339 0
 375 0016 120A     	 lsrs r2,r2,#8
 376              	.LVL27:
 377 0018 4A71     	 strb r2,[r1,#5]
 378 001a 7047     	 bx lr
 379              	 .cfi_endproc
 380              	.LFE232:
 382              	 .section .text.XMC_ETH_MAC_SetAddressPerfectFilter,"ax",%progbits
 383              	 .align 2
 384              	 .global XMC_ETH_MAC_SetAddressPerfectFilter
 385              	 .thumb
 386              	 .thumb_func
 388              	XMC_ETH_MAC_SetAddressPerfectFilter:
 389              	.LFB233:
 340:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 341:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 342:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set address perfect filter */
 343:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressPerfectFilter(XMC_ETH_MAC_t *const eth_mac,
 344:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                          uint8_t index,
 345:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                          const uint64_t addr,
 346:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                          uint32_t flags)
 347:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 390              	 .loc 1 347 0
 391              	 .cfi_startproc
 392              	 
 393              	 
 394              	 
 395              	.LVL28:
 396 0000 30B4     	 push {r4,r5}
 397              	.LCFI7:
 398              	 .cfi_def_cfa_offset 8
 399              	 .cfi_offset 4,-8
 400              	 .cfi_offset 5,-4
 348:../Libraries/XMCLib/src/xmc_eth_mac.c ****   __IO uint32_t *reg;
 349:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 350:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressPerfectFilter: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(e
 351:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressFilter: index is out of range", ((index > 0) && (index < 4)));
 352:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 353:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg = &(eth_mac->regs->MAC_ADDRESS0_HIGH);
 401              	 .loc 1 353 0
 402 0002 0068     	 ldr r0,[r0]
 403              	.LVL29:
 404 0004 4030     	 adds r0,r0,#64
 405              	.LVL30:
 354:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index] = (uint32_t)(addr >> 32U) | flags;
 406              	 .loc 1 354 0
 407 0006 8C00     	 lsls r4,r1,#2
 408 0008 029D     	 ldr r5,[sp,#8]
 409 000a 2B43     	 orrs r3,r3,r5
 410 000c 40F82130 	 str r3,[r0,r1,lsl#2]
 355:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index + 1U] = (uint32_t)addr;
 411              	 .loc 1 355 0
 412 0010 0434     	 adds r4,r4,#4
 413 0012 0251     	 str r2,[r0,r4]
 356:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 414              	 .loc 1 356 0
 415 0014 30BC     	 pop {r4,r5}
 416              	.LCFI8:
 417              	 .cfi_restore 5
 418              	 .cfi_restore 4
 419              	 .cfi_def_cfa_offset 0
 420              	.LVL31:
 421 0016 7047     	 bx lr
 422              	 .cfi_endproc
 423              	.LFE233:
 425              	 .section .text.XMC_ETH_MAC_SetAddressPerfectFilterEx,"ax",%progbits
 426              	 .align 2
 427              	 .global XMC_ETH_MAC_SetAddressPerfectFilterEx
 428              	 .thumb
 429              	 .thumb_func
 431              	XMC_ETH_MAC_SetAddressPerfectFilterEx:
 432              	.LFB234:
 357:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 358:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressPerfectFilterEx(XMC_ETH_MAC_t *const eth_mac,
 359:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            uint8_t index,
 360:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            uint8_t *const addr,
 361:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            uint32_t flags)
 362:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 433              	 .loc 1 362 0
 434              	 .cfi_startproc
 435              	 
 436              	 
 437              	 
 438              	.LVL32:
 439 0000 30B4     	 push {r4,r5}
 440              	.LCFI9:
 441              	 .cfi_def_cfa_offset 8
 442              	 .cfi_offset 4,-8
 443              	 .cfi_offset 5,-4
 363:../Libraries/XMCLib/src/xmc_eth_mac.c ****   __IO uint32_t *reg;
 364:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 365:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressPerfectFilter: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(e
 366:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressFilter: index is out of range", ((index > 0) && (index < 4)));
 367:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 368:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg = &(eth_mac->regs->MAC_ADDRESS0_HIGH);
 444              	 .loc 1 368 0
 445 0002 0068     	 ldr r0,[r0]
 446              	.LVL33:
 447 0004 4030     	 adds r0,r0,#64
 448              	.LVL34:
 369:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index] = addr[4] | (addr[5] << 8); 
 449              	 .loc 1 369 0
 450 0006 8C00     	 lsls r4,r1,#2
 451 0008 5579     	 ldrb r5,[r2,#5]
 452 000a 1379     	 ldrb r3,[r2,#4]
 453              	.LVL35:
 454 000c 43EA0523 	 orr r3,r3,r5,lsl#8
 455 0010 40F82130 	 str r3,[r0,r1,lsl#2]
 370:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index + 1U] = addr[0] | (addr[1] << 8) | (addr[2] << 16) | (addr[3] << 24); 
 456              	 .loc 1 370 0
 457 0014 0434     	 adds r4,r4,#4
 458 0016 5178     	 ldrb r1,[r2,#1]
 459              	.LVL36:
 460 0018 9378     	 ldrb r3,[r2,#2]
 461 001a 1B04     	 lsls r3,r3,#16
 462 001c 43EA0123 	 orr r3,r3,r1,lsl#8
 463 0020 1178     	 ldrb r1,[r2]
 464 0022 0B43     	 orrs r3,r3,r1
 465 0024 D278     	 ldrb r2,[r2,#3]
 466              	.LVL37:
 467 0026 43EA0263 	 orr r3,r3,r2,lsl#24
 468 002a 0351     	 str r3,[r0,r4]
 371:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 469              	 .loc 1 371 0
 470 002c 30BC     	 pop {r4,r5}
 471              	.LCFI10:
 472              	 .cfi_restore 5
 473              	 .cfi_restore 4
 474              	 .cfi_def_cfa_offset 0
 475 002e 7047     	 bx lr
 476              	 .cfi_endproc
 477              	.LFE234:
 479              	 .section .text.XMC_ETH_MAC_SetAddressHashFilter,"ax",%progbits
 480              	 .align 2
 481              	 .global XMC_ETH_MAC_SetAddressHashFilter
 482              	 .thumb
 483              	 .thumb_func
 485              	XMC_ETH_MAC_SetAddressHashFilter:
 486              	.LFB235:
 372:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 373:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set address hash filter */
 374:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressHashFilter(XMC_ETH_MAC_t *const eth_mac, const uint64_t hash)
 375:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 487              	 .loc 1 375 0
 488              	 .cfi_startproc
 489              	 
 490              	 
 491              	 
 492              	.LVL38:
 376:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->HASH_TABLE_HIGH = (uint32_t)(hash >> 32);
 493              	 .loc 1 376 0
 494 0000 0168     	 ldr r1,[r0]
 495 0002 8B60     	 str r3,[r1,#8]
 377:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->HASH_TABLE_LOW = (uint32_t)hash;
 496              	 .loc 1 377 0
 497 0004 0368     	 ldr r3,[r0]
 498 0006 DA60     	 str r2,[r3,#12]
 499 0008 7047     	 bx lr
 500              	 .cfi_endproc
 501              	.LFE235:
 503 000a 00BF     	 .section .text.XMC_ETH_MAC_SendFrame,"ax",%progbits
 504              	 .align 2
 505              	 .global XMC_ETH_MAC_SendFrame
 506              	 .thumb
 507              	 .thumb_func
 509              	XMC_ETH_MAC_SendFrame:
 510              	.LFB236:
 378:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 379:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 380:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Send frame */
 381:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SendFrame(XMC_ETH_MAC_t *const eth_mac, const uint8_t *frame, uint
 382:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 511              	 .loc 1 382 0
 512              	 .cfi_startproc
 513              	 
 514              	 
 515              	.LVL39:
 516 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 517              	.LCFI11:
 518              	 .cfi_def_cfa_offset 24
 519              	 .cfi_offset 3,-24
 520              	 .cfi_offset 4,-20
 521              	 .cfi_offset 5,-16
 522              	 .cfi_offset 6,-12
 523              	 .cfi_offset 7,-8
 524              	 .cfi_offset 14,-4
 383:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 384:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint8_t *dst;
 385:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t ctrl;
 386:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 387:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", eth_mac != NULL);
 388:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", eth_mac->regs == ETH0);
 389:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", (frame != NULL) && (len > 0));
 390:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 391:../Libraries/XMCLib/src/xmc_eth_mac.c ****   dst = eth_mac->frame_end;
 525              	 .loc 1 391 0
 526 0002 066A     	 ldr r6,[r0,#32]
 527              	.LVL40:
 392:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 393:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN)
 528              	 .loc 1 393 0
 529 0004 90F82640 	 ldrb r4,[r0,#38]
 530 0008 6401     	 lsls r4,r4,#5
 531 000a 4769     	 ldr r7,[r0,#20]
 532 000c 07EB040E 	 add lr,r7,r4
 533 0010 3C59     	 ldr r4,[r7,r4]
 534 0012 002C     	 cmp r4,#0
 535 0014 11DA     	 bge .L32
 536              	.LVL41:
 394:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 395:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Transmitter is busy, wait */
 396:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 397:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (eth_mac->regs->STATUS & ETH_STATUS_TU_Msk)
 537              	 .loc 1 397 0
 538 0016 0368     	 ldr r3,[r0]
 539              	.LVL42:
 540 0018 41F21402 	 movw r2,#4116
 541              	.LVL43:
 542 001c 9A58     	 ldr r2,[r3,r2]
 543 001e 12F0040F 	 tst r2,#4
 544 0022 53D0     	 beq .L41
 398:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 399:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Receive buffer unavailable, resume DMA */
 400:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TU_Msk;
 545              	 .loc 1 400 0
 546 0024 0421     	 movs r1,#4
 547              	.LVL44:
 548 0026 41F21402 	 movw r2,#4116
 549 002a 9950     	 str r1,[r3,r2]
 401:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 550              	 .loc 1 401 0
 551 002c 0268     	 ldr r2,[r0]
 552 002e 0021     	 movs r1,#0
 553 0030 41F20403 	 movw r3,#4100
 554 0034 D150     	 str r1,[r2,r3]
 396:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (eth_mac->regs->STATUS & ETH_STATUS_TU_Msk)
 555              	 .loc 1 396 0
 556 0036 0120     	 movs r0,#1
 557              	.LVL45:
 558 0038 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 559              	.LVL46:
 560              	.L32:
 402:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 403:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 404:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 405:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 406:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 407:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (dst == NULL)
 561              	 .loc 1 407 0
 562 003a 26B9     	 cbnz r6,.L34
 408:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 409:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Start of a new transmit frame */
 410:../Libraries/XMCLib/src/xmc_eth_mac.c ****       dst = (uint8_t *)eth_mac->tx_desc[eth_mac->tx_index].buffer1;
 563              	 .loc 1 410 0
 564 003c DEF80860 	 ldr r6,[lr,#8]
 565              	.LVL47:
 411:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].length = len;
 566              	 .loc 1 411 0
 567 0040 CEF80420 	 str r2,[lr,#4]
 568 0044 04E0     	 b .L35
 569              	.L34:
 412:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 413:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 414:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 415:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Sending data fragments in progress */
 416:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].length += len;
 570              	 .loc 1 416 0
 571 0046 DEF80440 	 ldr r4,[lr,#4]
 572 004a 1444     	 add r4,r4,r2
 573 004c CEF80440 	 str r4,[lr,#4]
 574              	.L35:
 575 0050 1D46     	 mov r5,r3
 576 0052 0446     	 mov r4,r0
 417:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 418:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 419:../Libraries/XMCLib/src/xmc_eth_mac.c ****     memcpy(dst, frame, len);
 577              	 .loc 1 419 0
 578 0054 3046     	 mov r0,r6
 579              	.LVL48:
 580 0056 FFF7FEFF 	 bl memcpy
 581              	.LVL49:
 420:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 421:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_FRAGMENT)
 582              	 .loc 1 421 0
 583 005a 15F0010F 	 tst r5,#1
 584 005e 02D0     	 beq .L36
 422:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 423:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* More data to come, remember current write position */
 424:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->frame_end = dst;
 585              	 .loc 1 424 0
 586 0060 2662     	 str r6,[r4,#32]
 425:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 426:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 427:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 428:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Frame is now ready, send it to DMA */
 429:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl = eth_mac->tx_desc[eth_mac->tx_index].status | ETH_MAC_DMA_TDES0_CIC;
 430:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl &= ~(ETH_MAC_DMA_TDES0_IC | ETH_MAC_DMA_TDES0_TTSE);
 431:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 432:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_EVENT)
 433:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 434:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl |= ETH_MAC_DMA_TDES0_IC;
 435:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 436:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 437:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_TIMESTAMP)
 438:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 439:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl |= ETH_MAC_DMA_TDES0_TTSE;
 440:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 441:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_ts_index = eth_mac->tx_index;
 442:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 443:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].status = ctrl | ETH_MAC_DMA_TDES0_OWN;
 444:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 445:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_index++;
 446:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (eth_mac->tx_index == eth_mac->num_tx_buf)
 447:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 448:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_index = 0U;
 449:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 450:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->frame_end = NULL;
 451:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 452:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Start frame transmission */
 453:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
 454:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 455:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 456:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_OK;
 587              	 .loc 1 456 0
 588 0062 0020     	 movs r0,#0
 589 0064 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 590              	.LVL50:
 591              	.L36:
 429:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl &= ~(ETH_MAC_DMA_TDES0_IC | ETH_MAC_DMA_TDES0_TTSE);
 592              	 .loc 1 429 0
 593 0066 94F82600 	 ldrb r0,[r4,#38]
 594 006a 4301     	 lsls r3,r0,#5
 595 006c 6169     	 ldr r1,[r4,#20]
 596              	.LVL51:
 430:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 597              	 .loc 1 430 0
 598 006e CA58     	 ldr r2,[r1,r3]
 599 0070 22F08442 	 bic r2,r2,#1107296256
 600              	.LVL52:
 432:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 601              	 .loc 1 432 0
 602 0074 15F0020F 	 tst r5,#2
 430:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 603              	 .loc 1 430 0
 604 0078 0EBF     	 itee eq
 605 007a 42F44002 	 orreq r2,r2,#12582912
 606              	.LVL53:
 434:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 607              	 .loc 1 434 0
 608 007e 42F08142 	 orrne r2,r2,#1082130432
 609 0082 42F48002 	 orrne r2,r2,#4194304
 610              	.LVL54:
 437:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 611              	 .loc 1 437 0
 612 0086 15F0040F 	 tst r5,#4
 439:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 613              	 .loc 1 439 0
 614 008a 18BF     	 it ne
 615 008c 42F00072 	 orrne r2,r2,#33554432
 616              	.LVL55:
 441:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 617              	 .loc 1 441 0
 618 0090 84F82800 	 strb r0,[r4,#40]
 443:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 619              	 .loc 1 443 0
 620 0094 42F00042 	 orr r2,r2,#-2147483648
 621              	.LVL56:
 622 0098 CA50     	 str r2,[r1,r3]
 445:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (eth_mac->tx_index == eth_mac->num_tx_buf)
 623              	 .loc 1 445 0
 624 009a 94F82630 	 ldrb r3,[r4,#38]
 625 009e 0133     	 adds r3,r3,#1
 626 00a0 DBB2     	 uxtb r3,r3
 627 00a2 84F82630 	 strb r3,[r4,#38]
 446:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 628              	 .loc 1 446 0
 629 00a6 94F82520 	 ldrb r2,[r4,#37]
 630 00aa 9A42     	 cmp r2,r3
 448:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 631              	 .loc 1 448 0
 632 00ac 04BF     	 itt eq
 633 00ae 0023     	 moveq r3,#0
 634 00b0 84F82630 	 strbeq r3,[r4,#38]
 450:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 635              	 .loc 1 450 0
 636 00b4 0020     	 movs r0,#0
 637 00b6 2062     	 str r0,[r4,#32]
 453:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 638              	 .loc 1 453 0
 639 00b8 2268     	 ldr r2,[r4]
 640 00ba 0221     	 movs r1,#2
 641 00bc 41F21403 	 movw r3,#4116
 642 00c0 D150     	 str r1,[r2,r3]
 454:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 643              	 .loc 1 454 0
 644 00c2 2268     	 ldr r2,[r4]
 645 00c4 41F20403 	 movw r3,#4100
 646 00c8 D050     	 str r0,[r2,r3]
 647 00ca F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 648              	.LVL57:
 649              	.L41:
 396:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (eth_mac->regs->STATUS & ETH_STATUS_TU_Msk)
 650              	 .loc 1 396 0
 651 00cc 0120     	 movs r0,#1
 652              	.LVL58:
 457:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 458:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 459:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 460:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 653              	 .loc 1 460 0
 654 00ce F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 655              	 .cfi_endproc
 656              	.LFE236:
 658              	 .section .text.XMC_ETH_MAC_ReadFrame,"ax",%progbits
 659              	 .align 2
 660              	 .global XMC_ETH_MAC_ReadFrame
 661              	 .thumb
 662              	 .thumb_func
 664              	XMC_ETH_MAC_ReadFrame:
 665              	.LFB237:
 461:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 462:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Read frame */
 463:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_ReadFrame(XMC_ETH_MAC_t *const eth_mac, uint8_t *frame, uint32_t len)
 464:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 666              	 .loc 1 464 0
 667              	 .cfi_startproc
 668              	 
 669              	 
 670              	.LVL59:
 671 0000 38B5     	 push {r3,r4,r5,lr}
 672              	.LCFI12:
 673              	 .cfi_def_cfa_offset 16
 674              	 .cfi_offset 3,-16
 675              	 .cfi_offset 4,-12
 676              	 .cfi_offset 5,-8
 677              	 .cfi_offset 14,-4
 678 0002 0446     	 mov r4,r0
 679 0004 1546     	 mov r5,r2
 680              	.LVL60:
 465:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint8_t const *src;
 466:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 467:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", eth_mac != NULL);
 468:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", eth_mac->regs == ETH0);
 469:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", (frame != NULL) && (len > 0));
 470:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 471:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Fast-copy data to packet buffer */
 472:../Libraries/XMCLib/src/xmc_eth_mac.c ****   src = (uint8_t const *)eth_mac->rx_desc[eth_mac->rx_index].buffer1;
 681              	 .loc 1 472 0
 682 0006 90F82700 	 ldrb r0,[r0,#39]
 683              	.LVL61:
 684 000a 2369     	 ldr r3,[r4,#16]
 685 000c 03EB4013 	 add r3,r3,r0,lsl#5
 473:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 474:../Libraries/XMCLib/src/xmc_eth_mac.c ****   memcpy(frame, src, len);
 686              	 .loc 1 474 0
 687 0010 0846     	 mov r0,r1
 688              	.LVL62:
 689 0012 9968     	 ldr r1,[r3,#8]
 690              	.LVL63:
 691 0014 FFF7FEFF 	 bl memcpy
 692              	.LVL64:
 475:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 476:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Return this block back to DMA */
 477:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[eth_mac->rx_index].status = ETH_MAC_DMA_RDES0_OWN;
 693              	 .loc 1 477 0
 694 0018 94F82730 	 ldrb r3,[r4,#39]
 695 001c 2269     	 ldr r2,[r4,#16]
 696 001e 5B01     	 lsls r3,r3,#5
 697 0020 4FF00041 	 mov r1,#-2147483648
 698 0024 D150     	 str r1,[r2,r3]
 478:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 479:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index++;
 699              	 .loc 1 479 0
 700 0026 94F82730 	 ldrb r3,[r4,#39]
 701 002a 0133     	 adds r3,r3,#1
 702 002c DBB2     	 uxtb r3,r3
 703 002e 84F82730 	 strb r3,[r4,#39]
 480:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->rx_index == eth_mac->num_rx_buf)
 704              	 .loc 1 480 0
 705 0032 94F82420 	 ldrb r2,[r4,#36]
 706 0036 9A42     	 cmp r2,r3
 481:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 482:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->rx_index = 0U;
 707              	 .loc 1 482 0
 708 0038 04BF     	 itt eq
 709 003a 0023     	 moveq r3,#0
 710 003c 84F82730 	 strbeq r3,[r4,#39]
 483:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 484:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 485:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->regs->STATUS & ETH_STATUS_RU_Msk)
 711              	 .loc 1 485 0
 712 0040 2368     	 ldr r3,[r4]
 713 0042 41F21402 	 movw r2,#4116
 714 0046 9A58     	 ldr r2,[r3,r2]
 715 0048 12F0800F 	 tst r2,#128
 716 004c 08D0     	 beq .L45
 486:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 487:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Receive buffer unavailable, resume DMA */
 488:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 717              	 .loc 1 488 0
 718 004e 8021     	 movs r1,#128
 719 0050 41F21402 	 movw r2,#4116
 720 0054 9950     	 str r1,[r3,r2]
 489:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 721              	 .loc 1 489 0
 722 0056 2268     	 ldr r2,[r4]
 723 0058 0021     	 movs r1,#0
 724 005a 41F20803 	 movw r3,#4104
 725 005e D150     	 str r1,[r2,r3]
 726              	.L45:
 490:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 491:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 492:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (len);
 493:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 727              	 .loc 1 493 0
 728 0060 2846     	 mov r0,r5
 729 0062 38BD     	 pop {r3,r4,r5,pc}
 730              	 .cfi_endproc
 731              	.LFE237:
 733              	 .section .text.XMC_ETH_MAC_GetRxFrameSize,"ax",%progbits
 734              	 .align 2
 735              	 .global XMC_ETH_MAC_GetRxFrameSize
 736              	 .thumb
 737              	 .thumb_func
 739              	XMC_ETH_MAC_GetRxFrameSize:
 740              	.LFB238:
 494:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 495:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get RX frame size */
 496:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetRxFrameSize(XMC_ETH_MAC_t *const eth_mac)
 497:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 741              	 .loc 1 497 0
 742              	 .cfi_startproc
 743              	 
 744              	 
 745              	 
 746              	.LVL65:
 498:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t status;
 499:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t len = 0U;
 500:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 501:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = eth_mac->rx_desc[eth_mac->rx_index].status;
 747              	 .loc 1 501 0
 748 0000 90F82730 	 ldrb r3,[r0,#39]
 749 0004 0269     	 ldr r2,[r0,#16]
 750 0006 5B01     	 lsls r3,r3,#5
 751 0008 D058     	 ldr r0,[r2,r3]
 752              	.LVL66:
 502:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 503:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (status & ETH_MAC_DMA_RDES0_OWN)
 753              	 .loc 1 503 0
 754 000a 0028     	 cmp r0,#0
 755 000c 08DB     	 blt .L49
 504:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 505:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Owned by DMA */
 506:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = 0U;
 507:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 508:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 509:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 756              	 .loc 1 509 0
 757 000e 00F40343 	 and r3,r0,#33536
 508:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 758              	 .loc 1 508 0
 759 0012 B3F5407F 	 cmp r3,#768
 760 0016 05D1     	 bne .L50
 510:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
 511:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 512:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Error, this block is invalid */
 513:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = 0xFFFFFFFFU;
 514:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 515:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else 
 516:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 517:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Subtract CRC */
 518:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = ((status & ETH_MAC_DMA_RDES0_FL) >> 16U) - 4U;
 761              	 .loc 1 518 0
 762 0018 C0F30D40 	 ubfx r0,r0,#16,#14
 763              	.LVL67:
 764 001c 0438     	 subs r0,r0,#4
 765              	.LVL68:
 766 001e 7047     	 bx lr
 767              	.LVL69:
 768              	.L49:
 506:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 769              	 .loc 1 506 0
 770 0020 0020     	 movs r0,#0
 771              	.LVL70:
 772 0022 7047     	 bx lr
 773              	.LVL71:
 774              	.L50:
 513:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 775              	 .loc 1 513 0
 776 0024 4FF0FF30 	 mov r0,#-1
 777              	.LVL72:
 519:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 520:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 521:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return len;
 522:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 778              	 .loc 1 522 0
 779 0028 7047     	 bx lr
 780              	 .cfi_endproc
 781              	.LFE238:
 783 002a 00BF     	 .section .text.XMC_ETH_MAC_SetManagmentClockDivider,"ax",%progbits
 784              	 .align 2
 785              	 .global XMC_ETH_MAC_SetManagmentClockDivider
 786              	 .thumb
 787              	 .thumb_func
 789              	XMC_ETH_MAC_SetManagmentClockDivider:
 790              	.LFB239:
 523:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 524:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set management clock divider */
 525:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac)
 526:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 791              	 .loc 1 526 0
 792              	 .cfi_startproc
 793              	 
 794              	 
 795              	 
 796              	.LVL73:
 797              	.LBB23:
 798              	.LBB24:
 799              	.LBB25:
 800              	.LBB26:
 801              	 .file 3 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc4_scu.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @file xmc4_scu.h
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @date 2016-06-15
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @cond
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * All rights reserved.                        
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                             
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * following conditions are met:   
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer.                        
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Change History
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * --------------
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-06-20:
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Initial version
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-11-30:
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *      
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-03-09:
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_EnableMonitor/XMC_SCU_POWER_DisableMonitor
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_POWER_GetEVRStatus, XMC_SCU_POWER_GetEVR13Voltage, XMC_SCU_POWER_GetEVR33Vol
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-04-15:
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Fixed naming of XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG peripheral clock.
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *       Added enable and disable for peripheral clocks       
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-05-19:
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_IsLowPowerOscillatorStable() and XMC_SCU_CLOCK_IsHighPerformanceOscill
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_WaitForInterrupt() and XMC_SCU_POWER_WaitForEvent()
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(), 
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(),
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus()
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(), 
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(),
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus()
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Removed XMC_SCU_INTERRUPT_EVENT_OSCULSTAT_UPDATED, XMC_SCU_INTERRUPT_EVENT_HDSTAT_UPDATED
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-06-14:
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_IsWakeupEventDetected() and XMC_SCU_HIB_ClearWakeupEventDetectionStatus(
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-06-15:
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_EnterHibernateStateEx() which allows to select between external or inter
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Extended wakeup hibernate events using LPAC wakeup on events. Only available in XMC44, XMC
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added LPAC APIs. Only available in XMC44, XMC42 and XMC41 series.
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @endcond 
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #ifndef XMC4_SCU_H
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC4_SCU_H
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * HEADER FILES
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #include "xmc_common.h"
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if UC_FAMILY == XMC4
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup SCU
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * MACROS
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_8MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8MH
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_8MHZ (89U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8M
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_8MHZ (2U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 8
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_12MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 12
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_12MHZ (79U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_12MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_16MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 16
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_16MHZ (59U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_16MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_WDT_WARN           SCU_INTERRUPT_SRSTAT_PRWARN_Msk /**< Watchdog pr
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC       SCU_INTERRUPT_SRSTAT_PI_Msk     /**< RTC periodi
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_ALARM          SCU_INTERRUPT_SRSTAT_AI_Msk     /**< RTC alarm e
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_DLR_OVERRUN        SCU_INTERRUPT_SRSTAT_DLROVR_Msk /**< DLR overrun
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCR_Msk)
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCR_UPDATED     SCU_INTERRUPT_SRSTAT_LPACCR_Msk /**< LPAC Contro
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH0_Msk)
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH0_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH0_Msk /**< LPAC Thres
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH1_Msk)
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH1_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH1_Msk  /**< LPAC Thre
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACST_Msk)
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACST_UPDATED     SCU_INTERRUPT_SRSTAT_LPACST_Msk  /**< LPAC Statu
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCLR_Msk)
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCLR_UPDATED    SCU_INTERRUPT_SRSTAT_LPACCLR_Msk /**< LPAC event
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACSET_Msk)
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACSET_UPDATED    SCU_INTERRUPT_SRSTAT_LPACSET_Msk /**< LPAC event
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTST_Msk)
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTST_UPDATED     SCU_INTERRUPT_SRSTAT_HINTST_Msk /**< HIB HINTST 
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTCLR_Msk)
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTCLR_UPDATED    SCU_INTERRUPT_SRSTAT_HINTCLR_Msk /**< HIB HINTCL
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTSET_Msk)
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTSET_UPDATED    SCU_INTERRUPT_SRSTAT_HINTSET_Msk /**< HIB HINTSE
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED      SCU_INTERRUPT_SRSTAT_HDCLR_Msk /**< HIB HDCLR re
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDSET_UPDATED      SCU_INTERRUPT_SRSTAT_HDSET_Msk /**< HIB HDSET re
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED       SCU_INTERRUPT_SRSTAT_HDCR_Msk /**< HIB HDCR regi
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCSICTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCSICTRL_Msk /**< HIB OSCS
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCULCTRL_Msk /**< HIB OSCU
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED     SCU_INTERRUPT_SRSTAT_RTC_CTR_Msk /**< HIB RTCCTR
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM0_Msk /**< HIB RTCA
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM1_Msk /**< HIB RTCA
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM0_Msk /**< HIB TIM0 
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM1_Msk /**< HIB TIM1 
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RMX_UPDATED        SCU_INTERRUPT_SRSTAT_RMX_Msk /**< HIB RMX regist
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * ENUMS
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines Capture/Compare unit timer slice trigger, that enables synchronous start function avail
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  CCUCON register. Use type \a XMC_SCU_CCU_TRIGGER_t for accessing these enum parameters.
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CCU_TRIGGER
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU40)
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU40 = SCU_GENERAL_CCUCON_GSC40_Msk, /**< Trigger mask used for Global Start
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU40 peripheral. */
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU41 = SCU_GENERAL_CCUCON_GSC41_Msk, /**< Trigger mask used for Global Start
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU41 peripheral. */
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU42 = SCU_GENERAL_CCUCON_GSC42_Msk, /**< Trigger mask used for Global Start
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU42 peripheral. */
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU43 = SCU_GENERAL_CCUCON_GSC43_Msk, /**< Trigger mask used for Global Start
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU43 peripheral. */
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU80 = SCU_GENERAL_CCUCON_GSC80_Msk, /**< Trigger mask used for Global Start
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU80 peripheral. */
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU81 = SCU_GENERAL_CCUCON_GSC81_Msk /**< Trigger mask used for Global Start 
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU81 peripheral. */
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CCU_TRIGGER_t;
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations representing the status of trap cause. The cause of the trap gets automati
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a TRAPSTAT register and can be checked by user software to determine the state of the syst
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. 
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_TRAP_t for accessing these enum parameters.
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_TRAP 
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_OSC_WDG      = SCU_TRAP_TRAPSTAT_SOSCWDGT_Msk, /**< OSC_HP Oscillator Watchdog trap.
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_VCO_LOCK     = SCU_TRAP_TRAPSTAT_SVCOLCKT_Msk, /**< PLL loss of lock trap. */
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_USB_VCO_LOCK = SCU_TRAP_TRAPSTAT_UVCOLCKT_Msk, /**< USB PLL loss of lock trap. */ 
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PARITY_ERROR = SCU_TRAP_TRAPSTAT_PET_Msk,      /**< Memory Parity error trap. */  
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_BROWNOUT     = SCU_TRAP_TRAPSTAT_BRWNT_Msk,    /**< Brownout trap. */ 
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ULP_WDG      = SCU_TRAP_TRAPSTAT_ULPWDGT_Msk,  /**< Unstable 32KHz clock trap. */ 
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE0  = SCU_TRAP_TRAPSTAT_BWERR0T_Msk,  /**< Bad memory access of peripherals
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE1  = SCU_TRAP_TRAPSTAT_BWERR1T_Msk,  /**< Bad memory access of peripherals
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPHIT_Msk)
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_HIGH = SCU_TRAP_TRAPSTAT_TEMPHIT_Msk,  /**< Die temperature higher than expe
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPLOT_Msk)
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_LOW  = SCU_TRAP_TRAPSTAT_TEMPLOT_Msk,  /**< Die temperature lower than expec
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ECAT_RESET = SCU_TRAP_TRAPSTAT_ECAT0RST_Msk, /**< EtherCat Reset */ 
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_TRAP_t;
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for different parity event generating modules that in turn generate a trap
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Parity can be enabled with \a PETE register in order to get the trap flag reflected in \a TRAPR
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  configure parity error trap generation mechanism bits of \a PETE register.
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PETE register.
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PARITY_t for accessing these enum parameters.
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PARITY
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PSRAM_MEM  = SCU_PARITY_PEEN_PEENPS_Msk,   /**< Program SRAM parity error trap. */
 233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM1_MEM = SCU_PARITY_PEEN_PEENDS1_Msk,  /**< Data SRAM-1 parity error trap. */ 
 234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_DSRAM2_MEM)
 235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM2_MEM = SCU_PARITY_PEEN_PEENDS2_Msk,  /**< Data SRAM-2 parity error trap. */ 
 236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC0_MEM  = SCU_PARITY_PEEN_PEENU0_Msk,   /**< USIC0 memory parity error trap. */
 238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_USIC1_MEM)
 239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC1_MEM  = SCU_PARITY_PEEN_PEENU1_Msk,   /**< USIC1 memory parity error trap. */
 240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_USIC2_MEM)
 242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC2_MEM  = SCU_PARITY_PEEN_PEENU2_Msk,   /**< USIC2 memory parity error trap. */
 243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_MCAN_MEM   = SCU_PARITY_PEEN_PEENMC_Msk,   /**< CAN memory parity error trap. */
 245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PMU_MEM    = SCU_PARITY_PEEN_PEENPPRF_Msk, /**< PMU Prefetch memory parity error t
 246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USB_MEM    = SCU_PARITY_PEEN_PEENUSB_Msk,  /**< USB memory parity error trap. */ 
 247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0TX_Msk)
 248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_TXMEM  = SCU_PARITY_PEEN_PEENETH0TX_Msk, /**< Ethernet transmit memory parity 
 249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0RX_Msk)
 251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_RXMEM  = SCU_PARITY_PEEN_PEENETH0RX_Msk, /**< Ethernet receive memory parity e
 252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD0_Msk)
 254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM0 = SCU_PARITY_PEEN_PEENSD0_Msk, /**< SDMMC Memory-0 parity error trap. *
 255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD1_Msk)
 257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM1 = SCU_PARITY_PEEN_PEENSD1_Msk, /**< SDMMC Memory-1 parity error trap. *
 258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PARITY_t;
 260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the different causes for last reset. The cause of the last reset gets automatically sto
 263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a SCU_RSTSTAT register and can be checked by user software to determine the state of the s
 264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. All the enum items are tabulated as per bits present in \a SCU_RSTSTAT register.
 265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_RESET_REASON_t for accessing these enum parameters.
 266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_RESET_REASON
 268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PORST        = (1UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SWD          = (2UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sup
 271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PV           = (4UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SW           = (8UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sof
 273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_LOCKUP       = (16UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to re
 274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_WATCHDOG     = (32UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Wa
 275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PARITY_ERROR = (128UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to r
 276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_RESET_REASON_t;
 277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for events which can lead to interrupt. These enumeration values represent
 280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * status of one of the bits in \a SRSTAT register. 
 281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_INTERRUPT_EVENT_t for accessing these enum parameters.
 282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef uint32_t XMC_SCU_INTERRUPT_EVENT_t;
 284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  
 286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration for the events that can generate non maskable interrupt(NMI).
 288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The NMI generation can be enabled with \a NMIREQEN register. The event will be reflected in \a 
 289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  mirrored in the TRAPSTAT register. These enums can be used to configure NMI request generation 
 290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  NMIREQEN register.  Once configured, these events can generate non maskable interrupt.
 291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a NMIREQEN register.
 292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_NMIREQ_t for accessing these enum parameters.
 293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_NMIREQ
 295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_WDT_WARN = SCU_INTERRUPT_NMIREQEN_PRWARN_Msk, /**< Watchdog timer Pre-Warning even
 297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_PI   = SCU_INTERRUPT_NMIREQEN_PI_Msk,     /**< RTC Periodic event */ 
 298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_AI   = SCU_INTERRUPT_NMIREQEN_AI_Msk,     /**< RTC Alarm event */ 
 299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_0   = SCU_INTERRUPT_NMIREQEN_ERU00_Msk,  /**< Channel 0 event of ERU0 */  
 300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_1   = SCU_INTERRUPT_NMIREQEN_ERU01_Msk,  /**< Channel 1 event of ERU0 */ 
 301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_2   = SCU_INTERRUPT_NMIREQEN_ERU02_Msk,  /**< Channel 2 event of ERU0 */ 
 302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_3   = SCU_INTERRUPT_NMIREQEN_ERU03_Msk   /**< Channel 3 event of ERU0 */ 
 303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_NMIREQ_t;
 304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   
 305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration representing different peripheral reset bits in the \a PRSTAT registers.
 308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PRSTAT0,  \a PRSTAT1,  \a PRSTAT2,
 309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  \a PRSTAT3 registers. Use type \a XMC_SCU_PERIPHERAL_RESET_t for accessing these enum parameter
 310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Note: Release of reset should be prevented when the peripheral clock is gated in cases where ke
 311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock and bus interface clocks are shared, in order to avoid system hang-up.
 312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_RESET
 314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_VADC   = SCU_RESET_PRSTAT0_VADCRS_Msk,   /**< VADC reset. */ 
 316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DSD    = SCU_RESET_PRSTAT0_DSDRS_Msk,    /**< DSD reset. */
 318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU40  = SCU_RESET_PRSTAT0_CCU40RS_Msk,  /**< CCU40 reset. */
 320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU41  = SCU_RESET_PRSTAT0_CCU41RS_Msk,  /**< CCU41 reset. */
 322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU42  = SCU_RESET_PRSTAT0_CCU42RS_Msk,  /**< CCU42 reset. */
 325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU80  = SCU_RESET_PRSTAT0_CCU80RS_Msk,  /**< CCU80 reset. */
 328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU81  = SCU_RESET_PRSTAT0_CCU81RS_Msk,  /**< CCU81 reset. */
 331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF0 = SCU_RESET_PRSTAT0_POSIF0RS_Msk, /**< POSIF0 reset. */
 334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF1 = SCU_RESET_PRSTAT0_POSIF1RS_Msk, /**< POSIF1 reset.*/
 337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC0  = SCU_RESET_PRSTAT0_USIC0RS_Msk,  /**< USIC0 reset. */
 339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ERU1   = SCU_RESET_PRSTAT0_ERU1RS_Msk,   /**< ERU1 reset. */
 340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_HRPWM0 = SCU_RESET_PRSTAT0_HRPWM0RS_Msk,  /**< HRPWM0 reset. */
 342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU43  = (SCU_RESET_PRSTAT1_CCU43RS_Msk | 0x10000000UL),   /**< CCU43 re
 345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_LEDTS0 = (SCU_RESET_PRSTAT1_LEDTSCU0RS_Msk | 0x10000000UL), /**< LEDTS0 
 348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_MCAN   = (SCU_RESET_PRSTAT1_MCAN0RS_Msk | 0x10000000UL), /**< MCAN reset
 351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DAC    = (SCU_RESET_PRSTAT1_DACRS_Msk | 0x10000000UL),    /**< DAC reset
 354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_SDMMC  = (SCU_RESET_PRSTAT1_MMCIRS_Msk | 0x10000000UL),     /**< SDMMC r
 357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC1  = (SCU_RESET_PRSTAT1_USIC1RS_Msk | 0x10000000UL),    /**< USIC1 r
 360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC2  = (SCU_RESET_PRSTAT1_USIC2RS_Msk | 0x10000000UL),    /**< USIC2 r
 363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_PORTS  = (SCU_RESET_PRSTAT1_PPORTSRS_Msk | 0x10000000UL),   /**< PORTS r
 365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_WDT    = (SCU_RESET_PRSTAT2_WDTRS_Msk | 0x20000000UL),      /**< WDT res
 366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ETH0   = (SCU_RESET_PRSTAT2_ETH0RS_Msk | 0x20000000UL),     /**< ETH0 re
 368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA0 = (SCU_RESET_PRSTAT2_DMA0RS_Msk | 0x20000000UL),     /**< DMA0 re
 370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA1 = (SCU_RESET_PRSTAT2_DMA1RS_Msk | 0x20000000UL),     /**< DMA1 re
 372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_FCE    = (SCU_RESET_PRSTAT2_FCERS_Msk | 0x20000000UL),      /**< FCE res
 375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)  
 377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USB0   = (SCU_RESET_PRSTAT2_USBRS_Msk | 0x20000000UL),      /**< USB0 re
 378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)  
 380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ECAT0  = (SCU_RESET_PRSTAT2_ECAT0RS_Msk | 0x20000000UL),      /**< ECAT0
 381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_EBU    = (SCU_RESET_PRSTAT3_EBURS_Msk | 0x30000000UL)       /**< EBU res
 384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_RESET_t;
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for disabling the clocks sources of peripherals. Disabling of the peripher
 389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock is configured via the \a CLKCLR registers.
 390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK
 393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USB = SCU_CLK_CLKCLR_USBCDI_Msk, /**< USB module clock. */
 395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_MMC = SCU_CLK_CLKCLR_MMCCDI_Msk, /**< MMC module clock. */
 397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ETH = SCU_CLK_CLKCLR_ETH0CDI_Msk, /**< Ethernet module clock. */
 400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EBU = SCU_CLK_CLKCLR_EBUCDI_Msk, /**< EBU module clock. */
 403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_CCU = SCU_CLK_CLKCLR_CCUCDI_Msk, /**< CCU module clock. */
 405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDT = SCU_CLK_CLKCLR_WDTCDI_Msk  /**< WDT module clock. */
 406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_t;
 407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if(UC_SERIES != XMC45)
 409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines enumeration for peripherals that support clock gating. 
 411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The enumerations can be used for gating or ungating the peripheral clocks.
 412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * All the enum items are tabulated as per bits present in \a CGATSTAT0 register.
 413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_CLOCK
 416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_VADC   = SCU_CLK_CGATSTAT0_VADC_Msk,  /**< VADC peripheral gating. */
 418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DSD    = SCU_CLK_CGATSTAT0_DSD_Msk,   /**< DSD peripheral gating. */
 420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU40  = SCU_CLK_CGATSTAT0_CCU40_Msk,  /**< CCU40 peripheral gating. */
 422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU41  = SCU_CLK_CGATSTAT0_CCU41_Msk,  /**< CCU41 peripheral gating. */
 424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU42  = SCU_CLK_CGATSTAT0_CCU42_Msk,  /**< CCU42 peripheral gating. */
 427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU80  = SCU_CLK_CGATSTAT0_CCU80_Msk,  /**< CCU80 peripheral gating. */
 430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU81  = SCU_CLK_CGATSTAT0_CCU81_Msk,  /**< CCU81 peripheral gating. */
 433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF0 = SCU_CLK_CGATSTAT0_POSIF0_Msk,  /**< POSIF0 peripheral gating. *
 436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF1 = SCU_CLK_CGATSTAT0_POSIF1_Msk,   /**< POSIF1 peripheral gating. 
 439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC0  = SCU_CLK_CGATSTAT0_USIC0_Msk,   /**< USIC0 peripheral gating. */
 441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ERU1   = SCU_CLK_CGATSTAT0_ERU1_Msk,    /**< ERU1 peripheral gating. */
 442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_HRPWM0 = SCU_CLK_CGATSTAT0_HRPWM0_Msk,  /**< HRPWM0 peripheral gating. *
 444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU43  = (SCU_CLK_CGATSTAT1_CCU43_Msk | 0x10000000UL),   /**< CCU43 peri
 447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_LEDTS0 = (SCU_CLK_CGATSTAT1_LEDTSCU0_Msk | 0x10000000UL), /**< LEDTS0 pe
 450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_MCAN   = (SCU_CLK_CGATSTAT1_MCAN0_Msk | 0x10000000UL),   /**< MCAN perip
 453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DAC    = (SCU_CLK_CGATSTAT1_DAC_Msk | 0x10000000UL),     /**< DAC periph
 456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_SDMMC  = (SCU_CLK_CGATSTAT1_MMCI_Msk | 0x10000000UL),    /**< SDMMC peri
 459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC1  = (SCU_CLK_CGATSTAT1_USIC1_Msk | 0x10000000UL),   /**< USIC1 peri
 462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC2  = (SCU_CLK_CGATSTAT1_USIC2_Msk | 0x10000000UL),    /**< USIC2 per
 465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_PORTS  = (SCU_CLK_CGATSTAT1_PPORTS_Msk | 0x10000000UL),   /**< PORTS per
 467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_WDT    = (SCU_CLK_CGATSTAT2_WDT_Msk | 0x20000000UL),      /**< WDT perip
 468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ETH0   = (SCU_CLK_CGATSTAT2_ETH0_Msk | 0x20000000UL),     /**< ETH0 peri
 470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA0 = (SCU_CLK_CGATSTAT2_DMA0_Msk | 0x20000000UL),     /**< DMA0 peri
 472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA1 = (SCU_CLK_CGATSTAT2_DMA1_Msk | 0x20000000UL),     /**< DMA1 peri
 474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_FCE    = (SCU_CLK_CGATSTAT2_FCE_Msk | 0x20000000UL),      /**< FCE perip
 477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USB0   = (SCU_CLK_CGATSTAT2_USB_Msk | 0x20000000UL),      /**< USB0 peri
 480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ECAT0   = (SCU_CLK_CGATSTAT2_ECAT0_Msk | 0x20000000UL),      /**< ECAT0 
 483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_EBU    = (SCU_CLK_CGATSTAT3_EBU_Msk | 0x30000000UL)       /**< EBU perip
 486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_CLOCK_t;
 488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for system clock (fSYS) source. These enums are used to configure \a SYSSEL bit
 492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock Control Register. 
 493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_SYSCLKSRC_t for accessing these enum parameters.
 494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSCLKSRC
 496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_OFI = (0UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos), /**< Internal Fast Clock (fOF
 498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_PLL = (1UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos)  /**< PLL output (fPLL) as a
 500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSCLKSRC_t;
 502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the P-Divider input frequency. These enums are used to configure 
 505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. 
 506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_OSCCLKSRC_t for accessing these enum parameters.
 507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLLCLKSRC
 509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP = 0UL,  /**< External crystal oscillator
 511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                 (fOHP) as the source for P-Divider. */
 512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk /**< Ba
 513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                              as the source for P-Di
 514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLLCLKSRC_t;
 515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the USB clock source(fUSB/fSDMMC).
 518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * These enums are used to configure \a USBSEL bits of \a USBCLKCR
 519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. User can choose either fPLL or fUSBPLL clock as a source for USB clock. 
 520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_USBCLKSRC
 523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_USBPLL = (0UL << SCU_CLK_USBCLKCR_USBSEL_Pos), /**< USB PLL(fUSB PLL) as 
 525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_SYSPLL = (1UL << SCU_CLK_USBCLKCR_USBSEL_Pos)  /**< Main PLL output (fPLL
 527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_USBCLKSRC_t;
 529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
 531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the ECAT clock source.
 533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_ECATCLKSRC
 535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_USBPLL = (0UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos), /**< USB PLL (fUSBPLL) 
 537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL = (1UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos)  /**< Main PLL output (f
 538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_ECATCLKSRC_t;
 539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of WDT clock(fWDT). These enums are used to configure 
 543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOFI or fPLL or fSTDBY clock as a source for WDT clock. 
 544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_WDTCLKSRC
 547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_OFI = (0UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos),  /**< Internal Fast Clock 
 549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fOFI) as the source for
 550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_STDBY = (1UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos), /**< Standby clock 
 551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fSTDBY) as the source f
 552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_PLL = (2UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos)   /**< PLL output (fPLL) as th
 553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for WDT clock (fW
 554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_WDTCLKSRC_t;
 555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of external clock out (fEXT). These enums are used to 
 558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fSYS or fPLL or fUSBPLL clock as a source for external clock o
 559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_EXTOUTCLKSRC_t for accessing these enum parameters.
 560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_EXTOUTCLKSRC
 562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS = (0UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos),  /**< System clock (fSYS) 
 564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             the source for external
 565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_USB = (2UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< USB PLL output(fUSB P
 566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL = (3UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Main PLL output(fPLL)
 568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if ((UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY = (4UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Standby clock(fSTDB
 571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_EXTOUTCLKSRC_t;
 574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of RTC Clock (fRTC). These enums are used to configure
 577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either fOSI or fULP clock as a source for RTC Clock (fRTC).
 578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_RTCCLKSRC_t for accessing these enum parameters.
 579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_RTCCLKSRC
 581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_RCS_Pos), /**< Internal Slow Clock
 583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                          (fOSI) as the source for R
 584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_ULP = (1UL << SCU_HIBERNATE_HDCR_RCS_Pos) /**< Ultra Low Power Clock (fULP)
 585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                         as the source for RTC Clock
 586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_RTCCLKSRC_t;
 587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of Standby Clock (fSTDBY). These enums are used to con
 590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOSI or fULP clock as a source for Standby Clock (fSTDBY).
 591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_STDBYCLKSRC_t for accessing these enum parameters.
 592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_STDBYCLKSRC
 594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos), /**< Internal Slow Clock 
 596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fOSI) as the source for 
 597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSCULP = (1UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos) /**< Ultra Low Power Cl
 599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fULP) as the source for 
 600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_STDBYCLKSRC_t;
 602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for backup clock trimming. These enums are used to configure \a AOTREN  \a FOTR
 605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  PLLCON0 register. Use type \a XMC_SCU_CLOCK_BACKUP_TRIM_t for accessing these enum parameters.
 606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE
 608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY   = 0UL,  /**< Factory Oscillator Calibration: 
 610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                         Force adjustment of the internal oscillator
 611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC = 1UL   /**<  Automatic Oscillator Calibration adju
 612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t;
 613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 616:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting device boot mode. These enums are used to configure \a SWCON bits
 617:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose among various boot modes by configuring SWCON bits.
 618:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_BOOTMODE_t for accessing these enum parameters.
 619:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 620:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_BOOTMODE 
 621:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 622:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_NORMAL     = (0UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from start of flash
 623:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ASC_BSL    = (1UL << SCU_GENERAL_STCON_SWCON_Pos), /**< UART bootstrap. */
 624:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_BMI        = (2UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot Mode Index - Custom
 625:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            sequence. */
 626:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_CAN_BSL    = (3UL << SCU_GENERAL_STCON_SWCON_Pos), /**< CAN bootstrap. */
 627:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_PSRAM_BOOT = (4UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from PSRAM. */
 628:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM0       = (8UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed 
 629:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            address 0. */
 630:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM1       = (12UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed
 631:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             address 1. */
 632:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_FABM       = (14UL << SCU_GENERAL_STCON_SWCON_Pos), /**< fallback Alternate Boot
 633:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             Try ABM-0 then try ABM-
 634:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_BOOTMODE_t;
 635:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 636:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 637:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 638:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines various PLL modes of operation. These enums are used to configure \a VCOBYP bit of \a P
 639:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either normal or prescalar mode by configuring VCOBYP bit.
 640:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PLL_MODE_t for accessing these enum parameters.
 641:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 642:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLL_MODE
 643:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 644:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED, /**< fPLL derived from fOSC and PLL operating in prescalar mo
 645:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL,  /**< fPLL derived from fVCO and PLL operating in normal mode. 
 646:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR /**< fPLL derived from fOSC and PLL operating in prescalar mo
 647:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_MODE_t;
 648:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 649:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 650:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in SLEEP state.
 651:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetSleepConfig before going to SLEEP state.
 652:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 653:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The SLEEP state of the system corresponds to the SLEEP state of the CPU. The state is
 654:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 655:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. Peripherals are only clocked when configured to stay enabled. 
 656:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 657:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Peripherals can continue to operate unaffected and eventually generate an event to
 658:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  wake-up the CPU. Any interrupt to the NVIC will bring the CPU back to operation. The
 659:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock tree upon exit from SLEEP state is restored to what it was before entry into SLEEP
 660:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  state.
 661:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  
 662:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 663:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SLEEP_MODE_CONFIG
 664:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 665:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in SLEEP 
 666:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_SLEEPCR_SYSSEL_Msk,  /**< fPLL used as syst
 667:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 668:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in SLEEP state */
 669:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_SLEEPCR_USBCR_Msk,  /**< USB clock enabled i
 670:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 671:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 672:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in SLEEP state */
 673:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_SLEEPCR_MMCCR_Msk,/**< SDMMC clock enabled
 674:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 675:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 676:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in SLEEP state */
 677:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_SLEEPCR_ETH0CR_Msk,  /**< ETH clock enabled 
 678:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 679:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 680:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in SLEEP state */
 681:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_SLEEPCR_EBUCR_Msk,  /**< EBU clock enabled i
 682:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 683:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_CCU = 0,  /**< CCU clock disabled in SLEEP state */
 684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_SLEEPCR_CCUCR_Msk,  /**< CCU clock enabled i
 685:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_WDT = 0,  /**< WDT clock disabled in SLEEP state */
 686:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_SLEEPCR_WDTCR_Msk,  /**< WDT clock enabled i
 687:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_t;
 688:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 689:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 690:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in DEEPSLEEP state.
 691:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In addition the state of FLASH, PLL and PLLVCO during DEEPSLEEP state.
 692:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetDeepSleepConfig before going to DEEPSLEEP state.
 693:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 694:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The DEEPSLEEP state of the system corresponds to the DEEPSLEEP state of the CPU. The state is
 695:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 696:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. 
 697:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 698:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In Deep Sleep state the OSC_HP and the PLL may be switched off. The wake-up logic in the NVIC i
 699:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  by a free-running clock. Peripherals are only clocked when configured to stay enabled. 
 700:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Configuration of peripherals and any SRAM content is preserved.
 701:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The Flash module can be put into low-power mode to achieve a further power reduction.
 702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  On wake-up Flash module will be restarted again before instructions or data access is possible.
 703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Any interrupt will bring the system back to operation via the NVIC.The clock setup before
 704:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entering Deep Sleep state is restored upon wake-up.
 705:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 706:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG
 707:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 708:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in DE
 709:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_DSLEEPCR_SYSSEL_Msk,  /**< fPLL used as
 710:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_FLASH_POWERDOWN = SCU_CLK_DSLEEPCR_FPDN_Msk,/**< Flash power 
 711:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_PLL_POWERDOWN = SCU_CLK_DSLEEPCR_PLLPDN_Msk,  /**<  Switch of
 712:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_VCO_POWERDOWN = SCU_CLK_DSLEEPCR_VCOPDN_Msk,  /**<  Switch of
 713:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 714:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in DEEPSLEEP state 
 715:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_DSLEEPCR_USBCR_Msk,  /**< USB clock enab
 716:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 717:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 718:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in DEEPSLEEP stat
 719:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_DSLEEPCR_MMCCR_Msk,/**< SDMMC clock en
 720:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 721:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 722:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in DEEPSLEEP state 
 723:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_DSLEEPCR_ETH0CR_Msk,  /**< ETH clock ena
 724:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 725:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 726:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in DEEPSLEEP state 
 727:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_DSLEEPCR_EBUCR_Msk,  /**< EBU clock enab
 728:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 729:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_CCU = 0,  /**< CCU clock disabled in DEEPSLEEP state 
 730:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_DSLEEPCR_CCUCR_Msk,  /**< CCU clock enab
 731:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_WDT = 0,  /**< WDT clock disabled in DEEPSLEEP state 
 732:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_DSLEEPCR_WDTCR_Msk,  /**< WDT clock enab
 733:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_t;
 734:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 735:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 736:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines status of EVR13 regulator
 737:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 738:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_EVR_STATUS
 739:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 740:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_OK = 0, /**< EVR13 regulator No overvoltage condition */
 741:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_EVR13_OVERVOLTAGE = SCU_POWER_EVRSTAT_OV13_Msk /**< EVR13 regulator is i
 742:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_POWER_EVR_STATUS_t;
 743:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 744:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 745:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Define status of external hibernate control  
 746:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 747:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_CTRL_STATUS
 748:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 749:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_NO_ACTIVE = 0, /**< Hibernate not driven active to pads */
 750:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_ACTIVE = SCU_HIBERNATE_HDSTAT_HIBNOUT_Msk, /**< Hibernate driven active t
 751:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_CTRL_STATUS_t;
 752:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 753:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 754:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Hibernate domain event status
 755:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 756:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_EVENT
 757:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 758:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_POS_EDGE = SCU_HIBERNATE_HDCR_WKPEP_Msk, /**< Wake-up on positive edg
 759:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_NEG_EDGE = SCU_HIBERNATE_HDCR_WKPEN_Msk, /**< Wake-up on negative edg
 760:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_RTC = SCU_HIBERNATE_HDCR_RTCE_Msk, /**< Wake-up on RTC event */
 761:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_ULPWDG = SCU_HIBERNATE_HDCR_ULPWDGEN_Msk, /**< ULP watchdog alarm status */
 762:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 763:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_VBAT_POSEDGE = SCU_HIBERNATE_HDSTAT_VBATPEV_Msk, /**< Wake-up on LPAC posi
 764:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_VBAT_NEGEDGE = SCU_HIBERNATE_HDSTAT_VBATNEV_Msk, /**< Wake-up on LPAC nega
 765:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_POSEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO0PEV_Msk, /**< Wake-up on LP
 766:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_NEGEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO0NEV_Msk, /**< Wake-up on LP
 767:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))
 768:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Msk, /**< Wake-up on LP
 769:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Msk, /**< Wake-up on LP
 770:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 771:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 772:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_EVENT_t;
 773:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 774:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 775:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   * Hibernate domain dedicated pins
 776:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   */
 777:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO
 778:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 779:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_0 = 0, /**< HIB_IO_0 pin. 
 780:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                              At the first power-up and with every reset of the hibernate domain thi
 781:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 782:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_1 = 1 /**< HIB_IO_1 pin. 
 783:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                             At the first power-up and with every reset of the hibernate domain this
 784:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                             @note : Only available in certain packages*/
 785:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 786:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_t;
 787:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 788:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 789:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB_IOx pin I/O control
 790:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 791:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_PIN_MODE
 792:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 793:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_NONE = 0 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 794:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_DOWN = 1 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 795:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_UP = 2 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, in
 796:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_HIBCTRL = 8 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-
 797:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_WDTSRV = 9 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-p
 798:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_GPIO = 10 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-pu
 799:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_HIBCTRL = 12 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Ope
 800:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_WDTSRV = 13 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open
 801:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_GPIO = 14 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open d
 802:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_PIN_MODE_t;
 803:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 804:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 805:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the output polarity of the HIB_IOx
 806:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 807:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO_OUTPUT_LEVEL
 808:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 809:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_LOW = 0 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos, /**< Direct value */
 810:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_HIGH = 1 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos /**< Inverted value */
 811:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_OUTPUT_LEVEL_t;
 812:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 813:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 814:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects hibernate mode
 815:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 816:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_HIBERNATE_MODE
 817:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 818:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL = 0, /**< Request external hibernate mode */
 819:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 820:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_HIBERNATE_MODE_INTERNAL = 1, /**< Request internal hibernate mode. @note Only availab
 821:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 822:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_HIBERNATE_MODE_t;
 823:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 824:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 825:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects input signal HIB_SR0 of ERU0
 826:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 827:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_SR0_INPUT
 828:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 829:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_HIB_IO_0 = SCU_HIBERNATE_HDCR_GPI0SEL_Msk, /**< Set HIB_SR0 to HIB_IO_0 dig
 830:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 831:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_HIB_IO_1 = 0, /**< Set HIB_SR0 to HIB_IO_1 digital input. @note Only availa
 832:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 833:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 834:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_ACMP0 = SCU_HIBERNATE_HDCR_ADIG0SEL_Msk,  /**< Set HIB_SR0 to LPAC CMP0. @n
 835:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 836:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_SR0_INPUT_t;
 837:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 838:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 839:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 840:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100))
 841:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 842:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects input signal HIB_SR1 of ERU0. @note Only available in XMC44 in certain packages.
 843:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 844:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_SR1_INPUT
 845:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 846:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_HIB_IO_0 = SCU_HIBERNATE_HDCR_GPI1SEL_Msk, /**< Set HIB_SR1 to HIB_IO_0 dig
 847:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_HIB_IO_1 = 0, /**< Set HIB_SR1 to HIB_IO_1 digital input.  */
 848:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_ACMP1 = SCU_HIBERNATE_HDCR_ADIG1SEL_Msk,  /**< Set HIB_SR0 to LPAC CMP1. */
 849:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_XTAL_GPI = SCU_HIBERNATE_HDCR_XTALGPI1SEL_Msk,  /**< Set HIB_SR0 to RTC_XTA
 850:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_SR1_INPUT_t;
 851:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 852:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 853:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 854:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC input selection
 855:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 856:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_INPUT
 857:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 858:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_DISABLED = 0 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator permanen
 859:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_VBAT = 0x1 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activated 
 860:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_HIB_IO_0 = 0x2 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activa
 861:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))      
 862:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_HIB_IO_1 = 0x4 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activa
 863:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 864:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_INPUT_t;
 865:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 866:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 867:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC start trigger selection for selected inputs
 868:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 869:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_TRIGGER
 870:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 871:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_SUBSECOND_INTERVAL_COUNTER = 0 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /*
 872:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_RTC_ALARM_EVENT = 0x1 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< RTC al
 873:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_RTC_PERIODIC_EVENT = 0x2 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< RTC
 874:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_POSITIVE_EDGE_EVENT = 0x3 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Po
 875:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_NEGATIVE_EDGE_EVENT = 0x5 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Po
 876:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_CONTINOUS = 0x6 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< Continuous m
 877:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_SINGLE_SHOT = 0x7 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< Single sho
 878:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_TRIGGER_t;
 879:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 880:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 881:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC status
 882:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 883:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_STATUS
 884:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 885:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_VBAT_COMPARE_DONE = SCU_HIBERNATE_LPACST_VBATSCMP_Msk, /**< VBAT compare 
 886:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_COMPARE_DONE = SCU_HIBERNATE_LPACST_AHIBIO0SCMP_Msk, /**< HBI_IO
 887:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))        
 888:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_COMPARE_DONE = SCU_HIBERNATE_LPACST_AHIBIO1SCMP_Msk, /**< HBI_IO
 889:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 890:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_VBAT_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_VBATVAL_Msk, /**< VBAT compar
 891:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_AHIBIO0VAL_Msk, /**< HBI_
 892:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))        
 893:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_AHIBIO1VAL_Msk, /**< HBI_
 894:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 895:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_STATUS_t;
 896:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 897:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif /* (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41)
 898:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 899:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 900:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * DATA STRUCTURES
 901:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 902:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 903:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 904:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure for initializing the PLL functional block.
 905:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Structure holds divider values for N-DIV, P-DIV, K1-DIV, K2-DIV in order to generate desired 
 906:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  frequency using VCO. It holds the PLL mode of operation either normal or prescaler (VCO bypasse
 907:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_PLL_CONFIG_t for accessing these structure parameters.
 908:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 909:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_SYSPLL_CONFIG
 910:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 911:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t n_div;                       /**<  PLL N-Divider value. */
 912:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t p_div;                       /**<  PLL P-Divider value. */
 913:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t k_div;                       /**<  K1-Divider(Prescalar mode) or K2-Divider (Normal mode)
 914:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_t mode;    /**<  PLL mode of operation. */
 915:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_t clksrc; /**<  PLL divider input frequency. */
 916:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_CONFIG_t;
 917:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 918:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 919:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure used for initializing the clock functional block.
 920:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock functional block configures clock source needed for various peripheral and its divider va
 921:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_CONFIG_t for accessing these structure parameters.
 922:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 923:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_CONFIG
 924:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 925:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_CONFIG_t         syspll_config;      /**< PLL configuration */
 926:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_oschp;       /**< Enable external high precision osc
 927:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fOHP has to
 928:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_osculp;      /**< Enable external ultra low power os
 929:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fULP has to
 930:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t calibration_mode;   /**< Backup clock trimming mode. */
 931:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_t             fstdby_clksrc;      /**< Standby clock source. */
 932:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_t             fsys_clksrc;        /**< Choice of system clock. */
 933:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fsys_clkdiv;        /**< Ratio of fPLL to fSYS. */
 934:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fcpu_clkdiv;        /**< Ratio of fSys to fCPU. */
 935:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fccu_clkdiv;        /**< Ratio of fSys to fCCU. */
 936:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fperipheral_clkdiv; /**< Ratio of fSYS to fPERI. */
 937:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } const XMC_SCU_CLOCK_CONFIG_t;
 938:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 939:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 940:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Low power modes
 941:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 942:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_MODE_t
 943:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
 944:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_MODE_SLEEP = 0, /**< sleep mode stops the processor clock */
 945:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_MODE_DEEPSLEEP = SCB_SCR_SLEEPDEEP_Msk /**< deep sleep mode stops the system clock 
 946:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_POWER_MODE_t;
 947:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 948:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 949:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * API PROTOTYPES
 950:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 951:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 952:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #ifdef __cplusplus
 953:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** extern "C" {
 954:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 955:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 956:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 957:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 958:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 959:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 960:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 961:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 962:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 963:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 964:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 965:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 966:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables out of range comparator for the selected ADC group and channel. \n\n
 967:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The ADC channel input is compared by Out of Range Comparator (ORC) for overvoltage monitoring
 968:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * or for detection of out of range analog inputs. ORC must be turned on explicitly
 969:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * to leverage the auditing feature. ORC is enabled by setting the enable bit in the GORCEN registe
 970:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 971:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableOutOfRangeComparator()\n\n\n
 972:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 973:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 974:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 975:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 976:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 977:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 978:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 979:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 980:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 981:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 982:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 983:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 984:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 985:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the out of range comparator for the selected ADC group and the channel. \n\n
 986:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Out of range comparator is disabled by clearing the enable bit in the GORCEN register.
 987:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 988:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableOutOfRangeComparator()\n\n\n
 989:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 990:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 991:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
 992:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 993:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 994:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 995:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 996:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables die temperature measurement by powering the DTS module.\n\n
 997:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is enabled by setting the PWD bit of DTSCON register.
 998:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 999:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTempe
1000:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1001:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1002:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableTemperatureSensor(void);
1003:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1004:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1005:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1006:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1007:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1008:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables die temperature measurement by powering the DTS module off.\n\n
1009:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is disabled by clearing the PWD bit of DTSCON register.
1010:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1011:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTemper
1012:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1013:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1014:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableTemperatureSensor(void);
1015:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1016:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1017:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of die temperature sensor. \n
1018:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: true - if temperature sensor is enabled.\n
1019:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    false - if temperature sensor is disabled.
1020:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1021:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1022:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the die temperature sensor power status.\n\n
1023:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading the PWD bit of DTSCON register.
1024:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1025:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
1026:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1027:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1028:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorEnabled(void);
1029:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1030:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1031:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1032:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param offset  Offset value for calibrating the DTS result.\n
1033:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 127.
1034:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param gain    Gain value for calibrating the DTS conversion result.\n
1035:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 63.
1036:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1037:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1038:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1039:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1040:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Calibrates the measurement of temperature by configuring the values of offset and gain of \a DTS
1041:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Allows to improve the accuracy of the temperature measurement with the adjustment of \a OFFSET a
1042:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a DTSCON register.
1043:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset adjustment is defined as a shift of the conversion result. The range of the offset adjust
1044:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * resolution that corresponds to +/- 12.5�C. The offset value gets added to the measure result. 
1045:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset is considered as a signed value.
1046:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Gain adjustment helps in minimizing gain error. When the \a gain value is 0, result is generated
1047:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the \a gain value is 63, result is generated with least gain, i.e, \a RESULT - 63 at the hi
1048:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1049:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1050:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CalibrateTempMonitor with desired offset and gain calibration values to the DT
1051:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1052:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1053:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
1054:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
1055:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
1056:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1057:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(),
1058:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1059:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1060:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain);
1061:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1062:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1063:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_STATUS_t  Result of starting the temperature measurement.\n
1064:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                           \b Range: \n 
1065:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_OK if the measurement is started successfully.\n
1066:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_ERROR if temperature sensor is not enabled.\n
1067:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_BUSY if temperature sensor is busy measuring the tem
1068:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1069:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1070:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1071:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Starts die temperature measurement using internal temperature sensor.\n\n
1072:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks if the temperature sensor is enabled and is not busy in measurement.\n
1073:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1074:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1075:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1076:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1077:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
1078:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
1079:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
1080:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1081:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
1082:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
1083:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1084:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void);
1085:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1086:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1087:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1088:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1089:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Measured temperature value.\n
1090:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Valid temperature range is 0 to 1023. \n
1091:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              If sensor is not enabled, 0x7FFFFFFFH is returned.
1092:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1093:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1094:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads the measured value of die temperature.\n\n
1095:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Temperature measurement result is read from \a RESULT bit field of \a DTSSTAT register.
1096:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The temperature measured in �C is given by (RESULT - 605) / 2.05 [�C]
1097:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1098:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1099:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetTemperatureMeasurement(void);
1101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the die temperature sensor is busy.\n
1104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \b Range: \a true if sensor is busy in temperature measurement.
1105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \a false if sensor is free and can accept a new request for measurement.
1106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks whether Die Temperature Sensor (DTS) is busy in temperature measurement.\n\n
1109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from the \a BUSY bit field of the \a DTSSTAT register.
1110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
1112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorBusy(void);
1114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool Status of die temperature sensor whether it is ready to start measurement. \n
1117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: \n \a true if temperature sensor is ready to start measurement. \n
1118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \a false if temperature sensor is not ready to start measurement.
1119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the die temperature sensor is ready to start a measurement\n\n
1122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading \a RDY bit of \a DTSSTAT register. It is recommended
1123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * to check the ready status of die temperature sensor before starting it.
1124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorReady(void);
1128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if (UC_SERIES != XMC45)
1130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has exceeded the configured upper 
1132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has exceeded the configured upper limit.
1133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is less than the configured upper limit.
1134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has exceeded the configured upper limit of temperature.\n\n
1137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a OVERFL bit (Upper Limit Overflow Status bit) of \a DTEMPALARM register.
1138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a OVERFL bit will be set if the measured temperature has exceeded the limit configured in 
1139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a UPPER in the \a DTEMPLIM register.
1140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_LowTemperature() \n\n\n
1142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_HighTemperature(void);
1144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param lower_temp  Lower threshold of die temperature. If measured temperature falls below this 
1148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a UNDERFL bit field of \a DTEMPALARM register.
1149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param upper_temp  Upper threshold of die temperature. If measured temperature exceeds this valu
1150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a OVERFL bit field of \a DTEMPALARM register.
1151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the lower and upper threshold of die temperature.\n\n
1156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * API configures \a DTEMPLIM register for upper and lower die temperature threshold limits.
1157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the measured temperature is outside the range defined by the limits, alarm bits \a UNDERFL 
1158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * will be set in the register \a DTEMPALARM.\n
1159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Use \a XMC_SCU_HighTemperature() and XMC_SCU_LowTemperature() to monitor the temperature.\n
1164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HighTemperature(), XMC_SCU_LowTemperature() \n\n\n
1166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp);
1168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has dropped below the configured l
1171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has dropped below the configured lower l
1172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is higher than the configured lower limit.
1173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has dropped below the configured lower limit of temperature.\
1176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a UNDERFL bit (Lower LimitUnderflow Status bit) of \a DTEMPALARM register.
1177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a UNDERFL bit will be set if the measured temperature has dropped below the limit configure
1178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a LOWER in the \a DTEMPLIM register.
1179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_HighTemperature() \n\n\n
1181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_LowTemperature(void);
1183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
1184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t Configured boot mode for the device.\n
1187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for enumeration of different boot modes.
1188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the boot mode configured for the device.\n\n
1191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The boot mode is read from the \a STCON register bit field \a SWCON.
1192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetBootMode() \n\n\n
1195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetBootMode(void);
1197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param mode Boot mode to be configured for the device.\n
1201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for selecting the boot mode.
1202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the desired boot mode for the device.\n\n
1207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The XMC4 series devices support multiple boot modes. A running application can set a desired boo
1208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * launch it by means of software reset. Switching of boot modes should be handled carefully. User 
1209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the initial boot sequence is executed. A stable execution environment should be maintained when 
1210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * eventually handed over to the application program.\n
1211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to launch requested bootmode:\n
1212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetBootMode() with desired boot mode value.\n
1213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Trigger a software reset using system reset request by enabling a bit \a SYSRESETREQ of AIRCR 
1214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *   (PPB->AIRCR |= PPB_AIRCR_SYSRESETREQ_Msk).\n
1215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetBootMode() \n\n\n
1217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t mode);
1219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be read.\n
1223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Data read from the selected general purpose register.
1226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides stored data from general purpose SCU register.\n\n
1229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API reads from either GPR0 or GPR1 based on the \a index value.
1231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteGPR()\n\n\n
1233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadGPR(const uint32_t index);
1235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  
1236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be written.\n
1239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data  Data to be written to the selected general purpose register.
1241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Stores data in the selected general purpose SCU register.\n\n
1246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API writes data to either GPR0 or GPR1 based on the \a index value.
1248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadGPR()\n\n\n
1250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data);
1252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be written.\n
1256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data    32 bit data to be written into retention memory. The API writes
1260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data to the address specified.\n
1261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Writes input data to the selected address of Retention memory in hibernate domain.\n\n
1267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadFromRetentionMemory() \n\n\n
1273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data);
1275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be read.\n
1279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  32 bit data read from retention memory. The API reads
1284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data from the address specified.\n
1285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads data from selected address of retention memory in hibernate domain.\n\n
1289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteToRetentionMemory() \n\n\n
1295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address);
1297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be enabled.\n
1301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively enables interrupt sources to generate non maskable interrupt(NMI).\n\n
1308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually enabled by setting corresponding bit of an interrupt in the 
1309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \a NMIREQEN register.
1310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_DisableNmiRequest() \n\n\n
1312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request);
1314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be disabled.\n
1318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively disables interrupt sources from generating non maskable interrupt(NMI).\n\n
1325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually disabled by clearing corresponding bits in the \a NMIREQEN reg
1326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request);
1330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be enabled.\n
1334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables assertion of trap for the selected trap event.\n\n
1340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually enabled by clearing respective bit of the 
1341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * event in \a TRAPDIS register in order to get an exception.
1342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Disable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Enable(const uint32_t trap);
1346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be disabled.\n
1350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables assertion of trap for the selected trap event.\n\n
1356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually disabled by setting the respective event bit 
1357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a TRAPDIS register in order to suppress trap generation.
1358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Disable(const uint32_t trap);
1362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap status bit has to be cleared.\n
1366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the trap status of input event.\n\n
1372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Once a trap event is detected, it will have to be acknowledged and later serviced. 
1373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap status bit should be cleared to detect the occurence of trap next time. 
1374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * This is useful while polling for TRAPSTAT without enabling the NMI for trap.
1375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap status can be cleared by setting the event bit in the \a TRAPCLR register.
1376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap);
1380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of trap generating events.\n
1383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event. The returned
1384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * value indicates the status of multiple events at their respective bit positions.
1385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * User should mask the bits of the events of interest using the type specified.
1386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of trap generating events. \n\n
1389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from \a TRAPRAW register. Status of the specific events can be checked
1390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * using their respective bits in the \a TRAPRAW register. The bit masks can be obtained from
1391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the enumeration type @ref XMC_SCU_TRAP_t. Multiple events can be combined using \a OR operation.
1392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * A trap event is considered to be asserted if the respective bit of the event is set to 1.
1393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_ClearStatus() \n\n\n
1395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_TRAP_GetStatus(void);  
1397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap has to be triggered.\n
1401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Triggers trap generation for the event specified. \n\n
1407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap source has to be enabled before invocation of this API. 
1408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be triggered by setting its respective bit in the \a TRAPSET register.
1409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be configured to generate a non maskable interrupt by using the API XMC_SCU_INTER
1410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to manually assert a trap event:\n
1411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_EnableEvent with desired trap request source ID.\n
1412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_SetEvent with same trap request source ID to manually assert a trap event
1413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Trigger(const uint32_t trap);
1417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be reset.\n
1421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Puts the specified peripheral in to reset state. \n\n
1427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API achieves reset of peripherals by setting the respective bit in the \a PRSET0,  \a PRSET1
1428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset assertion automatically stored in the \a PRSTATn register and can be c
1429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * user software to determine the state of the system and for debug purpose.\n
1430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to assert a peripheral reset:\n
1431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_AssertPeripheralReset() with desired peripheral identifier.\n
1432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted with same peripheral identifier to verify whet
1433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * is in reset state.\n
1434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_IsPeripheralResetAsserted() \n\n\n
1436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be moved out of reset state.\n
1442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the specified peripheral by moving it out of reset state.  \n\n
1448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Any peripheral should be moved out of reset state for executing its functionality.
1449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API enables the peripheral by setting its respective bit in the \a PRCLR0,  \a PRCLR1 or  \a
1450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset deassertion is automatically stored in the \a PRSTATn register and can
1451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the user software to determine the state of the system and for debug purpose.\n
1452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to deassert a peripheral reset:\n
1453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_DeassertPeripheralReset() with desired peripheral identifier.\n
1454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted() with desired peripheral identifier to verify
1455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * has been enabled.\n
1456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral, whose reset status has to be checked.\n
1464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals.
1465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral reset. \n
1467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *               \b Range: \a true if peripheral is in reset state. \a false if peripheral is enabl
1468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the reset status of the selected peripheral.\n\n
1471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API reads the reset status from \a PRSTATn register. Returns true if the peripheral is in
1472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset state. On power up of the device, all the peripherals will be in reset state. 
1473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If the peripheral is enabled, \a false will be returned as the status.
1474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n 
1476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  
1479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error status has to be cleared.\n
1482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory status bits can be cleared by using the \a OR operation.
1484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the parity error status bit. \n\n
1489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * When a memory parity error is detected using the status bits in \a PEFLAG register. It has to 
1490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * be cleared by software to detect the parity error from the same memory next time.
1491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API clears the parity error status bit of the selected peripheral by setting the 
1492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * respective bit in the \a PEFLAG register. Status of multiple memory parity errors 
1493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * can be cleared by combining the enum values using \a OR operation.
1494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_GetStatus(), XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_EnableTrapGeneration() \n\n\
1496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory);
1498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error checking has to be enabled.\n
1502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables parity error checking for the selected on-chip RAM type.\n\n
1509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error checking can be enabled by setting respective bits in the \a PEEN register.
1510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Additionally parity error can be configured to generate trap when the error is detected,
1511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * using the API XMC_SCU_PARITY_EnableTrapGeneration(). Such a trap can be further configured
1512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * to generate non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration(), XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Enable(const uint32_t memory);
1517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory   The on-chip RAM type, for which the parity error checking has to be disabled.\n
1521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables parity error checking for the selected on-chip RAM type.\n\n
1528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection can be disabled by clearing the respective bit in the \a PEEN register.
1529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Disable(const uint32_t memory);
1533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be enable
1537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables trap assertion for the parity error source.\n\n
1544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection for different types of on-chip RAM can generate trap.
1545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion for parity error can be individually enabled by setting the respective bits
1546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a PETE register. The generated trap can be additionally configured to generate
1547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory);
1552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be disabl
1556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the assertion of trap for the parity error source.\n\n
1563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be disabled by clearing the respective bit of the RAM type in the \a PETE reg
1564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration() \n\n\n
1567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory);
1569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of parity error detection for the on-chip RAM modules.\n
1573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to get the bit mask of each RAM module type.
1574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of parity error detection for the on-chip RAM modules.\n\n
1577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error status information is obtained from the \a PEFLAG register.
1578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If a particular RAM module has parity error, its respective bit field will be set to 1 in the 
1579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * returned value. A check for the status of a particular RAM module can be done by
1580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * masking the returned value with the RAM module identifier from the type @ref XMC_SCU_PARITY_t.
1581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_ClearStatus() \n\n\n
1583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_PARITY_GetStatus(void);  
1585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be enabled. \n
1589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the source clock for selected peripheral.\n\n
1595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually enabled by setting the pe
1596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bit in the \a CLKSET register.\n
1597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether a source clock of peripheral is enabl
1598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_EnableClock() with desired peripheral identifier.\n
1599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled() with same peripheral identifier to verify whether the c
1600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableClock(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n
1602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock);
1604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be disabled. \n
1608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables source clock for the peripheral selected.\n\n
1614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually disabled  by setting the 
1615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bits in the \a CLKCLR register.\n
1616:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether clock source of the peripheral is ena
1617:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_DisableClock with desired peripheral identifier.\n
1618:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled with same peripheral identifier to verify whether periphe
1619:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1620:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1621:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1622:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock);
1623:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1624:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1625:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1626:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock   Peripheral for which the clock status has to be checked. \n
1627:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1628:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1629:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral clock.\n
1630:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: \a true if peripheral clock is enabled. \a false if peripheral clock is disable
1631:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1632:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1633:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the status of peripheral source clock.\n\n
1634:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status of peripheral source clock is read from the \a CLKSTATn register. 
1635:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Returns \a true if clock is enabled and returns \a false otherwise.
1636:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1637:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_CLOCK_DisableClock() \n\n\n
1638:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1639:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock);
1640:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1641:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1642:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1643:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for fSYS.\n
1644:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1645:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI for selecting internal fast clock as fSYS.\n
1646:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL for selecting the output of PLL fPLL as fSYS.
1647:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1648:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1649:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1650:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1651:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source for system clock (fSYS).\n\n
1652:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock is selected by setting \a SYSSEL bits in the \a SYSCLKCR register.
1653:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSCLKSRC_PLL is selected, then the dividers of the PLL have to be
1654:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * additionally configured to achieve the required system clock frequency. 
1655:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   * \par<b>Related APIs:</b><BR>
1656:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_StartSystemPll(), XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
1657:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1658:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source);
1659:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1660:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1661:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_SYSCLKSRC_t   Source of clock for fSYS.\n
1662:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1663:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI - internal fast clock selected as fSYS.\n
1664:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL - output of PLL fPLL selected as fSYS.
1665:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1666:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1667:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of system clock (fSYS). \n\n
1668:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selected source of fSYS is obtained by reading \a SYSSEL bits of \a SYSCLKCR register.
1669:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1670:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource(), XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
1671:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1672:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSCLKSRC_t XMC_SCU_CLOCK_GetSystemClockSource(void)
1673:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1674:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSCLKSRC_t)(SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk);
1675:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1676:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1677:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1678:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1679:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1680:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to select the source of clock.\n
1681:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL as source of USB clock(fUSB/
1682:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL as source of USB clock(fUSB
1683:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1685:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1686:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1687:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of USB/SDMMC clock (fUSB/SDMMC).\n\n
1688:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * USB and SDMMC use a common clock source. They can either use fUSB PLL or fPLL as the source of c
1689:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selection is done by configuring the \a USBSEL bits of \a USBCLKCR register.
1690:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1691:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1692:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1693:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source);
1694:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1695:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1696:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_USBCLKSRC_t   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1697:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to identify the source of clock.\n
1698:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL is selected as source of USB
1699:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL is selected as source of US
1700:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1701:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of USB and SDMMC clock frequency.\n\n
1703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
1704:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1705:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1706:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1707:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
1708:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1709:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
1710:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1711:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1712:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1713:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1714:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Clock source for watchdog timer.\n
1715:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1716:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1717:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1718:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1719:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1720:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1721:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1722:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1723:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of WDT clock (fWDT).\n\n
1724:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selected value is configured to the \a WDTSEL bits of \a WDTCLKCR register.
1725:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The watchdog timer counts at the frequency selected using this API. So the time for
1726:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * timeout or pre-warning of watchdog has to be calculated based on this selection.
1727:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1728:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1729:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_GetWdtClockFrequency() \n\n\n
1730:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1731:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source);
1732:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1733:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1734:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_WDTCLKSRC_t   Clock source configured for watchdog timer.\n
1735:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1736:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1737:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1738:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1739:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1740:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1741:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of clock used for watchdog timer.\n\n
1742:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTSEL bits of \a WDTCLKCR register.
1743:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The time for timeout or pre-warning of watchdog has to be calculated based on 
1744:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the clock source selected.
1745:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1746:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
1747:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1748:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
1749:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1750:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
1751:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1752:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1753:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1754:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1755:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source for standby clock.\n
1756:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1757:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1758:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1759:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1760:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1761:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1762:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1763:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of Standby clock (fSTDBY).\n\n
1764:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clock source is configured by setting the \a STDBYSEL bits of \a HDCR register.
1765:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Hibernate domain should be enabled explicitly before using the API.
1766:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1767:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
1768:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
1769:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1770:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1771:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetStdbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1772:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1773:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source);
1774:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1775:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1776:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source clock of standby clock(fSTDBY).\n
1777:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1778:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1779:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1780:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1781:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1782:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of standby clock (fSTDBY).\n\n
1783:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a STDBYSEL bits of \a HDCR register.\n
1784:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1785:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetStandbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1786:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1787:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetStdbyClockSource(void)
1788:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1789:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_STDBYSEL_Msk);
1790:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1791:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1792:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1793:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1794:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of RTC clock.\n
1795:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1796:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1797:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1798:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1799:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1800:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1801:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1802:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of RTC clock (fRTC).\n\n
1803:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a RCS bit of \a HDCR register.
1804:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * fULP needs external input powered by VBAT or VDDP. fOSI is internal clock.
1805:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1806:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1807:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
1808:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
1809:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1810:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1811:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetRtcClockSource() \n\n\n
1812:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1813:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source);
1814:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1815:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1816:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source of RTC clock.\n
1817:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1818:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1819:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1820:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1821:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1822:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of RTC clock (fRTC).
1823:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a RCS bit of \a HDCR register.
1824:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1825:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1826:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1827:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1828:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetRtcClockSource(void)
1829:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1830:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_RCS_Msk);
1831:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1832:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1833:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1834:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1835:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Source of external clock output(fEXT).\n
1836:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1837:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1838:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1839:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1840:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1841:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1842:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1843:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1844:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1845:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1846:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1847:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1848:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1849:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1850:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1851:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of external clock out (fEXT).\n\n
1852:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKSEL bits of \a EXTCLKCR register.
1853:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1854:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1855:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1856:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t clock);
1857:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1858:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1859:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_EXTOUTCLKSRC_t   Source of external clock output(fEXT).\n
1860:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1861:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1862:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1863:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1864:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1865:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1866:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1867:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1868:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1869:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1870:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1871:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1872:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of external clock output(fEXT).\n\n
1873:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
1874:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1875:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1876:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1877:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
1878:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1879:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
1880:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1881:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1882:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1883:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1884:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for system PLL.\n
1885:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1886:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1887:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1888:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1889:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1890:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1891:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1892:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of system PLL.\n\n
1893:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a VCOBYP bit of \a PLLCON0 register.
1894:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP is selected, ensure that the high performance oscillator 
1895:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * enabled by using the API XMC_SCU_CLOCK_EnableHighPerformanceOscillator().
1896:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1897:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator()\n\n\n
1898:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1899:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source);
1900:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1901:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1902:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_OSCCLKSRC_t   Source of clock for system PLL.\n
1903:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1904:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1905:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1906:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1907:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1908:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of system PLL clock (fPLL). \n\n
1909:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a VCOBYP bit of \a PLLCON0 register.
1910:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1911:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator(), XMC_SCU_CLOCK_SetSystemPllClockSource()\n\n\n
1912:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1913:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSPLLCLKSRC_t XMC_SCU_CLOCK_GetSystemPllClockSource(void)
1914:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1915:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSPLLCLKSRC_t)(SCU_PLL->PLLCON0 & SCU_PLL_PLLCON0_VCOBYP_Msk);
1916:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1917:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1918:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
1919:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1920:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1921:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of ECAT clock.\n
1922:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
1923:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
1924:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
1925:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1926:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1927:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1928:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1929:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of ECAT clock (fECAT).\n\n
1930:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
1931:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1932:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
1933:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1934:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
1935:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1936:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
1937:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****                       ((uint32_t)source);
1938:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1939:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1940:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1941:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_ECATCLKSRC_t   Source of ECAT clock.\n
1942:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
1943:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
1944:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
1945:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1946:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1947:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of ECAT clock (fECAT).
1948:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECATSEL bit of \a ECATCLKCR register.
1949:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1950:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1951:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1952:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_ECATCLKSRC_t XMC_SCU_CLOCK_GetECATClockSource(void)
1953:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1954:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_ECATCLKSRC_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) >> SCU_C
1955:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1956:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
1957:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1958:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1959:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1960:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param divider   Ratio of fSYS clock source to the value of fSYS.
1961:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 to 256.
1962:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1963:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1964:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1965:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1966:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ratio of system clock source to the value of system clock frequency.\n\n
1967:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured as \a SYSDIV bits of \a SYSCLKCR register. The divider value is 
1968:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * decremented by 1 before configuring.
1969:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1970:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
1971:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1972:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider);
1973:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1974:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1975:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio of fSYS clock source to the value of fSYS.
1976:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 to 255.
1977:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1978:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1979:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of ratio between the source of system clock to the the value of system clock 
1980:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a SYSDIV bits of \a SYSCLKCR register.
1981:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1982:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
1983:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1984:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockDivider(void)
1985:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
1986:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) >> SCU_CLK_SYSCLKCR_SYSDIV_Po
1987:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
1988:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
1989:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1990:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1991:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of fCCU clock source to the value of fCCU.
1992:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 or 2.\n
1993:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS \n
1994:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  2-> fCCU= fSYS/2.
1995:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1996:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1997:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1998:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1999:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the divider for CCU clock source. \n\n
2000:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Capture compare unit(CCU) can take either fSYS or fSYS/2 as the source of clock.
2001:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The configuration is set to \a CCUDIV bit of \a CCUCLKCR register. The CCUDIV bit is 1 bit wide.
2002:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2003:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2004:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider() \n\n\n
2005:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2006:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t ratio);
2007:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2008:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2009:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of fCCU clock source to the value of fCCU.
2010:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 or 1.\n
2011:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0-> fCCU= fSYS \n
2012:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS/2.
2013:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2014:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2015:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CCU clock(fCCU) to system clock(fSYS).\n\n
2016:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CCUDIV bit of \a CCUCLKCR register.
2017:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2018:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2019:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCcuClockDivider() \n\n\n
2020:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2021:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCcuClockDivider(void)
2022:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2023:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >> SCU_CLK_CCUCLKCR_CCUDIV_Po
2024:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2025:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2026:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2027:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2028:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between system clock(fSYS) and CPU clock(fCPU).
2029:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
2030:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS. \n
2031:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            2-> fCPU= fSYS/2.
2032:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2033:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2034:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2035:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2036:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the CPU clock by setting the divider value for the system clock. \n\n
2037:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is set to the \a CPUDIV bit of \a CPUCLKCR register.
2038:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2039:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockDivider() \n\n\n
2040:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2041:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t ratio);
2042:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2043:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2044:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio between system clock(fSYS) and CPU clock(fCPU).
2045:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
2046:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            0-> fCPU= fSYS. \n
2047:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS/2.
2048:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2049:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2050:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between system clock(fSYS) and CPU clock(fCPU). \n\n
2051:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CPUDIV bit of \a CPUCLKCR register.
2052:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2053:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCpuClockDivider() \n\n\n
2054:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2055:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockDivider(void)
2056:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2057:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Po
2058:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2059:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2060:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2061:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2062:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of peripheral clock source to the value of peripheral clock.\n
2063:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
2064:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU.\n
2065:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                2-> fPERIPH= fCPU/2.
2066:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2067:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2068:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2069:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2070:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the peripheral clock by setting the divider for CPU clock(fCPU).\n\n
2071:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The peripheral clock can be equal to either fCPU or fCPU/2. The value is configured to \a PBDIV 
2072:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2073:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2074:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockDivider() \n\n\n
2075:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2076:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t ratio);
2077:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2078:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2079:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of peripheral clock source to the value of peripheral clock.\n
2080:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
2081:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                0-> fPERIPH= fCPU.\n
2082:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU/2.
2083:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2084:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2085:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CPU clock(fCPU) to peripheral clock(fPERIPH).\n\n
2086:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a PBDIV bit of \a PBCLKCR register.
2087:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2088:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetPeripheralClockDivider() \n\n\n
2089:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2090:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetPeripheralClockDivider(void)
2091:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2092:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos);
2093:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2094:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2095:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2096:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2097:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio of PLL output clock(fPLL) to USB clock(fUSB).
2098:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 8.
2099:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the USB clock(fUSB) by setting the USB clock divider. \n\n
2104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is decremented by 1 before setting it to \a USBDIV bits of \a USBCLKCR register.
2105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockDivider(), XMC_SCU_CLOCK_SetUsbClockSource() \n\n\n
2108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t ratio);
2110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL output clock(fPLL) to USB clock(fUSB).
2114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 7.
2115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL output frequency(fPLL) and USB clock(fUSB).\n\n
2118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a USBDIV bit of \a USBCLKCR register.
2119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbClockSource() \n\n\n
2121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetUsbClockDivider(void)
2123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >> SCU_CLK_USBCLKCR_USBDIV_Po
2125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
2130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 64.
2134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the EBU clock(fEBU) by setting the divider value.\n\n
2139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock divider is configured to the \a EBUDIV bits of \a EBUCLKCR register.
2140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetEbuClockDivider() \n\n\n
2142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t ratio);
2144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 63.
2149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL clock(fPLL) and EBU clock(fEBU).\n\n
2152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EBUDIV bits of \a EBUCLKCR register.
2153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetEbuClockDivider() \n\n\n
2155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEbuClockDivider(void)
2157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >> SCU_CLK_EBUCLKCR_EBUDIV_Po
2159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between the source of WDT clock and the WDT clock.\n
2165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 256.
2166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the WDT clock by setting the clock divider for the WDT clock source.\n\n
2171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a WDTDIV bits of \a WDTCLKCR register. The value of divider
2172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring. Check the selected clock source for the WDT clock
2173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * before configuring the divider using the API XMC_SCU_CLOCK_SetWdtClockSource().
2174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_GetWdtClockDivider() \n\n\n
2176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t ratio);
2178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of WDT clock and the WDT clock.\n
2182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 255.
2183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the WDT parent clock and the WDT clock. \n\n
2186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTDIV bits of \a WDTCLKCR register.
2187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the WDT parent clock is considered before using the value of
2188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the divider value.
2189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_SetWdtClockDivider() \n\n\n
2191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetWdtClockDivider(void)
2193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >> SCU_CLK_WDTCLKCR_WDTDIV_Po
2195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the external output parent clock selected and the output clock.\n
2200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 512.
2201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the external output clock by setting the divider value for the parent clock. \n\n
2206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKDIV bits of \a EXTCLKCR register.
2207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The divider value is decremented by 1 before storing it to the bit fields.
2208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the source of external output clock is configured appropriately using the API
2209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource().
2210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_GetExternalOutputClockDivider() \n\n
2212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t ratio);
2214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the external output parent clock selected and the output clock.\
2218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 511.
2219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the divider value applied on parent clock before the generation of external output cloc
2222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EXTDIV bit of \a EXTCLKCR register.
2223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
2225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetExternalOutputClockDivider(void)
2227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >> SCU_CLK_EXTCLKCR_ECKDIV_Po
2229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
2232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the source of ECAT clock and the ECAT clock.\n
2235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 4.
2236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ECAT clock by setting the clock divider for the ECAT clock source.\n\n
2241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECADIV bits of \a ECATCLKCR register. The value of divider
2242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring.
2243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_GetECATClockDivider() \n\n\n
2245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider);
2247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of ECAT clock and the ECAT clock.\n
2251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 3.
2252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the ECAT parent clock and the ECAT clock. \n\n
2255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECADIV bits of \a ECATCLKCR register.
2256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_SetECATClockDivider() \n\n\n
2258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetECATClockDivider(void)
2260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECADIV_Msk) >> SCU_CLK_ECATCLKCR_ECADIV
2262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the high precision oscillator by configuring external crystal mode.\n\n
2271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 0, there by configuring the 
2272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * external clock input.
2273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The System Oscillator Watchdog is enabled. The user should check the status 
2274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * of the oscillator using XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable()
2275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void);
2279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the high precision oscillator by disabling the external oscillator.\n\n
2285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 1, there by disabling the 
2286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * external oscillator. 
2287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void);
2291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of high performance oscillator
2295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the OSC_HP oscillator is stable and usable
2298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void);
2302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables XTAL1 input of OSC_ULP as general purpose input.
2309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus to monitor the status of
2310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @Note OSC_ULP should be disabled previously using XMC_SCU_CLOCK_DisableHighPerformanceOscillator
2311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void);
2315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables XTAL1 input of OSC_ULP as general purpose input.
2322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput() \n\n\n
2324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void);
2326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status OSC_HP XTAL1 pin
2330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Monitor the status of OSC_HP XTAL1 pin.
2333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput() \n\n\n
2335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void);
2337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables ultra low power oscillator(ULP). \n\n
2344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It enables the hibernate domain, configures the ultra low power oscillator
2345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * uisng the \a MODE bits of the \a OSCULCTRL register. The \a Mode bits will be
2346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset to 0 to enable the low power oscillator. Mirror register update delays 
2347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * are handled internally.
2348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The OSC_ULP Oscillator Watchdog is enabled. The user should check the status 
2349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * of the oscillator using XMC_SCU_CLOCK_IsLowPowerOscillatorStable()
2350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() 
2352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_IsLowPowerOscillatorStable() \n\n\n
2353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void);
2355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables ultra low power oscillator.\n\n
2362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is disabled by setting the \a MODE bits of \a OSCULCTRL register to value 2.
2363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * By default on power up, the ultra low power osciallator is disabled.
2364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void);
2368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of low power oscillator
2372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the OSC_ULP oscillator is stable and usable
2375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void);
2379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables XTAL1 input of OSC_ULP as general purpose input.
2386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus to monitor the status of OSC_UL
2387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @Note OSC_ULP should be disabled previously using XMC_SCU_CLOCK_DisableLowPowerOscillator().
2388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
2390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
2391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() \n\n\n
2394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void);
2396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables XTAL1 input of OSC_ULP as general purpose input.
2403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
2406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
2407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput() \n\n\n
2409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void);
2411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status OSC_ULP XTAL1 pin 
2415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Monitor the status of OSC_ULP XTAL1 pin.
2418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput() \n\n\n
2420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void);
2422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System frequency in Hertz.\n
2426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: clock frequency in Hertz. Range of the value depends on the source clock fr
2427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *            and the configured values of dividers.
2428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of system PLL output clock frequency(fPLL).\n\n
2431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API uses \a N-DIV,  \a P-DIV,  \a K1-DIV,  \a K2-DIV bits information from \a PLLCON1 regist
2432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * VCOBYP bit information from \a PLLCON0 register. It calculates frequency of system pll clock usi
2433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If normal Mode : fPLL = (fOSC * N)/(P * K2).
2434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If prescaler mode: fPLL = fOSC/ K1.
2435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void);
2439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Source clock used for deriving system clock.\n
2443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: fOHP frequency if external high precision frequency is used. \n
2444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    fOFI fast internal clock frequency.
2445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of the input clock frequency for deriving the system clock.
2448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API retrieves frequency of system PLL input clock (fPLLin).
2449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on \a PINSEL bits information from \a PLLCON2 register, the parent clock source is obtaine
2450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * This bit field specifies if fOHP or fOFI is used for deriving system clock.
2451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock frequency is obtained by dividing the source clock frequency with different divider
2452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockFrequency() \n\n\n
2454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void);
2456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   USB PLL output clock frequency.
2460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of USB PLL output clock (fUSBPLL).\n\n
2463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * It obtains the \a VCOBYP bits information from \a USBPLLCON register and decides if USB PLL mode
2464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If USB PLL mode is used, the USB clock frequency is obtained by dividing the source clock by USB
2465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency is obtained using following formula:\n
2466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Normal Mode : fUSBPLL = (fOSC * N)/(P * 2).\n
2467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Prescaler mode: fPLL = fOSC.
2468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
2470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void);
2472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System clock frequency in Hertz.
2476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of system clock (fSYS).\n\n
2479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value obtained by dividing \a CPUDIV bits information of \a CPUCLKCR register with SystemCor
2480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values, fSYS clock frequency is derived using the following formula:\n
2481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * fSYS = fCPU << CPUDIV.
2482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
2484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
2486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_
 802              	 .loc 3 2487 0
 803 0000 194B     	 ldr r3,.L59
 804 0002 1A69     	 ldr r2,[r3,#16]
 805 0004 02F00102 	 and r2,r2,#1
 806 0008 184B     	 ldr r3,.L59+4
 807 000a 1B68     	 ldr r3,[r3]
 808 000c 9340     	 lsls r3,r3,r2
 809              	.LBE26:
 810              	.LBE25:
2488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
2489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  
2490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  CCU clock frequency in Hertz.
2494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of clock(fCPU) used for CCU4, CCU8, POSIF and HRPWM.\n\n
2497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained from \a CCUDIV bits of \a CCUCLKCR register and system clock (fSYS) freque
2498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values, fCCU clock frequency is calculated using following formula:\n
2499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * fCCU = fSYS >> CCUDIV.\n
2500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider(), XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
2502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void);
2504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   USB clock frequency in Hertz.
2507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of USB and SDMMC clock(fUSB/fSDMMC).\n\n
2510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained from \a USBDIV bits of \a USBCLKCR register and USB clock source.
2511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values fUSB/fSDMMC clock frequency is calculated using following formula:\n
2512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * if USB clock source = USBPLL: fUSB/fSDMMC = fUSBPLL/(USBDIV + 1).\n
2513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * if USB clock source = PLL:  fUSB/fSDMMC = fPLL/(USBDIV + 1).\n
2514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockSource(), XMC_SCU_CLOCK_GetUsbClockDivider() \n\n\n
2517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void); 
2519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** 
2520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ethernet clock frequency in Hertz.
2522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of Ethernet clock(fETH).\n\n
2525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is derived from system clock frequency(fSYS). It is calculated using
2526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * the following formula:\n
2527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * fETH = fSYS >> 1;
2528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
2530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEthernetClockFrequency(void)
2532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** {
2533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h ****   return XMC_SCU_CLOCK_GetSystemClockFrequency() >> 1U;
 811              	 .loc 3 2533 0
 812 000e 5B08     	 lsrs r3,r3,#1
 813              	.LVL74:
 814              	.LBE24:
 815              	.LBE23:
 527:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t eth_mac_clk;
 528:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 529:../Libraries/XMCLib/src/xmc_eth_mac.c ****   __IO uint32_t *reg;
 530:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 531:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac_clk = XMC_SCU_CLOCK_GetEthernetClockFrequency();
 532:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = XMC_ETH_MAC_STATUS_OK;
 533:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 534:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg = &(eth_mac->regs->GMII_ADDRESS);
 816              	 .loc 1 534 0
 817 0010 0168     	 ldr r1,[r0]
 818              	.LVL75:
 535:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 819              	 .loc 1 535 0
 820 0012 174A     	 ldr r2,.L59+8
 821 0014 9342     	 cmp r3,r2
 822 0016 03D8     	 bhi .L52
 536:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 537:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_16;
 823              	 .loc 1 537 0
 824 0018 0823     	 movs r3,#8
 825 001a 0B61     	 str r3,[r1,#16]
 532:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 826              	 .loc 1 532 0
 827 001c 0020     	 movs r0,#0
 828              	.LVL76:
 829 001e 7047     	 bx lr
 830              	.LVL77:
 831              	.L52:
 538:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 539:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_60MHZ)
 832              	 .loc 1 539 0
 833 0020 144A     	 ldr r2,.L59+12
 834 0022 9342     	 cmp r3,r2
 835 0024 03D8     	 bhi .L54
 540:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 541:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_26;
 836              	 .loc 1 541 0
 837 0026 0C23     	 movs r3,#12
 838 0028 0B61     	 str r3,[r1,#16]
 532:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 839              	 .loc 1 532 0
 840 002a 0020     	 movs r0,#0
 841              	.LVL78:
 842 002c 7047     	 bx lr
 843              	.LVL79:
 844              	.L54:
 542:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 543:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_100MHZ)
 845              	 .loc 1 543 0
 846 002e 124A     	 ldr r2,.L59+16
 847 0030 9342     	 cmp r3,r2
 848 0032 02D8     	 bhi .L55
 544:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 545:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_42;
 849              	 .loc 1 545 0
 850 0034 0020     	 movs r0,#0
 851              	.LVL80:
 852 0036 0861     	 str r0,[r1,#16]
 853 0038 7047     	 bx lr
 854              	.LVL81:
 855              	.L55:
 546:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 547:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_150MHZ)
 856              	 .loc 1 547 0
 857 003a 104A     	 ldr r2,.L59+20
 858 003c 9342     	 cmp r3,r2
 859 003e 03D8     	 bhi .L56
 548:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 549:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_62;
 860              	 .loc 1 549 0
 861 0040 0423     	 movs r3,#4
 862 0042 0B61     	 str r3,[r1,#16]
 532:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 863              	 .loc 1 532 0
 864 0044 0020     	 movs r0,#0
 865              	.LVL82:
 866 0046 7047     	 bx lr
 867              	.LVL83:
 868              	.L56:
 550:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 551:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_200MHZ)
 869              	 .loc 1 551 0
 870 0048 0D4A     	 ldr r2,.L59+24
 871 004a 9342     	 cmp r3,r2
 872 004c 03D8     	 bhi .L57
 552:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 553:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_102;
 873              	 .loc 1 553 0
 874 004e 1023     	 movs r3,#16
 875 0050 0B61     	 str r3,[r1,#16]
 532:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 876              	 .loc 1 532 0
 877 0052 0020     	 movs r0,#0
 878              	.LVL84:
 879 0054 7047     	 bx lr
 880              	.LVL85:
 881              	.L57:
 554:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 555:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_250MHZ)
 882              	 .loc 1 555 0
 883 0056 0B4A     	 ldr r2,.L59+28
 884 0058 9342     	 cmp r3,r2
 556:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 557:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_124;
 885              	 .loc 1 557 0
 886 005a 9DBF     	 ittte ls
 887 005c 1423     	 movls r3,#20
 888 005e 0B61     	 strls r3,[r1,#16]
 532:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 889              	 .loc 1 532 0
 890 0060 0020     	 movls r0,#0
 891              	.LVL86:
 558:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 559:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 560:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 561:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_ERROR;
 892              	 .loc 1 561 0
 893 0062 0220     	 movhi r0,#2
 894              	.LVL87:
 562:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 563:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 564:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 565:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 895              	 .loc 1 565 0
 896 0064 7047     	 bx lr
 897              	.L60:
 898 0066 00BF     	 .align 2
 899              	.L59:
 900 0068 00460050 	 .word 1342195200
 901 006c 00000000 	 .word SystemCoreClock
 902 0070 C00E1602 	 .word 35000000
 903 0074 00879303 	 .word 60000000
 904 0078 00E1F505 	 .word 100000000
 905 007c 80D1F008 	 .word 150000000
 906 0080 00C2EB0B 	 .word 200000000
 907 0084 80B2E60E 	 .word 250000000
 908              	 .cfi_endproc
 909              	.LFE239:
 911              	 .section .text.XMC_ETH_MAC_Enable,"ax",%progbits
 912              	 .align 2
 913              	 .global XMC_ETH_MAC_Enable
 914              	 .thumb
 915              	 .thumb_func
 917              	XMC_ETH_MAC_Enable:
 918              	.LFB240:
 566:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 567:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC enable */
 568:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac)
 569:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 919              	 .loc 1 569 0
 920              	 .cfi_startproc
 921              	 
 922              	 
 923              	.LVL88:
 924 0000 08B5     	 push {r3,lr}
 925              	.LCFI13:
 926              	 .cfi_def_cfa_offset 8
 927              	 .cfi_offset 3,-8
 928              	 .cfi_offset 14,-4
 570:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_UNUSED_ARG(eth_mac);
 571:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 572:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_ETH);
 929              	 .loc 1 572 0
 930 0002 0420     	 movs r0,#4
 931              	.LVL89:
 932 0004 FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableClock
 933              	.LVL90:
 573:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if UC_DEVICE != XMC4500
 574:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 575:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 576:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 934              	 .loc 1 576 0
 935 0008 0148     	 ldr r0,.L63
 936 000a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 937              	.LVL91:
 938 000e 08BD     	 pop {r3,pc}
 939              	.L64:
 940              	 .align 2
 941              	.L63:
 942 0010 04000020 	 .word 536870916
 943              	 .cfi_endproc
 944              	.LFE240:
 946              	 .section .text.XMC_ETH_MAC_Init,"ax",%progbits
 947              	 .align 2
 948              	 .global XMC_ETH_MAC_Init
 949              	 .thumb
 950              	 .thumb_func
 952              	XMC_ETH_MAC_Init:
 953              	.LFB228:
 256:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 954              	 .loc 1 256 0
 955              	 .cfi_startproc
 956              	 
 957              	 
 958              	.LVL92:
 959 0000 38B5     	 push {r3,r4,r5,lr}
 960              	.LCFI14:
 961              	 .cfi_def_cfa_offset 16
 962              	 .cfi_offset 3,-16
 963              	 .cfi_offset 4,-12
 964              	 .cfi_offset 5,-8
 965              	 .cfi_offset 14,-4
 966 0002 0446     	 mov r4,r0
 261:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = XMC_ETH_MAC_SetManagmentClockDivider(eth_mac);
 967              	 .loc 1 261 0
 968 0004 FFF7FEFF 	 bl XMC_ETH_MAC_Enable
 969              	.LVL93:
 262:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 970              	 .loc 1 262 0
 971 0008 2046     	 mov r0,r4
 972 000a FFF7FEFF 	 bl XMC_ETH_MAC_SetManagmentClockDivider
 973              	.LVL94:
 974 000e 0546     	 mov r5,r0
 975              	.LVL95:
 264:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 976              	 .loc 1 264 0
 977 0010 2046     	 mov r0,r4
 978 0012 FFF7FEFF 	 bl XMC_ETH_MAC_InitEx
 979              	.LVL96:
 266:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 980              	 .loc 1 266 0
 981 0016 A268     	 ldr r2,[r4,#8]
 982 0018 E168     	 ldr r1,[r4,#12]
 983              	.LVL97:
 984              	.LBB27:
 985              	.LBB28:
 506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   {
 507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   }
 508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param phy_addr PHY address
 513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param reg_addr Register address
 514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param data The destination to which the read data needs to be copied to
 515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Read a PHY register <br>
 519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function reads a PHY register. It essentially polls busy bit during max
 522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * PHY_TIMEOUT time and reads the information into 'data' when not busy.
 523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, uint8_t re
 525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param phy_addr PHY address
 529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param reg_addr Register address
 530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param data The data to write
 531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Write a PHY register <br>
 535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function reads a PHY register. It essentially writes the data and polls
 538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the busy bit until it is no longer busy.
 539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, uint8_t r
 541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param port_ctrl Port control configuration
 545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set port control configuration <br>
 549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the port control by writing the configuration into the
 552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * CON register.
 553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \note
 555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MII Mode is only available in:
 556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4500 LQFP144 and BGA144 packages
 557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4700 LQFP144 and BGA196 packages
 558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4800 LQFP144 and BGA196 packages
 559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetPortControl(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_POR
 562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_UNUSED_ARG(eth_mac);
 564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   ETH0_CON->CON = (uint32_t)port_ctrl.raw;
 565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set management clock divider <br>
 573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the management clock divider by writing to the GMII_ADDRESS
 576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * register.
 577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac);
 579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param addr The MAC address to set
 583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set MAC address <br>
 587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MAC_ADDRESS0_LOW registers.
 591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetAddress(XMC_ETH_MAC_t *const eth_mac, uint64_t addr)
 593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 986              	 .loc 2 594 0
 987 001a 2368     	 ldr r3,[r4]
 988 001c 1964     	 str r1,[r3,#64]
 595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 989              	 .loc 2 595 0
 990 001e 2368     	 ldr r3,[r4]
 991 0020 5A64     	 str r2,[r3,#68]
 992              	.LBE28:
 993              	.LBE27:
 269:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 994              	 .loc 1 269 0
 995 0022 2846     	 mov r0,r5
 996 0024 38BD     	 pop {r3,r4,r5,pc}
 997              	 .cfi_endproc
 998              	.LFE228:
 1000 0026 00BF     	 .section .text.XMC_ETH_MAC_Disable,"ax",%progbits
 1001              	 .align 2
 1002              	 .global XMC_ETH_MAC_Disable
 1003              	 .thumb
 1004              	 .thumb_func
 1006              	XMC_ETH_MAC_Disable:
 1007              	.LFB241:
 577:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 578:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 579:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC disable */
 580:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_Disable(XMC_ETH_MAC_t *const eth_mac)
 581:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1008              	 .loc 1 581 0
 1009              	 .cfi_startproc
 1010              	 
 1011              	 
 1012              	.LVL98:
 1013 0000 08B5     	 push {r3,lr}
 1014              	.LCFI15:
 1015              	 .cfi_def_cfa_offset 8
 1016              	 .cfi_offset 3,-8
 1017              	 .cfi_offset 14,-4
 582:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_UNUSED_ARG(eth_mac);
 583:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 584:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 1018              	 .loc 1 584 0
 1019 0002 0348     	 ldr r0,.L69
 1020              	.LVL99:
 1021 0004 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 1022              	.LVL100:
 585:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if UC_DEVICE != XMC4500
 586:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 587:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 588:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_ETH);
 1023              	 .loc 1 588 0
 1024 0008 0420     	 movs r0,#4
 1025 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_DisableClock
 1026              	.LVL101:
 1027 000e 08BD     	 pop {r3,pc}
 1028              	.L70:
 1029              	 .align 2
 1030              	.L69:
 1031 0010 04000020 	 .word 536870916
 1032              	 .cfi_endproc
 1033              	.LFE241:
 1035              	 .section .text.XMC_ETH_MAC_ReadPhy,"ax",%progbits
 1036              	 .align 2
 1037              	 .global XMC_ETH_MAC_ReadPhy
 1038              	 .thumb
 1039              	 .thumb_func
 1041              	XMC_ETH_MAC_ReadPhy:
 1042              	.LFB242:
 589:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 590:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 591:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Read physical layer and obtain status */
 592:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr
 593:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1043              	 .loc 1 593 0
 1044              	 .cfi_startproc
 1045              	 
 1046              	 
 1047              	 
 1048              	.LVL102:
 1049 0000 30B4     	 push {r4,r5}
 1050              	.LCFI16:
 1051              	 .cfi_def_cfa_offset 8
 1052              	 .cfi_offset 4,-8
 1053              	 .cfi_offset 5,-4
 594:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t retries;
 595:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 596:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);
 597:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 598:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRES
 1054              	 .loc 1 598 0
 1055 0002 0568     	 ldr r5,[r0]
 1056 0004 2C69     	 ldr r4,[r5,#16]
 1057 0006 04F03C04 	 and r4,r4,#60
 1058 000a 44F00104 	 orr r4,r4,#1
 1059 000e 44EA8212 	 orr r2,r4,r2,lsl#6
 1060              	.LVL103:
 1061 0012 42EAC121 	 orr r1,r2,r1,lsl#11
 1062              	.LVL104:
 1063 0016 2961     	 str r1,[r5,#16]
 1064              	.LVL105:
 599:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 600:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos
 601:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos
 602:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 603:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Poll busy bit during max PHY_TIMEOUT time */
 604:../Libraries/XMCLib/src/xmc_eth_mac.c ****   retries = 0U;
 605:../Libraries/XMCLib/src/xmc_eth_mac.c ****   do
 606:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 607:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 1065              	 .loc 1 607 0
 1066 0018 0068     	 ldr r0,[r0]
 1067              	.LVL106:
 1068 001a 4FF6FF72 	 movw r2,#65535
 1069              	.LVL107:
 1070              	.L74:
 1071 001e 0169     	 ldr r1,[r0,#16]
 1072 0020 11F0010F 	 tst r1,#1
 1073 0024 03D1     	 bne .L72
 608:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 609:../Libraries/XMCLib/src/xmc_eth_mac.c ****       *data = (uint16_t)(eth_mac->regs->GMII_DATA & ETH_GMII_DATA_MD_Msk);
 1074              	 .loc 1 609 0
 1075 0026 4269     	 ldr r2,[r0,#20]
 1076              	.LVL108:
 1077 0028 1A80     	 strh r2,[r3]
 610:../Libraries/XMCLib/src/xmc_eth_mac.c ****       return XMC_ETH_MAC_STATUS_OK;
 1078              	 .loc 1 610 0
 1079 002a 0020     	 movs r0,#0
 1080 002c 02E0     	 b .L73
 1081              	.LVL109:
 1082              	.L72:
 611:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 612:../Libraries/XMCLib/src/xmc_eth_mac.c ****     ++retries;
 613:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 1083              	 .loc 1 613 0
 1084 002e 013A     	 subs r2,r2,#1
 1085              	.LVL110:
 1086 0030 F5D1     	 bne .L74
 614:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 615:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return XMC_ETH_MAC_STATUS_ERROR;
 1087              	 .loc 1 615 0
 1088 0032 0220     	 movs r0,#2
 1089              	.LVL111:
 1090              	.L73:
 616:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1091              	 .loc 1 616 0
 1092 0034 30BC     	 pop {r4,r5}
 1093              	.LCFI17:
 1094              	 .cfi_restore 5
 1095              	 .cfi_restore 4
 1096              	 .cfi_def_cfa_offset 0
 1097 0036 7047     	 bx lr
 1098              	 .cfi_endproc
 1099              	.LFE242:
 1101              	 .section .text.XMC_ETH_MAC_WritePhy,"ax",%progbits
 1102              	 .align 2
 1103              	 .global XMC_ETH_MAC_WritePhy
 1104              	 .thumb
 1105              	 .thumb_func
 1107              	XMC_ETH_MAC_WritePhy:
 1108              	.LFB243:
 617:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 618:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Write physical layer and return status */
 619:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_add
 620:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1109              	 .loc 1 620 0
 1110              	 .cfi_startproc
 1111              	 
 1112              	 
 1113              	 
 1114              	.LVL112:
 1115 0000 10B4     	 push {r4}
 1116              	.LCFI18:
 1117              	 .cfi_def_cfa_offset 4
 1118              	 .cfi_offset 4,-4
 621:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t retries;
 622:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 623:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_DATA  = data;
 1119              	 .loc 1 623 0
 1120 0002 0468     	 ldr r4,[r0]
 1121 0004 6361     	 str r3,[r4,#20]
 624:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRES
 1122              	 .loc 1 624 0
 1123 0006 0468     	 ldr r4,[r0]
 1124 0008 2369     	 ldr r3,[r4,#16]
 1125              	.LVL113:
 1126 000a 03F03C03 	 and r3,r3,#60
 1127 000e 43F00303 	 orr r3,r3,#3
 1128 0012 43EA8212 	 orr r2,r3,r2,lsl#6
 1129              	.LVL114:
 1130 0016 42EAC121 	 orr r1,r2,r1,lsl#11
 1131              	.LVL115:
 1132 001a 2161     	 str r1,[r4,#16]
 1133              	.LVL116:
 625:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 626:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
 627:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos
 628:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos
 629:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 630:../Libraries/XMCLib/src/xmc_eth_mac.c ****    /* Poll busy bit during max PHY_TIMEOUT time */
 631:../Libraries/XMCLib/src/xmc_eth_mac.c ****   retries = 0U;
 632:../Libraries/XMCLib/src/xmc_eth_mac.c ****   do
 633:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 634:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 1134              	 .loc 1 634 0
 1135 001c 0168     	 ldr r1,[r0]
 1136 001e 4FF6FF73 	 movw r3,#65535
 1137              	.LVL117:
 1138              	.L79:
 1139 0022 0A69     	 ldr r2,[r1,#16]
 1140 0024 12F0010F 	 tst r2,#1
 1141 0028 03D0     	 beq .L80
 1142              	.LVL118:
 635:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 636:../Libraries/XMCLib/src/xmc_eth_mac.c ****       return XMC_ETH_MAC_STATUS_OK;
 637:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 638:../Libraries/XMCLib/src/xmc_eth_mac.c ****     ++retries;
 639:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 1143              	 .loc 1 639 0
 1144 002a 013B     	 subs r3,r3,#1
 1145              	.LVL119:
 1146 002c F9D1     	 bne .L79
 640:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 641:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return XMC_ETH_MAC_STATUS_ERROR;
 1147              	 .loc 1 641 0
 1148 002e 0220     	 movs r0,#2
 1149              	.LVL120:
 1150 0030 00E0     	 b .L78
 1151              	.LVL121:
 1152              	.L80:
 636:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 1153              	 .loc 1 636 0
 1154 0032 0020     	 movs r0,#0
 1155              	.LVL122:
 1156              	.L78:
 642:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1157              	 .loc 1 642 0
 1158 0034 5DF8044B 	 ldr r4,[sp],#4
 1159              	.LCFI19:
 1160              	 .cfi_restore 4
 1161              	 .cfi_def_cfa_offset 0
 1162 0038 7047     	 bx lr
 1163              	 .cfi_endproc
 1164              	.LFE243:
 1166 003a 00BF     	 .section .text.XMC_ETH_MAC_FlushTx,"ax",%progbits
 1167              	 .align 2
 1168              	 .global XMC_ETH_MAC_FlushTx
 1169              	 .thumb
 1170              	 .thumb_func
 1172              	XMC_ETH_MAC_FlushTx:
 1173              	.LFB244:
 643:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 644:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Flush TX */
 645:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_FlushTx(XMC_ETH_MAC_t *const eth_mac)
 646:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1174              	 .loc 1 646 0
 1175              	 .cfi_startproc
 1176              	 
 1177              	 
 1178              	.LVL123:
 1179 0000 38B5     	 push {r3,r4,r5,lr}
 1180              	.LCFI20:
 1181              	 .cfi_def_cfa_offset 16
 1182              	 .cfi_offset 3,-16
 1183              	 .cfi_offset 4,-12
 1184              	 .cfi_offset 5,-8
 1185              	 .cfi_offset 14,-4
 1186 0002 0546     	 mov r5,r0
 647:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
 1187              	 .loc 1 647 0
 1188 0004 0268     	 ldr r2,[r0]
 1189 0006 41F21804 	 movw r4,#4120
 1190 000a 1359     	 ldr r3,[r2,r4]
 1191 000c 23F40053 	 bic r3,r3,#8192
 1192 0010 1351     	 str r3,[r2,r4]
 648:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 1193              	 .loc 1 648 0
 1194 0012 FFF7FEFF 	 bl XMC_ETH_MAC_InitTxDescriptors
 1195              	.LVL124:
 649:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
 1196              	 .loc 1 649 0
 1197 0016 2A68     	 ldr r2,[r5]
 1198 0018 1359     	 ldr r3,[r2,r4]
 1199 001a 43F40053 	 orr r3,r3,#8192
 1200 001e 1351     	 str r3,[r2,r4]
 1201 0020 38BD     	 pop {r3,r4,r5,pc}
 1202              	 .cfi_endproc
 1203              	.LFE244:
 1205 0022 00BF     	 .section .text.XMC_ETH_MAC_FlushRx,"ax",%progbits
 1206              	 .align 2
 1207              	 .global XMC_ETH_MAC_FlushRx
 1208              	 .thumb
 1209              	 .thumb_func
 1211              	XMC_ETH_MAC_FlushRx:
 1212              	.LFB245:
 650:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 651:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 652:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Flush RX */
 653:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_FlushRx(XMC_ETH_MAC_t *const eth_mac)
 654:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1213              	 .loc 1 654 0
 1214              	 .cfi_startproc
 1215              	 
 1216              	 
 1217              	.LVL125:
 1218 0000 38B5     	 push {r3,r4,r5,lr}
 1219              	.LCFI21:
 1220              	 .cfi_def_cfa_offset 16
 1221              	 .cfi_offset 3,-16
 1222              	 .cfi_offset 4,-12
 1223              	 .cfi_offset 5,-8
 1224              	 .cfi_offset 14,-4
 1225 0002 0546     	 mov r5,r0
 655:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
 1226              	 .loc 1 655 0
 1227 0004 0268     	 ldr r2,[r0]
 1228 0006 41F21804 	 movw r4,#4120
 1229 000a 1359     	 ldr r3,[r2,r4]
 1230 000c 23F00203 	 bic r3,r3,#2
 1231 0010 1351     	 str r3,[r2,r4]
 656:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 1232              	 .loc 1 656 0
 1233 0012 FFF7FEFF 	 bl XMC_ETH_MAC_InitRxDescriptors
 1234              	.LVL126:
 657:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
 1235              	 .loc 1 657 0
 1236 0016 2A68     	 ldr r2,[r5]
 1237 0018 1359     	 ldr r3,[r2,r4]
 1238 001a 43F00203 	 orr r3,r3,#2
 1239 001e 1351     	 str r3,[r2,r4]
 1240 0020 38BD     	 pop {r3,r4,r5,pc}
 1241              	 .cfi_endproc
 1242              	.LFE245:
 1244 0022 00BF     	 .section .text.XMC_ETH_MAC_SetWakeUpFrameFilter,"ax",%progbits
 1245              	 .align 2
 1246              	 .global XMC_ETH_MAC_SetWakeUpFrameFilter
 1247              	 .thumb
 1248              	 .thumb_func
 1250              	XMC_ETH_MAC_SetWakeUpFrameFilter:
 1251              	.LFB246:
 658:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 659:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 660:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set wakeup frame filter */
 661:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetWakeUpFrameFilter(XMC_ETH_MAC_t *const eth_mac,
 662:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                       const uint32_t (*const filter)[XMC_ETH_WAKEUP_REGISTER_LENGTH
 663:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1252              	 .loc 1 663 0
 1253              	 .cfi_startproc
 1254              	 
 1255              	 
 1256              	 
 1257              	.LVL127:
 1258 0000 10B4     	 push {r4}
 1259              	.LCFI22:
 1260              	 .cfi_def_cfa_offset 4
 1261              	 .cfi_offset 4,-4
 1262              	.LVL128:
 1263 0002 0B1F     	 subs r3,r1,#4
 1264 0004 1C31     	 adds r1,r1,#28
 1265              	.LVL129:
 1266              	.L88:
 664:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i = 0U;
 665:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 666:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Fill Remote Wake-up frame filter register with buffer data */
 667:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < XMC_ETH_WAKEUP_REGISTER_LENGTH; i++)
 668:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 669:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Write each time to the same register */
 670:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->REMOTE_WAKE_UP_FRAME_FILTER = (*filter)[i];
 1267              	 .loc 1 670 0 discriminator 3
 1268 0006 0268     	 ldr r2,[r0]
 1269 0008 53F8044F 	 ldr r4,[r3,#4]!
 1270 000c 9462     	 str r4,[r2,#40]
 667:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 1271              	 .loc 1 667 0 discriminator 3
 1272 000e 8B42     	 cmp r3,r1
 1273 0010 F9D1     	 bne .L88
 671:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 672:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1274              	 .loc 1 672 0
 1275 0012 5DF8044B 	 ldr r4,[sp],#4
 1276              	.LCFI23:
 1277              	 .cfi_restore 4
 1278              	 .cfi_def_cfa_offset 0
 1279 0016 7047     	 bx lr
 1280              	 .cfi_endproc
 1281              	.LFE246:
 1283              	 .section .text.XMC_ETH_MAC_EnableEvent,"ax",%progbits
 1284              	 .align 2
 1285              	 .global XMC_ETH_MAC_EnableEvent
 1286              	 .thumb
 1287              	 .thumb_func
 1289              	XMC_ETH_MAC_EnableEvent:
 1290              	.LFB247:
 673:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 674:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Enable event */
 675:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_EnableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 676:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1291              	 .loc 1 676 0
 1292              	 .cfi_startproc
 1293              	 
 1294              	 
 1295              	 
 1296              	.LVL130:
 677:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_EnableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 678:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 679:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK &= ~(event >> 16U);
 1297              	 .loc 1 679 0
 1298 0000 0268     	 ldr r2,[r0]
 1299 0002 D36B     	 ldr r3,[r2,#60]
 1300 0004 23EA1143 	 bic r3,r3,r1,lsr#16
 1301 0008 D363     	 str r3,[r2,#60]
 680:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 681:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event &= (uint16_t)0x7fffU;
 1302              	 .loc 1 681 0
 1303 000a C1F30E03 	 ubfx r3,r1,#0,#15
 1304              	.LVL131:
 682:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (XCM_ETH_MAC_IsNormalEvent(event))
 1305              	 .loc 1 682 0
 1306 000e 44F24502 	 movw r2,#16453
 1307 0012 1142     	 tst r1,r2
 683:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 684:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event |= (uint32_t)ETH_INTERRUPT_ENABLE_NIE_Msk;
 1308              	 .loc 1 684 0
 1309 0014 18BF     	 it ne
 1310 0016 43F48033 	 orrne r3,r3,#65536
 1311              	.LVL132:
 685:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 686:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 687:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (XCM_ETH_MAC_IsAbnormalEvent(event))
 1312              	 .loc 1 687 0
 1313 001a 42F2BA72 	 movw r2,#10170
 1314 001e 1342     	 tst r3,r2
 688:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 689:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event |= (uint32_t)ETH_INTERRUPT_ENABLE_AIE_Msk;
 1315              	 .loc 1 689 0
 1316 0020 18BF     	 it ne
 1317 0022 43F40043 	 orrne r3,r3,#32768
 1318              	.LVL133:
 690:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 691:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 692:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_ENABLE |= event;
 1319              	 .loc 1 692 0
 1320 0026 0068     	 ldr r0,[r0]
 1321              	.LVL134:
 1322 0028 41F21C01 	 movw r1,#4124
 1323              	.LVL135:
 1324 002c 4258     	 ldr r2,[r0,r1]
 1325 002e 1343     	 orrs r3,r3,r2
 1326              	.LVL136:
 1327 0030 4350     	 str r3,[r0,r1]
 1328 0032 7047     	 bx lr
 1329              	 .cfi_endproc
 1330              	.LFE247:
 1332              	 .section .text.XMC_ETH_MAC_DisableEvent,"ax",%progbits
 1333              	 .align 2
 1334              	 .global XMC_ETH_MAC_DisableEvent
 1335              	 .thumb
 1336              	 .thumb_func
 1338              	XMC_ETH_MAC_DisableEvent:
 1339              	.LFB248:
 693:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 694:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 695:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Disable event */
 696:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_DisableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 697:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1340              	 .loc 1 697 0
 1341              	 .cfi_startproc
 1342              	 
 1343              	 
 1344              	 
 1345              	.LVL137:
 698:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_DisableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->
 699:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 700:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK |= event >> 16U;
 1346              	 .loc 1 700 0
 1347 0000 0268     	 ldr r2,[r0]
 1348 0002 D36B     	 ldr r3,[r2,#60]
 1349 0004 43EA1143 	 orr r3,r3,r1,lsr#16
 1350 0008 D363     	 str r3,[r2,#60]
 1351              	.LVL138:
 701:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 702:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event &= 0x7fffU;
 703:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 1352              	 .loc 1 703 0
 1353 000a 0068     	 ldr r0,[r0]
 1354              	.LVL139:
 1355 000c 41F21C02 	 movw r2,#4124
 1356 0010 8358     	 ldr r3,[r0,r2]
 702:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 1357              	 .loc 1 702 0
 1358 0012 C1F30E01 	 ubfx r1,r1,#0,#15
 1359              	.LVL140:
 1360              	 .loc 1 703 0
 1361 0016 23EA0101 	 bic r1,r3,r1
 1362 001a 8150     	 str r1,[r0,r2]
 1363 001c 7047     	 bx lr
 1364              	 .cfi_endproc
 1365              	.LFE248:
 1367 001e 00BF     	 .section .text.XMC_ETH_MAC_ClearEventStatus,"ax",%progbits
 1368              	 .align 2
 1369              	 .global XMC_ETH_MAC_ClearEventStatus
 1370              	 .thumb
 1371              	 .thumb_func
 1373              	XMC_ETH_MAC_ClearEventStatus:
 1374              	.LFB249:
 704:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 705:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 706:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Clear event status */
 707:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ClearEventStatus(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 708:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1375              	 .loc 1 708 0
 1376              	 .cfi_startproc
 1377              	 
 1378              	 
 1379              	 
 1380              	.LVL141:
 709:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ClearEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac-
 710:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 711:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((eth_mac->regs->STATUS & ETH_STATUS_NIS_Msk) != 0U)
 1381              	 .loc 1 711 0
 1382 0000 0368     	 ldr r3,[r0]
 1383 0002 41F21402 	 movw r2,#4116
 1384 0006 9A58     	 ldr r2,[r3,r2]
 1385 0008 12F4803F 	 tst r2,#65536
 712:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 713:../Libraries/XMCLib/src/xmc_eth_mac.c ****     event |= (uint32_t)ETH_STATUS_NIS_Msk;
 1386              	 .loc 1 713 0
 1387 000c 18BF     	 it ne
 1388 000e 41F48031 	 orrne r1,r1,#65536
 1389              	.LVL142:
 714:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 715:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 716:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((eth_mac->regs->STATUS & ETH_STATUS_AIS_Msk) != 0U)
 1390              	 .loc 1 716 0
 1391 0012 41F21402 	 movw r2,#4116
 1392 0016 9A58     	 ldr r2,[r3,r2]
 1393 0018 12F4004F 	 tst r2,#32768
 717:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 718:../Libraries/XMCLib/src/xmc_eth_mac.c ****     event |= (uint32_t)ETH_STATUS_AIS_Msk;
 1394              	 .loc 1 718 0
 1395 001c 18BF     	 it ne
 1396 001e 41F40041 	 orrne r1,r1,#32768
 1397              	.LVL143:
 719:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 720:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 721:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->STATUS = event & 0x0001FFFFU;
 1398              	 .loc 1 721 0
 1399 0022 C1F31001 	 ubfx r1,r1,#0,#17
 1400              	.LVL144:
 1401 0026 41F21402 	 movw r2,#4116
 1402 002a 9950     	 str r1,[r3,r2]
 1403 002c 7047     	 bx lr
 1404              	 .cfi_endproc
 1405              	.LFE249:
 1407 002e 00BF     	 .section .text.XMC_ETH_MAC_GetEventStatus,"ax",%progbits
 1408              	 .align 2
 1409              	 .global XMC_ETH_MAC_GetEventStatus
 1410              	 .thumb
 1411              	 .thumb_func
 1413              	XMC_ETH_MAC_GetEventStatus:
 1414              	.LFB250:
 722:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 723:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 724:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Obtain event status */
 725:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetEventStatus(const XMC_ETH_MAC_t *const eth_mac)
 726:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1415              	 .loc 1 726 0
 1416              	 .cfi_startproc
 1417              	 
 1418              	 
 1419              	 
 1420              	.LVL145:
 727:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t temp_status = 0;
 728:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 729:../Libraries/XMCLib/src/xmc_eth_mac.c ****   
 730:../Libraries/XMCLib/src/xmc_eth_mac.c ****   temp_status =  (eth_mac->regs->STATUS & (uint32_t)0x7ffUL);
 1421              	 .loc 1 730 0
 1422 0000 0268     	 ldr r2,[r0]
 1423 0002 41F21403 	 movw r3,#4116
 1424 0006 D358     	 ldr r3,[r2,r3]
 1425              	.LVL146:
 731:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 732:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return ((uint32_t)((eth_mac->regs->INTERRUPT_STATUS & (ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRU
 1426              	 .loc 1 732 0
 1427 0008 906B     	 ldr r0,[r2,#56]
 1428              	.LVL147:
 1429 000a 00F40270 	 and r0,r0,#520
 730:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 1430              	 .loc 1 730 0
 1431 000e C3F30A03 	 ubfx r3,r3,#0,#11
 1432              	.LVL148:
 733:../Libraries/XMCLib/src/xmc_eth_mac.c ****       temp_status);
 734:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1433              	 .loc 1 734 0
 1434 0012 43EA0040 	 orr r0,r3,r0,lsl#16
 1435 0016 7047     	 bx lr
 1436              	 .cfi_endproc
 1437              	.LFE250:
 1439              	 .section .text.XMC_ETH_MAC_ReturnRxDescriptor,"ax",%progbits
 1440              	 .align 2
 1441              	 .global XMC_ETH_MAC_ReturnRxDescriptor
 1442              	 .thumb
 1443              	 .thumb_func
 1445              	XMC_ETH_MAC_ReturnRxDescriptor:
 1446              	.LFB251:
 735:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 736:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Return RX descriptor */
 737:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ReturnRxDescriptor(XMC_ETH_MAC_t *const eth_mac)
 738:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1447              	 .loc 1 738 0
 1448              	 .cfi_startproc
 1449              	 
 1450              	 
 1451              	 
 1452              	.LVL149:
 739:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[eth_mac->rx_index].status |= ETH_MAC_DMA_RDES0_OWN;
 1453              	 .loc 1 739 0
 1454 0000 90F82730 	 ldrb r3,[r0,#39]
 1455 0004 5B01     	 lsls r3,r3,#5
 1456 0006 0169     	 ldr r1,[r0,#16]
 1457 0008 CA58     	 ldr r2,[r1,r3]
 1458 000a 42F00042 	 orr r2,r2,#-2147483648
 1459 000e CA50     	 str r2,[r1,r3]
 740:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index++;
 1460              	 .loc 1 740 0
 1461 0010 90F82730 	 ldrb r3,[r0,#39]
 1462 0014 0133     	 adds r3,r3,#1
 1463 0016 DBB2     	 uxtb r3,r3
 1464 0018 80F82730 	 strb r3,[r0,#39]
 741:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->rx_index == eth_mac->num_rx_buf)
 1465              	 .loc 1 741 0
 1466 001c 90F82420 	 ldrb r2,[r0,#36]
 1467 0020 9A42     	 cmp r2,r3
 742:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 743:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->rx_index = 0U;
 1468              	 .loc 1 743 0
 1469 0022 04BF     	 itt eq
 1470 0024 0023     	 moveq r3,#0
 1471 0026 80F82730 	 strbeq r3,[r0,#39]
 1472 002a 7047     	 bx lr
 1473              	 .cfi_endproc
 1474              	.LFE251:
 1476              	 .section .text.XMC_ETH_MAC_ReturnTxDescriptor,"ax",%progbits
 1477              	 .align 2
 1478              	 .global XMC_ETH_MAC_ReturnTxDescriptor
 1479              	 .thumb
 1480              	 .thumb_func
 1482              	XMC_ETH_MAC_ReturnTxDescriptor:
 1483              	.LFB252:
 744:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } 
 745:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 746:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 747:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Return TX descriptor */
 748:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ReturnTxDescriptor(XMC_ETH_MAC_t *const eth_mac)
 749:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1484              	 .loc 1 749 0
 1485              	 .cfi_startproc
 1486              	 
 1487              	 
 1488              	 
 1489              	.LVL150:
 750:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_ts_index = eth_mac->tx_index;
 1490              	 .loc 1 750 0
 1491 0000 90F82630 	 ldrb r3,[r0,#38]
 1492 0004 80F82830 	 strb r3,[r0,#40]
 751:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 752:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_desc[eth_mac->tx_index].status |= ETH_MAC_DMA_TDES0_CIC |ETH_MAC_DMA_TDES0_OWN;
 1493              	 .loc 1 752 0
 1494 0008 5B01     	 lsls r3,r3,#5
 1495 000a 4169     	 ldr r1,[r0,#20]
 1496 000c CA58     	 ldr r2,[r1,r3]
 1497 000e 42F00042 	 orr r2,r2,#-2147483648
 1498 0012 42F44002 	 orr r2,r2,#12582912
 1499 0016 CA50     	 str r2,[r1,r3]
 753:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_index++;
 1500              	 .loc 1 753 0
 1501 0018 90F82630 	 ldrb r3,[r0,#38]
 1502 001c 0133     	 adds r3,r3,#1
 1503 001e DBB2     	 uxtb r3,r3
 1504 0020 80F82630 	 strb r3,[r0,#38]
 754:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->tx_index == eth_mac->num_tx_buf)
 1505              	 .loc 1 754 0
 1506 0024 90F82520 	 ldrb r2,[r0,#37]
 1507 0028 9A42     	 cmp r2,r3
 755:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 756:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->tx_index = 0U;
 1508              	 .loc 1 756 0
 1509 002a 04BF     	 itt eq
 1510 002c 0023     	 moveq r3,#0
 1511 002e 80F82630 	 strbeq r3,[r0,#38]
 757:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } 
 758:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 759:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->frame_end = NULL;
 1512              	 .loc 1 759 0
 1513 0032 0023     	 movs r3,#0
 1514 0034 0362     	 str r3,[r0,#32]
 1515 0036 7047     	 bx lr
 1516              	 .cfi_endproc
 1517              	.LFE252:
 1519              	 .section .text.XMC_ETH_MAC_SetVLANTag,"ax",%progbits
 1520              	 .align 2
 1521              	 .global XMC_ETH_MAC_SetVLANTag
 1522              	 .thumb
 1523              	 .thumb_func
 1525              	XMC_ETH_MAC_SetVLANTag:
 1526              	.LFB253:
 760:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 761:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 762:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set VLAN tag */
 763:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetVLANTag(XMC_ETH_MAC_t *const eth_mac, uint16_t tag)
 764:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1527              	 .loc 1 764 0
 1528              	 .cfi_startproc
 1529              	 
 1530              	 
 1531              	 
 1532              	.LVL151:
 765:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetVLANTag: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs)
 766:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 767:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->VLAN_TAG = (uint32_t)tag;
 1533              	 .loc 1 767 0
 1534 0000 0368     	 ldr r3,[r0]
 1535 0002 D961     	 str r1,[r3,#28]
 1536 0004 7047     	 bx lr
 1537              	 .cfi_endproc
 1538              	.LFE253:
 1540 0006 00BF     	 .section .text.XMC_ETH_MAC_InitPTP,"ax",%progbits
 1541              	 .align 2
 1542              	 .global XMC_ETH_MAC_InitPTP
 1543              	 .thumb
 1544              	 .thumb_func
 1546              	XMC_ETH_MAC_InitPTP:
 1547              	.LFB254:
 768:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 769:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 770:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize PTP */
 771:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitPTP(XMC_ETH_MAC_t *const eth_mac, uint32_t config)
 772:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1548              	 .loc 1 772 0
 1549              	 .cfi_startproc
 1550              	 
 1551              	 
 1552              	 
 1553              	.LVL152:
 773:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitPTP: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 774:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 775:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Mask the time stamp interrupt */
 776:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK |= (uint32_t)ETH_INTERRUPT_MASK_TSIM_Msk;
 1554              	 .loc 1 776 0
 1555 0000 0268     	 ldr r2,[r0]
 1556 0002 D36B     	 ldr r3,[r2,#60]
 1557 0004 43F40073 	 orr r3,r3,#512
 1558 0008 D363     	 str r3,[r2,#60]
 777:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 778:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Enable time stamp, rollover mode of nanosecond counter set to digital mode, i.e. after 0x3B9AC
 779:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL = ETH_TIMESTAMP_CONTROL_TSENA_Msk | ETH_TIMESTAMP_CONTROL_TSCTRL
 1559              	 .loc 1 779 0
 1560 000a 0268     	 ldr r2,[r0]
 1561 000c 41F40073 	 orr r3,r1,#512
 1562 0010 43F00103 	 orr r3,r3,#1
 1563 0014 C2F80037 	 str r3,[r2,#1792]
 780:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 781:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((config & (uint32_t)XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE) != 0U)
 1564              	 .loc 1 781 0
 1565 0018 11F0020F 	 tst r1,#2
 1566 001c 2FD0     	 beq .L105
 1567              	.LBB29:
 782:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 783:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Program sub-second increment register based on PTP clock frequency ~ 50MHz */
 784:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->SUB_SECOND_INCREMENT = 20;
 1568              	 .loc 1 784 0
 1569 001e 0368     	 ldr r3,[r0]
 1570 0020 1422     	 movs r2,#20
 1571 0022 C3F80427 	 str r2,[r3,#1796]
 1572              	.LBB30:
 1573              	.LBB31:
2487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1574              	 .loc 3 2487 0
 1575 0026 2A4B     	 ldr r3,.L111
 1576 0028 1A69     	 ldr r2,[r3,#16]
 1577              	.LVL153:
 1578              	.LBE31:
 1579              	.LBE30:
 785:../Libraries/XMCLib/src/xmc_eth_mac.c ****     
 786:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* fSYS = Reference Clock for the Time Stamp Update Logic*/
 787:../Libraries/XMCLib/src/xmc_eth_mac.c ****     float ratio = (float)XMC_SCU_CLOCK_GetSystemClockFrequency() / (float)XMC_ETH_SUB_SECOND_UPDATE
 788:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)(((float)0x100000000ULL / ratio) + 0.5F);
 1580              	 .loc 1 788 0
 1581 002a 0168     	 ldr r1,[r0]
 1582              	.LVL154:
 1583              	.LBB33:
 1584              	.LBB32:
2487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1585              	 .loc 3 2487 0
 1586 002c 02F00102 	 and r2,r2,#1
 1587              	.LVL155:
 1588 0030 284B     	 ldr r3,.L111+4
 1589 0032 1B68     	 ldr r3,[r3]
 1590 0034 9340     	 lsls r3,r3,r2
 1591              	.LBE32:
 1592              	.LBE33:
 787:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)(((float)0x100000000ULL / ratio) + 0.5F);
 1593              	 .loc 1 787 0
 1594 0036 07EE903A 	 fmsr s15,r3
 1595 003a F8EE677A 	 fuitos s15,s15
 1596 003e 9FED267A 	 flds s14,.L111+8
 1597 0042 27EE877A 	 fmuls s14,s15,s14
 1598              	.LVL156:
 1599              	 .loc 1 788 0
 1600 0046 DFED257A 	 flds s15,.L111+12
 1601 004a C7EE877A 	 fdivs s15,s15,s14
 1602 004e B6EE007A 	 fconsts s14,#96
 1603              	.LVL157:
 1604 0052 77EE877A 	 fadds s15,s15,s14
 1605 0056 FCEEE77A 	 ftouizs s15,s15
 1606 005a 17EE903A 	 fmrs r3,s15
 1607 005e C1F81837 	 str r3,[r1,#1816]
 789:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 790:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Addend register update */
 791:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 1608              	 .loc 1 791 0
 1609 0062 0268     	 ldr r2,[r0]
 1610 0064 D2F80037 	 ldr r3,[r2,#1792]
 1611 0068 43F02003 	 orr r3,r3,#32
 1612 006c C2F80037 	 str r3,[r2,#1792]
 792:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 793:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Poll the Timestamp Control register until the bit TSADDREG is cleared */
 794:../Libraries/XMCLib/src/xmc_eth_mac.c ****     while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSADDREG_Msk);
 1613              	 .loc 1 794 0
 1614 0070 0268     	 ldr r2,[r0]
 1615              	.L106:
 1616              	 .loc 1 794 0 is_stmt 0 discriminator 1
 1617 0072 D2F80037 	 ldr r3,[r2,#1792]
 1618 0076 13F0200F 	 tst r3,#32
 1619 007a FAD1     	 bne .L106
 1620 007c 19E0     	 b .L107
 1621              	.LVL158:
 1622              	.L105:
 1623              	.LBE29:
 795:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 796:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 797:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 798:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Program sub-second increment register based on PTP clock frequency = fSYS/2 */
 799:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SUB_SECOND_INCREMENT = (uint32_t)(((float)1000000000 / (float)XMC_SCU_CLOCK_GetSys
 1624              	 .loc 1 799 0 is_stmt 1
 1625 007e 0168     	 ldr r1,[r0]
 1626              	.LVL159:
 1627              	.LBB34:
 1628              	.LBB35:
2487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1629              	 .loc 3 2487 0
 1630 0080 134B     	 ldr r3,.L111
 1631 0082 1A69     	 ldr r2,[r3,#16]
 1632 0084 02F00102 	 and r2,r2,#1
 1633 0088 124B     	 ldr r3,.L111+4
 1634 008a 1B68     	 ldr r3,[r3]
 1635 008c 9340     	 lsls r3,r3,r2
 1636              	.LBE35:
 1637              	.LBE34:
 1638              	 .loc 1 799 0
 1639 008e 07EE903A 	 fmsr s15,r3
 1640 0092 B8EE677A 	 fuitos s14,s15
 1641 0096 DFED127A 	 flds s15,.L111+16
 1642 009a C7EE877A 	 fdivs s15,s15,s14
 1643 009e B6EE007A 	 fconsts s14,#96
 1644 00a2 77EE877A 	 fadds s15,s15,s14
 1645 00a6 FCEEE77A 	 ftouizs s15,s15
 1646 00aa 17EE903A 	 fmrs r3,s15
 1647 00ae C1F80437 	 str r3,[r1,#1796]
 1648              	.L107:
 800:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 801:../Libraries/XMCLib/src/xmc_eth_mac.c ****   
 802:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSINIT_Msk;
 1649              	 .loc 1 802 0
 1650 00b2 0268     	 ldr r2,[r0]
 1651 00b4 D2F80037 	 ldr r3,[r2,#1792]
 1652 00b8 43F00403 	 orr r3,r3,#4
 1653 00bc C2F80037 	 str r3,[r2,#1792]
 803:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSINIT_Msk);  
 1654              	 .loc 1 803 0
 1655 00c0 0268     	 ldr r2,[r0]
 1656              	.L108:
 1657              	 .loc 1 803 0 is_stmt 0 discriminator 1
 1658 00c2 D2F80037 	 ldr r3,[r2,#1792]
 1659 00c6 13F0040F 	 tst r3,#4
 1660 00ca FAD1     	 bne .L108
 804:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1661              	 .loc 1 804 0 is_stmt 1
 1662 00cc 7047     	 bx lr
 1663              	.L112:
 1664 00ce 00BF     	 .align 2
 1665              	.L111:
 1666 00d0 00460050 	 .word 1342195200
 1667 00d4 00000000 	 .word SystemCoreClock
 1668 00d8 77CCAB32 	 .word 850119799
 1669 00dc 0000804F 	 .word 1333788672
 1670 00e0 286B6E4E 	 .word 1315859240
 1671              	 .cfi_endproc
 1672              	.LFE254:
 1674              	 .section .text.XMC_ETH_MAC_InitPTPEx,"ax",%progbits
 1675              	 .align 2
 1676              	 .global XMC_ETH_MAC_InitPTPEx
 1677              	 .thumb
 1678              	 .thumb_func
 1680              	XMC_ETH_MAC_InitPTPEx:
 1681              	.LFB255:
 805:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 806:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize PTP using a given time */
 807:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitPTPEx(XMC_ETH_MAC_t *const eth_mac, uint32_t config, XMC_ETH_MAC_TIME_t *const
 808:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1682              	 .loc 1 808 0
 1683              	 .cfi_startproc
 1684              	 
 1685              	 
 1686              	.LVL160:
 1687 0000 38B5     	 push {r3,r4,r5,lr}
 1688              	.LCFI24:
 1689              	 .cfi_def_cfa_offset 16
 1690              	 .cfi_offset 3,-16
 1691              	 .cfi_offset 4,-12
 1692              	 .cfi_offset 5,-8
 1693              	 .cfi_offset 14,-4
 809:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitPTP: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 810:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 811:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize the system time */
 812:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = time->nanoseconds;
 1694              	 .loc 1 812 0
 1695 0002 0468     	 ldr r4,[r0]
 1696 0004 5568     	 ldr r5,[r2,#4]
 1697 0006 C4F81457 	 str r5,[r4,#1812]
 813:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 1698              	 .loc 1 813 0
 1699 000a 0368     	 ldr r3,[r0]
 1700 000c 1268     	 ldr r2,[r2]
 1701              	.LVL161:
 1702 000e C3F81027 	 str r2,[r3,#1808]
 814:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 815:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitPTP(eth_mac, config);
 1703              	 .loc 1 815 0
 1704 0012 FFF7FEFF 	 bl XMC_ETH_MAC_InitPTP
 1705              	.LVL162:
 1706 0016 38BD     	 pop {r3,r4,r5,pc}
 1707              	 .cfi_endproc
 1708              	.LFE255:
 1710              	 .section .text.XMC_ETH_MAC_GetPTPTime,"ax",%progbits
 1711              	 .align 2
 1712              	 .global XMC_ETH_MAC_GetPTPTime
 1713              	 .thumb
 1714              	 .thumb_func
 1716              	XMC_ETH_MAC_GetPTPTime:
 1717              	.LFB256:
 816:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 817:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 818:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get PTP time */
 819:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_GetPTPTime(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
 820:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1718              	 .loc 1 820 0
 1719              	 .cfi_startproc
 1720              	 
 1721              	 
 1722              	 
 1723              	.LVL163:
 821:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetPTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs)
 822:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 823:../Libraries/XMCLib/src/xmc_eth_mac.c ****   time->nanoseconds = (uint32_t)(eth_mac->regs->SYSTEM_TIME_NANOSECONDS); /* accuracy of 1 ns */
 1724              	 .loc 1 823 0
 1725 0000 0368     	 ldr r3,[r0]
 1726 0002 D3F80C37 	 ldr r3,[r3,#1804]
 1727 0006 4B60     	 str r3,[r1,#4]
 824:../Libraries/XMCLib/src/xmc_eth_mac.c ****   time->seconds = eth_mac->regs->SYSTEM_TIME_SECONDS;
 1728              	 .loc 1 824 0
 1729 0008 0368     	 ldr r3,[r0]
 1730 000a D3F80837 	 ldr r3,[r3,#1800]
 1731 000e 0B60     	 str r3,[r1]
 1732 0010 7047     	 bx lr
 1733              	 .cfi_endproc
 1734              	.LFE256:
 1736 0012 00BF     	 .section .text.XMC_ETH_MAC_SetPTPTime,"ax",%progbits
 1737              	 .align 2
 1738              	 .global XMC_ETH_MAC_SetPTPTime
 1739              	 .thumb
 1740              	 .thumb_func
 1742              	XMC_ETH_MAC_SetPTPTime:
 1743              	.LFB257:
 825:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 826:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 827:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set PTP time */
 828:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetPTPTime(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
 829:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1744              	 .loc 1 829 0
 1745              	 .cfi_startproc
 1746              	 
 1747              	 
 1748              	 
 1749              	.LVL164:
 830:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetPTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs)
 831:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 832:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 1750              	 .loc 1 832 0
 1751 0000 0368     	 ldr r3,[r0]
 1752 0002 0A68     	 ldr r2,[r1]
 1753 0004 C3F81027 	 str r2,[r3,#1808]
 833:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = time->nanoseconds;
 1754              	 .loc 1 833 0
 1755 0008 0368     	 ldr r3,[r0]
 1756 000a 4A68     	 ldr r2,[r1,#4]
 1757 000c C3F81427 	 str r2,[r3,#1812]
 834:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 835:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize precision timer */
 836:../Libraries/XMCLib/src/xmc_eth_mac.c ****   ETH0->TIMESTAMP_CONTROL |= ETH_TIMESTAMP_CONTROL_TSINIT_Msk;
 1758              	 .loc 1 836 0
 1759 0010 064A     	 ldr r2,.L119
 1760 0012 D2F80037 	 ldr r3,[r2,#1792]
 1761 0016 43F00403 	 orr r3,r3,#4
 1762 001a C2F80037 	 str r3,[r2,#1792]
 837:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSINIT_Msk);
 1763              	 .loc 1 837 0
 1764 001e 0268     	 ldr r2,[r0]
 1765              	.L117:
 1766              	 .loc 1 837 0 is_stmt 0 discriminator 1
 1767 0020 D2F80037 	 ldr r3,[r2,#1792]
 1768 0024 13F0040F 	 tst r3,#4
 1769 0028 FAD1     	 bne .L117
 838:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1770              	 .loc 1 838 0 is_stmt 1
 1771 002a 7047     	 bx lr
 1772              	.L120:
 1773              	 .align 2
 1774              	.L119:
 1775 002c 00C00050 	 .word 1342226432
 1776              	 .cfi_endproc
 1777              	.LFE257:
 1779              	 .section .text.XMC_ETH_MAC_UpdatePTPTime,"ax",%progbits
 1780              	 .align 2
 1781              	 .global XMC_ETH_MAC_UpdatePTPTime
 1782              	 .thumb
 1783              	 .thumb_func
 1785              	XMC_ETH_MAC_UpdatePTPTime:
 1786              	.LFB258:
 839:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 840:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Update PTP time */
 841:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_UpdatePTPTime(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_TIME_t *const time)
 842:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1787              	 .loc 1 842 0
 1788              	 .cfi_startproc
 1789              	 
 1790              	 
 1791              	 
 1792              	.LVL165:
 843:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t temp;
 844:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 845:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_UpdatePTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->re
 846:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_UpdatePTPTime: time.time_stamp_nanoseconds not in range", (time->nanoseco
 847:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 848:../Libraries/XMCLib/src/xmc_eth_mac.c ****   temp = (uint32_t)(abs(time->nanoseconds));
 1793              	 .loc 1 848 0
 1794 0000 4B68     	 ldr r3,[r1,#4]
 1795 0002 83EAE372 	 eor r2,r3,r3,asr#31
 1796 0006 A2EBE372 	 sub r2,r2,r3,asr#31
 1797              	.LVL166:
 849:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (time->nanoseconds < 0)
 1798              	 .loc 1 849 0
 1799 000a 002B     	 cmp r3,#0
 850:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 851:../Libraries/XMCLib/src/xmc_eth_mac.c ****     temp |= (uint32_t)ETH_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_Msk;
 1800              	 .loc 1 851 0
 1801 000c B8BF     	 it lt
 1802 000e 42F00042 	 orrlt r2,r2,#-2147483648
 1803              	.LVL167:
 852:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 853:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 854:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = temp;
 1804              	 .loc 1 854 0
 1805 0012 0368     	 ldr r3,[r0]
 1806 0014 C3F81427 	 str r2,[r3,#1812]
 855:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 1807              	 .loc 1 855 0
 1808 0018 0368     	 ldr r3,[r0]
 1809 001a 0A68     	 ldr r2,[r1]
 1810              	.LVL168:
 1811 001c C3F81027 	 str r2,[r3,#1808]
 856:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 857:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSUPDT_Msk;
 1812              	 .loc 1 857 0
 1813 0020 0268     	 ldr r2,[r0]
 1814 0022 D2F80037 	 ldr r3,[r2,#1792]
 1815 0026 43F00803 	 orr r3,r3,#8
 1816 002a C2F80037 	 str r3,[r2,#1792]
 1817 002e 7047     	 bx lr
 1818              	 .cfi_endproc
 1819              	.LFE258:
 1821              	 .section .text.XMC_ETH_MAC_SetPTPAlarm,"ax",%progbits
 1822              	 .align 2
 1823              	 .global XMC_ETH_MAC_SetPTPAlarm
 1824              	 .thumb
 1825              	 .thumb_func
 1827              	XMC_ETH_MAC_SetPTPAlarm:
 1828              	.LFB259:
 858:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 859:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 860:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set PTP alarm */
 861:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetPTPAlarm(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_TIME_t *const time)
 862:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1829              	 .loc 1 862 0
 1830              	 .cfi_startproc
 1831              	 
 1832              	 
 1833              	 
 1834              	.LVL169:
 863:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetPTPAlarm: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs
 864:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetPTPAlarm: time.time_stamp_nanoseconds not in range", (time->nanosecond
 865:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 866:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TARGET_TIME_NANOSECONDS = time->nanoseconds;
 1835              	 .loc 1 866 0
 1836 0000 0368     	 ldr r3,[r0]
 1837 0002 4A68     	 ldr r2,[r1,#4]
 1838 0004 C3F82027 	 str r2,[r3,#1824]
 867:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TARGET_TIME_SECONDS = time->seconds;
 1839              	 .loc 1 867 0
 1840 0008 0368     	 ldr r3,[r0]
 1841 000a 0A68     	 ldr r2,[r1]
 1842 000c C3F81C27 	 str r2,[r3,#1820]
 1843 0010 7047     	 bx lr
 1844              	 .cfi_endproc
 1845              	.LFE259:
 1847 0012 00BF     	 .section .text.XMC_ETH_MAC_AdjustPTPClock,"ax",%progbits
 1848              	 .align 2
 1849              	 .global XMC_ETH_MAC_AdjustPTPClock
 1850              	 .thumb
 1851              	 .thumb_func
 1853              	XMC_ETH_MAC_AdjustPTPClock:
 1854              	.LFB260:
 868:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 869:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 870:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Adjust PTP clock */
 871:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_AdjustPTPClock(XMC_ETH_MAC_t *const eth_mac, uint32_t correction)
 872:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1855              	 .loc 1 872 0
 1856              	 .cfi_startproc
 1857              	 
 1858              	 
 1859              	 
 1860              	.LVL170:
 1861 0000 10B4     	 push {r4}
 1862              	.LCFI25:
 1863              	 .cfi_def_cfa_offset 4
 1864              	 .cfi_offset 4,-4
 873:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_AdjustPTPClock: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 874:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 875:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Correction factor is Q31 (0x80000000 = 1.000000000) */
 876:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)(((uint64_t)correction * eth_mac->regs->TIMESTAMP_ADD
 1865              	 .loc 1 876 0
 1866 0002 0468     	 ldr r4,[r0]
 1867 0004 D4F81827 	 ldr r2,[r4,#1816]
 1868 0008 A1FB0223 	 umull r2,r3,r1,r2
 1869 000c D20F     	 lsrs r2,r2,#31
 1870 000e 42EA4302 	 orr r2,r2,r3,lsl#1
 1871 0012 C4F81827 	 str r2,[r4,#1816]
 877:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 878:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Update addend register */
 879:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 1872              	 .loc 1 879 0
 1873 0016 0268     	 ldr r2,[r0]
 1874 0018 D2F80037 	 ldr r3,[r2,#1792]
 1875 001c 43F02003 	 orr r3,r3,#32
 1876 0020 C2F80037 	 str r3,[r2,#1792]
 880:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 881:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Poll the Timestamp Control register until the bit TSADDREG is cleared */
 882:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSADDREG_Msk);  
 1877              	 .loc 1 882 0
 1878 0024 0268     	 ldr r2,[r0]
 1879              	.L125:
 1880              	 .loc 1 882 0 is_stmt 0 discriminator 1
 1881 0026 D2F80037 	 ldr r3,[r2,#1792]
 1882 002a 13F0200F 	 tst r3,#32
 1883 002e FAD1     	 bne .L125
 883:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1884              	 .loc 1 883 0 is_stmt 1
 1885 0030 5DF8044B 	 ldr r4,[sp],#4
 1886              	.LCFI26:
 1887              	 .cfi_restore 4
 1888              	 .cfi_def_cfa_offset 0
 1889 0034 7047     	 bx lr
 1890              	 .cfi_endproc
 1891              	.LFE260:
 1893 0036 00BF     	 .section .text.XMC_ETH_MAC_UpdateAddend,"ax",%progbits
 1894              	 .align 2
 1895              	 .global XMC_ETH_MAC_UpdateAddend
 1896              	 .thumb
 1897              	 .thumb_func
 1899              	XMC_ETH_MAC_UpdateAddend:
 1900              	.LFB261:
 884:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 885:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Update Addend */
 886:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_UpdateAddend(XMC_ETH_MAC_t *const eth_mac, uint32_t addend)
 887:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1901              	 .loc 1 887 0
 1902              	 .cfi_startproc
 1903              	 
 1904              	 
 1905              	 
 1906              	.LVL171:
 888:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_AdjustPTPClock: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 889:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 890:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_ADDEND = addend;
 1907              	 .loc 1 890 0
 1908 0000 0368     	 ldr r3,[r0]
 1909 0002 C3F81817 	 str r1,[r3,#1816]
 891:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 892:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Update addend register */
 893:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 1910              	 .loc 1 893 0
 1911 0006 0268     	 ldr r2,[r0]
 1912 0008 D2F80037 	 ldr r3,[r2,#1792]
 1913 000c 43F02003 	 orr r3,r3,#32
 1914 0010 C2F80037 	 str r3,[r2,#1792]
 894:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 895:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Poll the Timestamp Control register until the bit TSADDREG is cleared */
 896:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSADDREG_Msk);
 1915              	 .loc 1 896 0
 1916 0014 0268     	 ldr r2,[r0]
 1917              	.L129:
 1918              	 .loc 1 896 0 is_stmt 0 discriminator 1
 1919 0016 D2F80037 	 ldr r3,[r2,#1792]
 1920 001a 13F0200F 	 tst r3,#32
 1921 001e FAD1     	 bne .L129
 897:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1922              	 .loc 1 897 0 is_stmt 1
 1923 0020 7047     	 bx lr
 1924              	 .cfi_endproc
 1925              	.LFE261:
 1927 0022 00BF     	 .section .text.XMC_ETH_MAC_GetPTPStatus,"ax",%progbits
 1928              	 .align 2
 1929              	 .global XMC_ETH_MAC_GetPTPStatus
 1930              	 .thumb
 1931              	 .thumb_func
 1933              	XMC_ETH_MAC_GetPTPStatus:
 1934              	.LFB262:
 898:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 899:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set PTP status */
 900:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetPTPStatus(const XMC_ETH_MAC_t *const eth_mac)
 901:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1935              	 .loc 1 901 0
 1936              	 .cfi_startproc
 1937              	 
 1938              	 
 1939              	 
 1940              	.LVL172:
 902:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetPTPStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->reg
 903:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 904:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (eth_mac->regs->TIMESTAMP_STATUS);
 1941              	 .loc 1 904 0
 1942 0000 0368     	 ldr r3,[r0]
 1943 0002 D3F82807 	 ldr r0,[r3,#1832]
 1944              	.LVL173:
 905:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1945              	 .loc 1 905 0
 1946 0006 7047     	 bx lr
 1947              	 .cfi_endproc
 1948              	.LFE262:
 1950              	 .section .text.XMC_ETH_MAC_GetRxTimeStamp,"ax",%progbits
 1951              	 .align 2
 1952              	 .global XMC_ETH_MAC_GetRxTimeStamp
 1953              	 .thumb
 1954              	 .thumb_func
 1956              	XMC_ETH_MAC_GetRxTimeStamp:
 1957              	.LFB263:
 906:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 907:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get TX time-stamp */
 908:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_GetRxTimeStamp(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *c
 909:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1958              	 .loc 1 909 0
 1959              	 .cfi_startproc
 1960              	 
 1961              	 
 1962              	 
 1963              	.LVL174:
 910:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_DMA_DESC_t *rx_desc;
 911:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 912:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 913:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetRxTimeStamp: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 914:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetRxTimeStamp: time is invalid", time != NULL);
 915:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 916:../Libraries/XMCLib/src/xmc_eth_mac.c ****   rx_desc = &eth_mac->rx_desc[eth_mac->rx_index];
 1964              	 .loc 1 916 0
 1965 0000 90F82730 	 ldrb r3,[r0,#39]
 1966 0004 5B01     	 lsls r3,r3,#5
 1967 0006 0269     	 ldr r2,[r0,#16]
 1968 0008 D018     	 adds r0,r2,r3
 1969              	.LVL175:
 917:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (rx_desc->status & ETH_MAC_DMA_RDES0_OWN)
 1970              	 .loc 1 917 0
 1971 000a D358     	 ldr r3,[r2,r3]
 1972 000c 002B     	 cmp r3,#0
 1973 000e 0ADB     	 blt .L134
 918:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 919:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 920:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 921:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 922:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 923:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((rx_desc->status & (ETH_MAC_DMA_RDES0_TSA | ETH_MAC_DMA_RDES0_LS)) == (ETH_MAC_DMA_RDES0_TS
 1974              	 .loc 1 923 0
 1975 0010 03F4C073 	 and r3,r3,#384
 1976 0014 B3F5C07F 	 cmp r3,#384
 1977 0018 07D1     	 bne .L135
 924:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 925:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->nanoseconds = (int32_t)(rx_desc->time_stamp_nanoseconds);
 1978              	 .loc 1 925 0
 1979 001a 8369     	 ldr r3,[r0,#24]
 1980 001c 4B60     	 str r3,[r1,#4]
 926:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->seconds = rx_desc->time_stamp_seconds;      
 1981              	 .loc 1 926 0
 1982 001e C369     	 ldr r3,[r0,#28]
 1983 0020 0B60     	 str r3,[r1]
 1984              	.LVL176:
 927:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 928:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_OK;
 1985              	 .loc 1 928 0
 1986 0022 0020     	 movs r0,#0
 1987              	.LVL177:
 1988 0024 7047     	 bx lr
 1989              	.LVL178:
 1990              	.L134:
 919:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 1991              	 .loc 1 919 0
 1992 0026 0120     	 movs r0,#1
 1993              	.LVL179:
 1994 0028 7047     	 bx lr
 1995              	.LVL180:
 1996              	.L135:
 929:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 930:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 931:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 932:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_ERROR;  
 1997              	 .loc 1 932 0
 1998 002a 0220     	 movs r0,#2
 1999              	.LVL181:
 933:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 934:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 935:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 936:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 937:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2000              	 .loc 1 937 0
 2001 002c 7047     	 bx lr
 2002              	 .cfi_endproc
 2003              	.LFE263:
 2005 002e 00BF     	 .section .text.XMC_ETH_MAC_GetTxTimeStamp,"ax",%progbits
 2006              	 .align 2
 2007              	 .global XMC_ETH_MAC_GetTxTimeStamp
 2008              	 .thumb
 2009              	 .thumb_func
 2011              	XMC_ETH_MAC_GetTxTimeStamp:
 2012              	.LFB264:
 938:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 939:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get TX time-stamp */
 940:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_GetTxTimeStamp(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *c
 941:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2013              	 .loc 1 941 0
 2014              	 .cfi_startproc
 2015              	 
 2016              	 
 2017              	 
 2018              	.LVL182:
 942:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_DMA_DESC_t *tx_desc;
 943:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 944:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 945:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 946:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: time is invalid", time != NULL);
 947:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 948:../Libraries/XMCLib/src/xmc_eth_mac.c ****   tx_desc = &eth_mac->tx_desc[eth_mac->tx_ts_index];
 2019              	 .loc 1 948 0
 2020 0000 90F82830 	 ldrb r3,[r0,#40]
 2021 0004 5B01     	 lsls r3,r3,#5
 2022 0006 4269     	 ldr r2,[r0,#20]
 2023 0008 D018     	 adds r0,r2,r3
 2024              	.LVL183:
 949:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (tx_desc->status & ETH_MAC_DMA_TDES0_OWN)
 2025              	 .loc 1 949 0
 2026 000a D358     	 ldr r3,[r2,r3]
 2027 000c 002B     	 cmp r3,#0
 2028 000e 09DB     	 blt .L138
 950:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 951:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 952:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 953:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 954:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 955:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((tx_desc->status & (ETH_MAC_DMA_TDES0_TTSS | ETH_MAC_DMA_TDES0_LS)) == (ETH_MAC_DMA_TDES0_T
 2029              	 .loc 1 955 0
 2030 0010 064A     	 ldr r2,.L140
 2031 0012 1340     	 ands r3,r3,r2
 2032 0014 9342     	 cmp r3,r2
 2033 0016 07D1     	 bne .L139
 956:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 957:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->nanoseconds = (int32_t)(tx_desc->time_stamp_nanoseconds); /* accuracy of 1 ns */
 2034              	 .loc 1 957 0
 2035 0018 8369     	 ldr r3,[r0,#24]
 2036 001a 4B60     	 str r3,[r1,#4]
 958:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->seconds = tx_desc->time_stamp_seconds;
 2037              	 .loc 1 958 0
 2038 001c C369     	 ldr r3,[r0,#28]
 2039 001e 0B60     	 str r3,[r1]
 2040              	.LVL184:
 959:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 960:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_OK;
 2041              	 .loc 1 960 0
 2042 0020 0020     	 movs r0,#0
 2043              	.LVL185:
 2044 0022 7047     	 bx lr
 2045              	.LVL186:
 2046              	.L138:
 951:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 2047              	 .loc 1 951 0
 2048 0024 0120     	 movs r0,#1
 2049              	.LVL187:
 2050 0026 7047     	 bx lr
 2051              	.LVL188:
 2052              	.L139:
 961:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 962:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 963:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 964:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_ERROR;
 2053              	 .loc 1 964 0
 2054 0028 0220     	 movs r0,#2
 2055              	.LVL189:
 965:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 966:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 967:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 968:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 969:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2056              	 .loc 1 969 0
 2057 002a 7047     	 bx lr
 2058              	.L141:
 2059              	 .align 2
 2060              	.L140:
 2061 002c 00000220 	 .word 537001984
 2062              	 .cfi_endproc
 2063              	.LFE264:
 2065              	 .text
 2066              	.Letext0:
 2067              	 .file 4 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2068              	 .file 5 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2069              	 .file 6 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2070              	 .file 7 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include/core_cm4.h"
 2071              	 .file 8 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_eth_mac.c
    {standard input}:19     .text.XMC_ETH_MAC_InitRxDescriptors:00000000 $t
    {standard input}:24     .text.XMC_ETH_MAC_InitRxDescriptors:00000000 XMC_ETH_MAC_InitRxDescriptors
    {standard input}:111    .text.XMC_ETH_MAC_InitTxDescriptors:00000000 $t
    {standard input}:116    .text.XMC_ETH_MAC_InitTxDescriptors:00000000 XMC_ETH_MAC_InitTxDescriptors
    {standard input}:192    .text.XMC_ETH_MAC_InitTxDescriptors:00000058 $d
    {standard input}:197    .text.XMC_ETH_MAC_InitEx:00000000 $t
    {standard input}:202    .text.XMC_ETH_MAC_InitEx:00000000 XMC_ETH_MAC_InitEx
    {standard input}:288    .text.XMC_ETH_MAC_InitEx:00000080 $d
    {standard input}:294    .text.XMC_ETH_MAC_SetAddressEx:00000000 $t
    {standard input}:299    .text.XMC_ETH_MAC_SetAddressEx:00000000 XMC_ETH_MAC_SetAddressEx
    {standard input}:339    .text.XMC_ETH_MAC_GetAddressEx:00000000 $t
    {standard input}:344    .text.XMC_ETH_MAC_GetAddressEx:00000000 XMC_ETH_MAC_GetAddressEx
    {standard input}:383    .text.XMC_ETH_MAC_SetAddressPerfectFilter:00000000 $t
    {standard input}:388    .text.XMC_ETH_MAC_SetAddressPerfectFilter:00000000 XMC_ETH_MAC_SetAddressPerfectFilter
    {standard input}:426    .text.XMC_ETH_MAC_SetAddressPerfectFilterEx:00000000 $t
    {standard input}:431    .text.XMC_ETH_MAC_SetAddressPerfectFilterEx:00000000 XMC_ETH_MAC_SetAddressPerfectFilterEx
    {standard input}:480    .text.XMC_ETH_MAC_SetAddressHashFilter:00000000 $t
    {standard input}:485    .text.XMC_ETH_MAC_SetAddressHashFilter:00000000 XMC_ETH_MAC_SetAddressHashFilter
    {standard input}:504    .text.XMC_ETH_MAC_SendFrame:00000000 $t
    {standard input}:509    .text.XMC_ETH_MAC_SendFrame:00000000 XMC_ETH_MAC_SendFrame
    {standard input}:659    .text.XMC_ETH_MAC_ReadFrame:00000000 $t
    {standard input}:664    .text.XMC_ETH_MAC_ReadFrame:00000000 XMC_ETH_MAC_ReadFrame
    {standard input}:734    .text.XMC_ETH_MAC_GetRxFrameSize:00000000 $t
    {standard input}:739    .text.XMC_ETH_MAC_GetRxFrameSize:00000000 XMC_ETH_MAC_GetRxFrameSize
    {standard input}:784    .text.XMC_ETH_MAC_SetManagmentClockDivider:00000000 $t
    {standard input}:789    .text.XMC_ETH_MAC_SetManagmentClockDivider:00000000 XMC_ETH_MAC_SetManagmentClockDivider
    {standard input}:900    .text.XMC_ETH_MAC_SetManagmentClockDivider:00000068 $d
    {standard input}:912    .text.XMC_ETH_MAC_Enable:00000000 $t
    {standard input}:917    .text.XMC_ETH_MAC_Enable:00000000 XMC_ETH_MAC_Enable
    {standard input}:942    .text.XMC_ETH_MAC_Enable:00000010 $d
    {standard input}:947    .text.XMC_ETH_MAC_Init:00000000 $t
    {standard input}:952    .text.XMC_ETH_MAC_Init:00000000 XMC_ETH_MAC_Init
    {standard input}:1001   .text.XMC_ETH_MAC_Disable:00000000 $t
    {standard input}:1006   .text.XMC_ETH_MAC_Disable:00000000 XMC_ETH_MAC_Disable
    {standard input}:1031   .text.XMC_ETH_MAC_Disable:00000010 $d
    {standard input}:1036   .text.XMC_ETH_MAC_ReadPhy:00000000 $t
    {standard input}:1041   .text.XMC_ETH_MAC_ReadPhy:00000000 XMC_ETH_MAC_ReadPhy
    {standard input}:1102   .text.XMC_ETH_MAC_WritePhy:00000000 $t
    {standard input}:1107   .text.XMC_ETH_MAC_WritePhy:00000000 XMC_ETH_MAC_WritePhy
    {standard input}:1167   .text.XMC_ETH_MAC_FlushTx:00000000 $t
    {standard input}:1172   .text.XMC_ETH_MAC_FlushTx:00000000 XMC_ETH_MAC_FlushTx
    {standard input}:1206   .text.XMC_ETH_MAC_FlushRx:00000000 $t
    {standard input}:1211   .text.XMC_ETH_MAC_FlushRx:00000000 XMC_ETH_MAC_FlushRx
    {standard input}:1245   .text.XMC_ETH_MAC_SetWakeUpFrameFilter:00000000 $t
    {standard input}:1250   .text.XMC_ETH_MAC_SetWakeUpFrameFilter:00000000 XMC_ETH_MAC_SetWakeUpFrameFilter
    {standard input}:1284   .text.XMC_ETH_MAC_EnableEvent:00000000 $t
    {standard input}:1289   .text.XMC_ETH_MAC_EnableEvent:00000000 XMC_ETH_MAC_EnableEvent
    {standard input}:1333   .text.XMC_ETH_MAC_DisableEvent:00000000 $t
    {standard input}:1338   .text.XMC_ETH_MAC_DisableEvent:00000000 XMC_ETH_MAC_DisableEvent
    {standard input}:1368   .text.XMC_ETH_MAC_ClearEventStatus:00000000 $t
    {standard input}:1373   .text.XMC_ETH_MAC_ClearEventStatus:00000000 XMC_ETH_MAC_ClearEventStatus
    {standard input}:1408   .text.XMC_ETH_MAC_GetEventStatus:00000000 $t
    {standard input}:1413   .text.XMC_ETH_MAC_GetEventStatus:00000000 XMC_ETH_MAC_GetEventStatus
    {standard input}:1440   .text.XMC_ETH_MAC_ReturnRxDescriptor:00000000 $t
    {standard input}:1445   .text.XMC_ETH_MAC_ReturnRxDescriptor:00000000 XMC_ETH_MAC_ReturnRxDescriptor
    {standard input}:1477   .text.XMC_ETH_MAC_ReturnTxDescriptor:00000000 $t
    {standard input}:1482   .text.XMC_ETH_MAC_ReturnTxDescriptor:00000000 XMC_ETH_MAC_ReturnTxDescriptor
    {standard input}:1520   .text.XMC_ETH_MAC_SetVLANTag:00000000 $t
    {standard input}:1525   .text.XMC_ETH_MAC_SetVLANTag:00000000 XMC_ETH_MAC_SetVLANTag
    {standard input}:1541   .text.XMC_ETH_MAC_InitPTP:00000000 $t
    {standard input}:1546   .text.XMC_ETH_MAC_InitPTP:00000000 XMC_ETH_MAC_InitPTP
    {standard input}:1666   .text.XMC_ETH_MAC_InitPTP:000000d0 $d
    {standard input}:1675   .text.XMC_ETH_MAC_InitPTPEx:00000000 $t
    {standard input}:1680   .text.XMC_ETH_MAC_InitPTPEx:00000000 XMC_ETH_MAC_InitPTPEx
    {standard input}:1711   .text.XMC_ETH_MAC_GetPTPTime:00000000 $t
    {standard input}:1716   .text.XMC_ETH_MAC_GetPTPTime:00000000 XMC_ETH_MAC_GetPTPTime
    {standard input}:1737   .text.XMC_ETH_MAC_SetPTPTime:00000000 $t
    {standard input}:1742   .text.XMC_ETH_MAC_SetPTPTime:00000000 XMC_ETH_MAC_SetPTPTime
    {standard input}:1775   .text.XMC_ETH_MAC_SetPTPTime:0000002c $d
    {standard input}:1780   .text.XMC_ETH_MAC_UpdatePTPTime:00000000 $t
    {standard input}:1785   .text.XMC_ETH_MAC_UpdatePTPTime:00000000 XMC_ETH_MAC_UpdatePTPTime
    {standard input}:1822   .text.XMC_ETH_MAC_SetPTPAlarm:00000000 $t
    {standard input}:1827   .text.XMC_ETH_MAC_SetPTPAlarm:00000000 XMC_ETH_MAC_SetPTPAlarm
    {standard input}:1848   .text.XMC_ETH_MAC_AdjustPTPClock:00000000 $t
    {standard input}:1853   .text.XMC_ETH_MAC_AdjustPTPClock:00000000 XMC_ETH_MAC_AdjustPTPClock
    {standard input}:1894   .text.XMC_ETH_MAC_UpdateAddend:00000000 $t
    {standard input}:1899   .text.XMC_ETH_MAC_UpdateAddend:00000000 XMC_ETH_MAC_UpdateAddend
    {standard input}:1928   .text.XMC_ETH_MAC_GetPTPStatus:00000000 $t
    {standard input}:1933   .text.XMC_ETH_MAC_GetPTPStatus:00000000 XMC_ETH_MAC_GetPTPStatus
    {standard input}:1951   .text.XMC_ETH_MAC_GetRxTimeStamp:00000000 $t
    {standard input}:1956   .text.XMC_ETH_MAC_GetRxTimeStamp:00000000 XMC_ETH_MAC_GetRxTimeStamp
    {standard input}:2006   .text.XMC_ETH_MAC_GetTxTimeStamp:00000000 $t
    {standard input}:2011   .text.XMC_ETH_MAC_GetTxTimeStamp:00000000 XMC_ETH_MAC_GetTxTimeStamp
    {standard input}:2061   .text.XMC_ETH_MAC_GetTxTimeStamp:0000002c $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4002528de975c0fcce6c551c15d87b8c
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.48aa5dfcc4adf36b323cf9dbe32c793a
                           .group:00000000 wm4.core_cm4.h.174.824e0532337e90525b645435b961cc25
                           .group:00000000 wm4.mpu_armv7.h.32.7da498ea6f18d3b74a42202d7c1d394e
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:00000000 wm4.xmc_common.h.92.bbcf261068c7c74d7033b80d0dbf155c
                           .group:00000000 wm4.xmc_eth_mac.h.114.b3c2c5df178f676f85b0b5c969c16bf0
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.fe81d5186f74ee22c982a1a79f340ee8
                           .group:00000000 wm4.xmc4_scu.h.83.0449f5880ac071460ec1a8072311ea51

UNDEFINED SYMBOLS
memcpy
SystemCoreClock
XMC_SCU_CLOCK_EnableClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_DisableClock
