   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "port.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.prvTaskExitError,"ax",%progbits
  19              	 .align 2
  20              	 .thumb
  21              	 .thumb_func
  23              	prvTaskExitError:
  24              	.LFB6:
  25              	 .file 1 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c"
   1:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS Kernel V10.4.1
   3:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
   5:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * the Software without restriction, including without limitation the rights to
   8:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * subject to the following conditions:
  11:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  12:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * copies or substantial portions of the Software.
  14:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  15:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  22:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * https://www.FreeRTOS.org
  23:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * https://github.com/FreeRTOS
  24:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  25:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
  26:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  27:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  28:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** * Implementation of functions defined in portable.h for the ARM CM4F port.
  29:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** *----------------------------------------------------------*/
  30:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  31:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  32:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  33:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  34:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  35:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  36:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     #error This port can only be used when the project options are configured to enable hardware fl
  37:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  38:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  39:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  40:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     #define configSYSTICK_CLOCK_HZ      configCPU_CLOCK_HZ
  41:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Ensure the SysTick is clocked at the same frequency as the core. */
  42:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     #define portNVIC_SYSTICK_CLK_BIT    ( 1UL << 2UL )
  43:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #else
  44:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  45:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* The way the SysTick is clocked is not modified in case it is not the same
  46:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * as the core. */
  47:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     #define portNVIC_SYSTICK_CLK_BIT    ( 0 )
  48:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  49:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  50:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  51:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG             ( *( ( volatile uint32_t * ) 0xe000e010 ) )
  52:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG             ( *( ( volatile uint32_t * ) 0xe000e014 ) )
  53:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG    ( *( ( volatile uint32_t * ) 0xe000e018 ) )
  54:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )
  55:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  56:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
  57:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )
  58:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT       ( 1UL << 16UL )
  59:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT              ( 1UL << 27UL )
  60:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT       ( 1UL << 25UL )
  61:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  62:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
  63:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * r0p1 port. */
  64:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCPUID                             ( *( ( volatile uint32_t * ) 0xE000ed00 ) )
  65:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p1_ID                 ( 0x410FC271UL )
  66:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p0_ID                 ( 0x410FC270UL )
  67:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  68:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  69:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  70:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  71:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
  72:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER       ( 16 )
  73:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16       ( 0xE000E3F0 )
  74:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG                         ( *( ( volatile uint32_t * ) 0xE000ED0C ) )
  75:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE                   ( ( uint8_t ) 0xff )
  76:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE                   ( ( uint8_t ) 0x80 )
  77:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS                 ( ( uint8_t ) 7 )
  78:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
  79:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT                    ( 8UL )
  80:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  81:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  82:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portVECTACTIVE_MASK                   ( 0xFFUL )
  83:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  84:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
  85:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR                             ( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating po
  86:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS              ( 0x3UL << 30UL )
  87:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  88:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  89:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR                      ( 0x01000000 )
  90:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN                ( 0xfffffffd )
  91:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  92:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
  93:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER                 ( 0xffffffUL )
  94:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  95:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  96:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  97:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portSTART_ADDRESS_MASK                ( ( StackType_t ) 0xfffffffeUL )
  98:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  99:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 100:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * occurred while the SysTick counter is stopped during tickless idle
 101:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * calculations. */
 102:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR              ( 45UL )
 103:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 104:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 105:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * prvTaskExitError() in case it messes up unwinding of the stack in the
 106:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * debugger. */
 107:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 108:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     #define portTASK_RETURN_ADDRESS    configTASK_RETURN_ADDRESS
 109:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #else
 110:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     #define portTASK_RETURN_ADDRESS    prvTaskExitError
 111:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
 112:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 113:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 114:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 115:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 116:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 117:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 118:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 119:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 120:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 121:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 122:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 123:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__( ( naked ) );
 124:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 125:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__( ( naked ) );
 126:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 127:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 128:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 129:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 130:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__( ( naked ) );
 131:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 132:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 133:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 134:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 135:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void ) __attribute__( ( naked ) );
 136:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 137:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 138:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 139:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 140:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 141:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 142:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 143:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 144:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 145:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * variable. */
 146:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 147:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 148:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 149:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 150:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 151:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 152:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulTimerCountsForOneTick = 0;
 153:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 154:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 155:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 156:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 157:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 158:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 159:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 160:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     static uint32_t xMaximumPossibleSuppressedTicks = 0;
 161:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 162:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 163:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 164:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 165:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 166:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 167:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 168:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulStoppedTimerCompensation = 0;
 169:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 170:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 171:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 172:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 173:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 174:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 175:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 176:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 177:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     static uint8_t ucMaxSysCallPriority = 0;
 178:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulMaxPRIGROUPValue = 0;
 179:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t *
 180:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 181:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 182:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 183:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 184:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 185:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 186:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 187:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
 188:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                                      TaskFunction_t pxCode,
 189:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                                      void * pvParameters )
 190:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 191:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 192:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * interrupt. */
 193:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 194:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Offset added to account for the way the MCU uses the stack on entry/exit
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * of interrupts, and to ensure alignment. */
 196:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 197:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 198:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 199:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 200:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 201:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 202:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 203:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 204:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Save code space by skipping register initialisation. */
 205:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 206:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 207:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 208:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* A save method is being used that requires each task to maintain its
 209:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * own exec return value. */
 210:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = portINITIAL_EXC_RETURN;
 212:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 213:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 214:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 215:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     return pxTopOfStack;
 216:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 217:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 218:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 219:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 220:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  26              	 .loc 1 220 0
  27              	 .cfi_startproc
  28              	 
  29              	 
  30              	 
  31 0000 82B0     	 sub sp,sp,#8
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 8
 221:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     volatile uint32_t ulDummy = 0;
  34              	 .loc 1 221 0
  35 0002 0023     	 movs r3,#0
  36 0004 0193     	 str r3,[sp,#4]
 222:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 223:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* A function that implements a task must not exit or attempt to return to
 224:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * its caller as there is nothing to return to.  If a task wants to exit it
 225:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * should instead call vTaskDelete( NULL ).
 226:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *
 227:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * Artificially force an assert() to be triggered if configASSERT() is
 228:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * defined, then stop here so application writers can catch the error. */
 229:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting == ~0UL );
  37              	 .loc 1 229 0
  38 0006 0D4B     	 ldr r3,.L7
  39 0008 1B68     	 ldr r3,[r3]
  40 000a B3F1FF3F 	 cmp r3,#-1
  41 000e 08D0     	 beq .L2
  42              	.LBB31:
  43              	.LBB32:
  44              	 .file 2 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * FreeRTOS Kernel V10.4.1
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * subject to the following conditions:
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * copies or substantial portions of the Software.
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * https://www.FreeRTOS.org
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * https://github.com/FreeRTOS
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * 1 tab == 4 spaces!
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef PORTMACRO_H
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define PORTMACRO_H
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifdef __cplusplus
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         extern "C" {
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Port specific definitions.
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * given hardware and compiler.
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * These settings should not be altered.
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *-----------------------------------------------------------
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Type definitions. */
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portCHAR          char
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portFLOAT         float
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDOUBLE        double
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portLONG          long
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSHORT         short
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portBASE_TYPE     long
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef long             BaseType_t;
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         typedef uint16_t     TickType_t;
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #else
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         typedef uint32_t     TickType_t;
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * not need to be guarded with a critical section. */
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specifics. */
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Scheduler utilities. */
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portYIELD()                                 \
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {                                                   \
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****                                                         \
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Critical section management. */
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     extern void vPortEnterCritical( void );
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     extern void vPortExitCritical( void );
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * (which build with all the ports) will build. */
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Tickless idle/low power functionality. */
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specific optimisations. */
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Generic helper function. */
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             uint8_t ucReturn;
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             return ucReturn;
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Check the configuration. */
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #endif
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifdef configASSERT
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* portNOP() is not required by this port. */
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNOP()
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portINLINE              __inline
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef portFORCE_INLINE
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         BaseType_t xReturn;
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             xReturn = pdFALSE;
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         else
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             xReturn = pdTRUE;
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         return xReturn;
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulNewBASEPRI;
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile
  45              	 .loc 2 197 0
  46              	
  47 0010 4FF01403 	 mov r3,#20
  48 0014 83F31188 	 msr basepri,r3
  49 0018 BFF36F8F 	 isb 
  50 001c BFF34F8F 	 dsb 
  51              	
  52              	
  53              	.LVL0:
  54              	 .thumb
  55              	.L3:
  56              	.LBE32:
  57              	.LBE31:
  58              	 .loc 1 229 0 discriminator 1
  59 0020 FEE7     	 b .L3
  60              	.L2:
  61              	.LBB33:
  62              	.LBB34:
  63              	 .loc 2 197 0
  64              	
  65 0022 4FF01403 	 mov r3,#20
  66 0026 83F31188 	 msr basepri,r3
  67 002a BFF36F8F 	 isb 
  68 002e BFF34F8F 	 dsb 
  69              	
  70              	
  71              	.LVL1:
  72              	 .thumb
  73              	.L4:
  74              	.LBE34:
  75              	.LBE33:
 230:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 231:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 232:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     while( ulDummy == 0 )
  76              	 .loc 1 232 0 discriminator 1
  77 0032 019B     	 ldr r3,[sp,#4]
  78 0034 002B     	 cmp r3,#0
  79 0036 FCD0     	 beq .L4
 233:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     {
 234:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         /* This file calls prvTaskExitError() after the scheduler has been
 235:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * started to remove a compiler warning about the function being defined
 236:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * but never called.  ulDummy is used purely to quieten other warnings
 237:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * about code appearing after this function is called - making ulDummy
 238:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * volatile makes the compiler think the function could return and
 239:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * therefore not output an 'unreachable code' warning for code that appears
 240:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * after it. */
 241:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     }
 242:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
  80              	 .loc 1 242 0
  81 0038 02B0     	 add sp,sp,#8
  82              	.LCFI1:
  83              	 .cfi_def_cfa_offset 0
  84              	 
  85 003a 7047     	 bx lr
  86              	.L8:
  87              	 .align 2
  88              	.L7:
  89 003c 00000000 	 .word .LANCHOR0
  90              	 .cfi_endproc
  91              	.LFE6:
  93              	 .section .text.prvPortStartFirstTask,"ax",%progbits
  94              	 .align 2
  95              	 .thumb
  96              	 .thumb_func
  98              	prvPortStartFirstTask:
  99              	.LFB8:
 243:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 244:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 245:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 246:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 247:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     __asm volatile (
 248:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 249:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldr r1, [r3]					\n"/* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 250:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldr r0, [r1]					\n"/* The first item in pxCurrentTCB is the task top of stack. */
 251:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldmia r0!, {r4-r11, r14}		\n"/* Pop the registers that are not automatically saved on exc
 252:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	msr psp, r0						\n"/* Restore the task stack pointer. */
 253:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	isb								\n"
 254:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	mov r0, #0 						\n"
 255:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	msr	basepri, r0					\n"
 256:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	bx r14							\n"
 257:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "									\n"
 258:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	.align 4						\n"
 259:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 260:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         );
 261:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 262:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 263:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 264:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 265:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 100              	 .loc 1 265 0
 101              	 .cfi_startproc
 102              	 
 103              	 
 104              	 
 266:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Start the first task.  This also clears the bit that indicates the FPU is
 267:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * in use in case the FPU was used before the scheduler was started - which
 268:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * would otherwise result in the unnecessary leaving of space in the SVC stack
 269:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * for lazy saving of FPU registers. */
 270:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     __asm volatile (
 105              	 .loc 1 270 0
 106              	
 107 0000 0848     	 ldr r0,=0xE000ED08
 108 0002 0068     	 ldr r0,[r0]
 109 0004 0068     	 ldr r0,[r0]
 110 0006 80F30888 	 msr msp,r0
 111 000a 4FF00000 	 mov r0,#0
 112 000e 80F31488 	 msr control,r0
 113 0012 62B6     	 cpsie i
 114 0014 61B6     	 cpsie f
 115 0016 BFF34F8F 	 dsb 
 116 001a BFF36F8F 	 isb 
 117 001e 00DF     	 svc 0
 118 0020 00BF     	 nop 
 119 0022 000008ED 	 .ltorg 
 119      00E0
 120              	
 121              	
 271:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, =0xE000ED08 	\n"/* Use the NVIC offset register to locate the stack. */
 272:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, [r0] 			\n"
 273:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, [r0] 			\n"
 274:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " msr msp, r0			\n"/* Set the msp back to the start of the stack. */
 275:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " mov r0, #0			\n"/* Clear the bit that indicates the FPU is in use, see comment above. */
 276:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " msr control, r0		\n"
 277:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " cpsie i				\n"/* Globally enable interrupts. */
 278:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " cpsie f				\n"
 279:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " dsb					\n"
 280:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " isb					\n"
 281:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " svc 0					\n"/* System call to start first task. */
 282:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " nop					\n"
 283:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         " .ltorg				\n"
 284:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         );
 285:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 122              	 .loc 1 285 0
 123              	 .thumb
 124              	 .cfi_endproc
 125              	.LFE8:
 127              	 .section .text.vPortEnableVFP,"ax",%progbits
 128              	 .align 2
 129              	 .thumb
 130              	 .thumb_func
 132              	vPortEnableVFP:
 133              	.LFB16:
 286:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 287:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 288:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 289:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 290:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 291:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** BaseType_t xPortStartScheduler( void )
 292:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 293:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 294:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 295:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 296:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 297:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* This port can be used on all revisions of the Cortex-M7 core other than
 298:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * the r0p1 parts.  r0p1 parts should use the port from the
 299:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * /source/portable/GCC/ARM_CM7/r0p1 directory. */
 300:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 301:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 302:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 303:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     #if ( configASSERT_DEFINED == 1 )
 304:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 305:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             volatile uint32_t ulOriginalPriority;
 306:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( 
 307:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             volatile uint8_t ucMaxPriorityValue;
 308:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 309:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Determine the maximum priority from which ISR safe FreeRTOS API
 310:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * functions can be called.  ISR safe functions are those that end in
 311:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 312:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * ensure interrupt entry is as fast and simple as possible.
 313:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              *
 314:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * Save the interrupt priority value that is about to be clobbered. */
 315:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             ulOriginalPriority = *pucFirstUserPriorityRegister;
 316:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 317:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Determine the number of priority bits available.  First write to all
 318:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * possible bits. */
 319:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 320:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 321:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Read the value back to see how many bits stuck. */
 322:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 323:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 324:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Use the same mask on the maximum system call priority. */
 325:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 326:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 327:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Calculate the maximum acceptable priority group value for the number
 328:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * of bits read back. */
 329:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 330:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 331:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 332:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             {
 333:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 ulMaxPRIGROUPValue--;
 334:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 335:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             }
 336:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 337:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             #ifdef __NVIC_PRIO_BITS
 338:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 {
 339:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                     /* Check the CMSIS configuration that defines the number of
 340:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                      * priority bits matches the number of priority bits actually queried
 341:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                      * from the hardware. */
 342:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BIT
 343:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 }
 344:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             #endif
 345:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 346:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             #ifdef configPRIO_BITS
 347:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 {
 348:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                     /* Check the FreeRTOS configuration that defines the number of
 349:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                      * priority bits matches the number of priority bits actually queried
 350:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                      * from the hardware. */
 351:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS
 352:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 }
 353:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             #endif
 354:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 355:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Shift the priority group value back to its position within the AIRCR
 356:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * register. */
 357:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 358:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 359:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 360:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Restore the clobbered interrupt priority register to its original
 361:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * value. */
 362:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             *pucFirstUserPriorityRegister = ulOriginalPriority;
 363:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 364:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     #endif /* conifgASSERT_DEFINED */
 365:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 366:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Make PendSV and SysTick the lowest priority interrupts. */
 367:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 368:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 369:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 370:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Start the timer that generates the tick ISR.  Interrupts are disabled
 371:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * here already. */
 372:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     vPortSetupTimerInterrupt();
 373:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 374:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Initialise the critical nesting count ready for the first task. */
 375:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting = 0;
 376:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 377:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Ensure the VFP is enabled - it should be anyway. */
 378:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     vPortEnableVFP();
 379:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 380:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Lazy save always. */
 381:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 382:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 383:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Start the first task. */
 384:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     prvPortStartFirstTask();
 385:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 386:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Should never get here as the tasks will now be executing!  Call the task
 387:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * exit error function to prevent compiler warnings about a static function
 388:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * not being called in the case that the application writer overrides this
 389:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * functionality by defining configTASK_RETURN_ADDRESS.  Call
 390:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * vTaskSwitchContext() so link time optimisation does not remove the
 391:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * symbol. */
 392:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     vTaskSwitchContext();
 393:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     prvTaskExitError();
 394:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 395:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Should not get here! */
 396:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     return 0;
 397:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 398:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 399:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 400:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 401:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 402:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Not implemented in ports where there is nothing to return to.
 403:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * Artificially force an assert. */
 404:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting == 1000UL );
 405:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 406:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 407:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 408:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 409:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 410:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 411:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting++;
 412:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 413:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* This is not the interrupt safe version of the enter critical function so
 414:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * assert() if it is being called from an interrupt context.  Only API
 415:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * functions that end in "FromISR" can be used in an interrupt.  Only assert if
 416:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * the critical nesting count is 1 to protect against recursive calls if the
 417:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * assert function also uses a critical section. */
 418:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     if( uxCriticalNesting == 1 )
 419:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     {
 420:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 421:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     }
 422:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 423:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 424:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 425:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 426:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 427:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting );
 428:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
 429:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 430:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     if( uxCriticalNesting == 0 )
 431:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     {
 432:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         portENABLE_INTERRUPTS();
 433:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     }
 434:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 435:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 436:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 437:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 438:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 439:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* This is a naked function. */
 440:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 441:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     __asm volatile
 442:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     (
 443:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	mrs r0, psp							\n"
 444:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	isb									\n"
 445:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 446:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldr	r3, pxCurrentTCBConst			\n"/* Get the location of the current TCB. */
 447:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldr	r2, [r3]						\n"
 448:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 449:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	tst r14, #0x10						\n"/* Is the task using the FPU context?  If so, push high vfp regist
 450:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	it eq								\n"
 451:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	vstmdbeq r0!, {s16-s31}				\n"
 452:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 453:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	stmdb r0!, {r4-r11, r14}			\n"/* Save the core registers. */
 454:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	str r0, [r2]						\n"/* Save the new top of stack into the first member of the TCB. */
 455:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 456:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	stmdb sp!, {r0, r3}					\n"
 457:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	mov r0, %0 							\n"
 458:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	msr basepri, r0						\n"
 459:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	dsb									\n"
 460:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	isb									\n"
 461:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	bl vTaskSwitchContext				\n"
 462:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	mov r0, #0							\n"
 463:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	msr basepri, r0						\n"
 464:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldmia sp!, {r0, r3}					\n"
 465:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 466:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldr r1, [r3]						\n"/* The first item in pxCurrentTCB is the task top of stack. */
 467:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldr r0, [r1]						\n"
 468:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 469:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldmia r0!, {r4-r11, r14}			\n"/* Pop the core registers. */
 470:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 471:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	tst r14, #0x10						\n"/* Is the task using the FPU context?  If so, pop the high vfp reg
 472:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	it eq								\n"
 473:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	vldmiaeq r0!, {s16-s31}				\n"
 474:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 475:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	msr psp, r0							\n"
 476:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	isb									\n"
 477:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 478:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         #ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 479:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             #if WORKAROUND_PMU_CM001 == 1
 480:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 "			push { r14 }				\n"
 481:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 "			pop { pc }					\n"
 482:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             #endif
 483:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         #endif
 484:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 485:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	bx r14								\n"
 486:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 487:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	.align 4							\n"
 488:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "pxCurrentTCBConst: .word pxCurrentTCB	\n"
 489:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 490:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     );
 491:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 492:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 493:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 494:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 495:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 496:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 497:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * executes all interrupts must be unmasked.  There is therefore no need to
 498:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * save and then restore the interrupt mask value as its value is already
 499:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      * known. */
 500:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 501:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     {
 502:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         /* Increment the RTOS tick. */
 503:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         if( xTaskIncrementTick() != pdFALSE )
 504:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 505:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* A context switch is required.  Context switching is performed in
 506:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * the PendSV interrupt.  Pend the PendSV interrupt. */
 507:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 508:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 509:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     }
 510:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portENABLE_INTERRUPTS();
 511:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 512:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 513:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 514:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 515:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 516:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 517:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     {
 518:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 519:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         TickType_t xModifiableIdleTime;
 520:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 521:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         /* Make sure the SysTick reload value does not overflow the counter. */
 522:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 523:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 524:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 525:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 526:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 527:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         /* Stop the SysTick momentarily.  The time the SysTick is stopped for
 528:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * is accounted for as best it can be, but using the tickless mode will
 529:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * inevitably result in some tiny drift of the time maintained by the
 530:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * kernel with respect to calendar time. */
 531:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 532:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 533:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         /* Calculate the reload value required to wait xExpectedIdleTime
 534:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * tick periods.  -1 is used because this code will execute part way
 535:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * through one of the tick periods. */
 536:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpecte
 537:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 538:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         if( ulReloadValue > ulStoppedTimerCompensation )
 539:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 540:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             ulReloadValue -= ulStoppedTimerCompensation;
 541:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 542:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 543:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         /* Enter a critical section but don't use the taskENTER_CRITICAL()
 544:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * method as that will mask interrupts that should exit sleep mode. */
 545:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "cpsid i" ::: "memory" );
 546:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "dsb" );
 547:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "isb" );
 548:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 549:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         /* If a context switch is pending or a task is waiting for the scheduler
 550:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * to be unsuspended then abandon the low power entry. */
 551:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 552:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 553:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Restart from whatever is left in the count register to complete
 554:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * this tick period. */
 555:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 556:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 557:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Restart SysTick. */
 558:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 559:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 560:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Reset the reload register to the value required for normal tick
 561:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * periods. */
 562:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 563:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 564:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Re-enable interrupts - see comments above the cpsid instruction()
 565:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * above. */
 566:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 567:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 568:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         else
 569:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 570:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Set the new reload value. */
 571:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 572:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 573:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Clear the SysTick count flag and set the count value back to
 574:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * zero. */
 575:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 576:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 577:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Restart SysTick. */
 578:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 579:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 580:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 581:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * set its parameter to 0 to indicate that its implementation contains
 582:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * its own wait for interrupt or wait for event instruction, and so wfi
 583:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * should not be executed again.  However, the original expected idle
 584:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * time variable must remain unmodified, so a copy is taken. */
 585:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             xModifiableIdleTime = xExpectedIdleTime;
 586:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 587:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 588:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             if( xModifiableIdleTime > 0 )
 589:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             {
 590:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "dsb" ::: "memory" );
 591:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "wfi" );
 592:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "isb" );
 593:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             }
 594:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 595:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 596:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 597:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Re-enable interrupts to allow the interrupt that brought the MCU
 598:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * out of sleep mode to execute immediately.  see comments above
 599:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * __disable_interrupt() call above. */
 600:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 601:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "dsb" );
 602:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "isb" );
 603:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 604:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Disable interrupts again because the clock is about to be stopped
 605:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * and interrupts that execute while the clock is stopped will increase
 606:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * any slippage between the time maintained by the RTOS and calendar
 607:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * time. */
 608:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsid i" ::: "memory" );
 609:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "dsb" );
 610:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "isb" );
 611:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 612:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Disable the SysTick clock without reading the
 613:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * portNVIC_SYSTICK_CTRL_REG register to ensure the
 614:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 615:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * the time the SysTick is stopped for is accounted for as best it can
 616:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * be, but using the tickless mode will inevitably result in some tiny
 617:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * drift of the time maintained by the kernel with respect to calendar
 618:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * time*/
 619:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 620:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 621:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Determine if the SysTick clock has already counted to zero and
 622:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * been set back to the current reload value (the reload back being
 623:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * correct for the entire expected idle time) or if the SysTick is yet
 624:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * to count to zero (in which case an interrupt other than the SysTick
 625:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * must have brought the system out of sleep mode). */
 626:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 627:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             {
 628:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 uint32_t ulCalculatedLoadValue;
 629:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 630:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 /* The tick interrupt is already pending, and the SysTick count
 631:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * reloaded with ulReloadValue.  Reset the
 632:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 633:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * period. */
 634:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portN
 635:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 636:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 /* Don't allow a tiny value, or values that have somehow
 637:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * underflowed because the post sleep hook did something
 638:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * that took too long. */
 639:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadVal
 640:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 {
 641:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                     ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 642:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 }
 643:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 644:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 645:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 646:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 /* As the pending tick will be processed as soon as this
 647:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * function exits, the tick value maintained by the tick is stepped
 648:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * forward by one less than the time spent waiting. */
 649:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 650:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             }
 651:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             else
 652:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             {
 653:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 /* Something other than the tick interrupt ended the sleep.
 654:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * Work out how long the sleep lasted rounded to complete tick
 655:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * periods (not the ulReload value which accounted for part
 656:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * ticks). */
 657:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - po
 658:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 659:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 /* How many complete tick periods passed while the processor
 660:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * was waiting? */
 661:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 662:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 663:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 /* The reload value is set to whatever fraction of a single tick
 664:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                  * period remains. */
 665:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOne
 666:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             }
 667:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 668:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 669:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 670:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * value. */
 671:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 672:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 673:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             vTaskStepTick( ulCompleteTickPeriods );
 674:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 675:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 676:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Exit with interrupts enabled. */
 677:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 678:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 679:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     }
 680:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 681:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 682:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 683:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 684:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 685:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 686:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 687:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 688:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** __attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
 689:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 690:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 691:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     #if ( configUSE_TICKLESS_IDLE == 1 )
 692:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 693:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 694:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 695:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSY
 696:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 697:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     #endif /* configUSE_TICKLESS_IDLE */
 698:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 699:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Stop and clear the SysTick. */
 700:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = 0UL;
 701:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 702:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 703:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Configure SysTick to interrupt at the requested rate. */
 704:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 705:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 706:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 707:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 708:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 709:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 710:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 711:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 134              	 .loc 1 711 0
 135              	 .cfi_startproc
 136              	 
 137              	 
 138              	 
 712:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     __asm volatile
 139              	 .loc 1 712 0
 140              	
 141 0000 DFF80C00 	 ldr.w r0,=0xE000ED88
 142 0004 0168     	 ldr r1,[r0]
 143              	 
 144 0006 41F47001 	 orr r1,r1,#(0xf<<20)
 145 000a 0160     	 str r1,[r0]
 146 000c 7047     	 bx r14
 147 000e 000088ED 	 .ltorg 
 147      00E0
 148              	
 149              	
 713:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     (
 714:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldr.w r0, =0xE000ED88		\n"/* The FPU enable bits are in the CPACR. */
 715:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldr r1, [r0]				\n"
 716:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "								\n"
 717:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
 718:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	str r1, [r0]				\n"
 719:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	bx r14						\n"
 720:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	.ltorg						\n"
 721:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     );
 722:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 150              	 .loc 1 722 0
 151              	 .thumb
 152              	 .cfi_endproc
 153              	.LFE16:
 155              	 .section .text.pxPortInitialiseStack,"ax",%progbits
 156              	 .align 2
 157              	 .global pxPortInitialiseStack
 158              	 .thumb
 159              	 .thumb_func
 161              	pxPortInitialiseStack:
 162              	.LFB5:
 190:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 163              	 .loc 1 190 0
 164              	 .cfi_startproc
 165              	 
 166              	 
 167              	 
 168              	.LVL2:
 198:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 169              	 .loc 1 198 0
 170 0000 4FF08073 	 mov r3,#16777216
 171 0004 40F8043C 	 str r3,[r0,#-4]
 172              	.LVL3:
 200:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 173              	 .loc 1 200 0
 174 0008 21F00101 	 bic r1,r1,#1
 175              	.LVL4:
 176 000c 40F8081C 	 str r1,[r0,#-8]
 177              	.LVL5:
 202:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 178              	 .loc 1 202 0
 179 0010 054B     	 ldr r3,.L12
 180 0012 40F80C3C 	 str r3,[r0,#-12]
 181              	.LVL6:
 206:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 182              	 .loc 1 206 0
 183 0016 40F8202C 	 str r2,[r0,#-32]
 184              	.LVL7:
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 185              	 .loc 1 211 0
 186 001a 6FF00203 	 mvn r3,#2
 187 001e 40F8243C 	 str r3,[r0,#-36]
 188              	.LVL8:
 216:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 189              	 .loc 1 216 0
 190 0022 4438     	 subs r0,r0,#68
 191              	.LVL9:
 192 0024 7047     	 bx lr
 193              	.L13:
 194 0026 00BF     	 .align 2
 195              	.L12:
 196 0028 00000000 	 .word prvTaskExitError
 197              	 .cfi_endproc
 198              	.LFE5:
 200              	 .section .text.SVC_Handler,"ax",%progbits
 201              	 .align 2
 202              	 .global SVC_Handler
 203              	 .thumb
 204              	 .thumb_func
 206              	SVC_Handler:
 207              	.LFB7:
 246:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     __asm volatile (
 208              	 .loc 1 246 0
 209              	 .cfi_startproc
 210              	 
 211              	 
 212              	 
 247:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 213              	 .loc 1 247 0
 214              	
 215 0000 074B     	 ldr r3,pxCurrentTCBConst2
 216 0002 1968     	 ldr r1,[r3]
 217 0004 0868     	 ldr r0,[r1]
 218 0006 B0E8F04F 	 ldmia r0!,{r4-r11,r14}
 219 000a 80F30988 	 msr psp,r0
 220 000e BFF36F8F 	 isb 
 221 0012 4FF00000 	 mov r0,#0
 222 0016 80F31188 	 msr basepri,r0
 223 001a 7047     	 bx r14
 224              	 
 225 001c AFF30080 	 .align 4
 226 0020 00000000 	pxCurrentTCBConst2:.word pxCurrentTCB
 227              	
 228              	
 261:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 229              	 .loc 1 261 0
 230              	 .thumb
 231              	 .cfi_endproc
 232              	.LFE7:
 234 0024 AFF30080 	 .section .text.vPortEndScheduler,"ax",%progbits
 234      AFF30080 
 234      AFF30080 
 235              	 .align 2
 236              	 .global vPortEndScheduler
 237              	 .thumb
 238              	 .thumb_func
 240              	vPortEndScheduler:
 241              	.LFB10:
 401:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Not implemented in ports where there is nothing to return to.
 242              	 .loc 1 401 0
 243              	 .cfi_startproc
 244              	 
 245              	 
 246              	 
 404:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 247              	 .loc 1 404 0
 248 0000 074B     	 ldr r3,.L18
 249 0002 1B68     	 ldr r3,[r3]
 250 0004 B3F57A7F 	 cmp r3,#1000
 251 0008 08D0     	 beq .L15
 252              	.LBB35:
 253              	.LBB36:
 254              	 .loc 2 197 0
 255              	
 256 000a 4FF01403 	 mov r3,#20
 257 000e 83F31188 	 msr basepri,r3
 258 0012 BFF36F8F 	 isb 
 259 0016 BFF34F8F 	 dsb 
 260              	
 261              	
 262              	.LVL10:
 263              	 .thumb
 264              	.L17:
 265              	.LBE36:
 266              	.LBE35:
 404:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 267              	 .loc 1 404 0 discriminator 1
 268 001a FEE7     	 b .L17
 269              	.L15:
 270 001c 7047     	 bx lr
 271              	.L19:
 272 001e 00BF     	 .align 2
 273              	.L18:
 274 0020 00000000 	 .word .LANCHOR0
 275              	 .cfi_endproc
 276              	.LFE10:
 278              	 .section .text.vPortEnterCritical,"ax",%progbits
 279              	 .align 2
 280              	 .global vPortEnterCritical
 281              	 .thumb
 282              	 .thumb_func
 284              	vPortEnterCritical:
 285              	.LFB11:
 409:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 286              	 .loc 1 409 0
 287              	 .cfi_startproc
 288              	 
 289              	 
 290              	 
 291              	.LBB37:
 292              	.LBB38:
 293              	 .loc 2 197 0
 294              	
 295 0000 4FF01403 	 mov r3,#20
 296 0004 83F31188 	 msr basepri,r3
 297 0008 BFF36F8F 	 isb 
 298 000c BFF34F8F 	 dsb 
 299              	
 300              	
 301              	.LVL11:
 302              	 .thumb
 303              	.LBE38:
 304              	.LBE37:
 411:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 305              	 .loc 1 411 0
 306 0010 0A4A     	 ldr r2,.L23
 307 0012 1368     	 ldr r3,[r2]
 308 0014 0133     	 adds r3,r3,#1
 309 0016 1360     	 str r3,[r2]
 418:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     {
 310              	 .loc 1 418 0
 311 0018 012B     	 cmp r3,#1
 312 001a 0DD1     	 bne .L20
 420:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     }
 313              	 .loc 1 420 0
 314 001c 084B     	 ldr r3,.L23+4
 315 001e 1B68     	 ldr r3,[r3]
 316 0020 13F0FF0F 	 tst r3,#255
 317 0024 08D0     	 beq .L20
 318              	.LBB39:
 319              	.LBB40:
 320              	 .loc 2 197 0
 321              	
 322 0026 4FF01403 	 mov r3,#20
 323 002a 83F31188 	 msr basepri,r3
 324 002e BFF36F8F 	 isb 
 325 0032 BFF34F8F 	 dsb 
 326              	
 327              	
 328              	.LVL12:
 329              	 .thumb
 330              	.L22:
 331              	.LBE40:
 332              	.LBE39:
 420:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     }
 333              	 .loc 1 420 0 discriminator 1
 334 0036 FEE7     	 b .L22
 335              	.L20:
 336 0038 7047     	 bx lr
 337              	.L24:
 338 003a 00BF     	 .align 2
 339              	.L23:
 340 003c 00000000 	 .word .LANCHOR0
 341 0040 04ED00E0 	 .word -536810236
 342              	 .cfi_endproc
 343              	.LFE11:
 345              	 .section .text.vPortExitCritical,"ax",%progbits
 346              	 .align 2
 347              	 .global vPortExitCritical
 348              	 .thumb
 349              	 .thumb_func
 351              	vPortExitCritical:
 352              	.LFB12:
 426:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting );
 353              	 .loc 1 426 0
 354              	 .cfi_startproc
 355              	 
 356              	 
 357              	 
 427:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
 358              	 .loc 1 427 0
 359 0000 094B     	 ldr r3,.L29
 360 0002 1B68     	 ldr r3,[r3]
 361 0004 43B9     	 cbnz r3,.L26
 362              	.LBB41:
 363              	.LBB42:
 364              	 .loc 2 197 0
 365              	
 366 0006 4FF01403 	 mov r3,#20
 367 000a 83F31188 	 msr basepri,r3
 368 000e BFF36F8F 	 isb 
 369 0012 BFF34F8F 	 dsb 
 370              	
 371              	
 372              	.LVL13:
 373              	 .thumb
 374              	.L27:
 375              	.LBE42:
 376              	.LBE41:
 427:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
 377              	 .loc 1 427 0 discriminator 1
 378 0016 FEE7     	 b .L27
 379              	.L26:
 428:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 380              	 .loc 1 428 0
 381 0018 013B     	 subs r3,r3,#1
 382 001a 034A     	 ldr r2,.L29
 383 001c 1360     	 str r3,[r2]
 430:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     {
 384              	 .loc 1 430 0
 385 001e 0BB9     	 cbnz r3,.L25
 386              	.LVL14:
 387              	.LBB43:
 388              	.LBB44:
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         (
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	mov %0, %1												\n"\
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	msr basepri, %0											\n"\
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	isb														\n"\
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	dsb														\n"\
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         );
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         (
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	mrs %0, basepri											\n"\
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	mov %1, %2												\n"\
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	msr basepri, %1											\n"\
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	isb														\n"\
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	dsb														\n"\
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         );
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****          * warnings. */
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         return ulOriginalBASEPRI;
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile
 389              	 .loc 2 231 0
 390              	
 391 0020 83F31188 	 msr basepri,r3
 392              	
 393              	.LVL15:
 394              	 .thumb
 395              	.L25:
 396 0024 7047     	 bx lr
 397              	.L30:
 398 0026 00BF     	 .align 2
 399              	.L29:
 400 0028 00000000 	 .word .LANCHOR0
 401              	.LBE44:
 402              	.LBE43:
 403              	 .cfi_endproc
 404              	.LFE12:
 406              	 .section .text.PendSV_Handler,"ax",%progbits
 407              	 .align 2
 408              	 .global PendSV_Handler
 409              	 .thumb
 410              	 .thumb_func
 412              	PendSV_Handler:
 413              	.LFB13:
 438:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* This is a naked function. */
 414              	 .loc 1 438 0
 415              	 .cfi_startproc
 416              	 
 417              	 
 418              	 
 441:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     (
 419              	 .loc 1 441 0
 420              	
 421 0000 EFF30980 	 mrs r0,psp
 422 0004 BFF36F8F 	 isb 
 423              	 
 424 0008 154B     	 ldr r3,pxCurrentTCBConst
 425 000a 1A68     	 ldr r2,[r3]
 426              	 
 427 000c 1EF0100F 	 tst r14,#0x10
 428 0010 08BF     	 it eq
 429 0012 20ED108A 	 vstmdbeq r0!,{s16-s31}
 430              	 
 431 0016 20E9F04F 	 stmdb r0!,{r4-r11,r14}
 432 001a 1060     	 str r0,[r2]
 433              	 
 434 001c 2DE90900 	 stmdb sp!,{r0,r3}
 435 0020 4FF01400 	 mov r0,#20
 436 0024 80F31188 	 msr basepri,r0
 437 0028 BFF34F8F 	 dsb 
 438 002c BFF36F8F 	 isb 
 439 0030 FFF7FEFF 	 bl vTaskSwitchContext
 440 0034 4FF00000 	 mov r0,#0
 441 0038 80F31188 	 msr basepri,r0
 442 003c 09BC     	 ldmia sp!,{r0,r3}
 443              	 
 444 003e 1968     	 ldr r1,[r3]
 445 0040 0868     	 ldr r0,[r1]
 446              	 
 447 0042 B0E8F04F 	 ldmia r0!,{r4-r11,r14}
 448              	 
 449 0046 1EF0100F 	 tst r14,#0x10
 450 004a 08BF     	 it eq
 451 004c B0EC108A 	 vldmiaeq r0!,{s16-s31}
 452              	 
 453 0050 80F30988 	 msr psp,r0
 454 0054 BFF36F8F 	 isb 
 455              	 
 456              	 
 457 0058 7047     	 bx r14
 458              	 
 459 005a 00BFAFF3 	 .align 4
 459      0080
 460 0060 00000000 	pxCurrentTCBConst:.word pxCurrentTCB
 461              	
 462              	
 491:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 463              	 .loc 1 491 0
 464              	 .thumb
 465              	 .cfi_endproc
 466              	.LFE13:
 468 0064 AFF30080 	 .section .text.SysTick_Handler,"ax",%progbits
 468      AFF30080 
 468      AFF30080 
 469              	 .align 2
 470              	 .global SysTick_Handler
 471              	 .thumb
 472              	 .thumb_func
 474              	SysTick_Handler:
 475              	.LFB14:
 495:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 476              	 .loc 1 495 0
 477              	 .cfi_startproc
 478              	 
 479              	 
 480 0000 08B5     	 push {r3,lr}
 481              	.LCFI2:
 482              	 .cfi_def_cfa_offset 8
 483              	 .cfi_offset 3,-8
 484              	 .cfi_offset 14,-4
 485              	.LBB45:
 486              	.LBB46:
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         (
 487              	 .loc 2 197 0
 488              	
 489 0002 4FF01403 	 mov r3,#20
 490 0006 83F31188 	 msr basepri,r3
 491 000a BFF36F8F 	 isb 
 492 000e BFF34F8F 	 dsb 
 493              	
 494              	
 495              	.LVL16:
 496              	 .thumb
 497              	.LBE46:
 498              	.LBE45:
 503:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 499              	 .loc 1 503 0
 500 0012 FFF7FEFF 	 bl xTaskIncrementTick
 501              	.LVL17:
 502 0016 18B1     	 cbz r0,.L33
 507:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 503              	 .loc 1 507 0
 504 0018 4FF08052 	 mov r2,#268435456
 505 001c 024B     	 ldr r3,.L35
 506 001e 1A60     	 str r2,[r3]
 507              	.L33:
 508              	.LVL18:
 509              	.LBB47:
 510              	.LBB48:
 511              	 .loc 2 231 0
 512 0020 0023     	 movs r3,#0
 513              	
 514 0022 83F31188 	 msr basepri,r3
 515              	
 516              	 .thumb
 517 0026 08BD     	 pop {r3,pc}
 518              	.L36:
 519              	 .align 2
 520              	.L35:
 521 0028 04ED00E0 	 .word -536810236
 522              	.LBE48:
 523              	.LBE47:
 524              	 .cfi_endproc
 525              	.LFE14:
 527              	 .section .text.vPortSetupTimerInterrupt,"ax",%progbits
 528              	 .align 2
 529              	 .weak vPortSetupTimerInterrupt
 530              	 .thumb
 531              	 .thumb_func
 533              	vPortSetupTimerInterrupt:
 534              	.LFB15:
 689:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 535              	 .loc 1 689 0
 536              	 .cfi_startproc
 537              	 
 538              	 
 539              	 
 700:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 540              	 .loc 1 700 0
 541 0000 084A     	 ldr r2,.L38
 542 0002 0023     	 movs r3,#0
 543 0004 1360     	 str r3,[r2]
 701:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 544              	 .loc 1 701 0
 545 0006 0849     	 ldr r1,.L38+4
 546 0008 0B60     	 str r3,[r1]
 704:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 547              	 .loc 1 704 0
 548 000a 084B     	 ldr r3,.L38+8
 549 000c 1B68     	 ldr r3,[r3]
 550 000e 0849     	 ldr r1,.L38+12
 551 0010 A1FB0313 	 umull r1,r3,r1,r3
 552 0014 9B09     	 lsrs r3,r3,#6
 553 0016 013B     	 subs r3,r3,#1
 554 0018 0649     	 ldr r1,.L38+16
 555 001a 0B60     	 str r3,[r1]
 705:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 556              	 .loc 1 705 0
 557 001c 0723     	 movs r3,#7
 558 001e 1360     	 str r3,[r2]
 559 0020 7047     	 bx lr
 560              	.L39:
 561 0022 00BF     	 .align 2
 562              	.L38:
 563 0024 10E000E0 	 .word -536813552
 564 0028 18E000E0 	 .word -536813544
 565 002c 00000000 	 .word SystemCoreClock
 566 0030 D34D6210 	 .word 274877907
 567 0034 14E000E0 	 .word -536813548
 568              	 .cfi_endproc
 569              	.LFE15:
 571              	 .section .text.xPortStartScheduler,"ax",%progbits
 572              	 .align 2
 573              	 .global xPortStartScheduler
 574              	 .thumb
 575              	 .thumb_func
 577              	xPortStartScheduler:
 578              	.LFB9:
 292:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 579              	 .loc 1 292 0
 580              	 .cfi_startproc
 581              	 
 582              	 
 300:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 583              	 .loc 1 300 0
 584 0000 3C4B     	 ldr r3,.L51
 585 0002 1A68     	 ldr r2,[r3]
 586 0004 3C4B     	 ldr r3,.L51+4
 587 0006 9A42     	 cmp r2,r3
 588 0008 08D1     	 bne .L41
 589              	.LBB49:
 590              	.LBB50:
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         (
 591              	 .loc 2 197 0
 592              	
 593 000a 4FF01403 	 mov r3,#20
 594 000e 83F31188 	 msr basepri,r3
 595 0012 BFF36F8F 	 isb 
 596 0016 BFF34F8F 	 dsb 
 597              	
 598              	
 599              	.LVL19:
 600              	 .thumb
 601              	.L42:
 602              	.LBE50:
 603              	.LBE49:
 300:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 604              	 .loc 1 300 0 discriminator 2
 605 001a FEE7     	 b .L42
 606              	.L41:
 301:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 607              	 .loc 1 301 0
 608 001c 354B     	 ldr r3,.L51
 609 001e 1A68     	 ldr r2,[r3]
 610 0020 364B     	 ldr r3,.L51+8
 611 0022 9A42     	 cmp r2,r3
 612 0024 08D1     	 bne .L43
 613              	.LBB51:
 614              	.LBB52:
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         (
 615              	 .loc 2 197 0
 616              	
 617 0026 4FF01403 	 mov r3,#20
 618 002a 83F31188 	 msr basepri,r3
 619 002e BFF36F8F 	 isb 
 620 0032 BFF34F8F 	 dsb 
 621              	
 622              	
 623              	.LVL20:
 624              	 .thumb
 625              	.L44:
 626              	.LBE52:
 627              	.LBE51:
 301:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 628              	 .loc 1 301 0 discriminator 3
 629 0036 FEE7     	 b .L44
 630              	.L43:
 292:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 631              	 .loc 1 292 0
 632 0038 10B5     	 push {r4,lr}
 633              	.LCFI3:
 634              	 .cfi_def_cfa_offset 8
 635              	 .cfi_offset 4,-8
 636              	 .cfi_offset 14,-4
 637 003a 82B0     	 sub sp,sp,#8
 638              	.LCFI4:
 639              	 .cfi_def_cfa_offset 16
 640              	.LVL21:
 641              	.LBB53:
 315:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 642              	 .loc 1 315 0
 643 003c 304B     	 ldr r3,.L51+12
 644 003e 1A78     	 ldrb r2,[r3]
 645 0040 D2B2     	 uxtb r2,r2
 646 0042 0192     	 str r2,[sp,#4]
 319:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 647              	 .loc 1 319 0
 648 0044 FF22     	 movs r2,#255
 649 0046 1A70     	 strb r2,[r3]
 322:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 650              	 .loc 1 322 0
 651 0048 1B78     	 ldrb r3,[r3]
 652 004a DBB2     	 uxtb r3,r3
 653 004c 8DF80330 	 strb r3,[sp,#3]
 325:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 654              	 .loc 1 325 0
 655 0050 9DF80330 	 ldrb r3,[sp,#3]
 656 0054 03F01403 	 and r3,r3,#20
 657 0058 2A4A     	 ldr r2,.L51+16
 658 005a 1370     	 strb r3,[r2]
 329:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 659              	 .loc 1 329 0
 660 005c 0722     	 movs r2,#7
 661 005e 2A4B     	 ldr r3,.L51+20
 662 0060 1A60     	 str r2,[r3]
 331:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             {
 663              	 .loc 1 331 0
 664 0062 9DF80330 	 ldrb r3,[sp,#3]
 665 0066 13F0800F 	 tst r3,#128
 666 006a 12D0     	 beq .L45
 667 006c 0623     	 movs r3,#6
 668 006e 00E0     	 b .L46
 669              	.L49:
 670 0070 0B46     	 mov r3,r1
 671              	.L46:
 334:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             }
 672              	 .loc 1 334 0
 673 0072 9DF80320 	 ldrb r2,[sp,#3]
 674 0076 5200     	 lsls r2,r2,#1
 675 0078 D2B2     	 uxtb r2,r2
 676 007a 8DF80320 	 strb r2,[sp,#3]
 331:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             {
 677              	 .loc 1 331 0
 678 007e 9DF80320 	 ldrb r2,[sp,#3]
 679 0082 591E     	 subs r1,r3,#1
 680 0084 12F0800F 	 tst r2,#128
 681 0088 F2D1     	 bne .L49
 682 008a 1F4A     	 ldr r2,.L51+20
 683 008c 1360     	 str r3,[r2]
 351:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 }
 684              	 .loc 1 351 0
 685 008e 012B     	 cmp r3,#1
 686 0090 08D0     	 beq .L47
 687              	.L45:
 688              	.LBB54:
 689              	.LBB55:
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         (
 690              	 .loc 2 197 0
 691              	
 692 0092 4FF01403 	 mov r3,#20
 693 0096 83F31188 	 msr basepri,r3
 694 009a BFF36F8F 	 isb 
 695 009e BFF34F8F 	 dsb 
 696              	
 697              	
 698              	.LVL22:
 699              	 .thumb
 700              	.L48:
 701              	.LBE55:
 702              	.LBE54:
 351:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 }
 703              	 .loc 1 351 0 discriminator 4
 704 00a2 FEE7     	 b .L48
 705              	.L47:
 357:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 706              	 .loc 1 357 0
 707 00a4 1B02     	 lsls r3,r3,#8
 358:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 708              	 .loc 1 358 0
 709 00a6 03F4E063 	 and r3,r3,#1792
 710 00aa 174A     	 ldr r2,.L51+20
 711 00ac 1360     	 str r3,[r2]
 362:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 712              	 .loc 1 362 0
 713 00ae 019B     	 ldr r3,[sp,#4]
 714 00b0 DBB2     	 uxtb r3,r3
 715 00b2 134A     	 ldr r2,.L51+12
 716 00b4 1370     	 strb r3,[r2]
 717              	.LBE53:
 367:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 718              	 .loc 1 367 0
 719 00b6 154B     	 ldr r3,.L51+24
 720 00b8 1A68     	 ldr r2,[r3]
 721 00ba 42F47C02 	 orr r2,r2,#16515072
 722 00be 1A60     	 str r2,[r3]
 368:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 723              	 .loc 1 368 0
 724 00c0 1A68     	 ldr r2,[r3]
 725 00c2 42F07C42 	 orr r2,r2,#-67108864
 726 00c6 1A60     	 str r2,[r3]
 372:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 727              	 .loc 1 372 0
 728 00c8 FFF7FEFF 	 bl vPortSetupTimerInterrupt
 729              	.LVL23:
 375:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 730              	 .loc 1 375 0
 731 00cc 0024     	 movs r4,#0
 732 00ce 104B     	 ldr r3,.L51+28
 733 00d0 1C60     	 str r4,[r3]
 378:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 734              	 .loc 1 378 0
 735 00d2 FFF7FEFF 	 bl vPortEnableVFP
 736              	.LVL24:
 381:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 737              	 .loc 1 381 0
 738 00d6 0F4A     	 ldr r2,.L51+32
 739 00d8 1368     	 ldr r3,[r2]
 740 00da 43F04043 	 orr r3,r3,#-1073741824
 741 00de 1360     	 str r3,[r2]
 384:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 742              	 .loc 1 384 0
 743 00e0 FFF7FEFF 	 bl prvPortStartFirstTask
 744              	.LVL25:
 392:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     prvTaskExitError();
 745              	 .loc 1 392 0
 746 00e4 FFF7FEFF 	 bl vTaskSwitchContext
 747              	.LVL26:
 393:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 748              	 .loc 1 393 0
 749 00e8 FFF7FEFF 	 bl prvTaskExitError
 750              	.LVL27:
 397:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 751              	 .loc 1 397 0
 752 00ec 2046     	 mov r0,r4
 753 00ee 02B0     	 add sp,sp,#8
 754              	.LCFI5:
 755              	 .cfi_def_cfa_offset 8
 756              	 
 757 00f0 10BD     	 pop {r4,pc}
 758              	.L52:
 759 00f2 00BF     	 .align 2
 760              	.L51:
 761 00f4 00ED00E0 	 .word -536810240
 762 00f8 71C20F41 	 .word 1091551857
 763 00fc 70C20F41 	 .word 1091551856
 764 0100 00E400E0 	 .word -536812544
 765 0104 00000000 	 .word .LANCHOR1
 766 0108 00000000 	 .word .LANCHOR2
 767 010c 20ED00E0 	 .word -536810208
 768 0110 00000000 	 .word .LANCHOR0
 769 0114 34EF00E0 	 .word -536809676
 770              	 .cfi_endproc
 771              	.LFE9:
 773              	 .section .text.vPortValidateInterruptPriority,"ax",%progbits
 774              	 .align 2
 775              	 .global vPortValidateInterruptPriority
 776              	 .thumb
 777              	 .thumb_func
 779              	vPortValidateInterruptPriority:
 780              	.LFB17:
 723:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 724:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 725:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 726:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 727:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     void vPortValidateInterruptPriority( void )
 728:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     {
 781              	 .loc 1 728 0
 782              	 .cfi_startproc
 783              	 
 784              	 
 785              	 
 729:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         uint32_t ulCurrentInterrupt;
 730:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         uint8_t ucCurrentPriority;
 731:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 732:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         /* Obtain the number of the currently executing interrupt. */
 733:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 786              	 .loc 1 733 0
 787              	
 788 0000 EFF30583 	 mrs r3,ipsr
 789              	
 790              	.LVL28:
 734:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 735:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         /* Is the interrupt number a user defined interrupt? */
 736:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 791              	 .loc 1 736 0
 792              	 .thumb
 793 0004 0F2B     	 cmp r3,#15
 794 0006 0FD9     	 bls .L54
 737:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 738:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* Look up the interrupt's priority. */
 739:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 795              	 .loc 1 739 0
 796 0008 104A     	 ldr r2,.L58
 797 000a 9B5C     	 ldrb r3,[r3,r2]
 798              	.LVL29:
 799 000c DBB2     	 uxtb r3,r3
 800              	.LVL30:
 740:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 741:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             /* The following assertion will fail if a service routine (ISR) for
 742:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * an interrupt that has been assigned a priority above
 743:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 744:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * function.  ISR safe FreeRTOS API functions must *only* be called
 745:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * from interrupts that have been assigned a priority at or below
 746:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 747:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              *
 748:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * Numerically low interrupt priority numbers represent logically high
 749:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * interrupt priorities, therefore the priority of the interrupt must
 750:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * be set to a value equal to or numerically *higher* than
 751:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 752:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              *
 753:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * Interrupts that	use the FreeRTOS API must not be left at their
 754:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * default priority of	zero as that is the highest possible priority,
 755:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 756:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * and	therefore also guaranteed to be invalid.
 757:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              *
 758:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * FreeRTOS maintains separate thread and ISR API functions to ensure
 759:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * interrupt entry is as fast and simple as possible.
 760:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              *
 761:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * The following links provide detailed information:
 762:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
 763:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              * https://www.FreeRTOS.org/FAQHelp.html */
 764:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****             configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801              	 .loc 1 764 0
 802 000e 104A     	 ldr r2,.L58+4
 803 0010 1278     	 ldrb r2,[r2]
 804 0012 9A42     	 cmp r2,r3
 805 0014 08D9     	 bls .L54
 806              	.LBB56:
 807              	.LBB57:
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         (
 808              	 .loc 2 197 0
 809              	
 810 0016 4FF01403 	 mov r3,#20
 811 001a 83F31188 	 msr basepri,r3
 812 001e BFF36F8F 	 isb 
 813 0022 BFF34F8F 	 dsb 
 814              	
 815              	
 816              	.LVL31:
 817              	 .thumb
 818              	.L55:
 819              	.LBE57:
 820              	.LBE56:
 821              	 .loc 1 764 0 discriminator 1
 822 0026 FEE7     	 b .L55
 823              	.L54:
 765:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 766:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 767:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         /* Priority grouping:  The interrupt controller (NVIC) allows the bits
 768:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * that define each interrupt's priority to be split between bits that
 769:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * define the interrupt's pre-emption priority bits and bits that define
 770:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * the interrupt's sub-priority.  For simplicity all bits must be defined
 771:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * to be pre-emption priority bits.  The following assertion will fail if
 772:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * this is not the case (if some bits represent a sub-priority).
 773:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          *
 774:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * If the application only uses CMSIS libraries for interrupt
 775:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * configuration then the correct setting can be achieved on all Cortex-M
 776:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 777:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * scheduler.  Note however that some vendor specific peripheral libraries
 778:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * assume a non-zero priority group setting, in which cases using a value
 779:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****          * of zero will result in unpredictable behaviour. */
 780:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 824              	 .loc 1 780 0
 825 0028 0A4B     	 ldr r3,.L58+8
 826 002a 1B68     	 ldr r3,[r3]
 827 002c 03F4E063 	 and r3,r3,#1792
 828 0030 094A     	 ldr r2,.L58+12
 829 0032 1268     	 ldr r2,[r2]
 830 0034 9342     	 cmp r3,r2
 831 0036 08D9     	 bls .L53
 832              	.LBB58:
 833              	.LBB59:
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         (
 834              	 .loc 2 197 0
 835              	
 836 0038 4FF01403 	 mov r3,#20
 837 003c 83F31188 	 msr basepri,r3
 838 0040 BFF36F8F 	 isb 
 839 0044 BFF34F8F 	 dsb 
 840              	
 841              	
 842              	.LVL32:
 843              	 .thumb
 844              	.L57:
 845              	.LBE59:
 846              	.LBE58:
 847              	 .loc 1 780 0 discriminator 2
 848 0048 FEE7     	 b .L57
 849              	.L53:
 850 004a 7047     	 bx lr
 851              	.L59:
 852              	 .align 2
 853              	.L58:
 854 004c F0E300E0 	 .word -536812560
 855 0050 00000000 	 .word .LANCHOR1
 856 0054 0CED00E0 	 .word -536810228
 857 0058 00000000 	 .word .LANCHOR2
 858              	 .cfi_endproc
 859              	.LFE17:
 861              	 .section .bss.ucMaxSysCallPriority,"aw",%nobits
 862              	 .set .LANCHOR1,.+0
 865              	ucMaxSysCallPriority:
 866 0000 00       	 .space 1
 867              	 .section .bss.ulMaxPRIGROUPValue,"aw",%nobits
 868              	 .align 2
 869              	 .set .LANCHOR2,.+0
 872              	ulMaxPRIGROUPValue:
 873 0000 00000000 	 .space 4
 874              	 .section .data.uxCriticalNesting,"aw",%progbits
 875              	 .align 2
 876              	 .set .LANCHOR0,.+0
 879              	uxCriticalNesting:
 880 0000 AAAAAAAA 	 .word -1431655766
 881              	 .text
 882              	.Letext0:
 883              	 .file 3 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 884              	 .file 4 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 885              	 .file 5 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/projdefs.h"
 886              	 .file 6 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/config/FreeRTOSConfig.h"
 887              	 .file 7 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
    {standard input}:19     .text.prvTaskExitError:00000000 $t
    {standard input}:23     .text.prvTaskExitError:00000000 prvTaskExitError
    {standard input}:89     .text.prvTaskExitError:0000003c $d
    {standard input}:94     .text.prvPortStartFirstTask:00000000 $t
    {standard input}:98     .text.prvPortStartFirstTask:00000000 prvPortStartFirstTask
    {standard input}:119    .text.prvPortStartFirstTask:00000022 $d
    {standard input}:128    .text.vPortEnableVFP:00000000 $t
    {standard input}:132    .text.vPortEnableVFP:00000000 vPortEnableVFP
    {standard input}:147    .text.vPortEnableVFP:0000000e $d
    {standard input}:156    .text.pxPortInitialiseStack:00000000 $t
    {standard input}:161    .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
    {standard input}:196    .text.pxPortInitialiseStack:00000028 $d
    {standard input}:201    .text.SVC_Handler:00000000 $t
    {standard input}:206    .text.SVC_Handler:00000000 SVC_Handler
    {standard input}:226    .text.SVC_Handler:00000020 pxCurrentTCBConst2
    {standard input}:226    .text.SVC_Handler:00000020 $d
    {standard input}:235    .text.vPortEndScheduler:00000000 $t
    {standard input}:240    .text.vPortEndScheduler:00000000 vPortEndScheduler
    {standard input}:274    .text.vPortEndScheduler:00000020 $d
    {standard input}:279    .text.vPortEnterCritical:00000000 $t
    {standard input}:284    .text.vPortEnterCritical:00000000 vPortEnterCritical
    {standard input}:340    .text.vPortEnterCritical:0000003c $d
    {standard input}:346    .text.vPortExitCritical:00000000 $t
    {standard input}:351    .text.vPortExitCritical:00000000 vPortExitCritical
    {standard input}:400    .text.vPortExitCritical:00000028 $d
    {standard input}:407    .text.PendSV_Handler:00000000 $t
    {standard input}:412    .text.PendSV_Handler:00000000 PendSV_Handler
    {standard input}:460    .text.PendSV_Handler:00000060 pxCurrentTCBConst
    {standard input}:460    .text.PendSV_Handler:00000060 $d
    {standard input}:469    .text.SysTick_Handler:00000000 $t
    {standard input}:474    .text.SysTick_Handler:00000000 SysTick_Handler
    {standard input}:521    .text.SysTick_Handler:00000028 $d
    {standard input}:528    .text.vPortSetupTimerInterrupt:00000000 $t
    {standard input}:533    .text.vPortSetupTimerInterrupt:00000000 vPortSetupTimerInterrupt
    {standard input}:563    .text.vPortSetupTimerInterrupt:00000024 $d
    {standard input}:572    .text.xPortStartScheduler:00000000 $t
    {standard input}:577    .text.xPortStartScheduler:00000000 xPortStartScheduler
    {standard input}:761    .text.xPortStartScheduler:000000f4 $d
    {standard input}:774    .text.vPortValidateInterruptPriority:00000000 $t
    {standard input}:779    .text.vPortValidateInterruptPriority:00000000 vPortValidateInterruptPriority
    {standard input}:854    .text.vPortValidateInterruptPriority:0000004c $d
    {standard input}:865    .bss.ucMaxSysCallPriority:00000000 ucMaxSysCallPriority
    {standard input}:866    .bss.ucMaxSysCallPriority:00000000 $d
    {standard input}:868    .bss.ulMaxPRIGROUPValue:00000000 $d
    {standard input}:872    .bss.ulMaxPRIGROUPValue:00000000 ulMaxPRIGROUPValue
    {standard input}:875    .data.uxCriticalNesting:00000000 $d
    {standard input}:879    .data.uxCriticalNesting:00000000 uxCriticalNesting
                     .debug_frame:00000010 $d
    {standard input}:234    .text.SVC_Handler:00000024 $t
    {standard input}:468    .text.PendSV_Handler:00000064 $t
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.FreeRTOSConfig.h.30.aa43eb1cb33228d5c7e359a94d48589b
                           .group:00000000 wm4.projdefs.h.28.d6a7c9061b707820f2fcf4c2ff5d9f24
                           .group:00000000 wm4.portmacro.h.30.2ddc2eaf2e032c76c597fb78c4365041
                           .group:00000000 wm4.portable.h.63.e9cc508c3850f44ce542149380c67812
                           .group:00000000 wm4.mpu_wrappers.h.28.163fb40577cf8d1578015ea3f2ff4cdb
                           .group:00000000 wm4.FreeRTOS.h.67.9945f39eea4ddeb224c0782392206292
                           .group:00000000 wm4.list.h.57.02ec67e07eacffe5ca7cfb7326896236
                           .group:00000000 wm4.task.h.47.2d3fe49a094b8ec1e3e6aac441e8db21

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
SystemCoreClock
