   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "FreeRTOS_IP.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.prvIPTimerCheck,"ax",%progbits
  19              	 .align 2
  20              	 .thumb
  21              	 .thumb_func
  23              	prvIPTimerCheck:
  24              	.LFB59:
  25              	 .file 1 "../FreeRTOS-Plus-TCP/FreeRTOS_IP.c"
   1:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
   2:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * FreeRTOS+TCP V2.2.2
   3:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
   5:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * the Software without restriction, including without limitation the rights to
   8:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * subject to the following conditions:
  11:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  12:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * copies or substantial portions of the Software.
  14:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  15:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  22:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * http://aws.amazon.com/freertos
  23:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * http://www.FreeRTOS.org
  24:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
  25:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  26:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Standard includes. */
  27:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include <stdint.h>
  28:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include <stdio.h>
  29:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include <string.h>
  30:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  31:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* FreeRTOS includes. */
  32:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS.h"
  33:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "task.h"
  34:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "queue.h"
  35:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "semphr.h"
  36:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  37:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* FreeRTOS+TCP includes. */
  38:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_IP.h"
  39:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_Sockets.h"
  40:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_IP_Private.h"
  41:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_ARP.h"
  42:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_UDP_IP.h"
  43:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_DHCP.h"
  44:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "NetworkInterface.h"
  45:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "NetworkBufferManagement.h"
  46:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_DNS.h"
  47:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  48:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  49:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used to ensure the structure packing is having the desired effect.  The
  50:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 'volatile' is used to prevent compiler warnings about comparing a constant with
  51:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** a constant. */
  52:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #ifndef _lint
  53:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipEXPECTED_EthernetHeader_t_SIZE	( ( size_t ) 14 )
  54:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipEXPECTED_ARPHeader_t_SIZE			( ( size_t ) 28 )
  55:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipEXPECTED_IPHeader_t_SIZE			( ( size_t ) 20 )
  56:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipEXPECTED_IGMPHeader_t_SIZE		( ( size_t ) 8 )
  57:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipEXPECTED_ICMPHeader_t_SIZE		( ( size_t ) 8 )
  58:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipEXPECTED_UDPHeader_t_SIZE			( ( size_t ) 8 )
  59:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipEXPECTED_TCPHeader_t_SIZE			( ( size_t ) 20 )
  60:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
  61:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  62:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* ICMP protocol definitions. */
  63:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipICMP_ECHO_REQUEST				( ( uint8_t ) 8 )
  64:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipICMP_ECHO_REPLY				( ( uint8_t ) 0 )
  65:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  66:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* IPv4 multi-cast addresses range from 224.0.0.0.0 to 240.0.0.0. */
  67:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define	ipFIRST_MULTI_CAST_IPv4		0xE0000000UL
  68:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define	ipLAST_MULTI_CAST_IPv4		0xF0000000UL
  69:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  70:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* The first byte in the IPv4 header combines the IP version (4) with
  71:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** with the length of the IP header. */
  72:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define	ipIPV4_VERSION_HEADER_LENGTH_MIN	0x45U
  73:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define	ipIPV4_VERSION_HEADER_LENGTH_MAX	0x4FU
  74:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	
  75:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Time delay between repeated attempts to initialise the network hardware. */
  76:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #ifndef ipINITIALISATION_RETRY_DELAY
  77:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipINITIALISATION_RETRY_DELAY	( pdMS_TO_TICKS( 3000U ) )
  78:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
  79:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  80:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Defines how often the ARP timer callback function is executed.  The time is
  81:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** shorted in the Windows simulator as simulated time is not real time. */
  82:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #ifndef	ipARP_TIMER_PERIOD_MS
  83:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#ifdef _WINDOWS_
  84:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#define ipARP_TIMER_PERIOD_MS	( 500U ) /* For windows simulator builds. */
  85:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#else
  86:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#define ipARP_TIMER_PERIOD_MS	( 10000U )
  87:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
  88:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
  89:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  90:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #ifndef iptraceIP_TASK_STARTING
  91:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define	iptraceIP_TASK_STARTING()	do {} while( ipFALSE_BOOL )
  92:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
  93:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  94:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ( ipconfigUSE_TCP == 1 ) && !defined( ipTCP_TIMER_PERIOD_MS ) )
  95:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* When initialising the TCP timer,
  96:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	give it an initial time-out of 1 second. */
  97:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipTCP_TIMER_PERIOD_MS	( 1000U )
  98:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
  99:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 100:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 1, then the Ethernet
 101:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** driver will filter incoming packets and only pass the stack those packets it
 102:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** considers need processing.  In this case ipCONSIDER_FRAME_FOR_PROCESSING() can
 103:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** be #defined away.  If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 0
 104:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** then the Ethernet driver will pass all received packets to the stack, and the
 105:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** stack must do the filtering itself.  In this case ipCONSIDER_FRAME_FOR_PROCESSING
 106:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** needs to call eConsiderFrameForProcessing. */
 107:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0
 108:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipCONSIDER_FRAME_FOR_PROCESSING( pucEthernetBuffer ) eConsiderFrameForProcessing( ( pucEth
 109:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #else
 110:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipCONSIDER_FRAME_FOR_PROCESSING( pucEthernetBuffer ) eProcessBuffer
 111:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 112:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 113:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
 114:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
 115:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The bits in the two byte IP header field that make up the fragment offset value. */
 116:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#define ipFRAGMENT_OFFSET_BIT_MASK				( ( uint16_t ) 0xff0f )
 117:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#else
 118:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The bits in the two byte IP header field that make up the fragment offset value. */
 119:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#define ipFRAGMENT_OFFSET_BIT_MASK				( ( uint16_t ) 0x0fff )
 120:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigBYTE_ORDER */
 121:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
 122:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 123:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* The maximum time the IP task is allowed to remain in the Blocked state if no
 124:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** events are posted to the network event queue. */
 125:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #ifndef	ipconfigMAX_IP_TASK_SLEEP_TIME
 126:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipconfigMAX_IP_TASK_SLEEP_TIME ( pdMS_TO_TICKS( 10000UL ) )
 127:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 128:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 129:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Returned as the (invalid) checksum when the protocol being checked is not
 130:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** handled.  The value is chosen simply to be easy to spot when debugging. */
 131:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipUNHANDLED_PROTOCOL		0x4321U
 132:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 133:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Returned to indicate a valid checksum. */
 134:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipCORRECT_CRC				0xffffU
 135:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 136:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Returned to indicate incorrect checksum. */
 137:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipWRONG_CRC					0x0000U
 138:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 139:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Returned as the (invalid) checksum when the length of the data being checked
 140:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** had an invalid length. */
 141:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipINVALID_LENGTH			0x1234U
 142:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 143:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 144:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 145:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used in checksum calculation. */
 146:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** typedef union _xUnion32
 147:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 148:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint32_t u32;
 149:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t u16[ 2 ];
 150:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t u8[ 4 ];
 151:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** } xUnion32;
 152:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 153:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used in checksum calculation. */
 154:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** typedef union _xUnionPtr
 155:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 156:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint32_t *u32ptr;
 157:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t *u16ptr;
 158:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t *u8ptr;
 159:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** } xUnionPtr;
 160:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 161:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 162:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
 163:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 164:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****     return ( NetworkBufferDescriptor_t *)pvArgument;
 165:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 166:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
 167:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 168:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****     return ( const NetworkBufferDescriptor_t *) pvArgument;
 169:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 170:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 171:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 172:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 173:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 174:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The main TCP/IP stack processing task.  This task receives commands/events
 175:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * from the network hardware drivers and tasks that are using sockets.  It also
 176:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * maintains a set of protocol timers.
 177:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 178:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTask( void *pvParameters );
 179:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 180:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 181:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Called when new data is available from the network interface.
 182:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 183:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer );
 184:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 185:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 186:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Process incoming IP packets.
 187:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 188:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * pxIPPacket, NetworkBufferDescripto
 189:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 190:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
 191:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/*
 192:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	 * Process incoming ICMP packets.
 193:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	 */
 194:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket );
 195:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
 196:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 197:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 198:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Turns around an incoming ping request to convert it into a ping reply.
 199:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 200:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
 201:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket );
 202:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigREPLY_TO_INCOMING_PINGS */
 203:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 204:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 205:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Processes incoming ping replies.  The application callback function
 206:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * vApplicationPingReplyHook() is called with the results.
 207:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 208:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
 209:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket );
 210:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
 211:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 212:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 213:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Called to create a network connection when the stack is first started, or
 214:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * when the network connection is lost.
 215:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 216:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessNetworkDownEvent( void );
 217:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 218:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 219:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Checks the ARP, DHCP and TCP timers to see if any periodic or timeout
 220:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * processing is required.
 221:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 222:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvCheckNetworkTimers( void );
 223:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 224:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 225:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Determine how long the IP task can sleep for, which depends on when the next
 226:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * periodic or timeout processing must be performed.
 227:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 228:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static TickType_t prvCalculateSleepTime( void );
 229:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 230:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 231:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The network card driver has received a packet.  In the case that it is part
 232:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * of a linked packet chain, walk through it to handle every message.
 233:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 234:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer );
 235:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 236:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 237:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Utility functions for the light weight IP timers.
 238:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 239:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime );
 240:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer );
 241:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime );
 242:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 243:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* The function 'prvAllowIPPacket()' checks if a packets should be processed. */
 244:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
 245:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 												  const NetworkBufferDescriptor_t * const pxNetworkBuffer,
 246:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 												  UBaseType_t uxHeaderLength );
 247:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 248:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 1 )
 249:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Even when the driver takes care of checksum calculations,
 250:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	the IP-task will still check if the length fields are OK. */
 251:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static BaseType_t xCheckSizeFields( const uint8_t * const pucEthernetBuffer, size_t uxBufferLength
 252:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif	/* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 1 ) */
 253:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 254:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 255:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 256:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* The queue used to pass events into the IP-task for processing. */
 257:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** QueueHandle_t xNetworkEventQueue = NULL;
 258:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 259:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*_RB_ Requires comment. */
 260:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usPacketIdentifier = 0U;
 261:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 262:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* For convenience, a MAC address of all 0xffs is defined const for quick
 263:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** reference. */
 264:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const MACAddress_t xBroadcastMACAddress = { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
 265:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 266:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Structure that stores the netmask, gateway address and DNS server addresses. */
 267:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkAddressingParameters_t xNetworkAddressing = { 0, 0, 0, 0, 0 };
 268:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 269:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Default values for the above struct in case DHCP
 270:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** does not lead to a confirmed request. */
 271:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* coverity[misra_c_2012_rule_8_9_violation] */
 272:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* "xDefaultAddressing" should be defined at block scope. */
 273:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkAddressingParameters_t xDefaultAddressing = { 0, 0, 0, 0, 0 };
 274:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 275:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used to ensure network down events cannot be missed when they cannot be
 276:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** posted to the network event queue because the network event queue is already
 277:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** full. */
 278:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static volatile BaseType_t xNetworkDownEventPending = pdFALSE;
 279:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 280:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Stores the handle of the task that handles the stack.  The handle is used
 281:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** (indirectly) by some utility function to determine if the utility function is
 282:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** being called by a task (in which case it is ok to block) or by the IP task
 283:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** itself (in which case it is not ok to block). */
 284:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static TaskHandle_t xIPTaskHandle = NULL;
 285:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 286:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_TCP != 0 )
 287:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Set to a non-zero value if one or more TCP message have been processed
 288:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	within the last round. */
 289:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static BaseType_t xProcessedTCPMessage;
 290:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 291:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 292:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Simple set to pdTRUE or pdFALSE depending on whether the network is up or
 293:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** down (connected, not connected) respectively. */
 294:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t xNetworkUp = pdFALSE;
 295:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 296:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 297:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** A timer for each of the following processes, all of which need attention on a
 298:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** regular basis:
 299:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	1. ARP, to check its table entries
 300:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	2. DPHC, to send requests and to renew a reservation
 301:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	3. TCP, to check for timeouts, resends
 302:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	4. DNS, to check for timeouts when looking-up a domain.
 303:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 304:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static IPTimer_t xARPTimer;
 305:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_DHCP != 0 )
 306:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static IPTimer_t xDHCPTimer;
 307:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 308:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_TCP != 0 )
 309:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static IPTimer_t xTCPTimer;
 310:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 311:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigDNS_USE_CALLBACKS != 0 )
 312:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static IPTimer_t xDNSTimer;
 313:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 314:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 315:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Set to pdTRUE when the IP task is ready to start processing packets. */
 316:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* coverity[misra_c_2012_rule_8_9_violation] */
 317:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* "xIPTaskInitialised" should be defined at block scope. */
 318:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t xIPTaskInitialised = pdFALSE;
 319:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 320:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
 321:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Keep track of the lowest amount of space in 'xNetworkEventQueue'. */
 322:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static UBaseType_t uxQueueMinimumSpace = ipconfigEVENT_QUEUE_LENGTH;
 323:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 324:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 325:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 326:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 327:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Coverity want to make pvParameters const, which would make it incompatible. */
 328:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* coverity[misra_c_2012_rule_8_13_violation] */
 329:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTask( void *pvParameters )
 330:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 331:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** IPStackEvent_t xReceivedEvent;
 332:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** TickType_t xNextIPSleep;
 333:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** FreeRTOS_Socket_t *pxSocket;
 334:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** struct freertos_sockaddr xAddress;
 335:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 336:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Just to prevent compiler warnings about unused parameters. */
 337:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	( void ) pvParameters;
 338:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 339:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* A possibility to set some additional task properties. */
 340:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	iptraceIP_TASK_STARTING();
 341:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 342:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Generate a dummy message to say that the network connection has gone
 343:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	down.  This will cause this task to initialise the network interface.  After
 344:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	this it is the responsibility of the network interface hardware driver to
 345:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	send this message if a previously connected network is disconnected. */
 346:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	FreeRTOS_NetworkDown();
 347:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 348:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_TCP == 1 )
 349:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 350:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Initialise the TCP timer. */
 351:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 352:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 353:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
 354:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 355:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Initialisation is complete and events can now be processed. */
 356:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xIPTaskInitialised = pdTRUE;
 357:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 358:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 359:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 360:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Loop, processing IP events. */
 361:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	for( ;; )
 362:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 363:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		ipconfigWATCHDOG_TIMER();
 364:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 365:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check the ARP, DHCP and TCP timers to see if there is any periodic
 366:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		or timeout processing to perform. */
 367:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvCheckNetworkTimers();
 368:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 369:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Calculate the acceptable maximum sleep time. */
 370:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNextIPSleep = prvCalculateSleepTime();
 371:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 372:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Wait until there is something to do. If the following call exits
 373:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		 * due to a time out rather than a message being received, set a
 374:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		 * 'NoEvent' value. */
 375:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if ( xQueueReceive( xNetworkEventQueue, ( void *) &xReceivedEvent, xNextIPSleep ) == pdFALSE ) 
 376:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 377:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReceivedEvent.eEventType = eNoEvent;
 378:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 379:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 380:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
 381:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 382:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xReceivedEvent.eEventType != eNoEvent )
 383:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 384:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			UBaseType_t uxCount;
 385:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 386:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 387:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( uxQueueMinimumSpace > uxCount )
 388:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 389:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					uxQueueMinimumSpace = uxCount;
 390:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 391:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 392:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 393:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */
 394:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 395:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );
 396:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 397:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		switch( xReceivedEvent.eEventType )
 398:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 399:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eNetworkDownEvent :
 400:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Attempt to establish a connection. */
 401:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xNetworkUp = pdFALSE;
 402:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				prvProcessNetworkDownEvent();
 403:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 404:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 405:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eNetworkRxEvent:
 406:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The network hardware driver has received a new packet.  A
 407:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pointer to the received buffer is located in the pvData member
 408:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				of the received event structure. */				
 409:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				prvHandleEthernetPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvDa
 410:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 411:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 412:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eNetworkTxEvent:
 413:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Send a network packet. The ownership will  be transferred to
 414:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				the driver, which will release it after delivery. */
 415:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( void ) xNetworkInterfaceOutput( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedE
 416:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 417:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 418:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eARPTimerEvent :
 419:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The ARP timer has expired, process the ARP cache. */
 420:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vARPAgeCache();
 421:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 422:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 423:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketBindEvent:
 424:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
 425:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				to a port. The port number is communicated in the socket field
 426:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usLocalPort. vSocketBind() will actually bind the socket and the
 427:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				API will unblock as soon as the eSOCKET_BOUND event is
 428:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				triggered. */
 429:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 430:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xAddress.sin_addr = 0U;	/* For the moment. */
 431:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 432:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxSocket->usLocalPort = 0U;
 433:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 434:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 435:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Before 'eSocketBindEvent' was sent it was tested that
 436:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( xEventGroup != NULL ) so it can be used now to wake up the
 437:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				user. */
 438:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 439:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketWakeUpUser( pxSocket );
 440:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 441:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 442:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketCloseEvent :
 443:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The user API FreeRTOS_closesocket() has sent a message to the
 444:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				IP-task to actually close a socket. This is handled in
 445:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketClose().  As the socket gets closed, there is no way to
 446:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				report back to the API, so the API won't wait for the result */
 447:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( void ) vSocketClose( ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData ) );
 448:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 449:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 450:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eStackTxEvent :
 451:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The network stack has generated a packet to send.  A
 452:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pointer to the generated buffer is located in the pvData
 453:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				member of the received event structure. */
 454:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vProcessGeneratedUDPPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.p
 455:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 456:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 457:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eStackRAWTxEvent:
 458:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The network stack for raw packets has generated a packet to send.
 459:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				A pointer to the generated buffer is located in the pvData
 460:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				member of the received event structure. */
 461:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vProcessGeneratedRAWPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.p
 462:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 463:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 464:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eDHCPEvent:
 465:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The DHCP state machine needs processing. */
 466:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigUSE_DHCP == 1 )
 467:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 468:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Process DHCP messages for a given end-point. */
 469:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vDHCPProcess( pdFALSE );
 470:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 471:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_DHCP */
 472:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 473:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 474:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketSelectEvent :
 475:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* FreeRTOS_select() has got unblocked by a socket event,
 476:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketSelect() will check which sockets actually have an event
 477:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				and update the socket field xSocketBits. */
 478:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 479:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 480:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					#if( ipconfigSELECT_USES_NOTIFY != 0 )
 481:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 482:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						SocketSelectMessage_t *pxMessage = ipCAST_PTR_TO_TYPE_PTR( SocketSelectMessage_t, xReceivedEv
 483:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						vSocketSelect( pxMessage->pxSocketSet );
 484:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
 485:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 486:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					#else
 487:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{						
 488:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						vSocketSelect( ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, xReceivedEvent.pvData ) );
 489:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 490:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					#endif	/* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
 491:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 492:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
 493:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 494:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 495:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketSignalEvent :
 496:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigSUPPORT_SIGNALS != 0 )
 497:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 498:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Some task wants to signal the user of this socket in
 499:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					order to interrupt a call to recv() or a call to select(). */
 500:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					( void ) FreeRTOS_SignalSocket( ipPOINTER_CAST( Socket_t, xReceivedEvent.pvData ) );
 501:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 502:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigSUPPORT_SIGNALS */
 503:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 504:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 505:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eTCPTimerEvent :
 506:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigUSE_TCP == 1 )
 507:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 508:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Simply mark the TCP timer as expired so it gets processed
 509:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					the next time prvCheckNetworkTimers() is called. */
 510:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 511:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 512:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_TCP */
 513:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 514:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 515:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eTCPAcceptEvent:
 516:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The API FreeRTOS_accept() was called, the IP-task will now
 517:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				check if the listening socket (communicated in pvData) actually
 518:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				received a new connection. */
 519:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigUSE_TCP == 1 )
 520:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 521:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 522:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 523:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 524:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 525:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 526:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						vSocketWakeUpUser( pxSocket );
 527:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 528:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 529:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_TCP */
 530:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 531:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 532:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eTCPNetStat:
 533:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* FreeRTOS_netstat() was called to have the IP-task print an
 534:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				overview of all sockets and their connections */
 535:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
 536:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 537:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vTCPNetStat();
 538:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 539:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_TCP */
 540:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 541:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 542:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eNoEvent:
 543:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* xQueueReceive() returned because of a normal time-out. */
 544:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 545:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 546:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			default :
 547:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Should not get here. */
 548:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 549:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 550:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 551:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xNetworkDownEventPending != pdFALSE )
 552:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 553:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* A network down event could not be posted to the network event
 554:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			queue because the queue was full.
 555:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			As this code runs in the IP-task, it can be done directly by
 556:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			calling prvProcessNetworkDownEvent(). */
 557:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			prvProcessNetworkDownEvent();
 558:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 559:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 560:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 561:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 562:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 563:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xIsCallingFromIPTask( void )
 564:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 565:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn;
 566:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 567:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 568:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 569:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdTRUE;
 570:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 571:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 572:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 573:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdFALSE;
 574:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 575:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 576:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
 577:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 578:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 579:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 580:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer )
 581:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 582:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
 583:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 584:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
 585:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		buffer will be sent at a time.  This is the default way for +TCP to pass
 586:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		messages from the MAC to the TCP/IP stack. */
 587:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvProcessEthernetPacket( pxBuffer );
 588:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 589:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#else /* ipconfigUSE_LINKED_RX_MESSAGES */
 590:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 591:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxNextBuffer;
 592:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 593:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* An optimisation that is useful when there is high network traffic.
 594:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		Instead of passing received packets into the IP task one at a time the
 595:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		network interface can chain received packets together and pass them into
 596:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the IP task in one go.  The packets are chained using the pxNextBuffer
 597:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		member.  The loop below walks through the chain processing each packet
 598:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		in the chain in turn. */
 599:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		do
 600:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 601:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Store a pointer to the buffer after pxBuffer for use later on. */
 602:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxNextBuffer = pxBuffer->pxNextBuffer;
 603:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 604:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Make it NULL to avoid using it later on. */
 605:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxBuffer->pxNextBuffer = NULL;
 606:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 607:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			prvProcessEthernetPacket( pxBuffer );
 608:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxBuffer = pxNextBuffer;
 609:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 610:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* While there is another packet in the chain. */
 611:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		} while( pxBuffer != NULL );
 612:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 613:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_LINKED_RX_MESSAGES */
 614:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 615:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 616:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 617:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static TickType_t prvCalculateSleepTime( void )
 618:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 619:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** TickType_t xMaximumSleepTime;
 620:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 621:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Start with the maximum sleep time, then check this against the remaining
 622:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	time in any other timers that are active. */
 623:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 624:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 625:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 626:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 627:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 628:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 629:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xMaximumSleepTime = xARPTimer.ulReloadTime;
 630:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 631:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 632:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 633:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_DHCP == 1 )
 634:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 635:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
 636:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 637:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xDHCPTimer.ulRemainingTime < xMaximumSleepTime )
 638:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 639:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xMaximumSleepTime = xDHCPTimer.ulRemainingTime;
 640:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 641:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 642:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 643:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_DHCP */
 644:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 645:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_TCP == 1 )
 646:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 647:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 648:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 649:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 650:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 651:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 652:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
 653:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 654:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDNS_USE_CALLBACKS != 0 )
 655:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 656:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 657:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 658:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xDNSTimer.ulRemainingTime < xMaximumSleepTime )
 659:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 660:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xMaximumSleepTime = xDNSTimer.ulRemainingTime;
 661:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 662:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 663:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 664:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
 665:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 666:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xMaximumSleepTime;
 667:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 668:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 669:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 670:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvCheckNetworkTimers( void )
 671:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 672:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Is it time for ARP processing? */
 673:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 674:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 675:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) xSendEventToIPTask( eARPTimerEvent );
 676:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 677:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 678:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_DHCP == 1 )
 679:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 680:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Is it time for DHCP processing? */
 681:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 682:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 683:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( void ) xSendEventToIPTask( eDHCPEvent );
 684:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 685:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 686:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_DHCP */
 687:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 688:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDNS_USE_CALLBACKS != 0 )
 689:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 690:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Is it time for DNS processing? */
 691:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 692:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 693:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vDNSCheckCallBack( NULL );
 694:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 695:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 696:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigDNS_USE_CALLBACKS */
 697:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 698:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_TCP == 1 )
 699:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 700:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xWillSleep;
 701:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	TickType_t xNextTime;
 702:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xCheckTCPSockets;
 703:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 704:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* If the IP task has messages waiting to be processed then
 705:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		it will not sleep in any case. */
 706:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 707:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 708:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xWillSleep = pdTRUE;
 709:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 710:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 711:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 712:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xWillSleep = pdFALSE;
 713:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 714:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 715:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Sockets need to be checked if the TCP timer has expired. */
 716:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 717:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 718:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Sockets will also be checked if there are TCP messages but the
 719:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		message queue is empty (indicated by xWillSleep being true). */
 720:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 721:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 722:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xCheckTCPSockets = pdTRUE;
 723:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 724:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 725:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xCheckTCPSockets != pdFALSE )
 726:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 727:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Attend to the sockets, returning the period after which the
 728:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			check must be repeated. */
 729:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNextTime = xTCPTimerCheck( xWillSleep );
 730:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			prvIPTimerStart( &xTCPTimer, xNextTime );
 731:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xProcessedTCPMessage = 0;
 732:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 733:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 734:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_TCP == 1 */
 735:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 736:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 737:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 738:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime )
 739:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 740:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 741:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulRemainingTime = xTime;
 742:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 743:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xTime == ( TickType_t ) 0 )
 744:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 745:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxTimer->bExpired = pdTRUE_UNSIGNED;
 746:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 747:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 748:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 749:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxTimer->bExpired = pdFALSE_UNSIGNED;
 750:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 751:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 752:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->bActive = pdTRUE_UNSIGNED;
 753:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 754:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 755:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 756:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime )
 757:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 758:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulReloadTime = xTime;
 759:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	prvIPTimerStart( pxTimer, xTime );
 760:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 761:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 762:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 763:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
 764:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
  26              	 .loc 1 764 0
  27              	 .cfi_startproc
  28              	 
  29              	 
  30              	.LVL0:
  31 0000 38B5     	 push {r3,r4,r5,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 16
  34              	 .cfi_offset 3,-16
  35              	 .cfi_offset 4,-12
  36              	 .cfi_offset 5,-8
  37              	 .cfi_offset 14,-4
 765:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn;
 766:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 767:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxTimer->bActive == pdFALSE_UNSIGNED )
  38              	 .loc 1 767 0
  39 0002 0378     	 ldrb r3,[r0]
  40 0004 13F0010F 	 tst r3,#1
  41 0008 26D0     	 beq .L7
  42 000a 0446     	 mov r4,r0
 768:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 769:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The timer is not enabled. */
 770:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdFALSE;
 771:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 772:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 773:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 774:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The timer might have set the bExpired flag already, if not, check the
 775:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		value of xTimeOut against ulRemainingTime. */
 776:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pxTimer->bExpired == pdFALSE_UNSIGNED )
  43              	 .loc 1 776 0
  44 000c 13F0020F 	 tst r3,#2
  45 0010 0DD1     	 bne .L3
 777:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 778:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
  46              	 .loc 1 778 0
  47 0012 0430     	 adds r0,r0,#4
  48              	.LVL1:
  49 0014 04F10C01 	 add r1,r4,#12
  50 0018 FFF7FEFF 	 bl xTaskCheckForTimeOut
  51              	.LVL2:
  52 001c 18B1     	 cbz r0,.L4
 779:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 780:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxTimer->bExpired = pdTRUE_UNSIGNED;
  53              	 .loc 1 780 0
  54 001e 2378     	 ldrb r3,[r4]
  55 0020 43F00203 	 orr r3,r3,#2
  56 0024 2370     	 strb r3,[r4]
  57              	.L4:
 781:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 782:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 783:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pxTimer->bExpired != pdFALSE_UNSIGNED )
  58              	 .loc 1 783 0
  59 0026 2378     	 ldrb r3,[r4]
  60 0028 13F0020F 	 tst r3,#2
  61 002c 16D0     	 beq .L8
  62              	.L3:
 784:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 785:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
  63              	 .loc 1 785 0
  64 002e 2569     	 ldr r5,[r4,#16]
  65              	.LVL3:
  66              	.LBB68:
  67              	.LBB69:
 740:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulRemainingTime = xTime;
  68              	 .loc 1 740 0
  69 0030 201D     	 adds r0,r4,#4
  70 0032 FFF7FEFF 	 bl vTaskSetTimeOutState
  71              	.LVL4:
 741:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  72              	 .loc 1 741 0
  73 0036 E560     	 str r5,[r4,#12]
 743:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
  74              	 .loc 1 743 0
  75 0038 25B9     	 cbnz r5,.L5
 745:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
  76              	 .loc 1 745 0
  77 003a 2378     	 ldrb r3,[r4]
  78 003c 43F00203 	 orr r3,r3,#2
  79 0040 2370     	 strb r3,[r4]
  80 0042 03E0     	 b .L6
  81              	.L5:
 749:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
  82              	 .loc 1 749 0
  83 0044 2378     	 ldrb r3,[r4]
  84 0046 6FF34103 	 bfc r3,#1,#1
  85 004a 2370     	 strb r3,[r4]
  86              	.L6:
 752:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
  87              	 .loc 1 752 0
  88 004c 2378     	 ldrb r3,[r4]
  89 004e 43F00103 	 orr r3,r3,#1
  90 0052 2370     	 strb r3,[r4]
  91              	.LBE69:
  92              	.LBE68:
 786:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = pdTRUE;
  93              	 .loc 1 786 0
  94 0054 0120     	 movs r0,#1
  95 0056 38BD     	 pop {r3,r4,r5,pc}
  96              	.LVL5:
  97              	.L7:
 770:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
  98              	 .loc 1 770 0
  99 0058 0020     	 movs r0,#0
 100              	.LVL6:
 101 005a 38BD     	 pop {r3,r4,r5,pc}
 102              	.LVL7:
 103              	.L8:
 787:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 788:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 789:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 790:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = pdFALSE;
 104              	 .loc 1 790 0
 105 005c 0020     	 movs r0,#0
 106              	.LVL8:
 791:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 792:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 793:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 794:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
 795:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 107              	 .loc 1 795 0
 108 005e 38BD     	 pop {r3,r4,r5,pc}
 109              	 .cfi_endproc
 110              	.LFE59:
 112              	 .section .text.xIsCallingFromIPTask,"ax",%progbits
 113              	 .align 2
 114              	 .global xIsCallingFromIPTask
 115              	 .thumb
 116              	 .thumb_func
 118              	xIsCallingFromIPTask:
 119              	.LFB53:
 564:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn;
 120              	 .loc 1 564 0
 121              	 .cfi_startproc
 122              	 
 123              	 
 124 0000 08B5     	 push {r3,lr}
 125              	.LCFI1:
 126              	 .cfi_def_cfa_offset 8
 127              	 .cfi_offset 3,-8
 128              	 .cfi_offset 14,-4
 567:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 129              	 .loc 1 567 0
 130 0002 FFF7FEFF 	 bl xTaskGetCurrentTaskHandle
 131              	.LVL9:
 132 0006 034B     	 ldr r3,.L12
 133 0008 1B68     	 ldr r3,[r3]
 577:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 134              	 .loc 1 577 0
 135 000a 8342     	 cmp r3,r0
 136 000c 14BF     	 ite ne
 137 000e 0020     	 movne r0,#0
 138              	.LVL10:
 139 0010 0120     	 moveq r0,#1
 140 0012 08BD     	 pop {r3,pc}
 141              	.L13:
 142              	 .align 2
 143              	.L12:
 144 0014 00000000 	 .word .LANCHOR0
 145              	 .cfi_endproc
 146              	.LFE53:
 148              	 .section .text.FreeRTOS_NetworkDownFromISR,"ax",%progbits
 149              	 .align 2
 150              	 .global FreeRTOS_NetworkDownFromISR
 151              	 .thumb
 152              	 .thumb_func
 154              	FreeRTOS_NetworkDownFromISR:
 155              	.LFB61:
 796:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 797:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 798:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_NetworkDown( void )
 799:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 800:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
 801:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const TickType_t xDontBlock = ( TickType_t ) 0;
 802:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 803:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Simply send the network task the appropriate event. */
 804:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 805:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 806:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Could not send the message, so it is still pending. */
 807:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdTRUE;
 808:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 809:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 810:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 811:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Message was sent so it is not pending. */
 812:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdFALSE;
 813:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 814:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 815:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	iptraceNETWORK_DOWN();
 816:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 817:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 818:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Utility function. Process Network Down event from ISR. */
 819:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t FreeRTOS_NetworkDownFromISR( void )
 820:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 156              	 .loc 1 820 0
 157              	 .cfi_startproc
 158              	 
 159              	 
 160 0000 00B5     	 push {lr}
 161              	.LCFI2:
 162              	 .cfi_def_cfa_offset 4
 163              	 .cfi_offset 14,-4
 164 0002 83B0     	 sub sp,sp,#12
 165              	.LCFI3:
 166              	 .cfi_def_cfa_offset 16
 821:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
 822:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 167              	 .loc 1 822 0
 168 0004 0023     	 movs r3,#0
 169 0006 02AA     	 add r2,sp,#8
 170 0008 42F8043D 	 str r3,[r2,#-4]!
 823:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 824:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Simply send the network task the appropriate event. */
 825:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xQueueSendToBackFromISR( xNetworkEventQueue, &xNetworkDownEvent, &xHigherPriorityTaskWoken ) !
 171              	 .loc 1 825 0
 172 000c 0749     	 ldr r1,.L18
 173 000e 0868     	 ldr r0,[r1]
 174 0010 0749     	 ldr r1,.L18+4
 175 0012 FFF7FEFF 	 bl xQueueGenericSendFromISR
 176              	.LVL11:
 177 0016 0128     	 cmp r0,#1
 826:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 827:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdTRUE;
 178              	 .loc 1 827 0
 179 0018 14BF     	 ite ne
 180 001a 0122     	 movne r2,#1
 828:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 829:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 830:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 831:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdFALSE;
 181              	 .loc 1 831 0
 182 001c 0022     	 moveq r2,#0
 183 001e 054B     	 ldr r3,.L18+8
 184 0020 1A60     	 str r2,[r3]
 832:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 833:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 834:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	iptraceNETWORK_DOWN();
 835:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 836:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xHigherPriorityTaskWoken;
 837:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 185              	 .loc 1 837 0
 186 0022 0198     	 ldr r0,[sp,#4]
 187 0024 03B0     	 add sp,sp,#12
 188              	.LCFI4:
 189              	 .cfi_def_cfa_offset 4
 190              	 
 191 0026 5DF804FB 	 ldr pc,[sp],#4
 192              	.L19:
 193 002a 00BF     	 .align 2
 194              	.L18:
 195 002c 00000000 	 .word .LANCHOR1
 196 0030 00000000 	 .word .LANCHOR2
 197 0034 00000000 	 .word .LANCHOR3
 198              	 .cfi_endproc
 199              	.LFE61:
 201              	 .section .text.FreeRTOS_GetUDPPayloadBuffer,"ax",%progbits
 202              	 .align 2
 203              	 .global FreeRTOS_GetUDPPayloadBuffer
 204              	 .thumb
 205              	 .thumb_func
 207              	FreeRTOS_GetUDPPayloadBuffer:
 208              	.LFB62:
 838:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 839:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 840:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void *FreeRTOS_GetUDPPayloadBuffer( size_t uxRequestedSizeBytes, TickType_t uxBlockTimeTicks )
 841:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 209              	 .loc 1 841 0
 210              	 .cfi_startproc
 211              	 
 212              	 
 213              	.LVL12:
 214 0000 10B5     	 push {r4,lr}
 215              	.LCFI5:
 216              	 .cfi_def_cfa_offset 8
 217              	 .cfi_offset 4,-8
 218              	 .cfi_offset 14,-4
 219              	.LVL13:
 842:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 843:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void *pvReturn;
 844:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** TickType_t uxBlockTime = uxBlockTimeTicks;
 845:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 846:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Cap the block time.  The reason for this is explained where
 847:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined (assuming an official
 848:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	FreeRTOSIPConfig.h header file is being used). */
 849:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( uxBlockTime > ( ( TickType_t ) ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS ) )
 850:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 851:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxBlockTime = ( ( TickType_t ) ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS );
 852:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 853:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 854:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Obtain a network buffer with the required amount of storage. */
 855:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + uxRequestedSizeBytes, 
 220              	 .loc 1 855 0
 221 0002 00F12A04 	 add r4,r0,#42
 222 0006 2046     	 mov r0,r4
 223              	.LVL14:
 224 0008 41F28833 	 movw r3,#5000
 225 000c 9942     	 cmp r1,r3
 226 000e 28BF     	 it cs
 227 0010 1946     	 movcs r1,r3
 228              	.LVL15:
 229 0012 FFF7FEFF 	 bl pxGetNetworkBufferWithDescriptor
 230              	.LVL16:
 856:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 857:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxNetworkBuffer != NULL )
 231              	 .loc 1 857 0
 232 0016 18B1     	 cbz r0,.L22
 858:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 859:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Set the actual packet size in case a bigger buffer was returned. */
 860:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNetworkBuffer->xDataLength = sizeof( UDPPacket_t ) + uxRequestedSizeBytes;
 233              	 .loc 1 860 0
 234 0018 C461     	 str r4,[r0,#28]
 861:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Skip 3 headers. */
 862:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pvReturn = &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( UDPPacket_t ) ] );
 235              	 .loc 1 862 0
 236 001a 8069     	 ldr r0,[r0,#24]
 237              	.LVL17:
 238 001c 2A30     	 adds r0,r0,#42
 239              	.LVL18:
 240 001e 10BD     	 pop {r4,pc}
 241              	.LVL19:
 242              	.L22:
 863:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 864:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 865:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 866:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pvReturn = NULL;
 243              	 .loc 1 866 0
 244 0020 0020     	 movs r0,#0
 245              	.LVL20:
 867:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 868:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 869:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return ( void * ) pvReturn;
 870:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 246              	 .loc 1 870 0
 247 0022 10BD     	 pop {r4,pc}
 248              	 .cfi_endproc
 249              	.LFE62:
 251              	 .section .text.pxDuplicateNetworkBufferWithDescriptor,"ax",%progbits
 252              	 .align 2
 253              	 .global pxDuplicateNetworkBufferWithDescriptor
 254              	 .thumb
 255              	 .thumb_func
 257              	pxDuplicateNetworkBufferWithDescriptor:
 258              	.LFB63:
 871:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 872:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 873:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t 
 874:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	size_t uxNewLength )
 875:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 259              	 .loc 1 875 0
 260              	 .cfi_startproc
 261              	 
 262              	 
 263              	.LVL21:
 264 0000 70B5     	 push {r4,r5,r6,lr}
 265              	.LCFI6:
 266              	 .cfi_def_cfa_offset 16
 267              	 .cfi_offset 4,-16
 268              	 .cfi_offset 5,-12
 269              	 .cfi_offset 6,-8
 270              	 .cfi_offset 14,-4
 271 0002 0546     	 mov r5,r0
 272 0004 0E46     	 mov r6,r1
 876:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t * pxNewBuffer;
 877:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 878:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
 879:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	The transmit routine wants to have ownership of the network buffer
 880:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	descriptor, because it will pass the buffer straight to DMA. */
 881:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 273              	 .loc 1 881 0
 274 0006 0846     	 mov r0,r1
 275              	.LVL22:
 276 0008 0021     	 movs r1,#0
 277              	.LVL23:
 278 000a FFF7FEFF 	 bl pxGetNetworkBufferWithDescriptor
 279              	.LVL24:
 882:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 883:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxNewBuffer != NULL )
 280              	 .loc 1 883 0
 281 000e 0446     	 mov r4,r0
 282 0010 58B1     	 cbz r0,.L25
 884:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 885:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Set the actual packet size in case a bigger buffer than requested
 886:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		was returned. */
 887:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer->xDataLength = uxNewLength;
 283              	 .loc 1 887 0
 284 0012 C661     	 str r6,[r0,#28]
 888:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 889:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Copy the original packet information. */
 890:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 285              	 .loc 1 890 0
 286 0014 6B69     	 ldr r3,[r5,#20]
 287 0016 4361     	 str r3,[r0,#20]
 891:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 288              	 .loc 1 891 0
 289 0018 2B8C     	 ldrh r3,[r5,#32]
 290 001a 0384     	 strh r3,[r0,#32]
 892:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 291              	 .loc 1 892 0
 292 001c 6B8C     	 ldrh r3,[r5,#34]
 293 001e 4384     	 strh r3,[r0,#34]
 893:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuf
 294              	 .loc 1 893 0
 295 0020 8069     	 ldr r0,[r0,#24]
 296              	.LVL25:
 297 0022 A969     	 ldr r1,[r5,#24]
 298 0024 EA69     	 ldr r2,[r5,#28]
 299 0026 FFF7FEFF 	 bl memcpy
 300              	.LVL26:
 301              	.L25:
 894:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 895:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 896:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return pxNewBuffer;
 897:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 302              	 .loc 1 897 0
 303 002a 2046     	 mov r0,r4
 304 002c 70BD     	 pop {r4,r5,r6,pc}
 305              	 .cfi_endproc
 306              	.LFE63:
 308 002e 00BF     	 .section .text.pxUDPPayloadBuffer_to_NetworkBuffer,"ax",%progbits
 309              	 .align 2
 310              	 .global pxUDPPayloadBuffer_to_NetworkBuffer
 311              	 .thumb
 312              	 .thumb_func
 314              	pxUDPPayloadBuffer_to_NetworkBuffer:
 315              	.LFB64:
 898:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 899:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 900:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigZERO_COPY_TX_DRIVER != 0 ) || ( ipconfigZERO_COPY_RX_DRIVER != 0 )
 901:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 902:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxPacketBuffer_to_NetworkBuffer( const void *pvBuffer )
 903:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 904:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	const uint8_t *pucBuffer;
 905:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxResult;
 906:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 907:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pvBuffer == NULL )
 908:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 909:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxResult = NULL;
 910:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 911:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 912:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 913:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Obtain the network buffer from the zero copy pointer. */
 914:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pucBuffer = ipPOINTER_CAST( const uint8_t *, pvBuffer );
 915:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 916:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The input here is a pointer to a payload buffer.  Subtract the
 917:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			size of the header in the network buffer, usually 8 + 2 bytes. */
 918:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pucBuffer -= ipBUFFER_PADDING;
 919:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 920:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Here a pointer was placed to the network descriptor.  As a
 921:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pointer is dereferenced, make sure it is well aligned. */
 922:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( ( ( size_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1U ) ) == ( size_t ) 0U )
 923:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 924:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxResult = * ( ipPOINTER_CAST( NetworkBufferDescriptor_t **, pucBuffer ) );
 925:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 926:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else
 927:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 928:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxResult = NULL;
 929:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 930:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 931:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 932:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return pxResult;
 933:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 934:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 935:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigZERO_COPY_TX_DRIVER != 0 */
 936:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 937:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 938:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
 939:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 316              	 .loc 1 939 0
 317              	 .cfi_startproc
 318              	 
 319              	 
 320              	 
 321              	.LVL27:
 940:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const uint8_t *pucBuffer;
 941:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxResult;
 942:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 943:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pvBuffer == NULL )
 322              	 .loc 1 943 0
 323 0000 28B1     	 cbz r0,.L29
 324              	.LVL28:
 944:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 945:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxResult = NULL;
 946:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 947:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 948:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 949:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Obtain the network buffer from the zero copy pointer. */
 950:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucBuffer = ipPOINTER_CAST( const uint8_t *, pvBuffer );
 951:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 952:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The input here is a pointer to a payload buffer.  Subtract
 953:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the total size of a UDP/IP header plus the size of the header in
 954:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the network buffer, usually 8 + 2 bytes. */
 955:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucBuffer -= ( sizeof( UDPPacket_t ) + ( ( size_t ) ipBUFFER_PADDING ) );
 956:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 957:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Here a pointer was placed to the network descriptor,
 958:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		As a pointer is dereferenced, make sure it is well aligned */
 959:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ( ( ( size_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1U ) ) == 0U )
 325              	 .loc 1 959 0
 326 0002 10F0030F 	 tst r0,#3
 327 0006 04D1     	 bne .L30
 960:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 961:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The following statement may trigger a:
 962:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			warning: cast increases required alignment of target type [-Wcast-align].
 963:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			It has been confirmed though that the alignment is suitable. */
 964:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxResult = * ( ( const NetworkBufferDescriptor_t **) pucBuffer );
 328              	 .loc 1 964 0
 329 0008 50F8340C 	 ldr r0,[r0,#-52]
 330              	.LVL29:
 331 000c 7047     	 bx lr
 332              	.LVL30:
 333              	.L29:
 945:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 334              	 .loc 1 945 0
 335 000e 0020     	 movs r0,#0
 336              	.LVL31:
 337 0010 7047     	 bx lr
 338              	.LVL32:
 339              	.L30:
 965:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 966:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 967:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 968:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxResult = NULL;
 340              	 .loc 1 968 0
 341 0012 0020     	 movs r0,#0
 342              	.LVL33:
 969:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 970:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 971:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 972:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return pxResult;
 973:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 343              	 .loc 1 973 0
 344 0014 7047     	 bx lr
 345              	 .cfi_endproc
 346              	.LFE64:
 348 0016 00BF     	 .section .text.pxRAWPayloadBuffer_to_NetworkBuffer,"ax",%progbits
 349              	 .align 2
 350              	 .global pxRAWPayloadBuffer_to_NetworkBuffer
 351              	 .thumb
 352              	 .thumb_func
 354              	pxRAWPayloadBuffer_to_NetworkBuffer:
 355              	.LFB65:
 974:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 975:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 976:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxRAWPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
 977:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 356              	 .loc 1 977 0
 357              	 .cfi_startproc
 358              	 
 359              	 
 360              	 
 361              	.LVL34:
 978:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const uint8_t *pucBuffer;
 979:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxResult;
 980:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 981:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pvBuffer == NULL )
 362              	 .loc 1 981 0
 363 0000 28B1     	 cbz r0,.L33
 364              	.LVL35:
 982:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 983:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxResult = NULL;
 984:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 985:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 986:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 987:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Obtain the network buffer from the zero copy pointer. */
 988:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucBuffer = ipPOINTER_CAST( const uint8_t *, pvBuffer );
 989:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 990:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The input here is a pointer to a payload buffer.  Subtract
 991:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			the total size of a RAW/IP header plus the size of the header in
 992:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			the network buffer, usually 8 + 2 bytes. */
 993:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucBuffer -= ( sizeof( IPPacket_t ) + ( ( size_t ) ipBUFFER_PADDING ) );
 994:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 995:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Here a pointer was placed to the network descriptor,
 996:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			As a pointer is dereferenced, make sure it is well aligned */
 997:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ( ( ( size_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1U ) ) == 0U )
 365              	 .loc 1 997 0
 366 0002 10F0030F 	 tst r0,#3
 367 0006 04D1     	 bne .L34
 998:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 999:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The following statement may trigger a:
1000:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				warning: cast increases required alignment of target type [-Wcast-align].
1001:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				It has been confirmed though that the alignment is suitable. */
1002:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxResult = * ( ( const NetworkBufferDescriptor_t **) pucBuffer );
 368              	 .loc 1 1002 0
 369 0008 50F82C0C 	 ldr r0,[r0,#-44]
 370              	.LVL36:
 371 000c 7047     	 bx lr
 372              	.LVL37:
 373              	.L33:
 983:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 374              	 .loc 1 983 0
 375 000e 0020     	 movs r0,#0
 376              	.LVL38:
 377 0010 7047     	 bx lr
 378              	.LVL39:
 379              	.L34:
1003:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1004:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
1005:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1006:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxResult = NULL;
 380              	 .loc 1 1006 0
 381 0012 0020     	 movs r0,#0
 382              	.LVL40:
1007:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1008:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1009:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1010:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return pxResult;
1011:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 383              	 .loc 1 1011 0
 384 0014 7047     	 bx lr
 385              	 .cfi_endproc
 386              	.LFE65:
 388 0016 00BF     	 .section .text.FreeRTOS_ReleaseUDPPayloadBuffer,"ax",%progbits
 389              	 .align 2
 390              	 .global FreeRTOS_ReleaseUDPPayloadBuffer
 391              	 .thumb
 392              	 .thumb_func
 394              	FreeRTOS_ReleaseUDPPayloadBuffer:
 395              	.LFB66:
1012:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1013:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1014:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_ReleaseUDPPayloadBuffer( void const * pvBuffer )
1015:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 396              	 .loc 1 1015 0
 397              	 .cfi_startproc
 398              	 
 399              	 
 400              	.LVL41:
 401 0000 08B5     	 push {r3,lr}
 402              	.LCFI7:
 403              	 .cfi_def_cfa_offset 8
 404              	 .cfi_offset 3,-8
 405              	 .cfi_offset 14,-4
1016:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 406              	 .loc 1 1016 0
 407 0002 FFF7FEFF 	 bl pxUDPPayloadBuffer_to_NetworkBuffer
 408              	.LVL42:
 409 0006 FFF7FEFF 	 bl vReleaseNetworkBufferAndDescriptor
 410              	.LVL43:
 411 000a 08BD     	 pop {r3,pc}
 412              	 .cfi_endproc
 413              	.LFE66:
 415              	 .section .text.FreeRTOS_ReleaseRAWPayloadBuffer,"ax",%progbits
 416              	 .align 2
 417              	 .global FreeRTOS_ReleaseRAWPayloadBuffer
 418              	 .thumb
 419              	 .thumb_func
 421              	FreeRTOS_ReleaseRAWPayloadBuffer:
 422              	.LFB67:
1017:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1018:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1019:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1020:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_ReleaseRAWPayloadBuffer( void const * pvBuffer )
1021:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 423              	 .loc 1 1021 0
 424              	 .cfi_startproc
 425              	 
 426              	 
 427              	.LVL44:
 428 0000 08B5     	 push {r3,lr}
 429              	.LCFI8:
 430              	 .cfi_def_cfa_offset 8
 431              	 .cfi_offset 3,-8
 432              	 .cfi_offset 14,-4
1022:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	vReleaseNetworkBufferAndDescriptor( pxRAWPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 433              	 .loc 1 1022 0
 434 0002 FFF7FEFF 	 bl pxRAWPayloadBuffer_to_NetworkBuffer
 435              	.LVL45:
 436 0006 FFF7FEFF 	 bl vReleaseNetworkBufferAndDescriptor
 437              	.LVL46:
 438 000a 08BD     	 pop {r3,pc}
 439              	 .cfi_endproc
 440              	.LFE67:
 442              	 .section .text.FreeRTOS_IPInit,"ax",%progbits
 443              	 .align 2
 444              	 .global FreeRTOS_IPInit
 445              	 .thumb
 446              	 .thumb_func
 448              	FreeRTOS_IPInit:
 449              	.LFB68:
1023:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1024:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1025:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1026:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't 
1027:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was 
1028:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  As that bug has been repaired, there is not an urgent reason to warn.
1029:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  It is better though to use the advised priority scheme. */
1030:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t u
1031:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 450              	 .loc 1 1031 0
 451              	 .cfi_startproc
 452              	 
 453              	 
 454              	.LVL47:
 455 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 456              	.LCFI9:
 457              	 .cfi_def_cfa_offset 24
 458              	 .cfi_offset 4,-24
 459              	 .cfi_offset 5,-20
 460              	 .cfi_offset 6,-16
 461              	 .cfi_offset 7,-12
 462              	 .cfi_offset 8,-8
 463              	 .cfi_offset 14,-4
 464 0004 82B0     	 sub sp,sp,#8
 465              	.LCFI10:
 466              	 .cfi_def_cfa_offset 32
 467 0006 089F     	 ldr r7,[sp,#32]
 468              	.LVL48:
 469              	.LBB82:
 470              	.LBB83:
1032:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn = pdFALSE;
1033:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1034:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* This function should only be called once. */
1035:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
1036:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xNetworkEventQueue == NULL );
1037:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xIPTaskHandle == NULL );
1038:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1039:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#ifndef _lint
1040:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1041:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check if MTU is big enough. */
1042:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		configASSERT( ( ( size_t ) ipconfigNETWORK_MTU ) >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADE
1043:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check structure packing is correct. */
1044:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		configASSERT( sizeof( EthernetHeader_t ) == ipEXPECTED_EthernetHeader_t_SIZE );
1045:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		configASSERT( sizeof( ARPHeader_t ) == ipEXPECTED_ARPHeader_t_SIZE );
1046:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		configASSERT( sizeof( IPHeader_t ) == ipEXPECTED_IPHeader_t_SIZE );
1047:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
1048:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );
1049:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1050:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
1051:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Attempt to create the queue used to communicate with the IP task. */
1052:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) siz
1053:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xNetworkEventQueue != NULL );
1054:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1055:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xNetworkEventQueue != NULL )
1056:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1057:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if ( configQUEUE_REGISTRY_SIZE > 0 )
1058:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1059:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* A queue registry is normally used to assist a kernel aware
1060:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			debugger.  If one is in use then it will be helpful for the debugger
1061:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			to show information about the network event queue. */
1062:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
1063:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1064:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif /* configQUEUE_REGISTRY_SIZE */
1065:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1066:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xNetworkBuffersInitialise() == pdPASS )
1067:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1068:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Store the local IP and MAC address. */
1069:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[
1070:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMa
1071:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGateway
1072:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNS
1073:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddres
1074:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1075:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
1076:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1077:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if ipconfigUSE_DHCP == 1
1078:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1079:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The IP address is not set until DHCP completes. */
1080:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
1081:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1082:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#else
1083:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1084:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The IP address is set from the value passed in. */
1085:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
1086:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1087:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Added to prevent ARP flood to gateway.  Ensure the
1088:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				gateway is on the same subnet as the IP	address. */
1089:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( xNetworkAddressing.ulGatewayAddress != 0UL )
1090:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1091:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetwork
1092:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1093:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1094:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif /* ipconfigUSE_DHCP == 1 */
1095:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1096:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The MAC address is stored in the start of the default packet
1097:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			header fragment, which is used when sending UDP packets. */
1098:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
1099:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1100:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Prepare the sockets interface. */
1101:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vNetworkSocketsInit();
1102:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1103:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Create the task that processes Ethernet and stack events. */
1104:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = xTaskCreate( prvIPTask,
1105:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								   "IP-task",
1106:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								   ( uint16_t )ipconfigIP_TASK_STACK_SIZE_WORDS,
1107:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								   NULL,
1108:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								   ( UBaseType_t )ipconfigIP_TASK_PRIORITY,
1109:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								   &( xIPTaskHandle ) );
1110:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1111:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
1112:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1113:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n") );
1114:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1115:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Clean up. */
1116:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vQueueDelete( xNetworkEventQueue );
1117:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkEventQueue = NULL;
1118:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1119:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1120:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1121:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1122:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
1123:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1124:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1125:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
1126:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1127:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1128:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1129:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_GetAddressConfiguration( uint32_t *pulIPAddress,
1130:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 									   uint32_t *pulNetMask,
1131:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 									   uint32_t *pulGatewayAddress,
1132:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 									   uint32_t *pulDNSServerAddress )
1133:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1134:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Return the address configuration to the caller. */
1135:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1136:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulIPAddress != NULL )
1137:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1138:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
1139:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1140:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1141:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulNetMask != NULL )
1142:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1143:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulNetMask = xNetworkAddressing.ulNetMask;
1144:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1145:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1146:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulGatewayAddress != NULL )
1147:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1148:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulGatewayAddress = xNetworkAddressing.ulGatewayAddress;
1149:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1150:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1151:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulDNSServerAddress != NULL )
1152:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1153:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulDNSServerAddress = xNetworkAddressing.ulDNSServerAddress;
1154:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1155:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1156:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1157:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1158:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetAddressConfiguration( const uint32_t *pulIPAddress,
1159:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 									   const uint32_t *pulNetMask,
1160:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 									   const uint32_t *pulGatewayAddress,
1161:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 									   const uint32_t *pulDNSServerAddress )
1162:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1163:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Update the address configuration. */
1164:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1165:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulIPAddress != NULL )
1166:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1167:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*ipLOCAL_IP_ADDRESS_POINTER = *pulIPAddress;
1168:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1169:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1170:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulNetMask != NULL )
1171:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1172:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkAddressing.ulNetMask = *pulNetMask;
1173:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1174:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1175:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulGatewayAddress != NULL )
1176:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1177:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkAddressing.ulGatewayAddress = *pulGatewayAddress;
1178:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1179:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1180:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulDNSServerAddress != NULL )
1181:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1182:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkAddressing.ulDNSServerAddress = *pulDNSServerAddress;
1183:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1184:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1185:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1186:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1187:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1188:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1189:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t FreeRTOS_SendPingRequest( uint32_t ulIPAddress, size_t uxNumberOfBytesToSend, TickType_
1190:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1191:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxNetworkBuffer;
1192:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ICMPHeader_t *pxICMPHeader;
1193:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	EthernetHeader_t *pxEthernetHeader;
1194:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xReturn = pdFAIL;
1195:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static uint16_t usSequenceNumber = 0;
1196:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t *pucChar;
1197:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	size_t uxTotalLength;
1198:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
1199:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1200:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxTotalLength = uxNumberOfBytesToSend + sizeof( ICMPPacket_t );
1201:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxTotalLength, uxBlockTimeTicks );
1202:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1203:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pxNetworkBuffer != NULL )
1204:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1205:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		BaseType_t xEnoughSpace;
1206:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1207:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( uxNumberOfBytesToSend < ( ipconfigNETWORK_MTU - ( sizeof( IPHeader_t ) + sizeof( ICMPHeader_
1208:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1209:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xEnoughSpace = pdTRUE;
1210:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1211:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else
1212:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1213:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xEnoughSpace = pdFALSE;
1214:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1215:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( uxGetNumberOfFreeNetworkBuffers() >= 3U ) && ( uxNumberOfBytesToSend >= 1U ) && ( xEnoughS
1216:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1217:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer
1218:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxEthernetHeader->usFrameType = ipIPv4_FRAME_TYPE;
1219:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				
1220:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader = ipCAST_PTR_TO_TYPE_PTR( ICMPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipI
1221:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usSequenceNumber++;
1222:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1223:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Fill in the basic header information. */
1224:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->ucTypeOfMessage = ipICMP_ECHO_REQUEST;
1225:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->ucTypeOfService = 0;
1226:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->usIdentifier = usSequenceNumber;
1227:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->usSequenceNumber = usSequenceNumber;
1228:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1229:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Find the start of the data. */
1230:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pucChar = ( uint8_t * ) pxICMPHeader;
1231:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pucChar = &(pucChar[ sizeof( ICMPHeader_t ) ] );
1232:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1233:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Just memset the data to a fixed value. */
1234:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( void ) memset( pucChar, ( int ) ipECHO_DATA_FILL_BYTE, uxNumberOfBytesToSend );
1235:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1236:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The message is complete, IP and checksum's are handled by
1237:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vProcessGeneratedUDPPacket */
1238:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = FREERTOS_SO_UDPCKSUM_OUT;
1239:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->ulIPAddress = ulIPAddress;
1240:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->usPort = ipPACKET_CONTAINS_ICMP_DATA;
1241:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* xDataLength is the size of the total packet, including the Ethernet header. */
1242:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->xDataLength = uxTotalLength;
1243:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1244:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Send to the stack. */
1245:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xStackTxEvent.pvData = pxNetworkBuffer;
1246:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1247:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( xSendEventStructToIPTask( &( xStackTxEvent ), uxBlockTimeTicks ) != pdPASS )
1248:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1249:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
1250:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
1251:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1252:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				else
1253:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1254:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xReturn = ( BaseType_t ) usSequenceNumber;
1255:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1256:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1257:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1258:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
1259:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1260:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The requested number of bytes will not fit in the available space
1261:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			in the network buffer. */
1262:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1263:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1264:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return xReturn;
1265:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1266:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1267:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
1268:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1269:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1270:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
1271:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1272:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** IPStackEvent_t xEventMessage;
1273:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const TickType_t xDontBlock = ( TickType_t ) 0;
1274:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1275:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xEventMessage.eEventType = eEvent;
1276:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xEventMessage.pvData = ( void* )NULL;
1277:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1278:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
1279:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1280:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1281:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1282:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xSendEventStructToIPTask( const IPStackEvent_t *pxEvent, TickType_t uxTimeout )
1283:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1284:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn, xSendMessage;
1285:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** TickType_t uxUseTimeout = uxTimeout;
1286:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1287:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
1288:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1289:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Only allow eNetworkDownEvent events if the IP task is not ready
1290:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		yet.  Not going to attempt to send the message so the send failed. */
1291:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdFAIL;
1292:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1293:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1294:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1295:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSendMessage = pdTRUE;
1296:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1297:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigUSE_TCP == 1 )
1298:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1299:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( pxEvent->eEventType == eTCPTimerEvent )
1300:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1301:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* TCP timer events are sent to wake the timer task when
1302:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xTCPTimer has expired, but there is no point sending them if the
1303:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				IP task is already awake processing other message. */
1304:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
1305:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1306:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
1307:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1308:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Not actually going to send the message but this is not a
1309:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					failure as the message didn't need to be sent. */
1310:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xSendMessage = pdFALSE;
1311:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1312:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1313:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1314:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif /* ipconfigUSE_TCP */
1315:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1316:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSendMessage != pdFALSE )
1317:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1318:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The IP task cannot block itself while waiting for itself to
1319:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			respond. */
1320:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
1321:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1322:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				uxUseTimeout = ( TickType_t ) 0;
1323:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1324:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1325:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
1326:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1327:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xReturn == pdFAIL )
1328:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1329:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* A message should have been sent to the IP task, but wasn't. */
1330:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
1331:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				iptraceSTACK_TX_EVENT_LOST( pxEvent->eEventType );
1332:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1333:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1334:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
1335:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1336:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* It was not necessary to send the message to process the event so
1337:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			even though the message was not sent the call was successful. */
1338:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = pdPASS;
1339:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1340:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1341:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1342:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
1343:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1344:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1345:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1346:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
1347:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1348:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eReturn;
1349:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const EthernetHeader_t *pxEthernetHeader;
1350:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1351:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Map the buffer onto Ethernet Header struct for easy access to fields. */
1352:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pucEthernetBuffer );
1353:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1354:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( memcmp( ipLOCAL_MAC_ADDRESS, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress
1355:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1356:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet was directed to this node - process it. */
1357:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eProcessBuffer;
1358:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1359:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, size
1360:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1361:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet was a broadcast - process it. */
1362:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eProcessBuffer;
1363:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1364:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1365:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_LLMNR == 1 )
1366:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( memcmp( xLLMNR_MacAdress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAd
1367:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1368:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet is a request for LLMNR - process it. */
1369:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eProcessBuffer;
1370:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1371:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1372:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_LLMNR */
1373:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1374:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet was not a broadcast, or for this node, just release
1375:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the buffer without taking any other action. */
1376:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eReleaseBuffer;
1377:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1378:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1379:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
1380:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1381:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t usFrameType;
1382:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1383:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( eReturn == eProcessBuffer )
1384:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1385:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usFrameType = pxEthernetHeader->usFrameType;
1386:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usFrameType = FreeRTOS_ntohs( usFrameType );
1387:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1388:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( usFrameType <= 0x600U )
1389:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1390:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Not an Ethernet II frame. */
1391:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
1392:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1393:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1394:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1395:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */
1396:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1397:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return eReturn;
1398:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1399:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1400:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1401:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessNetworkDownEvent( void )
1402:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1403:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Stop the ARP timer while there is no network. */
1404:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xARPTimer.bActive = pdFALSE_UNSIGNED;
1405:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1406:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if ipconfigUSE_NETWORK_EVENT_HOOK == 1
1407:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1408:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		static BaseType_t xCallEventHook = pdFALSE;
1409:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1410:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The first network down event is generated by the IP stack itself to
1411:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		initialise the network hardware, so do not call the network down event
1412:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the first time through. */
1413:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xCallEventHook == pdTRUE )
1414:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1415:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vApplicationIPNetworkEventHook( eNetworkDown );
1416:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1417:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xCallEventHook = pdTRUE;
1418:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1419:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
1420:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1421:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122, 
1422:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	treat network down as a "delivery problem" and flush the ARP cache for this
1423:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	interface. */
1424:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	FreeRTOS_ClearARP( );
1425:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1426:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* The network has been disconnected (or is being initialised for the first
1427:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	time).  Perform whatever hardware processing is necessary to bring it up
1428:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	again, or wait for it to be available again.  This is hardware dependent. */
1429:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xNetworkInterfaceInitialise() != pdPASS )
1430:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1431:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Ideally the network interface initialisation function will only
1432:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return when the network is available.  In case this is not the case,
1433:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		wait a while before retrying the initialisation. */
1434:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
1435:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		FreeRTOS_NetworkDown();
1436:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1437:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1438:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1439:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Set remaining time to 0 so it will become active immediately. */
1440:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if ipconfigUSE_DHCP == 1
1441:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1442:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The network is not up until DHCP has completed. */
1443:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vDHCPProcess( pdTRUE );
1444:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( void ) xSendEventToIPTask( eDHCPEvent );
1445:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1446:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#else
1447:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1448:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Perform any necessary 'network up' processing. */
1449:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vIPNetworkUpCalls();
1450:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1451:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif
1452:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1453:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1454:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1455:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1456:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void vIPNetworkUpCalls( void )
1457:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1458:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkUp = pdTRUE;
1459:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1460:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
1461:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1462:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vApplicationIPNetworkEventHook( eNetworkUp );
1463:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1464:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_NETWORK_EVENT_HOOK */
1465:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1466:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDNS_USE_CALLBACKS != 0 )
1467:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1468:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The following function is declared in FreeRTOS_DNS.c	and 'private' to
1469:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		this library */
1470:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		extern void vDNSInitialise( void );
1471:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vDNSInitialise();
1472:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1473:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
1474:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1475:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Set remaining time to 0 so it will become active immediately. */
1476:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
1477:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1478:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1479:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1480:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
1481:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1482:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const EthernetHeader_t *pxEthernetHeader;
1483:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eReturned = eReleaseBuffer;
1484:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1485:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( pxNetworkBuffer != NULL );
1486:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1487:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Interpret the Ethernet frame. */
1488:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
1489:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1490:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
1491:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1492:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Map the buffer onto the Ethernet Header struct for easy access to the fields. */
1493:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthe
1494:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1495:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The condition "eReturned == eProcessBuffer" must be true. */
1496:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
1497:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( eReturned == eProcessBuffer )
1498:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif
1499:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1500:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Interpret the received Ethernet packet. */
1501:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			switch( pxEthernetHeader->usFrameType )
1502:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1503:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipARP_FRAME_TYPE:
1504:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The Ethernet frame contains an ARP packet. */
1505:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
1506:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1507:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					eReturned = eARPProcessPacket( ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthern
1508:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1509:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				else
1510:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1511:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					eReturned = eReleaseBuffer;
1512:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1513:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1514:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1515:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipIPv4_FRAME_TYPE:
1516:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The Ethernet frame contains an IP packet. */
1517:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
1518:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1519:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					eReturned = prvProcessIPPacket( ipCAST_PTR_TO_TYPE_PTR( IPPacket_t, pxNetworkBuffer->pucEthern
1520:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1521:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				else
1522:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1523:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					eReturned = eReleaseBuffer;
1524:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1525:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1526:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1527:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			default:
1528:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* No other packet types are handled.  Nothing to do. */
1529:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturned = eReleaseBuffer;
1530:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1531:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1532:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1533:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1534:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1535:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Perform any actions that resulted from processing the Ethernet frame. */
1536:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	switch( eReturned )
1537:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1538:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case eReturnEthernetFrame :
1539:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The Ethernet frame will have been updated (maybe it was
1540:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			an ARP request or a PING request?) and should be sent back to
1541:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			its source. */
1542:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
1543:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* parameter pdTRUE: the buffer must be released once
1544:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			the frame has been transmitted */
1545:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
1546:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1547:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case eFrameConsumed :
1548:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The frame is in use somewhere, don't release the buffer
1549:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			yet. */
1550:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
1551:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1552:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case eReleaseBuffer :
1553:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case eProcessBuffer :
1554:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		default :
1555:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The frame is not being used anywhere, and the
1556:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			NetworkBufferDescriptor_t structure containing the frame should
1557:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			just be	released back to the list of free buffers. */
1558:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
1559:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
1560:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1561:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1562:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1563:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1564:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
1565:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1566:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn;
1567:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
1568:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1569:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
1570:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1571:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdTRUE;
1572:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1573:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1574:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1575:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdFALSE;
1576:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1577:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
1578:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1579:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1580:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1581:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress, MACAddress_t *pxMACAddress )
1582:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1583:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
1584:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1585:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
1586:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
1587:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
1588:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU );	/* Use 7 bits. */
1589:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >>  8 ) & 0xffU );	/* Use 8 bits. */
1590:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP       ) & 0xffU );	/* Use 8 bits. */
1591:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1592:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1593:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1594:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
1595:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	const NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength )
1596:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1597:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eReturn = eProcessBuffer;
1598:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1599:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM =
1600:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
1601:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #else
1602:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* or else, the parameter won't be used and the function will be optimised
1603:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	away */
1604:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	( void ) pxIPPacket;
1605:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
1606:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1607:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
1608:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1609:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* In systems with a very small amount of RAM, it might be advantageous
1610:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		to have incoming messages checked earlier, by the network card driver.
1611:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		This method may decrease the usage of sparse network buffers. */
1612:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
1613:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1614:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Ensure that the incoming packet is not fragmented (only outgoing
1615:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			packets can be fragmented) as these are the only handled IP frames
1616:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			currently. */
1617:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
1618:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1619:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Can not handle, fragmented packet. */
1620:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
1621:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1622:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Test if the length of the IP-header is between 20 and 60 bytes,
1623:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			and if the IP-version is 4. */
1624:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
1625:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					 ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
1626:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1627:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Can not handle, unknown or invalid header version. */
1628:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
1629:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1630:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is the packet for this IP address? */
1631:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
1632:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it the global broadcast address 255.255.255.255 ? */
1633:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
1634:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it a specific broadcast address 192.168.1.255 ? */
1635:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
1636:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigUSE_LLMNR == 1 )
1637:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it the LLMNR multicast address? */
1638:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
1639:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif
1640:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Or (during DHCP negotiation) we have no IP-address yet? */
1641:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
1642:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1643:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Packet is not for this node, release it */
1644:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
1645:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1646:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else
1647:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1648:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Packet is not fragemented, destination is this device. */
1649:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1650:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1651:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
1652:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1653:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 )
1654:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1655:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Some drivers of NIC's with checksum-offloading will enable the above
1656:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		define, so that the checksum won't be checked again here */
1657:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if (eReturn == eProcessBuffer )
1658:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1659:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Is the IP header checksum correct? */
1660:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( pxIPHeader->ucProtocol != ( uint8_t ) ipPROTOCOL_ICMP ) &&
1661:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( usGenerateChecksum( 0U, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ( size_t ) uxHe
1662:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1663:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Check sum in IP-header not correct. */
1664:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
1665:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1666:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Is the upper-layer checksum (TCP/UDP/ICMP) correct? */
1667:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else if( usGenerateProtocolChecksum( ( uint8_t * )( pxNetworkBuffer->pucEthernetBuffer ), pxNetw
1668:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1669:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Protocol checksum not accepted. */
1670:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
1671:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1672:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else
1673:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1674:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The checksum of the received packet is OK. */
1675:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1676:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1677:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1678:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#else
1679:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1680:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1681:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if (eReturn == eProcessBuffer )
1682:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1683:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xCheckSizeFields( ( uint8_t * )( pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer->xDat
1684:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1685:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Some of the length checks were not successful. */
1686:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
1687:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1688:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1689:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1690:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
1691:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1692:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Check if this is a UDP packet without a checksum. */
1693:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if (eReturn == eProcessBuffer )
1694:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1695:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
1696:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				and so UDP packets carrying a protocol checksum of 0, will
1697:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				be dropped. */
1698:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1699:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Identify the next protocol. */
1700:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( pxIPPacket->xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
1701:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1702:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				ProtocolPacket_t *pxProtPack;
1703:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				const uint16_t *pusChecksum;
1704:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1705:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* pxProtPack will point to the offset were the protocols begin. */
1706:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxProtPack = ipCAST_PTR_TO_TYPE_PTR( ProtocolPacket_t, &( pxNetworkBuffer->pucEthernetBuffer[ 
1707:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pusChecksum = ( const uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
1708:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( *pusChecksum == ( uint16_t ) 0U )
1709:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
1710:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						#if( ipconfigHAS_PRINTF != 0 )
1711:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						{
1712:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						static BaseType_t xCount = 0;
1713:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1714:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							if( xCount < 5 )
1715:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							{
1716:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
1717:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 									FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
1718:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								xCount++;
1719:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							}
1720:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						}
1721:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						#endif	/* ( ipconfigHAS_PRINTF != 0 ) */
1722:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1723:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						/* Protocol checksum not accepted. */
1724:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						eReturn = eReleaseBuffer;
1725:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
1726:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1727:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1728:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1729:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 ) */
1730:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1731:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* to avoid warning unused parameters */
1732:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) uxHeaderLength;
1733:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1734:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
1735:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1736:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return eReturn;
1737:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1738:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1739:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1740:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * pxIPPacket, NetworkBufferDescripto
1741:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
1742:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eReturn;
1743:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
1744:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
1745:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
1746:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint8_t ucProtocol;
1747:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1748:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Bound the calculated header length: take away the Ethernet header size,
1749:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	then check if the IP header is claiming to be longer than the remaining
1750:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	total packet size. Also check for minimal header field length. */
1751:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
1752:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
1753:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1754:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eReleaseBuffer;
1755:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1756:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1757:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1758:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
1759:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check if the IP headers are acceptable and if it has our destination. */
1760:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
1761:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1762:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( eReturn == eProcessBuffer )
1763:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1764:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Are there IP-options. */
1765:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
1766:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1767:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The size of the IP-header is larger than 20 bytes.
1768:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				The extra space is used for IP-options. */
1769:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
1770:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1771:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* All structs of headers expect a IP header size of 20 bytes
1772:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					 * IP header options were included, we'll ignore them and cut them out. */
1773:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
1774:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* From: the previous start of UDP/ICMP/TCP data. */
1775:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					const uint8_t *pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( 
1776:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
1777:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					uint8_t *pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHead
1778:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* How many: total length minus the options and the lower headers. */
1779:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					const size_t  xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipS
1780:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1781:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					( void ) memmove( pucTarget, pucSource, xMoveLen );
1782:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxNetworkBuffer->xDataLength -= optlen;
1783:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1784:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
1785:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High ni
1786:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 														( ( ipSIZE_OF_IPv4_HEADER >> 2 ) & 0x0FU );
1787:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1788:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#else
1789:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1790:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* 'ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS' is not set, so packets carrying
1791:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					IP-options will be dropped. */
1792:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					eReturn = eReleaseBuffer;
1793:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1794:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif
1795:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1796:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1797:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( eReturn != eReleaseBuffer )
1798:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1799:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Add the IP and MAC addresses to the ARP table if they are not
1800:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				already there - otherwise refresh the age of the existing
1801:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				entry. */
1802:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
1803:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1804:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Refresh the ARP cache with the IP/MAC-address of the received
1805:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					packet. For UDP packets, this will be done later in
1806:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xProcessReceivedUDPPacket(), as soon as it's know that the message
1807:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					will be handled.  This will prevent the ARP cache getting
1808:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					overwritten with the IP address of useless broadcast packets. */
1809:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIP
1810:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1811:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				switch( ucProtocol )
1812:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1813:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					case ipPROTOCOL_RAW :
1814:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						/* IPPROTO_RAW socket is send only */
1815:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					break;
1816:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1817:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					case ipPROTOCOL_ICMP :
1818:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						/* The IP packet contained an ICMP frame.  Don't bother checking
1819:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						the ICMP checksum, as if it is wrong then the wrong data will
1820:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						also be returned, and the source of the ping will know something
1821:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						went wrong because it will not be able to validate what it
1822:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						receives. */
1823:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1824:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						{
1825:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
1826:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							{
1827:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								/* Map the buffer onto a ICMP-Packet struct to easily access the
1828:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								 * fields of ICMP packet. */
1829:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								ICMPPacket_t *pxICMPPacket = ipCAST_PTR_TO_TYPE_PTR( ICMPPacket_t, pxNetworkBuffer->pucEthe
1830:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
1831:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								{
1832:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 									eReturn = prvProcessICMPPacket( pxICMPPacket );
1833:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								}
1834:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							}
1835:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							else
1836:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							{
1837:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								eReturn = eReleaseBuffer;
1838:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							}
1839:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						}
1840:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						#endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1841:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						break;
1842:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1843:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					case ipPROTOCOL_UDP :
1844:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						{
1845:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						/* The IP packet contained a UDP frame. */
1846:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1847:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						/* Map the buffer onto a UDP-Packet struct to easily access the
1848:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						 * fields of UDP packet. */
1849:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						const UDPPacket_t *pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBu
1850:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						uint16_t usLength;
1851:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1852:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							/* Note the header values required prior to the checksum
1853:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							generation as the checksum pseudo header may clobber some of
1854:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							these values. */
1855:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							usLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength  );
1856:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							if ( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
1857:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								 ( ( ( size_t ) usLength ) >= sizeof( UDPHeader_t ) ) )
1858:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							{
1859:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							size_t uxPayloadSize_1, uxPayloadSize_2;
1860:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								/* Ensure that downstream UDP packet handling has the lesser
1861:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								of: the actual network buffer Ethernet frame length, or
1862:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								the sender's UDP packet header payload length, minus the
1863:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								size of the UDP header.
1864:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1865:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								The size of the UDP packet structure in this implementation
1866:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								includes the size of the Ethernet header, the size of
1867:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								the IP header, and the size of the UDP header. */
1868:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								uxPayloadSize_1 = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
1869:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
1870:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								if( uxPayloadSize_1 > uxPayloadSize_2 )
1871:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								{
1872:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 									pxNetworkBuffer->xDataLength = uxPayloadSize_2 + sizeof( UDPPacket_t );
1873:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								}
1874:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1875:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								/* Fields in pxNetworkBuffer (usPort, ulIPAddress) are network order. */
1876:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
1877:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
1878:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1879:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								/* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM:
1880:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								In some cases, the upper-layer checksum has been calculated
1881:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								by the NIC driver. */
1882:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1883:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								/* Pass the packet payload to the UDP sockets
1884:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								implementation. */
1885:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								if( xProcessReceivedUDPPacket( pxNetworkBuffer,
1886:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 															   pxUDPPacket->xUDPHeader.usDestinationPort ) == pdPASS )
1887:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								{
1888:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 									eReturn = eFrameConsumed;
1889:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								}
1890:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							}
1891:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							else
1892:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							{
1893:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								eReturn = eReleaseBuffer;
1894:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							}
1895:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						}
1896:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						break;
1897:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1898:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ipconfigUSE_TCP == 1
1899:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					case ipPROTOCOL_TCP :
1900:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						{
1901:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1902:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
1903:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							{
1904:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								eReturn = eFrameConsumed;
1905:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							}
1906:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1907:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							/* Setting this variable will cause xTCPTimerCheck()
1908:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							to be called just before the IP-task blocks. */
1909:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							xProcessedTCPMessage++;
1910:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						}
1911:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						break;
1912:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
1913:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					default	:
1914:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						/* Not a supported frame type. */
1915:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						break;
1916:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1917:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1918:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1919:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1920:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1921:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return eReturn;
1922:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
1923:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1924:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1925:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1926:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1927:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
1928:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1929:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ePingReplyStatus_t eStatus = eSuccess;
1930:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t usDataLength, usCount;
1931:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t *pucByte;
1932:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1933:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Find the total length of the IP packet. */
1934:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = pxICMPPacket->xIPHeader.usLength;
1935:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = FreeRTOS_ntohs( usDataLength );
1936:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1937:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Remove the length of the IP headers to obtain the length of the ICMP
1938:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		message itself. */
1939:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
1940:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1941:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Remove the length of the ICMP header, to obtain the length of
1942:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		data contained in the ping. */
1943:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
1944:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1945:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Checksum has already been checked before in prvProcessIPPacket */
1946:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1947:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Find the first byte of the data within the ICMP packet. */
1948:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucByte = ( uint8_t * ) pxICMPPacket;
1949:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
1950:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1951:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check each byte. */
1952:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		for( usCount = 0; usCount < usDataLength; usCount++ )
1953:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1954:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
1955:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1956:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eStatus = eInvalidData;
1957:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1958:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1959:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1960:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pucByte++;
1961:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1962:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1963:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Call back into the application to pass it the result. */
1964:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
1965:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1966:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1967:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
1968:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1969:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1970:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
1971:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1972:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
1973:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1974:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ICMPHeader_t *pxICMPHeader;
1975:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	IPHeader_t *pxIPHeader;
1976:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t usRequest;
1977:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1978:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxICMPHeader = &( pxICMPPacket->xICMPHeader );
1979:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPHeader = &( pxICMPPacket->xIPHeader );
1980:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1981:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* HT:endian: changed back */
1982:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		iptraceSENDING_PING_REPLY( pxIPHeader->ulSourceIPAddress );
1983:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1984:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The checksum can be checked here - but a ping reply should be
1985:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		returned even if the checksum is incorrect so the other end can
1986:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		tell that the ping was received - even if the ping reply contains
1987:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		invalid data. */
1988:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
1989:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
1990:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
1991:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1992:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Update the checksum because the ucTypeOfMessage member in the header
1993:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
1994:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usGenerateChecksum(). */
1995:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1996:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* due to compiler warning "integer operation result is out of range" */
1997:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1998:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usRequest = ( uint16_t ) ( ( uint16_t )ipICMP_ECHO_REQUEST << 8 );
1999:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2000:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
2001:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2002:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest + 1U );
2003:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2004:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2005:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2006:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest );
2007:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2008:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return eReturnEthernetFrame;
2009:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2010:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2011:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigREPLY_TO_INCOMING_PINGS == 1 */
2012:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2013:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2014:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
2015:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2016:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
2017:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2018:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	eFrameProcessingResult_t eReturn = eReleaseBuffer;
2019:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2020:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		iptraceICMP_PACKET_RECEIVED();
2021:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
2022:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2023:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipICMP_ECHO_REQUEST	:
2024:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
2025:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
2026:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
2027:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
2028:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
2029:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2030:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2031:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipICMP_ECHO_REPLY		:
2032:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
2033:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
2034:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					prvProcessICMPEchoReply( pxICMPPacket );
2035:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
2036:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
2037:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2038:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2039:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			default	:
2040:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Only ICMP echo packets are handled. */
2041:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2042:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2043:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2044:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return eReturn;
2045:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2046:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2047:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
2048:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2049:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2050:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 1 )
2051:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Although the driver will take care of checksum calculations,
2052:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	the IP-task will still check if the length fields are OK. */
2053:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static BaseType_t xCheckSizeFields( const uint8_t * const pucEthernetBuffer, size_t uxBufferLength
2054:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2055:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	size_t uxLength;
2056:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	const IPPacket_t * pxIPPacket;
2057:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	UBaseType_t uxIPHeaderLength;
2058:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	const ProtocolPacket_t *pxProtPack;
2059:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t ucProtocol;
2060:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t usLength;
2061:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t ucVersionHeaderLength;
2062:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xLocation = 0;
2063:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	size_t uxMinimumLength;
2064:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xResult = pdFAIL;
2065:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2066:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		do
2067:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2068:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
2069:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( uxBufferLength < sizeof( IPPacket_t ) )
2070:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2071:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xLocation = 1;
2072:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2073:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2074:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2075:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Map the buffer onto a IP-Packet struct to easily access the
2076:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * fields of the IP packet. */
2077:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
2078:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2079:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
2080:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Test if the length of the IP-header is between 20 and 60 bytes,
2081:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			and if the IP-version is 4. */
2082:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
2083:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
2084:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2085:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xLocation = 2;
2086:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2087:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2088:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
2089:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
2090:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2091:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Check if the complete IP-header is transferred. */
2092:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
2093:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2094:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xLocation = 3;
2095:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2096:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2097:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Check if the complete IP-header plus protocol data have been transferred: */
2098:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usLength = pxIPPacket->xIPHeader.usLength;
2099:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usLength = FreeRTOS_ntohs( usLength );
2100:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
2101:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2102:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xLocation = 4;
2103:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2104:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2105:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2106:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Identify the next protocol. */
2107:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
2108:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2109:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* If this IP packet header includes Options, then the following
2110:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			assignment results in a pointer into the protocol packet with the Ethernet
2111:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			and IP headers incorrectly aligned. However, either way, the "third"
2112:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			protocol (Layer 3 or 4) header will be aligned, which is the convenience
2113:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			of this calculation. */
2114:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Map the Buffer onto the Protocol Packet struct for easy access to the
2115:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * struct fields. */
2116:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHea
2117:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2118:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Switch on the Layer 3/4 protocol. */
2119:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
2120:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2121:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Expect at least a complete UDP header. */
2122:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
2123:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2124:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
2125:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2126:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
2127:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2128:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
2129:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					 ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
2130:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2131:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER;
2132:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2133:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else
2134:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2135:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
2136:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xLocation = 5;
2137:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2138:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2139:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( uxBufferLength < uxMinimumLength )
2140:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2141:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xLocation = 6;
2142:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2143:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2144:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2145:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			uxLength = ( size_t ) usLength;
2146:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
2147:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2148:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
2149:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
2150:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2151:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* For incoming packets, the length is out of bound: either
2152:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				too short or too long. For outgoing packets, there is a 
2153:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				serious problem with the format/length. */
2154:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xLocation = 7;
2155:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2156:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2157:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xResult = pdPASS;
2158:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		} while( ipFALSE_BOOL );
2159:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2160:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xResult != pdPASS )
2161:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2162:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_printf( ( "xCheckSizeFields: location %ld\n", xLocation ) );
2163:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			
2164:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* If FreeRTOS_printf is not defined, not using xLocation will be a violation of MISRA
2165:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * rule 2.2 as the value assigned to xLocation will not be used. The below statement uses
2166:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * the variable without modifying the logic of the source. */
2167:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( void ) xLocation;
2168:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2169:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2170:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return xResult;
2171:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2172:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 1 ) */
2173:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2174:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2175:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usGenerateProtocolChecksum( const uint8_t * const pucEthernetBuffer, size_t uxBufferLength
2176:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2177:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t ulLength;
2178:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usChecksum, *pusChecksum;
2179:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const IPPacket_t * pxIPPacket;
2180:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** UBaseType_t uxIPHeaderLength;
2181:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const ProtocolPacket_t *pxProtPack;
2182:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint8_t ucProtocol;
2183:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigHAS_DEBUG_PRINTF != 0 )
2184:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	const char *pcType;
2185:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
2186:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usLength;
2187:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t ucVersionHeaderLength;
2188:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2189:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2190:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t location = 0;
2191:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2192:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Introduce a do-while loop to allow use of break statements.
2193:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	 * Note: MISRA prohibits use of 'goto', thus replaced with breaks. */
2194:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	do
2195:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2196:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check for minimum packet size. */
2197:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( uxBufferLength < sizeof( IPPacket_t ) )
2198:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2199:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usChecksum = ipINVALID_LENGTH;
2200:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			location = 1;
2201:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
2202:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2203:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2204:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Parse the packet length. */
2205:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
2206:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2207:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Per https://tools.ietf.org/html/rfc791, the four-bit Internet Header
2208:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		Length field contains the length of the internet header in 32-bit words. */
2209:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
2210:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
2211:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
2212:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2213:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check for minimum packet size. */
2214:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( uxBufferLength < ( sizeof( IPPacket_t ) + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ) ) )
2215:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2216:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usChecksum = ipINVALID_LENGTH;
2217:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			location = 2;
2218:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
2219:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2220:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usLength = pxIPPacket->xIPHeader.usLength;
2221:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usLength = FreeRTOS_ntohs( usLength );
2222:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
2223:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2224:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usChecksum = ipINVALID_LENGTH;
2225:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			location = 3;
2226:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
2227:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2228:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2229:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Identify the next protocol. */
2230:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
2231:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2232:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* N.B., if this IP packet header includes Options, then the following
2233:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		assignment results in a pointer into the protocol packet with the Ethernet
2234:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		and IP headers incorrectly aligned. However, either way, the "third"
2235:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		protocol (Layer 3 or 4) header will be aligned, which is the convenience
2236:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		of this calculation. */
2237:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHead
2238:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2239:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Switch on the Layer 3/4 protocol. */
2240:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
2241:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2242:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER ) )
2243:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2244:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usChecksum = ipINVALID_LENGTH;
2245:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				location = 4;
2246:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2247:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2248:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2249:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pusChecksum = ( uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
2250:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigHAS_DEBUG_PRINTF != 0 )
2251:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2252:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pcType = "UDP";
2253:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2254:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
2255:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2256:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
2257:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2258:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER ) )
2259:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2260:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usChecksum = ipINVALID_LENGTH;
2261:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				location = 5;
2262:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2263:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2264:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2265:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pusChecksum = ( uint16_t * ) ( &( pxProtPack->xTCPPacket.xTCPHeader.usChecksum ) );
2266:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigHAS_DEBUG_PRINTF != 0 )
2267:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2268:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pcType = "TCP";
2269:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2270:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
2271:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2272:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
2273:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
2274:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2275:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER ) )
2276:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2277:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usChecksum = ipINVALID_LENGTH;
2278:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				location = 6;
2279:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
2280:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2281:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2282:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pusChecksum = ( uint16_t * ) ( &( pxProtPack->xICMPPacket.xICMPHeader.usChecksum ) );
2283:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigHAS_DEBUG_PRINTF != 0 )
2284:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2285:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP )
2286:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
2287:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pcType = "ICMP";
2288:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
2289:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				else
2290:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
2291:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pcType = "IGMP";
2292:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
2293:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2294:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
2295:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2296:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2297:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2298:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
2299:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usChecksum = ipUNHANDLED_PROTOCOL;
2300:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			location = 7;
2301:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
2302:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2303:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2304:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The protocol and checksum field have been identified. Check the direction
2305:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		of the packet. */
2306:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xOutgoingPacket != pdFALSE )
2307:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2308:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* This is an outgoing packet. Before calculating the checksum, set it
2309:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			to zero. */
2310:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			*( pusChecksum ) = 0U;
2311:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2312:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else if( ( *pusChecksum == 0U ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
2313:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2314:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
2315:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2316:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Sender hasn't set the checksum, drop the packet because
2317:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is not set. */
2318:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usChecksum = ipWRONG_CRC;
2319:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigHAS_PRINTF != 0 )
2320:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
2321:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				static BaseType_t xCount = 0;
2322:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2323:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( xCount < 5 )
2324:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
2325:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						FreeRTOS_printf( ( "usGenerateProtocolChecksum: UDP packet from %xip without CRC dropped\n",
2326:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
2327:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						xCount++;
2328:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
2329:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
2330:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif	/* ( ipconfigHAS_PRINTF != 0 ) */
2331:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2332:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#else
2333:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2334:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Sender hasn't set the checksum, no use to calculate it. */
2335:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usChecksum = ipCORRECT_CRC;
2336:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2337:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif
2338:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			location = 8;
2339:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
2340:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2341:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2342:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2343:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Other incoming packet than UDP. */
2344:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2345:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2346:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usLength = pxIPPacket->xIPHeader.usLength;
2347:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usLength = FreeRTOS_ntohs( usLength );
2348:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		ulLength = ( uint32_t ) usLength;
2349:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		ulLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally minus 20 */
2350:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2351:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ( ulLength < ( ( uint32_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
2352:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ulLength > ( ( uint32_t ) ipconfigNETWORK_MTU - ( uint32_t ) uxIPHeaderLength ) ) )
2353:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2354:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigHAS_DEBUG_PRINTF != 0 )
2355:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2356:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: len invalid: %lu\n", pcType, ulLength
2357:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2358:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
2359:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2360:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Again, in a 16-bit return value there is no space to indicate an
2361:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			error.  For incoming packets, 0x1234 will cause dropping of the packet.
2362:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			For outgoing packets, there is a serious problem with the
2363:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			format/length */
2364:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usChecksum = ipINVALID_LENGTH;
2365:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			location = 9;
2366:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
2367:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2368:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ucProtocol <= ( uint8_t ) ipPROTOCOL_IGMP )
2369:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2370:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* ICMP/IGMP do not have a pseudo header for CRC-calculation. */
2371:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usChecksum = ( uint16_t )
2372:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ~usGenerateChecksum( 0U,
2373:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					( const uint8_t * ) &( pxProtPack->xTCPPacket.xTCPHeader ), ( size_t ) ulLength ) );
2374:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2375:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2376:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2377:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* For UDP and TCP, sum the pseudo header, i.e. IP protocol + length
2378:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			fields */
2379:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usChecksum = ( uint16_t ) ( ulLength + ( ( uint16_t ) ucProtocol ) );
2380:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2381:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* And then continue at the IPv4 source and destination addresses. */
2382:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usChecksum = ( uint16_t )
2383:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					( ~usGenerateChecksum( usChecksum,
2384:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 										   ipPOINTER_CAST( const uint8_t *, &( pxIPPacket->xIPHeader.ulSourceIPAddress ) ),
2385:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 										   ( size_t )( ( 2U * ipSIZE_OF_IPv4_ADDRESS ) + ulLength ) ) );
2386:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Sum TCP header and data. */
2387:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2388:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2389:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xOutgoingPacket == pdFALSE )
2390:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2391:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* This is in incoming packet. If the CRC is correct, it should be zero. */
2392:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( usChecksum == 0U )
2393:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2394:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usChecksum = ( uint16_t )ipCORRECT_CRC;
2395:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2396:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2397:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2398:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2399:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( usChecksum == 0U ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
2400:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2401:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* In case of UDP, a calculated checksum of 0x0000 is transmitted
2402:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				as 0xffff. A value of zero would mean that the checksum is not used. */
2403:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigHAS_DEBUG_PRINTF != 0 )
2404:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
2405:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( xOutgoingPacket != pdFALSE )
2406:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
2407:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: crc swap: %04X\n", pcType, usChecks
2408:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
2409:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
2410:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
2411:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2412:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usChecksum = ( uint16_t )0xffffu;
2413:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2414:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2415:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usChecksum = FreeRTOS_htons( usChecksum );
2416:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2417:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xOutgoingPacket != pdFALSE )
2418:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2419:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			*( pusChecksum ) = usChecksum;
2420:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2421:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
2422:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else if( ( xOutgoingPacket == pdFALSE ) && ( usChecksum != ipCORRECT_CRC ) )
2423:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2424:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: ID %04X: from %lxip to %lxip bad crc: 
2425:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pcType,
2426:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				FreeRTOS_ntohs( pxIPPacket->xIPHeader.usIdentification ),
2427:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ),
2428:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ),
2429:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				FreeRTOS_ntohs( *pusChecksum ) ) );
2430:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2431:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2432:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2433:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Nothing. */
2434:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2435:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
2436:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	} while( ipFALSE_BOOL );
2437:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2438:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( usChecksum == ipUNHANDLED_PROTOCOL ) || 
2439:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( usChecksum == ipINVALID_LENGTH ) )
2440:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2441:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		FreeRTOS_printf( ( "CRC error: %04x location %ld\n", usChecksum, location ) );
2442:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		
2443:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* If FreeRTOS_printf is not defined, not using 'location' will be a violation of MISRA
2444:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		 * rule 2.2 as the value assigned to 'location' will not be used. The below statement uses
2445:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		 * the variable without modifying the logic of the source. */
2446:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) location;
2447:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2448:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2449:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return usChecksum;
2450:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2451:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2452:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2453:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /**
2454:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * This method generates a checksum for a given IPv4 header, per RFC791 (page 14).
2455:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The checksum algorithm is decribed as:
2456:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *   "[T]he 16 bit one's complement of the one's complement sum of all 16 bit words in the
2457:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *   header.  For purposes of computing the checksum, the value of the checksum field is zero."
2458:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
2459:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * In a nutshell, that means that each 16-bit 'word' must be summed, after which
2460:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * the number of 'carries' (overflows) is added to the result. If that addition
2461:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * produces an overflow, that 'carry' must also be added to the final result. The final checksum
2462:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * should be the bitwise 'not' (ones-complement) of the result if the packet is
2463:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * meant to be transmitted, but this method simply returns the raw value, probably
2464:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * because when a packet is received, the checksum is verified by checking that
2465:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * ((received & calculated) == 0) without applying a bitwise 'not' to the 'calculated' checksum.
2466:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
2467:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * This logic is optimized for microcontrollers which have limited resources, so the logic looks od
2468:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * It iterates over the full range of 16-bit words, but it does so by processing several 32-bit
2469:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * words at once whenever possible. Its first step is to align the memory pointer to a 32-bit bound
2470:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * after which it runs a fast loop to process multiple 32-bit words at once and adding their 'carri
2471:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Finally, it finishes up by processing any remaining 16-bit words, and adding up all of the 'carr
2472:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * With 32-bit arithmetic, the number of 16-bit 'carries' produced by sequential additions can be f
2473:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * by looking at the 16 most-significant bits of the 32-bit integer, since a 32-bit int will contin
2474:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * counting up instead of overflowing after 16 bits. That is why the actual checksum calculations l
2475:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *   union.u32 = ( uint32_t ) union.u16[ 0 ] + union.u16[ 1 ];
2476:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
2477:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Arguments:
2478:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *   ulSum: This argument provides a value to initialize the progressive summation
2479:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *	 of the header's values to. It is often 0, but protocols like TCP or UDP
2480:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *	 can have pseudo-header fields which need to be included in the checksum.
2481:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *   pucNextData: This argument contains the address of the first byte which this
2482:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *	 method should process. The method's memory iterator is initialized to this value.
2483:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *   uxDataLengthBytes: This argument contains the number of bytes that this method
2484:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *	 should process.
2485:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
2486:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usGenerateChecksum( uint16_t usSum, const uint8_t * pucNextData, size_t uxByteCount )
2487:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2488:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* MISRA/PC-lint doesn't like the use of unions. Here, they are a great
2489:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** aid though to optimise the calculations. */
2490:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** xUnion32 xSum2, xSum, xTerm;
2491:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** xUnionPtr xSource;
2492:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** xUnionPtr xLastSource;
2493:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t ulAlignBits, ulCarry = 0UL;
2494:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usTemp;
2495:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** size_t uxDataLengthBytes = uxByteCount;
2496:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2497:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Small MCUs often spend up to 30% of the time doing checksum calculations
2498:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	This function is optimised for 32-bit CPUs; Each time it will try to fetch
2499:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	32-bits, sums it with an accumulator and counts the number of carries. */
2500:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2501:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Swap the input (little endian platform only). */
2502:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	usTemp = FreeRTOS_ntohs( usSum );
2503:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = ( uint32_t ) usTemp;
2504:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xTerm.u32 = 0UL;
2505:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2506:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSource.u8ptr = ipPOINTER_CAST( uint8_t *, pucNextData );
2507:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* coverity[misra_c_2012_rule_11_4_violation] */
2508:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* The object pointer expression "pucNextData" of type "uint8_t const *" is cast to an integer typ
2509:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ulAlignBits = ( ( ( uint32_t ) pucNextData ) & 0x03U ); /*lint !e9078 !e923*/	/* gives 0, 1, 2, or
2510:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2511:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* If byte (8-bit) aligned... */
2512:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ( ulAlignBits & 1UL ) != 0UL ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
2513:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2514:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xTerm.u8[ 1 ] = *( xSource.u8ptr );
2515:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSource.u8ptr++;
2516:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxDataLengthBytes--;
2517:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Now xSource is word (16-bit) aligned. */
2518:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2519:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2520:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* If half-word (16-bit) aligned... */
2521:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ( ulAlignBits == 1U ) || ( ulAlignBits == 2U ) ) && ( uxDataLengthBytes >= 2U ) )
2522:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2523:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 += *(xSource.u16ptr);
2524:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSource.u16ptr++;
2525:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxDataLengthBytes -= 2U;
2526:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Now xSource is word (32-bit) aligned. */
2527:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2528:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2529:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Word (32-bit) aligned, do the most part. */
2530:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4U ) ) - 3U;
2531:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2532:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* In this loop, four 32-bit additions will be done, in total 16 bytes.
2533:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	Indexing with constants (0,1,2,3) gives faster code than using
2534:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	post-increments. */
2535:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	while( xSource.u32ptr < xLastSource.u32ptr )
2536:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2537:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Use a secondary Sum2, just to see if the addition produced an
2538:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		overflow. */
2539:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 0 ];
2540:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 < xSum.u32 )
2541:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2542:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
2543:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2544:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2545:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Now add the secondary sum to the major sum, and remember if there was
2546:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		a carry. */
2547:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 1 ];
2548:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 > xSum.u32 )
2549:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2550:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
2551:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2552:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2553:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* And do the same trick once again for indexes 2 and 3 */
2554:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 2 ];
2555:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 < xSum.u32 )
2556:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2557:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
2558:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2559:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2560:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 3 ];
2561:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2562:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 > xSum.u32 )
2563:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2564:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
2565:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2566:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2567:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* And finally advance the pointer 4 * 4 = 16 bytes. */
2568:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSource.u32ptr = &( xSource.u32ptr[ 4 ] );
2569:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2570:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2571:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Now add all carries. */
2572:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = ( uint32_t )xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
2573:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2574:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uxDataLengthBytes %= 16U;
2575:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
2576:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2577:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Half-word aligned. */
2578:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Coverity does not like Unions. Warning issued here: "The operator "<"
2579:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	 * is being applied to the pointers "xSource.u16ptr" and "xLastSource.u16ptr",
2580:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	 * which do not point into the same object." */
2581:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	while( xSource.u16ptr < xLastSource.u16ptr )
2582:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2583:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* At least one more short. */
2584:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 += xSource.u16ptr[ 0 ];
2585:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSource.u16ptr++;
2586:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2587:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2588:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( uxDataLengthBytes & ( size_t ) 1 ) != 0U )	/* Maybe one more ? */
2589:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2590:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xTerm.u8[ 0 ] = xSource.u8ptr[ 0 ];
2591:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2592:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 += xTerm.u32;
2593:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2594:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Now add all carries again. */
2595:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Assigning value from "xTerm.u32" to "xSum.u32" here, but that stored value is overwritten befor
2596:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	Coverity doesn't understand about union variables. */
2597:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
2598:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2599:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* coverity[value_overwrite] */
2600:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
2601:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2602:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ulAlignBits & 1U ) != 0U )
2603:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2604:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Quite unlikely, but pucNextData might be non-aligned, which would
2605:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		 mean that a checksum is calculated starting at an odd position. */
2606:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 = ( ( xSum.u32 & 0xffU ) << 8 ) | ( ( xSum.u32 & 0xff00U ) >> 8 );
2607:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2608:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2609:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* swap the output (little endian platform only). */
2610:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
2611:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2612:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2613:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2614:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* This function is used in other files, has external linkage e.g. in
2615:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * FreeRTOS_DNS.c. Not to be made static. */
2616:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSen
2617:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2618:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** EthernetHeader_t *pxEthernetHeader;
2619:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2620:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigZERO_COPY_TX_DRIVER != 0 )
2621:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxNewBuffer;
2622:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
2623:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2624:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
2625:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2626:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
2627:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2628:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		BaseType_t xIndex;
2629:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2630:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLengt
2631:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHER
2632:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2633:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
2634:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2635:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
2636:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2637:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2638:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
2639:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2640:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigZERO_COPY_TX_DRIVER != 0 )
2641:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2642:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xReleaseAfterSend == pdFALSE )
2643:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2644:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLeng
2645:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReleaseAfterSend = pdTRUE;
2646:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Want no rounding up. */
2647:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
2648:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNetworkBuffer = pxNewBuffer;
2649:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2650:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2651:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxNetworkBuffer != NULL )
2652:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
2653:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2654:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Map the Buffer to Ethernet Header struct for easy access to fields. */
2655:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer )
2656:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2657:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Swap source and destination MAC addresses. */
2658:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( const void * ) ( &( pxE
2659:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( const void * ) ipLOCAL_MAC_A
2660:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2661:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Send! */
2662:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
2663:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2664:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2665:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2666:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2667:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2668:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigHAS_PRINTF != 0 )
2669:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	
2670:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#ifndef ipMONITOR_MAX_HEAP
2671:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* As long as the heap has more space than e.g. 1 MB, there
2672:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		will be no messages. */
2673:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#define	ipMONITOR_MAX_HEAP			( 1024U * 1024U )
2674:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif	/* ipMONITOR_MAX_HEAP */
2675:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2676:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#ifndef ipMONITOR_PERCENTAGE_90
2677:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Make this number lower to get less logging messages. */
2678:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#define ipMONITOR_PERCENTAGE_90		( 90U )
2679:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
2680:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2681:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipMONITOR_PERCENTAGE_100		( 100U )
2682:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2683:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vPrintResourceStats( void )
2684:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2685:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static UBaseType_t uxLastMinBufferCount = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
2686:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static size_t uxMinLastSize = 0u;
2687:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	UBaseType_t uxCurrentBufferCount;
2688:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	size_t uxMinSize;
2689:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2690:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* When setting up and testing a project with FreeRTOS+TCP, it is
2691:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		can be helpful to monitor a few resources: the number of network
2692:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		buffers and the amount of available heap.
2693:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		This function will issue some logging when a minimum value has
2694:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		changed. */
2695:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
2696:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2697:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( uxLastMinBufferCount > uxCurrentBufferCount )
2698:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2699:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The logging produced below may be helpful
2700:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * while tuning +TCP: see how many buffers are in use. */
2701:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			uxLastMinBufferCount = uxCurrentBufferCount;
2702:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
2703:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							   uxGetNumberOfFreeNetworkBuffers(),
2704:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							   uxCurrentBufferCount ) );
2705:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2706:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2707:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxMinSize = xPortGetMinimumEverFreeHeapSize();
2708:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( uxMinLastSize == 0U )
2709:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2710:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Probably the first time this function is called. */
2711:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			uxMinLastSize = uxMinSize;
2712:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2713:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else if( uxMinSize >= ipMONITOR_MAX_HEAP )
2714:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2715:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* There is more than enough heap space. No need for logging. */
2716:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2717:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Write logging if there is a 10% decrease since the last time logging was written. */
2718:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
2719:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2720:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			uxMinLastSize = uxMinSize;
2721:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_printf( ( "Heap: current %lu lowest %lu\n", xPortGetFreeHeapSize(), uxMinSize ) );
2722:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2723:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2724:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2725:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Nothing to log. */
2726:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2727:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2728:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
2729:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2730:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			static UBaseType_t uxLastMinQueueSpace = 0;
2731:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			UBaseType_t uxCurrentCount = 0u;
2732:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2733:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			uxCurrentCount = uxGetMinimumIPQueueSpace();
2734:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2735:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( uxLastMinQueueSpace != uxCurrentCount )
2736:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2737:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The logging produced below may be helpful
2738:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				 * while tuning +TCP: see how many buffers are in use. */
2739:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				uxLastMinQueueSpace = uxCurrentCount;
2740:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
2741:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2742:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2743:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */
2744:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2745:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ( ipconfigHAS_PRINTF != 0 ) */
2746:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2747:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2748:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetIPAddress( void )
2749:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2750:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Returns the IP address of the NIC. */
2751:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return *ipLOCAL_IP_ADDRESS_POINTER;
2752:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2753:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2754:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2755:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetIPAddress( uint32_t ulIPAddress )
2756:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2757:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Sets the IP address of the NIC. */
2758:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	*ipLOCAL_IP_ADDRESS_POINTER = ulIPAddress;
2759:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2760:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2761:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2762:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetGatewayAddress( void )
2763:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2764:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulGatewayAddress;
2765:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2766:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2767:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2768:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetDNSServerAddress( void )
2769:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2770:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulDNSServerAddress;
2771:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2772:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2773:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2774:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetNetmask( void )
2775:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2776:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulNetMask;
2777:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2778:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2779:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2780:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_UpdateMACAddress( const uint8_t ucMACAddress[ipMAC_ADDRESS_LENGTH_BYTES] )
2781:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2782:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Copy the MAC address at the start of the default packet header fragment. */
2783:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
2784:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2785:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2786:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2787:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const uint8_t * FreeRTOS_GetMACAddress( void )
2788:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2789:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return ipLOCAL_MAC_ADDRESS;
2790:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2791:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2792:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2793:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetNetmask ( uint32_t ulNetmask )
2794:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2795:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkAddressing.ulNetMask = ulNetmask;
2796:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2797:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2798:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2799:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetGatewayAddress ( uint32_t ulGatewayAddress )
2800:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2801:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkAddressing.ulGatewayAddress = ulGatewayAddress;
2802:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
2803:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2804:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2805:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_DHCP == 1 )
2806:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPSetDHCPTimerEnableState( BaseType_t xEnableState )
2807:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2808:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xEnableState != pdFALSE )
2809:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2810:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDHCPTimer.bActive = pdTRUE_UNSIGNED;
2811:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2812:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2813:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2814:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
2815:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2816:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2817:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_DHCP */
2818:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2819:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2820:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_DHCP == 1 )
2821:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPReloadDHCPTimer( uint32_t ulLeaseTime )
2822:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2823:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvIPTimerReload( &xDHCPTimer, ulLeaseTime );
2824:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2825:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_DHCP */
2826:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2827:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2828:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigDNS_USE_CALLBACKS == 1 )
2829:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPSetDnsTimerEnableState( BaseType_t xEnableState )
2830:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2831:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xEnableState != 0 )
2832:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2833:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDNSTimer.bActive = pdTRUE;
2834:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2835:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2836:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2837:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDNSTimer.bActive = pdFALSE;
2838:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2839:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2840:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_DHCP */
2841:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2842:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2843:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigDNS_USE_CALLBACKS != 0 )
2844:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPReloadDNSTimer( uint32_t ulCheckTime )
2845:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2846:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvIPTimerReload( &xDNSTimer, ulCheckTime );
2847:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2848:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigDNS_USE_CALLBACKS != 0 */
2849:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2850:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2851:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xIPIsNetworkTaskReady( void )
2852:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
2853:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xIPTaskInitialised;
 471              	 .loc 1 2853 0
 472 0008 584C     	 ldr r4,.L53
 473              	.LBE83:
 474              	.LBE82:
1035:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xNetworkEventQueue == NULL );
 475              	 .loc 1 1035 0
 476 000a 2468     	 ldr r4,[r4]
 477 000c 44B1     	 cbz r4,.L40
 478              	.LBB84:
 479              	.LBB85:
 480              	 .file 2 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * FreeRTOS Kernel V10.4.1
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * subject to the following conditions:
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * copies or substantial portions of the Software.
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * https://www.FreeRTOS.org
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * https://github.com/FreeRTOS
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * 1 tab == 4 spaces!
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef PORTMACRO_H
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define PORTMACRO_H
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifdef __cplusplus
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         extern "C" {
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Port specific definitions.
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * given hardware and compiler.
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * These settings should not be altered.
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *-----------------------------------------------------------
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Type definitions. */
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portCHAR          char
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portFLOAT         float
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDOUBLE        double
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portLONG          long
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSHORT         short
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portBASE_TYPE     long
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef long             BaseType_t;
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         typedef uint16_t     TickType_t;
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #else
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         typedef uint32_t     TickType_t;
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * not need to be guarded with a critical section. */
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specifics. */
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Scheduler utilities. */
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portYIELD()                                 \
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {                                                   \
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****                                                         \
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Critical section management. */
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     extern void vPortEnterCritical( void );
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     extern void vPortExitCritical( void );
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * (which build with all the ports) will build. */
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Tickless idle/low power functionality. */
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specific optimisations. */
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Generic helper function. */
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             uint8_t ucReturn;
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             return ucReturn;
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Check the configuration. */
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #endif
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifdef configASSERT
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* portNOP() is not required by this port. */
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNOP()
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portINLINE              __inline
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef portFORCE_INLINE
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         BaseType_t xReturn;
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             xReturn = pdFALSE;
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         else
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             xReturn = pdTRUE;
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         return xReturn;
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulNewBASEPRI;
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile
 481              	 .loc 2 197 0
 482              	
 483 000e 4FF01403 	 mov r3,#20
 484 0012 83F31188 	 msr basepri,r3
 485 0016 BFF36F8F 	 isb 
 486 001a BFF34F8F 	 dsb 
 487              	
 488              	
 489              	.LVL49:
 490              	 .thumb
 491              	.L41:
 492              	.LBE85:
 493              	.LBE84:
1035:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xNetworkEventQueue == NULL );
 494              	 .loc 1 1035 0 discriminator 1
 495 001e FEE7     	 b .L41
 496              	.LVL50:
 497              	.L40:
1036:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xIPTaskHandle == NULL );
 498              	 .loc 1 1036 0
 499 0020 534C     	 ldr r4,.L53+4
 500 0022 2468     	 ldr r4,[r4]
 501 0024 44B1     	 cbz r4,.L42
 502              	.LBB86:
 503              	.LBB87:
 504              	 .loc 2 197 0
 505              	
 506 0026 4FF01403 	 mov r3,#20
 507 002a 83F31188 	 msr basepri,r3
 508 002e BFF36F8F 	 isb 
 509 0032 BFF34F8F 	 dsb 
 510              	
 511              	
 512              	.LVL51:
 513              	 .thumb
 514              	.L43:
 515              	.LBE87:
 516              	.LBE86:
1036:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xIPTaskHandle == NULL );
 517              	 .loc 1 1036 0 discriminator 2
 518 0036 FEE7     	 b .L43
 519              	.LVL52:
 520              	.L42:
1037:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 521              	 .loc 1 1037 0
 522 0038 4E4C     	 ldr r4,.L53+8
 523 003a 2468     	 ldr r4,[r4]
 524 003c 44B1     	 cbz r4,.L44
 525              	.LBB88:
 526              	.LBB89:
 527              	 .loc 2 197 0
 528              	
 529 003e 4FF01403 	 mov r3,#20
 530 0042 83F31188 	 msr basepri,r3
 531 0046 BFF36F8F 	 isb 
 532 004a BFF34F8F 	 dsb 
 533              	
 534              	
 535              	.LVL53:
 536              	 .thumb
 537              	.L45:
 538              	.LBE89:
 539              	.LBE88:
1037:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 540              	 .loc 1 1037 0 discriminator 3
 541 004e FEE7     	 b .L45
 542              	.LVL54:
 543              	.L44:
 544 0050 9846     	 mov r8,r3
 545 0052 1646     	 mov r6,r2
 546 0054 0D46     	 mov r5,r1
 547 0056 0446     	 mov r4,r0
1052:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xNetworkEventQueue != NULL );
 548              	 .loc 1 1052 0
 549 0058 4120     	 movs r0,#65
 550              	.LVL55:
 551 005a 0821     	 movs r1,#8
 552              	.LVL56:
 553 005c 0022     	 movs r2,#0
 554              	.LVL57:
 555 005e FFF7FEFF 	 bl xQueueGenericCreate
 556              	.LVL58:
 557 0062 434B     	 ldr r3,.L53+4
 558 0064 1860     	 str r0,[r3]
1053:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 559              	 .loc 1 1053 0
 560 0066 40B9     	 cbnz r0,.L46
 561              	.LBB90:
 562              	.LBB91:
 563              	 .loc 2 197 0
 564              	
 565 0068 4FF01403 	 mov r3,#20
 566 006c 83F31188 	 msr basepri,r3
 567 0070 BFF36F8F 	 isb 
 568 0074 BFF34F8F 	 dsb 
 569              	
 570              	
 571              	.LVL59:
 572              	 .thumb
 573              	.L47:
 574              	.LBE91:
 575              	.LBE90:
1053:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 576              	 .loc 1 1053 0 discriminator 10
 577 0078 FEE7     	 b .L47
 578              	.L46:
1062:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 579              	 .loc 1 1062 0
 580 007a 3F49     	 ldr r1,.L53+12
 581 007c FFF7FEFF 	 bl vQueueAddToRegistry
 582              	.LVL60:
1066:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 583              	 .loc 1 1066 0
 584 0080 FFF7FEFF 	 bl xNetworkBuffersInitialise
 585              	.LVL61:
 586 0084 0128     	 cmp r0,#1
 587 0086 68D1     	 bne .L48
1069:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMa
 588              	 .loc 1 1069 0
 589 0088 E278     	 ldrb r2,[r4,#3]
 590 008a A378     	 ldrb r3,[r4,#2]
 591 008c 1B04     	 lsls r3,r3,#16
 592 008e 43EA0263 	 orr r3,r3,r2,lsl#24
 593 0092 94F800C0 	 ldrb ip,[r4]
 594 0096 43EA0C03 	 orr r3,r3,ip
 595 009a 94F801C0 	 ldrb ip,[r4,#1]
 596 009e 43EA0C2C 	 orr ip,r3,ip,lsl#8
 597 00a2 364C     	 ldr r4,.L53+16
 598              	.LVL62:
 599 00a4 C4F800C0 	 str ip,[r4]
1070:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGateway
 600              	 .loc 1 1070 0
 601 00a8 EA78     	 ldrb r2,[r5,#3]
 602 00aa AB78     	 ldrb r3,[r5,#2]
 603 00ac 1B04     	 lsls r3,r3,#16
 604 00ae 43EA0263 	 orr r3,r3,r2,lsl#24
 605 00b2 95F800E0 	 ldrb lr,[r5]
 606 00b6 43EA0E03 	 orr r3,r3,lr
 607 00ba 95F801E0 	 ldrb lr,[r5,#1]
 608 00be 43EA0E2E 	 orr lr,r3,lr,lsl#8
 609 00c2 C4F804E0 	 str lr,[r4,#4]
1071:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNS
 610              	 .loc 1 1071 0
 611 00c6 F278     	 ldrb r2,[r6,#3]
 612 00c8 B378     	 ldrb r3,[r6,#2]
 613 00ca 1B04     	 lsls r3,r3,#16
 614 00cc 43EA0263 	 orr r3,r3,r2,lsl#24
 615 00d0 3578     	 ldrb r5,[r6]
 616              	.LVL63:
 617 00d2 2B43     	 orrs r3,r3,r5
 618 00d4 7578     	 ldrb r5,[r6,#1]
 619 00d6 43EA0525 	 orr r5,r3,r5,lsl#8
 620 00da A560     	 str r5,[r4,#8]
1072:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddres
 621              	 .loc 1 1072 0
 622 00dc 98F80320 	 ldrb r2,[r8,#3]
 623 00e0 98F80230 	 ldrb r3,[r8,#2]
 624 00e4 1B04     	 lsls r3,r3,#16
 625 00e6 43EA0262 	 orr r2,r3,r2,lsl#24
 626 00ea 98F80030 	 ldrb r3,[r8]
 627 00ee 1343     	 orrs r3,r3,r2
 628 00f0 98F80120 	 ldrb r2,[r8,#1]
 629 00f4 43EA0223 	 orr r3,r3,r2,lsl#8
 630 00f8 E360     	 str r3,[r4,#12]
1073:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 631              	 .loc 1 1073 0
 632 00fa 0CEA0E08 	 and r8,ip,lr
 633              	.LVL64:
 634 00fe 68EA0E08 	 orn r8,r8,lr
 635 0102 C4F81080 	 str r8,[r4,#16]
1075:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 636              	 .loc 1 1075 0
 637 0106 1E4E     	 ldr r6,.L53+20
 638              	.LVL65:
 639 0108 0FCC     	 ldmia r4!,{r0,r1,r2,r3}
 640 010a 0FC6     	 stmia r6!,{r0,r1,r2,r3}
 641 010c C6F80080 	 str r8,[r6]
1085:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 642              	 .loc 1 1085 0
 643 0110 1C4B     	 ldr r3,.L53+24
 644 0112 C3F814C0 	 str ip,[r3,#20]
1089:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 645              	 .loc 1 1089 0
 646 0116 6DB1     	 cbz r5,.L49
1091:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 647              	 .loc 1 1091 0
 648 0118 8CEA0505 	 eor r5,ip,r5
 649 011c 15EA0E0F 	 tst r5,lr
 650 0120 08D0     	 beq .L49
 651              	.LBB92:
 652              	.LBB93:
 653              	 .loc 2 197 0
 654              	
 655 0122 4FF01403 	 mov r3,#20
 656 0126 83F31188 	 msr basepri,r3
 657 012a BFF36F8F 	 isb 
 658 012e BFF34F8F 	 dsb 
 659              	
 660              	
 661              	.LVL66:
 662              	 .thumb
 663              	.L50:
 664              	.LBE93:
 665              	.LBE92:
1091:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 666              	 .loc 1 1091 0 discriminator 11
 667 0132 FEE7     	 b .L50
 668              	.L49:
1098:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 669              	 .loc 1 1098 0
 670 0134 134B     	 ldr r3,.L53+24
 671 0136 3868     	 ldr r0,[r7]
 672 0138 1860     	 str r0,[r3]
 673 013a BA88     	 ldrh r2,[r7,#4]
 674 013c 9A80     	 strh r2,[r3,#4]
1101:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 675              	 .loc 1 1101 0
 676 013e FFF7FEFF 	 bl vNetworkSocketsInit
 677              	.LVL67:
1104:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								   "IP-task",
 678              	 .loc 1 1104 0
 679 0142 0323     	 movs r3,#3
 680 0144 0093     	 str r3,[sp]
 681 0146 0B4B     	 ldr r3,.L53+8
 682 0148 0193     	 str r3,[sp,#4]
 683 014a 0F48     	 ldr r0,.L53+28
 684 014c 0F49     	 ldr r1,.L53+32
 685 014e 4FF41672 	 mov r2,#600
 686 0152 0023     	 movs r3,#0
 687 0154 FFF7FEFF 	 bl xTaskCreate
 688              	.LVL68:
 689 0158 05E0     	 b .L51
 690              	.LVL69:
 691              	.L48:
1116:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkEventQueue = NULL;
 692              	 .loc 1 1116 0
 693 015a 054C     	 ldr r4,.L53+4
 694              	.LVL70:
 695 015c 2068     	 ldr r0,[r4]
 696 015e FFF7FEFF 	 bl vQueueDelete
 697              	.LVL71:
1117:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 698              	 .loc 1 1117 0
 699 0162 0020     	 movs r0,#0
 700 0164 2060     	 str r0,[r4]
 701              	.LVL72:
 702              	.L51:
1126:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 703              	 .loc 1 1126 0
 704 0166 02B0     	 add sp,sp,#8
 705              	.LCFI11:
 706              	 .cfi_def_cfa_offset 24
 707              	 
 708 0168 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 709              	.LVL73:
 710              	.L54:
 711              	 .align 2
 712              	.L53:
 713 016c 00000000 	 .word .LANCHOR4
 714 0170 00000000 	 .word .LANCHOR1
 715 0174 00000000 	 .word .LANCHOR0
 716 0178 00000000 	 .word .LC0
 717 017c 00000000 	 .word .LANCHOR5
 718 0180 00000000 	 .word .LANCHOR6
 719 0184 00000000 	 .word xDefaultPartUDPPacketHeader
 720 0188 00000000 	 .word prvIPTask
 721 018c 08000000 	 .word .LC1
 722              	 .cfi_endproc
 723              	.LFE68:
 725              	 .section .text.FreeRTOS_GetAddressConfiguration,"ax",%progbits
 726              	 .align 2
 727              	 .global FreeRTOS_GetAddressConfiguration
 728              	 .thumb
 729              	 .thumb_func
 731              	FreeRTOS_GetAddressConfiguration:
 732              	.LFB69:
1133:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Return the address configuration to the caller. */
 733              	 .loc 1 1133 0
 734              	 .cfi_startproc
 735              	 
 736              	 
 737              	 
 738              	.LVL74:
 739 0000 10B4     	 push {r4}
 740              	.LCFI12:
 741              	 .cfi_def_cfa_offset 4
 742              	 .cfi_offset 4,-4
1136:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 743              	 .loc 1 1136 0
 744 0002 18B1     	 cbz r0,.L56
 745 0004 0446     	 mov r4,r0
1138:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 746              	 .loc 1 1138 0
 747 0006 0948     	 ldr r0,.L61
 748              	.LVL75:
 749 0008 4069     	 ldr r0,[r0,#20]
 750 000a 2060     	 str r0,[r4]
 751              	.LVL76:
 752              	.L56:
1141:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 753              	 .loc 1 1141 0
 754 000c 11B1     	 cbz r1,.L57
1143:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 755              	 .loc 1 1143 0
 756 000e 0848     	 ldr r0,.L61+4
 757 0010 4068     	 ldr r0,[r0,#4]
 758 0012 0860     	 str r0,[r1]
 759              	.L57:
1146:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 760              	 .loc 1 1146 0
 761 0014 12B1     	 cbz r2,.L58
1148:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 762              	 .loc 1 1148 0
 763 0016 0649     	 ldr r1,.L61+4
 764              	.LVL77:
 765 0018 8968     	 ldr r1,[r1,#8]
 766 001a 1160     	 str r1,[r2]
 767              	.L58:
1151:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 768              	 .loc 1 1151 0
 769 001c 13B1     	 cbz r3,.L55
1153:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 770              	 .loc 1 1153 0
 771 001e 044A     	 ldr r2,.L61+4
 772              	.LVL78:
 773 0020 D268     	 ldr r2,[r2,#12]
 774 0022 1A60     	 str r2,[r3]
 775              	.L55:
1155:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 776              	 .loc 1 1155 0
 777 0024 5DF8044B 	 ldr r4,[sp],#4
 778              	.LCFI13:
 779              	 .cfi_restore 4
 780              	 .cfi_def_cfa_offset 0
 781 0028 7047     	 bx lr
 782              	.L62:
 783 002a 00BF     	 .align 2
 784              	.L61:
 785 002c 00000000 	 .word xDefaultPartUDPPacketHeader
 786 0030 00000000 	 .word .LANCHOR5
 787              	 .cfi_endproc
 788              	.LFE69:
 790              	 .section .text.FreeRTOS_SetAddressConfiguration,"ax",%progbits
 791              	 .align 2
 792              	 .global FreeRTOS_SetAddressConfiguration
 793              	 .thumb
 794              	 .thumb_func
 796              	FreeRTOS_SetAddressConfiguration:
 797              	.LFB70:
1162:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Update the address configuration. */
 798              	 .loc 1 1162 0
 799              	 .cfi_startproc
 800              	 
 801              	 
 802              	 
 803              	.LVL79:
 804 0000 10B4     	 push {r4}
 805              	.LCFI14:
 806              	 .cfi_def_cfa_offset 4
 807              	 .cfi_offset 4,-4
1165:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 808              	 .loc 1 1165 0
 809 0002 10B1     	 cbz r0,.L64
1167:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 810              	 .loc 1 1167 0
 811 0004 0468     	 ldr r4,[r0]
 812 0006 0848     	 ldr r0,.L69
 813              	.LVL80:
 814 0008 4461     	 str r4,[r0,#20]
 815              	.L64:
1170:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 816              	 .loc 1 1170 0
 817 000a 11B1     	 cbz r1,.L65
1172:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 818              	 .loc 1 1172 0
 819 000c 0868     	 ldr r0,[r1]
 820 000e 0749     	 ldr r1,.L69+4
 821              	.LVL81:
 822 0010 4860     	 str r0,[r1,#4]
 823              	.L65:
1175:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 824              	 .loc 1 1175 0
 825 0012 12B1     	 cbz r2,.L66
1177:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 826              	 .loc 1 1177 0
 827 0014 1168     	 ldr r1,[r2]
 828 0016 054A     	 ldr r2,.L69+4
 829              	.LVL82:
 830 0018 9160     	 str r1,[r2,#8]
 831              	.L66:
1180:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 832              	 .loc 1 1180 0
 833 001a 13B1     	 cbz r3,.L63
1182:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 834              	 .loc 1 1182 0
 835 001c 1A68     	 ldr r2,[r3]
 836 001e 034B     	 ldr r3,.L69+4
 837              	.LVL83:
 838 0020 DA60     	 str r2,[r3,#12]
 839              	.L63:
1184:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 840              	 .loc 1 1184 0
 841 0022 5DF8044B 	 ldr r4,[sp],#4
 842              	.LCFI15:
 843              	 .cfi_restore 4
 844              	 .cfi_def_cfa_offset 0
 845 0026 7047     	 bx lr
 846              	.L70:
 847              	 .align 2
 848              	.L69:
 849 0028 00000000 	 .word xDefaultPartUDPPacketHeader
 850 002c 00000000 	 .word .LANCHOR5
 851              	 .cfi_endproc
 852              	.LFE70:
 854              	 .section .text.xSendEventStructToIPTask,"ax",%progbits
 855              	 .align 2
 856              	 .global xSendEventStructToIPTask
 857              	 .thumb
 858              	 .thumb_func
 860              	xSendEventStructToIPTask:
 861              	.LFB73:
1283:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn, xSendMessage;
 862              	 .loc 1 1283 0
 863              	 .cfi_startproc
 864              	 
 865              	 
 866              	.LVL84:
 867 0000 38B5     	 push {r3,r4,r5,lr}
 868              	.LCFI16:
 869              	 .cfi_def_cfa_offset 16
 870              	 .cfi_offset 3,-16
 871              	 .cfi_offset 4,-12
 872              	 .cfi_offset 5,-8
 873              	 .cfi_offset 14,-4
 874 0002 0446     	 mov r4,r0
 875 0004 0D46     	 mov r5,r1
 876              	.LVL85:
 877              	.LBB96:
 878              	.LBB97:
 879              	 .loc 1 2853 0
 880 0006 134B     	 ldr r3,.L79
 881              	.LBE97:
 882              	.LBE96:
1287:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 883              	 .loc 1 1287 0
 884 0008 1B68     	 ldr r3,[r3]
 885 000a 1BB9     	 cbnz r3,.L72
1287:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 886              	 .loc 1 1287 0 is_stmt 0 discriminator 1
 887 000c 90F90030 	 ldrsb r3,[r0]
 888 0010 73B1     	 cbz r3,.L74
 889 0012 1AE0     	 b .L76
 890              	.L72:
 891              	.LVL86:
1299:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 892              	 .loc 1 1299 0 is_stmt 1
 893 0014 90F90030 	 ldrsb r3,[r0]
 894 0018 062B     	 cmp r3,#6
 895 001a 09D1     	 bne .L74
1304:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 896              	 .loc 1 1304 0
 897 001c 0E4A     	 ldr r2,.L79+4
 898 001e 1378     	 ldrb r3,[r2]
 899 0020 43F00203 	 orr r3,r3,#2
 900 0024 1370     	 strb r3,[r2]
1306:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 901              	 .loc 1 1306 0
 902 0026 0D4B     	 ldr r3,.L79+8
 903 0028 1868     	 ldr r0,[r3]
 904              	.LVL87:
 905 002a FFF7FEFF 	 bl uxQueueMessagesWaiting
 906              	.LVL88:
1316:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 907              	 .loc 1 1316 0
 908 002e 70B9     	 cbnz r0,.L77
 909              	.LVL89:
 910              	.L74:
1320:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 911              	 .loc 1 1320 0
 912 0030 FFF7FEFF 	 bl xIsCallingFromIPTask
 913              	.LVL90:
1285:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 914              	 .loc 1 1285 0
 915 0034 0128     	 cmp r0,#1
 916              	.LVL91:
1325:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 917              	 .loc 1 1325 0
 918 0036 094B     	 ldr r3,.L79+8
 919 0038 1868     	 ldr r0,[r3]
 920 003a 2146     	 mov r1,r4
 921 003c 14BF     	 ite ne
 922 003e 2A46     	 movne r2,r5
 923 0040 0022     	 moveq r2,#0
 924 0042 0023     	 movs r3,#0
 925 0044 FFF7FEFF 	 bl xQueueGenericSend
 926              	.LVL92:
 927 0048 38BD     	 pop {r3,r4,r5,pc}
 928              	.LVL93:
 929              	.L76:
1291:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 930              	 .loc 1 1291 0
 931 004a 0020     	 movs r0,#0
 932              	.LVL94:
 933 004c 38BD     	 pop {r3,r4,r5,pc}
 934              	.LVL95:
 935              	.L77:
1338:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 936              	 .loc 1 1338 0
 937 004e 0120     	 movs r0,#1
 938              	.LVL96:
1343:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 939              	 .loc 1 1343 0
 940 0050 38BD     	 pop {r3,r4,r5,pc}
 941              	.LVL97:
 942              	.L80:
 943 0052 00BF     	 .align 2
 944              	.L79:
 945 0054 00000000 	 .word .LANCHOR4
 946 0058 00000000 	 .word .LANCHOR7
 947 005c 00000000 	 .word .LANCHOR1
 948              	 .cfi_endproc
 949              	.LFE73:
 951              	 .section .text.FreeRTOS_NetworkDown,"ax",%progbits
 952              	 .align 2
 953              	 .global FreeRTOS_NetworkDown
 954              	 .thumb
 955              	 .thumb_func
 957              	FreeRTOS_NetworkDown:
 958              	.LFB60:
 799:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
 959              	 .loc 1 799 0
 960              	 .cfi_startproc
 961              	 
 962              	 
 963 0000 08B5     	 push {r3,lr}
 964              	.LCFI17:
 965              	 .cfi_def_cfa_offset 8
 966              	 .cfi_offset 3,-8
 967              	 .cfi_offset 14,-4
 968              	.LVL98:
 804:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 969              	 .loc 1 804 0
 970 0002 0548     	 ldr r0,.L85
 971 0004 0021     	 movs r1,#0
 972 0006 FFF7FEFF 	 bl xSendEventStructToIPTask
 973              	.LVL99:
 974 000a 0128     	 cmp r0,#1
 807:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 975              	 .loc 1 807 0
 976 000c 14BF     	 ite ne
 977 000e 0122     	 movne r2,#1
 812:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 978              	 .loc 1 812 0
 979 0010 0022     	 moveq r2,#0
 980 0012 024B     	 ldr r3,.L85+4
 981 0014 1A60     	 str r2,[r3]
 982 0016 08BD     	 pop {r3,pc}
 983              	.L86:
 984              	 .align 2
 985              	.L85:
 986 0018 00000000 	 .word .LANCHOR8
 987 001c 00000000 	 .word .LANCHOR3
 988              	 .cfi_endproc
 989              	.LFE60:
 991              	 .section .text.FreeRTOS_SendPingRequest,"ax",%progbits
 992              	 .align 2
 993              	 .global FreeRTOS_SendPingRequest
 994              	 .thumb
 995              	 .thumb_func
 997              	FreeRTOS_SendPingRequest:
 998              	.LFB71:
1190:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxNetworkBuffer;
 999              	 .loc 1 1190 0
 1000              	 .cfi_startproc
 1001              	 
 1002              	 
 1003              	.LVL100:
 1004 0000 2DE9F043 	 push {r4,r5,r6,r7,r8,r9,lr}
 1005              	.LCFI18:
 1006              	 .cfi_def_cfa_offset 28
 1007              	 .cfi_offset 4,-28
 1008              	 .cfi_offset 5,-24
 1009              	 .cfi_offset 6,-20
 1010              	 .cfi_offset 7,-16
 1011              	 .cfi_offset 8,-12
 1012              	 .cfi_offset 9,-8
 1013              	 .cfi_offset 14,-4
 1014 0004 83B0     	 sub sp,sp,#12
 1015              	.LCFI19:
 1016              	 .cfi_def_cfa_offset 40
 1017 0006 8046     	 mov r8,r0
 1018 0008 0C46     	 mov r4,r1
 1019 000a 1546     	 mov r5,r2
 1020              	.LVL101:
1198:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1021              	 .loc 1 1198 0
 1022 000c 0423     	 movs r3,#4
 1023 000e 8DF80030 	 strb r3,[sp]
 1024 0012 0023     	 movs r3,#0
 1025 0014 0193     	 str r3,[sp,#4]
1200:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxTotalLength, uxBlockTimeTicks );
 1026              	 .loc 1 1200 0
 1027 0016 01F12A06 	 add r6,r1,#42
 1028              	.LVL102:
1201:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1029              	 .loc 1 1201 0
 1030 001a 3046     	 mov r0,r6
 1031              	.LVL103:
 1032 001c 1146     	 mov r1,r2
 1033              	.LVL104:
 1034 001e FFF7FEFF 	 bl pxGetNetworkBufferWithDescriptor
 1035              	.LVL105:
1203:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1036              	 .loc 1 1203 0
 1037 0022 0028     	 cmp r0,#0
 1038 0024 3AD0     	 beq .L90
 1039 0026 0746     	 mov r7,r0
 1040              	.LVL106:
 1041              	.LBB98:
1215:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 1042              	 .loc 1 1215 0
 1043 0028 FFF7FEFF 	 bl uxGetNumberOfFreeNetworkBuffers
 1044              	.LVL107:
 1045 002c 0228     	 cmp r0,#2
 1046 002e 37D9     	 bls .L91
1215:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 1047              	 .loc 1 1215 0 is_stmt 0 discriminator 1
 1048 0030 621E     	 subs r2,r4,#1
 1049 0032 40F29243 	 movw r3,#1170
 1050 0036 9A42     	 cmp r2,r3
 1051 0038 34D8     	 bhi .L92
1217:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxEthernetHeader->usFrameType = ipIPv4_FRAME_TYPE;
 1052              	 .loc 1 1217 0 is_stmt 1
 1053 003a BB69     	 ldr r3,[r7,#24]
 1054              	.LVL108:
1218:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				
 1055              	 .loc 1 1218 0
 1056 003c 4FF00009 	 mov r9,#0
 1057 0040 0822     	 movs r2,#8
 1058 0042 1A73     	 strb r2,[r3,#12]
 1059 0044 83F80D90 	 strb r9,[r3,#13]
1220:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usSequenceNumber++;
 1060              	 .loc 1 1220 0
 1061 0048 B869     	 ldr r0,[r7,#24]
 1062              	.LVL109:
1221:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1063              	 .loc 1 1221 0
 1064 004a 1849     	 ldr r1,.L94
 1065 004c 0B88     	 ldrh r3,[r1]
 1066              	.LVL110:
 1067 004e 0133     	 adds r3,r3,#1
 1068 0050 9BB2     	 uxth r3,r3
 1069 0052 1A46     	 mov r2,r3
 1070 0054 0B80     	 strh r3,[r1]
1224:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->ucTypeOfService = 0;
 1071              	 .loc 1 1224 0
 1072 0056 0823     	 movs r3,#8
 1073 0058 80F82230 	 strb r3,[r0,#34]
1225:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->usIdentifier = usSequenceNumber;
 1074              	 .loc 1 1225 0
 1075 005c 80F82390 	 strb r9,[r0,#35]
1226:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->usSequenceNumber = usSequenceNumber;
 1076              	 .loc 1 1226 0
 1077 0060 C284     	 strh r2,[r0,#38]
1227:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1078              	 .loc 1 1227 0
 1079 0062 0285     	 strh r2,[r0,#40]
 1080              	.LVL111:
1234:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1081              	 .loc 1 1234 0
 1082 0064 2A30     	 adds r0,r0,#42
 1083              	.LVL112:
 1084 0066 7821     	 movs r1,#120
 1085 0068 2246     	 mov r2,r4
 1086 006a FFF7FEFF 	 bl memset
 1087              	.LVL113:
1238:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->ulIPAddress = ulIPAddress;
 1088              	 .loc 1 1238 0
 1089 006e BB69     	 ldr r3,[r7,#24]
 1090 0070 0222     	 movs r2,#2
 1091 0072 9A71     	 strb r2,[r3,#6]
1239:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->usPort = ipPACKET_CONTAINS_ICMP_DATA;
 1092              	 .loc 1 1239 0
 1093 0074 C7F81480 	 str r8,[r7,#20]
1240:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* xDataLength is the size of the total packet, including the Ethernet header. */
 1094              	 .loc 1 1240 0
 1095 0078 A7F82090 	 strh r9,[r7,#32]
1242:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1096              	 .loc 1 1242 0
 1097 007c FE61     	 str r6,[r7,#28]
1245:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1098              	 .loc 1 1245 0
 1099 007e 0197     	 str r7,[sp,#4]
1247:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 1100              	 .loc 1 1247 0
 1101 0080 6846     	 mov r0,sp
 1102 0082 2946     	 mov r1,r5
 1103 0084 FFF7FEFF 	 bl xSendEventStructToIPTask
 1104              	.LVL114:
 1105 0088 0128     	 cmp r0,#1
 1106 008a 04D0     	 beq .L89
1249:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
 1107              	 .loc 1 1249 0
 1108 008c 3846     	 mov r0,r7
 1109 008e FFF7FEFF 	 bl vReleaseNetworkBufferAndDescriptor
 1110              	.LVL115:
 1111              	.LBE98:
1194:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static uint16_t usSequenceNumber = 0;
 1112              	 .loc 1 1194 0
 1113 0092 4846     	 mov r0,r9
 1114              	.LBB99:
 1115 0094 07E0     	 b .L88
 1116              	.L89:
1254:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 1117              	 .loc 1 1254 0
 1118 0096 054B     	 ldr r3,.L94
 1119 0098 1888     	 ldrh r0,[r3]
 1120              	.LVL116:
 1121 009a 04E0     	 b .L88
 1122              	.LVL117:
 1123              	.L90:
 1124              	.LBE99:
1194:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static uint16_t usSequenceNumber = 0;
 1125              	 .loc 1 1194 0
 1126 009c 0020     	 movs r0,#0
 1127              	.LVL118:
 1128 009e 02E0     	 b .L88
 1129              	.LVL119:
 1130              	.L91:
 1131 00a0 0020     	 movs r0,#0
 1132 00a2 00E0     	 b .L88
 1133              	.L92:
 1134 00a4 0020     	 movs r0,#0
 1135              	.LVL120:
 1136              	.L88:
1265:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1137              	 .loc 1 1265 0
 1138 00a6 03B0     	 add sp,sp,#12
 1139              	.LCFI20:
 1140              	 .cfi_def_cfa_offset 28
 1141              	 
 1142 00a8 BDE8F083 	 pop {r4,r5,r6,r7,r8,r9,pc}
 1143              	.LVL121:
 1144              	.L95:
 1145              	 .align 2
 1146              	.L94:
 1147 00ac 00000000 	 .word .LANCHOR9
 1148              	 .cfi_endproc
 1149              	.LFE71:
 1151              	 .section .text.xSendEventToIPTask,"ax",%progbits
 1152              	 .align 2
 1153              	 .global xSendEventToIPTask
 1154              	 .thumb
 1155              	 .thumb_func
 1157              	xSendEventToIPTask:
 1158              	.LFB72:
1271:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** IPStackEvent_t xEventMessage;
 1159              	 .loc 1 1271 0
 1160              	 .cfi_startproc
 1161              	 
 1162              	 
 1163              	.LVL122:
 1164 0000 00B5     	 push {lr}
 1165              	.LCFI21:
 1166              	 .cfi_def_cfa_offset 4
 1167              	 .cfi_offset 14,-4
 1168 0002 83B0     	 sub sp,sp,#12
 1169              	.LCFI22:
 1170              	 .cfi_def_cfa_offset 16
 1171              	.LVL123:
1275:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xEventMessage.pvData = ( void* )NULL;
 1172              	 .loc 1 1275 0
 1173 0004 8DF80000 	 strb r0,[sp]
1276:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1174              	 .loc 1 1276 0
 1175 0008 0021     	 movs r1,#0
 1176 000a 0191     	 str r1,[sp,#4]
1278:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1177              	 .loc 1 1278 0
 1178 000c 6846     	 mov r0,sp
 1179              	.LVL124:
 1180 000e FFF7FEFF 	 bl xSendEventStructToIPTask
 1181              	.LVL125:
1279:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 1182              	 .loc 1 1279 0
 1183 0012 03B0     	 add sp,sp,#12
 1184              	.LCFI23:
 1185              	 .cfi_def_cfa_offset 4
 1186              	 
 1187 0014 5DF804FB 	 ldr pc,[sp],#4
 1188              	 .cfi_endproc
 1189              	.LFE72:
 1191              	 .section .text.eConsiderFrameForProcessing,"ax",%progbits
 1192              	 .align 2
 1193              	 .global eConsiderFrameForProcessing
 1194              	 .thumb
 1195              	 .thumb_func
 1197              	eConsiderFrameForProcessing:
 1198              	.LFB74:
1347:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eReturn;
 1199              	 .loc 1 1347 0
 1200              	 .cfi_startproc
 1201              	 
 1202              	 
 1203              	.LVL126:
 1204 0000 10B5     	 push {r4,lr}
 1205              	.LCFI24:
 1206              	 .cfi_def_cfa_offset 8
 1207              	 .cfi_offset 4,-8
 1208              	 .cfi_offset 14,-4
 1209 0002 0446     	 mov r4,r0
 1210              	.LVL127:
1354:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1211              	 .loc 1 1354 0
 1212 0004 0C48     	 ldr r0,.L102
 1213              	.LVL128:
 1214 0006 2146     	 mov r1,r4
 1215 0008 0622     	 movs r2,#6
 1216 000a FFF7FEFF 	 bl memcmp
 1217              	.LVL129:
 1218 000e 40B1     	 cbz r0,.L99
1359:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1219              	 .loc 1 1359 0
 1220 0010 0A48     	 ldr r0,.L102+4
 1221 0012 2146     	 mov r1,r4
 1222 0014 0622     	 movs r2,#6
 1223 0016 FFF7FEFF 	 bl memcmp
 1224              	.LVL130:
1357:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1225              	 .loc 1 1357 0
 1226 001a B0FA80F0 	 clz r0,r0
 1227 001e 4009     	 lsrs r0,r0,#5
 1228              	.LVL131:
 1229              	.LBB100:
1383:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1230              	 .loc 1 1383 0
 1231 0020 48B1     	 cbz r0,.L100
 1232              	.LVL132:
 1233              	.L99:
1385:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usFrameType = FreeRTOS_ntohs( usFrameType );
 1234              	 .loc 1 1385 0
 1235 0022 A089     	 ldrh r0,[r4,#12]
 1236              	.LVL133:
1386:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1237              	 .loc 1 1386 0
 1238 0024 030A     	 lsrs r3,r0,#8
 1239 0026 43EA0020 	 orr r0,r3,r0,lsl#8
 1240              	.LVL134:
1388:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 1241              	 .loc 1 1388 0
 1242 002a 80B2     	 uxth r0,r0
 1243              	.LBE100:
1362:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1244              	 .loc 1 1362 0
 1245 002c B0F5C06F 	 cmp r0,#1536
 1246 0030 94BF     	 ite ls
 1247 0032 0020     	 movls r0,#0
 1248              	.LVL135:
 1249 0034 0120     	 movhi r0,#1
 1250              	.LVL136:
 1251              	.L100:
1398:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 1252              	 .loc 1 1398 0
 1253 0036 10BD     	 pop {r4,pc}
 1254              	.LVL137:
 1255              	.L103:
 1256              	 .align 2
 1257              	.L102:
 1258 0038 00000000 	 .word xDefaultPartUDPPacketHeader
 1259 003c 00000000 	 .word .LANCHOR10
 1260              	 .cfi_endproc
 1261              	.LFE74:
 1263              	 .section .text.vIPNetworkUpCalls,"ax",%progbits
 1264              	 .align 2
 1265              	 .global vIPNetworkUpCalls
 1266              	 .thumb
 1267              	 .thumb_func
 1269              	vIPNetworkUpCalls:
 1270              	.LFB76:
1457:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkUp = pdTRUE;
 1271              	 .loc 1 1457 0
 1272              	 .cfi_startproc
 1273              	 
 1274              	 
 1275 0000 38B5     	 push {r3,r4,r5,lr}
 1276              	.LCFI25:
 1277              	 .cfi_def_cfa_offset 16
 1278              	 .cfi_offset 3,-16
 1279              	 .cfi_offset 4,-12
 1280              	 .cfi_offset 5,-8
 1281              	 .cfi_offset 14,-4
1458:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1282              	 .loc 1 1458 0
 1283 0002 0122     	 movs r2,#1
 1284 0004 0A4B     	 ldr r3,.L106
 1285 0006 1A60     	 str r2,[r3]
1462:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1286              	 .loc 1 1462 0
 1287 0008 0020     	 movs r0,#0
 1288 000a FFF7FEFF 	 bl vApplicationIPNetworkEventHook
 1289              	.LVL138:
 1290              	.LBB106:
1471:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1291              	 .loc 1 1471 0
 1292 000e FFF7FEFF 	 bl vDNSInitialise
 1293              	.LVL139:
 1294              	.LBE106:
 1295              	.LBB107:
 1296              	.LBB108:
 758:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	prvIPTimerStart( pxTimer, xTime );
 1297              	 .loc 1 758 0
 1298 0012 084C     	 ldr r4,.L106+4
 1299 0014 42F21075 	 movw r5,#10000
 1300 0018 2561     	 str r5,[r4,#16]
 1301              	.LVL140:
 1302              	.LBB109:
 1303              	.LBB110:
 740:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulRemainingTime = xTime;
 1304              	 .loc 1 740 0
 1305 001a 201D     	 adds r0,r4,#4
 1306 001c FFF7FEFF 	 bl vTaskSetTimeOutState
 1307              	.LVL141:
 741:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1308              	 .loc 1 741 0
 1309 0020 E560     	 str r5,[r4,#12]
 749:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1310              	 .loc 1 749 0
 1311 0022 2378     	 ldrb r3,[r4]
 752:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1312              	 .loc 1 752 0
 1313 0024 03F0FD03 	 and r3,r3,#253
 1314 0028 43F00103 	 orr r3,r3,#1
 1315 002c 2370     	 strb r3,[r4]
 1316 002e 38BD     	 pop {r3,r4,r5,pc}
 1317              	.L107:
 1318              	 .align 2
 1319              	.L106:
 1320 0030 00000000 	 .word .LANCHOR11
 1321 0034 00000000 	 .word .LANCHOR12
 1322              	.LBE110:
 1323              	.LBE109:
 1324              	.LBE108:
 1325              	.LBE107:
 1326              	 .cfi_endproc
 1327              	.LFE76:
 1329              	 .section .text.prvProcessNetworkDownEvent,"ax",%progbits
 1330              	 .align 2
 1331              	 .thumb
 1332              	 .thumb_func
 1334              	prvProcessNetworkDownEvent:
 1335              	.LFB75:
1402:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Stop the ARP timer while there is no network. */
 1336              	 .loc 1 1402 0
 1337              	 .cfi_startproc
 1338              	 
 1339              	 
 1340 0000 08B5     	 push {r3,lr}
 1341              	.LCFI26:
 1342              	 .cfi_def_cfa_offset 8
 1343              	 .cfi_offset 3,-8
 1344              	 .cfi_offset 14,-4
1404:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1345              	 .loc 1 1404 0
 1346 0002 0F4B     	 ldr r3,.L113
 1347 0004 1A78     	 ldrb r2,[r3]
 1348 0006 6FF30002 	 bfc r2,#0,#1
 1349 000a 1A70     	 strb r2,[r3]
 1350              	.LBB111:
1413:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1351              	 .loc 1 1413 0
 1352 000c 0D4B     	 ldr r3,.L113+4
 1353 000e 1B68     	 ldr r3,[r3]
 1354 0010 012B     	 cmp r3,#1
 1355 0012 02D1     	 bne .L109
1415:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 1356              	 .loc 1 1415 0
 1357 0014 0120     	 movs r0,#1
 1358 0016 FFF7FEFF 	 bl vApplicationIPNetworkEventHook
 1359              	.LVL142:
 1360              	.L109:
1417:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1361              	 .loc 1 1417 0
 1362 001a 0122     	 movs r2,#1
 1363 001c 094B     	 ldr r3,.L113+4
 1364 001e 1A60     	 str r2,[r3]
 1365              	.LBE111:
1424:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1366              	 .loc 1 1424 0
 1367 0020 FFF7FEFF 	 bl FreeRTOS_ClearARP
 1368              	.LVL143:
1429:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1369              	 .loc 1 1429 0
 1370 0024 FFF7FEFF 	 bl xNetworkInterfaceInitialise
 1371              	.LVL144:
 1372 0028 0128     	 cmp r0,#1
 1373 002a 06D0     	 beq .L110
1434:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		FreeRTOS_NetworkDown();
 1374              	 .loc 1 1434 0
 1375 002c 40F6B830 	 movw r0,#3000
 1376 0030 FFF7FEFF 	 bl vTaskDelay
 1377              	.LVL145:
1435:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1378              	 .loc 1 1435 0
 1379 0034 FFF7FEFF 	 bl FreeRTOS_NetworkDown
 1380              	.LVL146:
 1381 0038 08BD     	 pop {r3,pc}
 1382              	.L110:
1449:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 1383              	 .loc 1 1449 0
 1384 003a FFF7FEFF 	 bl vIPNetworkUpCalls
 1385              	.LVL147:
 1386 003e 08BD     	 pop {r3,pc}
 1387              	.L114:
 1388              	 .align 2
 1389              	.L113:
 1390 0040 00000000 	 .word .LANCHOR12
 1391 0044 00000000 	 .word .LANCHOR13
 1392              	 .cfi_endproc
 1393              	.LFE75:
 1395              	 .section .text.xIsIPv4Multicast,"ax",%progbits
 1396              	 .align 2
 1397              	 .global xIsIPv4Multicast
 1398              	 .thumb
 1399              	 .thumb_func
 1401              	xIsIPv4Multicast:
 1402              	.LFB78:
1565:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn;
 1403              	 .loc 1 1565 0
 1404              	 .cfi_startproc
 1405              	 
 1406              	 
 1407              	 
 1408              	.LVL148:
1567:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1409              	 .loc 1 1567 0
 1410 0000 0306     	 lsls r3,r0,#24
 1411 0002 43EA1063 	 orr r3,r3,r0,lsr#24
 1412 0006 00F47F42 	 and r2,r0,#65280
 1413 000a 43EA0223 	 orr r3,r3,r2,lsl#8
 1414              	.LVL149:
 1415 000e 00F47F00 	 and r0,r0,#16711680
 1416              	.LVL150:
 1417 0012 43EA1020 	 orr r0,r3,r0,lsr#8
 1418              	.LVL151:
1569:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1419              	 .loc 1 1569 0
 1420 0016 00F10050 	 add r0,r0,#536870912
 1421              	.LVL152:
1578:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 1422              	 .loc 1 1578 0
 1423 001a B0F1805F 	 cmp r0,#268435456
 1424 001e 2CBF     	 ite cs
 1425 0020 0020     	 movcs r0,#0
 1426              	.LVL153:
 1427 0022 0120     	 movcc r0,#1
 1428 0024 7047     	 bx lr
 1429              	 .cfi_endproc
 1430              	.LFE78:
 1432 0026 00BF     	 .section .text.vSetMultiCastIPv4MacAddress,"ax",%progbits
 1433              	 .align 2
 1434              	 .global vSetMultiCastIPv4MacAddress
 1435              	 .thumb
 1436              	 .thumb_func
 1438              	vSetMultiCastIPv4MacAddress:
 1439              	.LFB79:
1582:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 1440              	 .loc 1 1582 0
 1441              	 .cfi_startproc
 1442              	 
 1443              	 
 1444              	 
 1445              	.LVL154:
1583:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1446              	 .loc 1 1583 0
 1447 0000 0306     	 lsls r3,r0,#24
 1448 0002 43EA1063 	 orr r3,r3,r0,lsr#24
 1449 0006 00F47F42 	 and r2,r0,#65280
 1450 000a 43EA0223 	 orr r3,r3,r2,lsl#8
 1451 000e 00F47F00 	 and r0,r0,#16711680
 1452              	.LVL155:
 1453 0012 43EA1020 	 orr r0,r3,r0,lsr#8
 1454              	.LVL156:
1585:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 1455              	 .loc 1 1585 0
 1456 0016 0123     	 movs r3,#1
 1457 0018 0B70     	 strb r3,[r1]
1586:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 1458              	 .loc 1 1586 0
 1459 001a 0023     	 movs r3,#0
 1460 001c 4B70     	 strb r3,[r1,#1]
1587:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU );	/* Use 7 bits. */
 1461              	 .loc 1 1587 0
 1462 001e 5E23     	 movs r3,#94
 1463 0020 8B70     	 strb r3,[r1,#2]
1588:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >>  8 ) & 0xffU );	/* Use 8 bits. */
 1464              	 .loc 1 1588 0
 1465 0022 C0F30643 	 ubfx r3,r0,#16,#7
 1466 0026 CB70     	 strb r3,[r1,#3]
1589:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP       ) & 0xffU );	/* Use 8 bits. */
 1467              	 .loc 1 1589 0
 1468 0028 030A     	 lsrs r3,r0,#8
 1469 002a 0B71     	 strb r3,[r1,#4]
1590:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1470              	 .loc 1 1590 0
 1471 002c 4871     	 strb r0,[r1,#5]
 1472 002e 7047     	 bx lr
 1473              	 .cfi_endproc
 1474              	.LFE79:
 1476              	 .section .text.usGenerateChecksum,"ax",%progbits
 1477              	 .align 2
 1478              	 .global usGenerateChecksum
 1479              	 .thumb
 1480              	 .thumb_func
 1482              	usGenerateChecksum:
 1483              	.LFB87:
2487:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* MISRA/PC-lint doesn't like the use of unions. Here, they are a great
 1484              	 .loc 1 2487 0
 1485              	 .cfi_startproc
 1486              	 
 1487              	 
 1488              	.LVL157:
 1489 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 1490              	.LCFI27:
 1491              	 .cfi_def_cfa_offset 20
 1492              	 .cfi_offset 4,-20
 1493              	 .cfi_offset 5,-16
 1494              	 .cfi_offset 6,-12
 1495              	 .cfi_offset 7,-8
 1496              	 .cfi_offset 14,-4
 1497              	.LVL158:
2502:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = ( uint32_t ) usTemp;
 1498              	 .loc 1 2502 0
 1499 0002 030A     	 lsrs r3,r0,#8
 1500 0004 43EA0020 	 orr r0,r3,r0,lsl#8
 1501              	.LVL159:
2503:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xTerm.u32 = 0UL;
 1502              	 .loc 1 2503 0
 1503 0008 83B2     	 uxth r3,r0
 1504 000a 1846     	 mov r0,r3
 1505              	.LVL160:
2504:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1506              	 .loc 1 2504 0
 1507 000c 0027     	 movs r7,#0
 1508              	.LVL161:
2509:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1509              	 .loc 1 2509 0
 1510 000e 01F00304 	 and r4,r1,#3
 1511              	.LVL162:
2512:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1512              	 .loc 1 2512 0
 1513 0012 11F0010E 	 ands lr,r1,#1
 1514 0016 05D0     	 beq .L118
2512:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1515              	 .loc 1 2512 0 is_stmt 0 discriminator 1
 1516 0018 6AB1     	 cbz r2,.L119
2514:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSource.u8ptr++;
 1517              	 .loc 1 2514 0 is_stmt 1
 1518 001a 11F8015B 	 ldrb r5,[r1],#1
 1519              	.LVL163:
 1520 001e 65F30F27 	 bfi r7,r5,#8,#8
 1521              	.LVL164:
2516:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Now xSource is word (16-bit) aligned. */
 1522              	 .loc 1 2516 0
 1523 0022 013A     	 subs r2,r2,#1
 1524              	.LVL165:
 1525              	.L118:
2521:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1526              	 .loc 1 2521 0
 1527 0024 013C     	 subs r4,r4,#1
 1528              	.LVL166:
 1529 0026 012C     	 cmp r4,#1
 1530 0028 05D8     	 bhi .L119
2521:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1531              	 .loc 1 2521 0 is_stmt 0 discriminator 1
 1532 002a 012A     	 cmp r2,#1
 1533 002c 03D9     	 bls .L119
2523:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSource.u16ptr++;
 1534              	 .loc 1 2523 0 is_stmt 1
 1535 002e 31F8020B 	 ldrh r0,[r1],#2
 1536              	.LVL167:
 1537 0032 1844     	 add r0,r0,r3
 1538              	.LVL168:
2525:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Now xSource is word (32-bit) aligned. */
 1539              	 .loc 1 2525 0
 1540 0034 023A     	 subs r2,r2,#2
 1541              	.LVL169:
 1542              	.L119:
2530:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1543              	 .loc 1 2530 0
 1544 0036 22F00306 	 bic r6,r2,#3
 1545 003a 0C3E     	 subs r6,r6,#12
 1546 003c 0E44     	 add r6,r6,r1
 1547              	.LVL170:
2535:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1548              	 .loc 1 2535 0
 1549 003e 8E42     	 cmp r6,r1
 1550 0040 1BD9     	 bls .L131
 1551 0042 0B46     	 mov r3,r1
 1552 0044 0024     	 movs r4,#0
 1553              	.LVL171:
 1554              	.L125:
2539:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 < xSum.u32 )
 1555              	 .loc 1 2539 0
 1556 0046 1D68     	 ldr r5,[r3]
 1557              	.LVL172:
2540:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1558              	 .loc 1 2540 0
 1559 0048 4019     	 adds r0,r0,r5
 1560              	.LVL173:
2542:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 1561              	 .loc 1 2542 0
 1562 004a 28BF     	 it cs
 1563 004c 0134     	 addcs r4,r4,#1
 1564              	.LVL174:
2547:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 > xSum.u32 )
 1565              	 .loc 1 2547 0
 1566 004e 5D68     	 ldr r5,[r3,#4]
2548:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1567              	 .loc 1 2548 0
 1568 0050 4019     	 adds r0,r0,r5
 1569              	.LVL175:
2550:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 1570              	 .loc 1 2550 0
 1571 0052 28BF     	 it cs
 1572 0054 0134     	 addcs r4,r4,#1
 1573              	.LVL176:
2554:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 < xSum.u32 )
 1574              	 .loc 1 2554 0
 1575 0056 9D68     	 ldr r5,[r3,#8]
 1576              	.LVL177:
2555:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1577              	 .loc 1 2555 0
 1578 0058 4019     	 adds r0,r0,r5
 1579              	.LVL178:
2557:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 1580              	 .loc 1 2557 0
 1581 005a 28BF     	 it cs
 1582 005c 0134     	 addcs r4,r4,#1
 1583              	.LVL179:
2560:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1584              	 .loc 1 2560 0
 1585 005e DD68     	 ldr r5,[r3,#12]
2562:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1586              	 .loc 1 2562 0
 1587 0060 4019     	 adds r0,r0,r5
 1588              	.LVL180:
2564:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 1589              	 .loc 1 2564 0
 1590 0062 28BF     	 it cs
 1591 0064 0134     	 addcs r4,r4,#1
 1592              	.LVL181:
2568:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1593              	 .loc 1 2568 0
 1594 0066 1033     	 adds r3,r3,#16
 1595              	.LVL182:
2535:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1596              	 .loc 1 2535 0
 1597 0068 9E42     	 cmp r6,r3
 1598 006a ECD8     	 bhi .L125
 1599 006c CB43     	 mvns r3,r1
 1600              	.LVL183:
 1601 006e 1E44     	 add r6,r6,r3
 1602              	.LVL184:
 1603 0070 26F00F06 	 bic r6,r6,#15
 1604 0074 1036     	 adds r6,r6,#16
 1605 0076 3144     	 add r1,r1,r6
 1606              	.LVL185:
 1607 0078 00E0     	 b .L120
 1608              	.LVL186:
 1609              	.L131:
2493:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usTemp;
 1610              	 .loc 1 2493 0
 1611 007a 0024     	 movs r4,#0
 1612              	.LVL187:
 1613              	.L120:
2572:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1614              	 .loc 1 2572 0
 1615 007c 83B2     	 uxth r3,r0
 1616 007e 03EB1040 	 add r0,r3,r0,lsr#16
 1617 0082 2044     	 add r0,r0,r4
 1618              	.LVL188:
 1619 0084 0446     	 mov r4,r0
 1620              	.LVL189:
2575:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1621              	 .loc 1 2575 0
 1622 0086 02F00E05 	 and r5,r2,#14
 1623 008a 0D44     	 add r5,r5,r1
 1624              	.LVL190:
2581:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1625              	 .loc 1 2581 0
 1626 008c 8D42     	 cmp r5,r1
 1627 008e 0CD9     	 bls .L126
 1628 0090 0B46     	 mov r3,r1
 1629              	.LVL191:
 1630              	.L127:
2584:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSource.u16ptr++;
 1631              	 .loc 1 2584 0
 1632 0092 33F8020B 	 ldrh r0,[r3],#2
 1633              	.LVL192:
 1634 0096 0444     	 add r4,r4,r0
 1635              	.LVL193:
2581:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1636              	 .loc 1 2581 0
 1637 0098 9D42     	 cmp r5,r3
 1638 009a FAD8     	 bhi .L127
 1639 009c CB43     	 mvns r3,r1
 1640              	.LVL194:
 1641 009e 1D44     	 add r5,r5,r3
 1642              	.LVL195:
 1643 00a0 25F00105 	 bic r5,r5,#1
 1644 00a4 0235     	 adds r5,r5,#2
 1645 00a6 2944     	 add r1,r1,r5
 1646              	.LVL196:
 1647 00a8 2046     	 mov r0,r4
 1648              	.LVL197:
 1649              	.L126:
2588:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1650              	 .loc 1 2588 0
 1651 00aa 12F0010F 	 tst r2,#1
2590:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1652              	 .loc 1 2590 0
 1653 00ae 1CBF     	 itt ne
 1654 00b0 0B78     	 ldrbne r3,[r1]
 1655 00b2 63F30707 	 bfine r7,r3,#0,#8
2592:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1656              	 .loc 1 2592 0
 1657 00b6 3844     	 add r0,r0,r7
 1658              	.LVL198:
2597:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1659              	 .loc 1 2597 0
 1660 00b8 83B2     	 uxth r3,r0
 1661 00ba 03EB1040 	 add r0,r3,r0,lsr#16
2600:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1662              	 .loc 1 2600 0
 1663 00be 83B2     	 uxth r3,r0
 1664 00c0 03EB1040 	 add r0,r3,r0,lsr#16
2602:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1665              	 .loc 1 2602 0
 1666 00c4 BEF1000F 	 cmp lr,#0
 1667 00c8 04D0     	 beq .L130
2606:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1668              	 .loc 1 2606 0
 1669 00ca C0F30723 	 ubfx r3,r0,#8,#8
 1670 00ce 0002     	 lsls r0,r0,#8
 1671 00d0 80B2     	 uxth r0,r0
 1672 00d2 1843     	 orrs r0,r0,r3
 1673              	.L130:
 1674 00d4 80B2     	 uxth r0,r0
2610:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1675              	 .loc 1 2610 0
 1676 00d6 030A     	 lsrs r3,r0,#8
 1677 00d8 43EA0020 	 orr r0,r3,r0,lsl#8
2611:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 1678              	 .loc 1 2611 0
 1679 00dc 80B2     	 uxth r0,r0
 1680 00de F0BD     	 pop {r4,r5,r6,r7,pc}
 1681              	 .cfi_endproc
 1682              	.LFE87:
 1684              	 .section .text.usGenerateProtocolChecksum,"ax",%progbits
 1685              	 .align 2
 1686              	 .global usGenerateProtocolChecksum
 1687              	 .thumb
 1688              	 .thumb_func
 1690              	usGenerateProtocolChecksum:
 1691              	.LFB86:
2176:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t ulLength;
 1692              	 .loc 1 2176 0
 1693              	 .cfi_startproc
 1694              	 
 1695              	 
 1696              	.LVL199:
2197:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1697              	 .loc 1 2197 0
 1698 0000 2129     	 cmp r1,#33
 1699 0002 71D9     	 bls .L147
2176:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t ulLength;
 1700              	 .loc 1 2176 0
 1701 0004 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 1702              	.LCFI28:
 1703              	 .cfi_def_cfa_offset 24
 1704              	 .cfi_offset 4,-24
 1705              	 .cfi_offset 5,-20
 1706              	 .cfi_offset 6,-16
 1707              	 .cfi_offset 7,-12
 1708              	 .cfi_offset 8,-8
 1709              	 .cfi_offset 14,-4
 1710              	.LVL200:
2210:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 1711              	 .loc 1 2210 0
 1712 0008 837B     	 ldrb r3,[r0,#14]
 1713 000a 03F00F03 	 and r3,r3,#15
2211:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1714              	 .loc 1 2211 0
 1715 000e 9B00     	 lsls r3,r3,#2
 1716              	.LVL201:
2214:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1717              	 .loc 1 2214 0
 1718 0010 03F10E04 	 add r4,r3,#14
 1719 0014 A142     	 cmp r1,r4
 1720 0016 6AD3     	 bcc .L148
2220:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usLength = FreeRTOS_ntohs( usLength );
 1721              	 .loc 1 2220 0
 1722 0018 058A     	 ldrh r5,[r0,#16]
 1723              	.LVL202:
2221:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 1724              	 .loc 1 2221 0
 1725 001a 2C0A     	 lsrs r4,r5,#8
 1726 001c 44EA0524 	 orr r4,r4,r5,lsl#8
 1727              	.LVL203:
2222:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1728              	 .loc 1 2222 0
 1729 0020 A4B2     	 uxth r4,r4
 1730 0022 0E34     	 adds r4,r4,#14
 1731              	.LVL204:
 1732 0024 A142     	 cmp r1,r4
 1733 0026 66D3     	 bcc .L149
2230:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1734              	 .loc 1 2230 0
 1735 0028 C57D     	 ldrb r5,[r0,#23]
 1736              	.LVL205:
2237:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1737              	 .loc 1 2237 0
 1738 002a A3F11404 	 sub r4,r3,#20
 1739              	.LVL206:
 1740 002e 0619     	 adds r6,r0,r4
 1741              	.LVL207:
2240:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1742              	 .loc 1 2240 0
 1743 0030 112D     	 cmp r5,#17
 1744 0032 06D1     	 bne .L137
2242:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 1745              	 .loc 1 2242 0
 1746 0034 03F11604 	 add r4,r3,#22
 1747 0038 A142     	 cmp r1,r4
 1748 003a 60D3     	 bcc .L150
2249:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigHAS_DEBUG_PRINTF != 0 )
 1749              	 .loc 1 2249 0
 1750 003c 06F12804 	 add r4,r6,#40
 1751              	.LVL208:
 1752 0040 12E0     	 b .L138
 1753              	.LVL209:
 1754              	.L137:
2256:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1755              	 .loc 1 2256 0
 1756 0042 062D     	 cmp r5,#6
 1757 0044 06D1     	 bne .L139
2258:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 1758              	 .loc 1 2258 0
 1759 0046 03F12204 	 add r4,r3,#34
 1760 004a A142     	 cmp r1,r4
 1761 004c 5BD3     	 bcc .L151
2265:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigHAS_DEBUG_PRINTF != 0 )
 1762              	 .loc 1 2265 0
 1763 004e 06F13204 	 add r4,r6,#50
 1764              	.LVL210:
 1765 0052 09E0     	 b .L138
 1766              	.LVL211:
 1767              	.L139:
2272:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
 1768              	 .loc 1 2272 0
 1769 0054 6C1E     	 subs r4,r5,#1
 1770 0056 E4B2     	 uxtb r4,r4
 1771 0058 012C     	 cmp r4,#1
 1772 005a 58D8     	 bhi .L152
2275:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 1773              	 .loc 1 2275 0
 1774 005c 03F11604 	 add r4,r3,#22
 1775 0060 A142     	 cmp r1,r4
 1776 0062 58D3     	 bcc .L153
2282:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigHAS_DEBUG_PRINTF != 0 )
 1777              	 .loc 1 2282 0
 1778 0064 06F12404 	 add r4,r6,#36
 1779              	.LVL212:
 1780              	.L138:
2306:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1781              	 .loc 1 2306 0
 1782 0068 12B1     	 cbz r2,.L140
2310:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 1783              	 .loc 1 2310 0
 1784 006a 0021     	 movs r1,#0
 1785              	.LVL213:
 1786 006c 2180     	 strh r1,[r4]
 1787              	.LVL214:
 1788 006e 03E0     	 b .L141
 1789              	.LVL215:
 1790              	.L140:
2312:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1791              	 .loc 1 2312 0
 1792 0070 2188     	 ldrh r1,[r4]
 1793              	.LVL216:
 1794 0072 09B9     	 cbnz r1,.L141
2312:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1795              	 .loc 1 2312 0 is_stmt 0 discriminator 1
 1796 0074 112D     	 cmp r5,#17
 1797 0076 52D0     	 beq .L154
 1798              	.LVL217:
 1799              	.L141:
2346:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usLength = FreeRTOS_ntohs( usLength );
 1800              	 .loc 1 2346 0 is_stmt 1
 1801 0078 078A     	 ldrh r7,[r0,#16]
 1802              	.LVL218:
2347:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		ulLength = ( uint32_t ) usLength;
 1803              	 .loc 1 2347 0
 1804 007a 390A     	 lsrs r1,r7,#8
 1805 007c 41EA0727 	 orr r7,r1,r7,lsl#8
 1806              	.LVL219:
2348:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		ulLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally minus 20 */
 1807              	 .loc 1 2348 0
 1808 0080 BFB2     	 uxth r7,r7
 1809              	.LVL220:
2349:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1810              	 .loc 1 2349 0
 1811 0082 FF1A     	 subs r7,r7,r3
 1812              	.LVL221:
2351:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ulLength > ( ( uint32_t ) ipconfigNETWORK_MTU - ( uint32_t ) uxIPHeaderLength ) ) )
 1813              	 .loc 1 2351 0
 1814 0084 072F     	 cmp r7,#7
 1815 0086 4DD9     	 bls .L155
2352:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1816              	 .loc 1 2352 0 discriminator 1
 1817 0088 C3F59663 	 rsb r3,r3,#1200
 1818              	.LVL222:
2351:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ulLength > ( ( uint32_t ) ipconfigNETWORK_MTU - ( uint32_t ) uxIPHeaderLength ) ) )
 1819              	 .loc 1 2351 0 discriminator 1
 1820 008c 9F42     	 cmp r7,r3
 1821 008e 4DD8     	 bhi .L156
 1822 0090 9046     	 mov r8,r2
 1823 0092 0146     	 mov r1,r0
 1824              	.LVL223:
2368:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1825              	 .loc 1 2368 0
 1826 0094 022D     	 cmp r5,#2
 1827 0096 08D8     	 bhi .L142
2372:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					( const uint8_t * ) &( pxProtPack->xTCPPacket.xTCPHeader ), ( size_t ) ulLength ) );
 1828              	 .loc 1 2372 0
 1829 0098 0020     	 movs r0,#0
 1830              	.LVL224:
 1831 009a 06F12201 	 add r1,r6,#34
 1832              	.LVL225:
 1833 009e 3A46     	 mov r2,r7
 1834              	.LVL226:
 1835 00a0 FFF7FEFF 	 bl usGenerateChecksum
 1836              	.LVL227:
2371:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ~usGenerateChecksum( 0U,
 1837              	 .loc 1 2371 0
 1838 00a4 C043     	 mvns r0,r0
 1839 00a6 80B2     	 uxth r0,r0
 1840              	.LVL228:
 1841 00a8 08E0     	 b .L143
 1842              	.LVL229:
 1843              	.L142:
2379:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1844              	 .loc 1 2379 0
 1845 00aa 7819     	 adds r0,r7,r5
 1846              	.LVL230:
2383:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 										   ipPOINTER_CAST( const uint8_t *, &( pxIPPacket->xIPHeader.ulSourceIPAddress ) ),
 1847              	 .loc 1 2383 0
 1848 00ac 80B2     	 uxth r0,r0
 1849 00ae 1A31     	 adds r1,r1,#26
 1850              	.LVL231:
 1851 00b0 07F10802 	 add r2,r7,#8
 1852              	.LVL232:
 1853 00b4 FFF7FEFF 	 bl usGenerateChecksum
 1854              	.LVL233:
2382:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					( ~usGenerateChecksum( usChecksum,
 1855              	 .loc 1 2382 0
 1856 00b8 C043     	 mvns r0,r0
 1857 00ba 80B2     	 uxth r0,r0
 1858              	.LVL234:
 1859              	.L143:
2389:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 1860              	 .loc 1 2389 0
 1861 00bc B8F1000F 	 cmp r8,#0
 1862 00c0 0AD1     	 bne .L144
2394:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 1863              	 .loc 1 2394 0
 1864 00c2 4FF6FF73 	 movw r3,#65535
 1865 00c6 0028     	 cmp r0,#0
 1866 00c8 08BF     	 it eq
 1867 00ca 1846     	 moveq r0,r3
 1868              	.LVL235:
2415:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1869              	 .loc 1 2415 0
 1870 00cc 030A     	 lsrs r3,r0,#8
 1871 00ce 43EA0020 	 orr r0,r3,r0,lsl#8
 1872              	.LVL236:
 1873 00d2 80B2     	 uxth r0,r0
 1874              	.LVL237:
 1875 00d4 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1876              	.LVL238:
 1877              	.L144:
2399:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 1878              	 .loc 1 2399 0
 1879 00d8 60BB     	 cbnz r0,.L146
2399:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 1880              	 .loc 1 2399 0 is_stmt 0 discriminator 1
 1881 00da 112D     	 cmp r5,#17
 1882 00dc 4FF0FF35 	 mov r5,#-1
 1883              	.LVL239:
 1884 00e0 18BF     	 it ne
 1885 00e2 0025     	 movne r5,#0
 1886 00e4 A8B2     	 uxth r0,r5
 1887              	.LVL240:
 1888 00e6 25E0     	 b .L146
 1889              	.LVL241:
 1890              	.L147:
 1891              	.LCFI29:
 1892              	 .cfi_def_cfa_offset 0
 1893              	 .cfi_restore 4
 1894              	 .cfi_restore 5
 1895              	 .cfi_restore 6
 1896              	 .cfi_restore 7
 1897              	 .cfi_restore 8
 1898              	 .cfi_restore 14
2199:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			location = 1;
 1899              	 .loc 1 2199 0 is_stmt 1
 1900 00e8 41F23420 	 movw r0,#4660
 1901              	.LVL242:
2450:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 1902              	 .loc 1 2450 0
 1903 00ec 7047     	 bx lr
 1904              	.LVL243:
 1905              	.L148:
 1906              	.LCFI30:
 1907              	 .cfi_def_cfa_offset 24
 1908              	 .cfi_offset 4,-24
 1909              	 .cfi_offset 5,-20
 1910              	 .cfi_offset 6,-16
 1911              	 .cfi_offset 7,-12
 1912              	 .cfi_offset 8,-8
 1913              	 .cfi_offset 14,-4
2216:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			location = 2;
 1914              	 .loc 1 2216 0
 1915 00ee 41F23420 	 movw r0,#4660
 1916              	.LVL244:
 1917 00f2 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1918              	.LVL245:
 1919              	.L149:
2224:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			location = 3;
 1920              	 .loc 1 2224 0
 1921 00f6 41F23420 	 movw r0,#4660
 1922              	.LVL246:
 1923 00fa BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1924              	.LVL247:
 1925              	.L150:
2244:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				location = 4;
 1926              	 .loc 1 2244 0
 1927 00fe 41F23420 	 movw r0,#4660
 1928              	.LVL248:
 1929 0102 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1930              	.LVL249:
 1931              	.L151:
2260:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				location = 5;
 1932              	 .loc 1 2260 0
 1933 0106 41F23420 	 movw r0,#4660
 1934              	.LVL250:
 1935 010a BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1936              	.LVL251:
 1937              	.L152:
2299:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			location = 7;
 1938              	 .loc 1 2299 0
 1939 010e 44F22130 	 movw r0,#17185
 1940              	.LVL252:
 1941 0112 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1942              	.LVL253:
 1943              	.L153:
2277:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				location = 6;
 1944              	 .loc 1 2277 0
 1945 0116 41F23420 	 movw r0,#4660
 1946              	.LVL254:
 1947 011a BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1948              	.LVL255:
 1949              	.L154:
2318:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigHAS_PRINTF != 0 )
 1950              	 .loc 1 2318 0
 1951 011e 0020     	 movs r0,#0
 1952              	.LVL256:
 1953 0120 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1954              	.LVL257:
 1955              	.L155:
2364:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			location = 9;
 1956              	 .loc 1 2364 0
 1957 0124 41F23420 	 movw r0,#4660
 1958              	.LVL258:
 1959 0128 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1960              	.LVL259:
 1961              	.L156:
 1962 012c 41F23420 	 movw r0,#4660
 1963              	.LVL260:
 1964 0130 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1965              	.LVL261:
 1966              	.L146:
2415:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 1967              	 .loc 1 2415 0
 1968 0134 030A     	 lsrs r3,r0,#8
 1969 0136 43EA0020 	 orr r0,r3,r0,lsl#8
 1970              	.LVL262:
 1971 013a 80B2     	 uxth r0,r0
 1972              	.LVL263:
2419:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 1973              	 .loc 1 2419 0
 1974 013c 2080     	 strh r0,[r4]
2450:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 1975              	 .loc 1 2450 0
 1976 013e BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1977              	 .cfi_endproc
 1978              	.LFE86:
 1980 0142 00BF     	 .section .text.vReturnEthernetFrame,"ax",%progbits
 1981              	 .align 2
 1982              	 .global vReturnEthernetFrame
 1983              	 .thumb
 1984              	 .thumb_func
 1986              	vReturnEthernetFrame:
 1987              	.LFB88:
2617:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** EthernetHeader_t *pxEthernetHeader;
 1988              	 .loc 1 2617 0
 1989              	 .cfi_startproc
 1990              	 
 1991              	 
 1992              	.LVL264:
 1993 0000 38B5     	 push {r3,r4,r5,lr}
 1994              	.LCFI31:
 1995              	 .cfi_def_cfa_offset 16
 1996              	 .cfi_offset 3,-16
 1997              	 .cfi_offset 4,-12
 1998              	 .cfi_offset 5,-8
 1999              	 .cfi_offset 14,-4
 2000 0002 0446     	 mov r4,r0
2655:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2001              	 .loc 1 2655 0
 2002 0004 8269     	 ldr r2,[r0,#24]
 2003              	.LVL265:
2658:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( const void * ) ipLOCAL_MAC_A
 2004              	 .loc 1 2658 0
 2005 0006 1346     	 mov r3,r2
 2006 0008 53F8060F 	 ldr r0,[r3,#6]!
 2007              	.LVL266:
 2008 000c 1060     	 str r0,[r2]
 2009 000e 9888     	 ldrh r0,[r3,#4]
 2010 0010 9080     	 strh r0,[r2,#4]
2659:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2011              	 .loc 1 2659 0
 2012 0012 054D     	 ldr r5,.L161
 2013 0014 2868     	 ldr r0,[r5]
 2014 0016 C2F80600 	 str r0,[r2,#6]
 2015 001a AA88     	 ldrh r2,[r5,#4]
 2016              	.LVL267:
 2017 001c 9A80     	 strh r2,[r3,#4]
2662:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 2018              	 .loc 1 2662 0
 2019 001e 2046     	 mov r0,r4
 2020 0020 FFF7FEFF 	 bl xNetworkInterfaceOutput
 2021              	.LVL268:
 2022 0024 38BD     	 pop {r3,r4,r5,pc}
 2023              	.LVL269:
 2024              	.L162:
 2025 0026 00BF     	 .align 2
 2026              	.L161:
 2027 0028 00000000 	 .word xDefaultPartUDPPacketHeader
 2028              	 .cfi_endproc
 2029              	.LFE88:
 2031              	 .section .text.prvIPTask,"ax",%progbits
 2032              	 .align 2
 2033              	 .thumb
 2034              	 .thumb_func
 2036              	prvIPTask:
 2037              	.LFB52:
 330:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** IPStackEvent_t xReceivedEvent;
 2038              	 .loc 1 330 0
 2039              	 .cfi_startproc
 2040              	 
 2041              	 
 2042              	.LVL270:
 2043 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
 2044              	.LCFI32:
 2045              	 .cfi_def_cfa_offset 36
 2046              	 .cfi_offset 4,-36
 2047              	 .cfi_offset 5,-32
 2048              	 .cfi_offset 6,-28
 2049              	 .cfi_offset 7,-24
 2050              	 .cfi_offset 8,-20
 2051              	 .cfi_offset 9,-16
 2052              	 .cfi_offset 10,-12
 2053              	 .cfi_offset 11,-8
 2054              	 .cfi_offset 14,-4
 2055 0004 87B0     	 sub sp,sp,#28
 2056              	.LCFI33:
 2057              	 .cfi_def_cfa_offset 64
 346:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2058              	 .loc 1 346 0
 2059 0006 FFF7FEFF 	 bl FreeRTOS_NetworkDown
 2060              	.LVL271:
 2061              	.LBB147:
 2062              	.LBB148:
 758:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	prvIPTimerStart( pxTimer, xTime );
 2063              	 .loc 1 758 0
 2064 000a BA4C     	 ldr r4,.L240
 2065 000c 4FF47A75 	 mov r5,#1000
 2066 0010 2561     	 str r5,[r4,#16]
 2067              	.LVL272:
 2068              	.LBB149:
 2069              	.LBB150:
 740:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulRemainingTime = xTime;
 2070              	 .loc 1 740 0
 2071 0012 201D     	 adds r0,r4,#4
 2072 0014 FFF7FEFF 	 bl vTaskSetTimeOutState
 2073              	.LVL273:
 741:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2074              	 .loc 1 741 0
 2075 0018 E560     	 str r5,[r4,#12]
 749:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 2076              	 .loc 1 749 0
 2077 001a 2378     	 ldrb r3,[r4]
 752:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2078              	 .loc 1 752 0
 2079 001c 03F0FD03 	 and r3,r3,#253
 2080 0020 43F00103 	 orr r3,r3,#1
 2081 0024 2370     	 strb r3,[r4]
 2082              	.LBE150:
 2083              	.LBE149:
 2084              	.LBE148:
 2085              	.LBE147:
 356:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2086              	 .loc 1 356 0
 2087 0026 0122     	 movs r2,#1
 2088 0028 B34B     	 ldr r3,.L240+4
 2089 002a 1A60     	 str r2,[r3]
 2090              	.LBB151:
 2091              	.LBB152:
 673:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 2092              	 .loc 1 673 0
 2093 002c B34F     	 ldr r7,.L240+8
 2094 002e 0197     	 str r7,[sp,#4]
 691:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2095              	 .loc 1 691 0
 2096 0030 B34D     	 ldr r5,.L240+12
 2097              	.LBB153:
 2098              	.LBB154:
 2099              	.LBB155:
 740:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulRemainingTime = xTime;
 2100              	 .loc 1 740 0
 2101 0032 04F1040A 	 add r10,r4,#4
 2102              	.L216:
 2103              	.LBE155:
 2104              	.LBE154:
 2105              	.LBE153:
 673:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 2106              	 .loc 1 673 0
 2107 0036 0198     	 ldr r0,[sp,#4]
 2108 0038 FFF7FEFF 	 bl prvIPTimerCheck
 2109              	.LVL274:
 2110 003c 10B1     	 cbz r0,.L164
 675:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 2111              	 .loc 1 675 0
 2112 003e 0320     	 movs r0,#3
 2113 0040 FFF7FEFF 	 bl xSendEventToIPTask
 2114              	.LVL275:
 2115              	.L164:
 691:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2116              	 .loc 1 691 0
 2117 0044 2846     	 mov r0,r5
 2118 0046 FFF7FEFF 	 bl prvIPTimerCheck
 2119              	.LVL276:
 2120 004a 10B1     	 cbz r0,.L165
 693:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 2121              	 .loc 1 693 0
 2122 004c 0020     	 movs r0,#0
 2123 004e FFF7FEFF 	 bl vDNSCheckCallBack
 2124              	.LVL277:
 2125              	.L165:
 2126              	.LBB158:
 706:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2127              	 .loc 1 706 0
 2128 0052 AC4B     	 ldr r3,.L240+16
 2129 0054 1868     	 ldr r0,[r3]
 2130 0056 FFF7FEFF 	 bl uxQueueMessagesWaiting
 2131              	.LVL278:
 2132 005a B0FA80F6 	 clz r6,r0
 2133 005e 7609     	 lsrs r6,r6,#5
 2134              	.LVL279:
 716:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2135              	 .loc 1 716 0
 2136 0060 2046     	 mov r0,r4
 2137 0062 FFF7FEFF 	 bl prvIPTimerCheck
 2138              	.LVL280:
 720:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2139              	 .loc 1 720 0
 2140 0066 A84B     	 ldr r3,.L240+20
 2141 0068 1B68     	 ldr r3,[r3]
 2142 006a 03B1     	 cbz r3,.L166
 2143 006c 06B9     	 cbnz r6,.L167
 2144              	.L166:
 725:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2145              	 .loc 1 725 0
 2146 006e C0B1     	 cbz r0,.L168
 2147              	.L167:
 2148              	.LVL281:
 729:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			prvIPTimerStart( &xTCPTimer, xNextTime );
 2149              	 .loc 1 729 0
 2150 0070 3046     	 mov r0,r6
 2151 0072 FFF7FEFF 	 bl xTCPTimerCheck
 2152              	.LVL282:
 2153 0076 0646     	 mov r6,r0
 2154              	.LVL283:
 2155              	.LBB157:
 2156              	.LBB156:
 740:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulRemainingTime = xTime;
 2157              	 .loc 1 740 0
 2158 0078 5046     	 mov r0,r10
 2159              	.LVL284:
 2160 007a FFF7FEFF 	 bl vTaskSetTimeOutState
 2161              	.LVL285:
 741:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2162              	 .loc 1 741 0
 2163 007e E660     	 str r6,[r4,#12]
 743:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 2164              	 .loc 1 743 0
 2165 0080 26B9     	 cbnz r6,.L169
 745:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 2166              	 .loc 1 745 0
 2167 0082 2378     	 ldrb r3,[r4]
 2168 0084 43F00203 	 orr r3,r3,#2
 2169 0088 2370     	 strb r3,[r4]
 2170 008a 03E0     	 b .L170
 2171              	.L169:
 749:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 2172              	 .loc 1 749 0
 2173 008c 2378     	 ldrb r3,[r4]
 2174 008e 6FF34103 	 bfc r3,#1,#1
 2175 0092 2370     	 strb r3,[r4]
 2176              	.L170:
 752:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2177              	 .loc 1 752 0
 2178 0094 2378     	 ldrb r3,[r4]
 2179 0096 43F00103 	 orr r3,r3,#1
 2180 009a 2370     	 strb r3,[r4]
 2181              	.LBE156:
 2182              	.LBE157:
 731:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 2183              	 .loc 1 731 0
 2184 009c 0022     	 movs r2,#0
 2185 009e 9A4B     	 ldr r3,.L240+20
 2186 00a0 1A60     	 str r2,[r3]
 2187              	.LVL286:
 2188              	.L168:
 2189              	.LBE158:
 2190              	.LBE152:
 2191              	.LBE151:
 2192              	.LBB159:
 2193              	.LBB160:
 625:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 2194              	 .loc 1 625 0
 2195 00a2 3B78     	 ldrb r3,[r7]
 2196 00a4 13F0010F 	 tst r3,#1
 2197 00a8 06D0     	 beq .L219
 627:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2198              	 .loc 1 627 0
 2199 00aa FA68     	 ldr r2,[r7,#12]
 2200 00ac 42F20F73 	 movw r3,#9999
 2201 00b0 9A42     	 cmp r2,r3
 2202 00b2 04D8     	 bhi .L220
 629:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 2203              	 .loc 1 629 0
 2204 00b4 3A69     	 ldr r2,[r7,#16]
 2205              	.LVL287:
 2206 00b6 04E0     	 b .L171
 2207              	.LVL288:
 2208              	.L219:
 623:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2209              	 .loc 1 623 0
 2210 00b8 42F21072 	 movw r2,#10000
 2211 00bc 01E0     	 b .L171
 2212              	.L220:
 2213 00be 42F21072 	 movw r2,#10000
 2214              	.LVL289:
 2215              	.L171:
 647:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2216              	 .loc 1 647 0
 2217 00c2 E368     	 ldr r3,[r4,#12]
 2218 00c4 9A42     	 cmp r2,r3
 2219 00c6 28BF     	 it cs
 2220 00c8 1A46     	 movcs r2,r3
 2221              	.LVL290:
 656:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2222              	 .loc 1 656 0
 2223 00ca 2B78     	 ldrb r3,[r5]
 2224 00cc 13F0010F 	 tst r3,#1
 2225 00d0 03D0     	 beq .L172
 658:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2226              	 .loc 1 658 0
 2227 00d2 EB68     	 ldr r3,[r5,#12]
 2228 00d4 9A42     	 cmp r2,r3
 2229 00d6 28BF     	 it cs
 2230 00d8 1A46     	 movcs r2,r3
 2231              	.LVL291:
 2232              	.L172:
 2233              	.LBE160:
 2234              	.LBE159:
 375:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2235              	 .loc 1 375 0
 2236 00da 8A4B     	 ldr r3,.L240+16
 2237 00dc 1868     	 ldr r0,[r3]
 2238 00de 04A9     	 add r1,sp,#16
 2239 00e0 FFF7FEFF 	 bl xQueueReceive
 2240              	.LVL292:
 2241 00e4 18B9     	 cbnz r0,.L173
 377:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 2242              	 .loc 1 377 0
 2243 00e6 FF23     	 movs r3,#255
 2244 00e8 8DF81030 	 strb r3,[sp,#16]
 2245 00ec B6E1     	 b .L174
 2246              	.L173:
 397:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2247              	 .loc 1 397 0
 2248 00ee 9DF91030 	 ldrsb r3,[sp,#16]
 2249 00f2 0D2B     	 cmp r3,#13
 2250 00f4 00F2B281 	 bhi .L174
 2251 00f8 DFE813F0 	 tbh [pc,r3,lsl#1]
 2252              	.L176:
 2253 00fc 0E00     	 .2byte (.L175-.L176)/2
 2254 00fe 1400     	 .2byte (.L177-.L176)/2
 2255 0100 6C01     	 .2byte (.L178-.L176)/2
 2256 0102 7101     	 .2byte (.L179-.L176)/2
 2257 0104 8F01     	 .2byte (.L180-.L176)/2
 2258 0106 B001     	 .2byte (.L174-.L176)/2
 2259 0108 9F01     	 .2byte (.L181-.L176)/2
 2260 010a A401     	 .2byte (.L182-.L176)/2
 2261 010c B001     	 .2byte (.L174-.L176)/2
 2262 010e 7401     	 .2byte (.L183-.L176)/2
 2263 0110 8B01     	 .2byte (.L184-.L176)/2
 2264 0112 9701     	 .2byte (.L185-.L176)/2
 2265 0114 9B01     	 .2byte (.L186-.L176)/2
 2266 0116 9301     	 .2byte (.L187-.L176)/2
 2267              	 .p2align 1
 2268              	.L175:
 401:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				prvProcessNetworkDownEvent();
 2269              	 .loc 1 401 0
 2270 0118 0022     	 movs r2,#0
 2271 011a 7C4B     	 ldr r3,.L240+24
 2272 011c 1A60     	 str r2,[r3]
 402:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2273              	 .loc 1 402 0
 2274 011e FFF7FEFF 	 bl prvProcessNetworkDownEvent
 2275              	.LVL293:
 403:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2276              	 .loc 1 403 0
 2277 0122 9BE1     	 b .L174
 2278              	.L177:
 409:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2279              	 .loc 1 409 0
 2280 0124 059E     	 ldr r6,[sp,#20]
 2281              	.LVL294:
 2282              	.LBB161:
 2283              	.LBB162:
 2284              	.LBB163:
1485:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2285              	 .loc 1 1485 0
 2286 0126 46B9     	 cbnz r6,.L188
 2287              	.LBB164:
 2288              	.LBB165:
 2289              	 .loc 2 197 0
 2290              	
 2291 0128 4FF01403 	 mov r3,#20
 2292 012c 83F31188 	 msr basepri,r3
 2293 0130 BFF36F8F 	 isb 
 2294 0134 BFF34F8F 	 dsb 
 2295              	
 2296              	
 2297              	.LVL295:
 2298              	 .thumb
 2299              	.L189:
 2300 0138 FEE7     	 b .L189
 2301              	.L188:
 2302              	.LBE165:
 2303              	.LBE164:
1488:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 2304              	 .loc 1 1488 0
 2305 013a F269     	 ldr r2,[r6,#28]
 2306 013c 0D2A     	 cmp r2,#13
 2307 013e 40F24581 	 bls .L199
 2308              	.LVL296:
1493:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2309              	 .loc 1 1493 0
 2310 0142 D6F81880 	 ldr r8,[r6,#24]
 2311              	.LVL297:
1501:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2312              	 .loc 1 1501 0
 2313 0146 B8F80C30 	 ldrh r3,[r8,#12]
 2314 014a 082B     	 cmp r3,#8
 2315 014c 0AD0     	 beq .L192
 2316 014e B3F5C16F 	 cmp r3,#1544
 2317 0152 40F02E81 	 bne .L237
1505:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 2318              	 .loc 1 1505 0
 2319 0156 292A     	 cmp r2,#41
 2320 0158 40F23881 	 bls .L199
 2321              	.LVL298:
1507:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 2322              	 .loc 1 1507 0
 2323 015c 4046     	 mov r0,r8
 2324 015e FFF7FEFF 	 bl eARPProcessPacket
 2325              	.LVL299:
 2326 0162 29E1     	 b .L191
 2327              	.LVL300:
 2328              	.L192:
1517:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 2329              	 .loc 1 1517 0
 2330 0164 212A     	 cmp r2,#33
 2331 0166 40F23181 	 bls .L199
 2332              	.LVL301:
 2333              	.LBB166:
 2334              	.LBB167:
1744:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
 2335              	 .loc 1 1744 0
 2336 016a 98F80E30 	 ldrb r3,[r8,#14]
 2337              	.LVL302:
1745:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint8_t ucProtocol;
 2338              	 .loc 1 1745 0
 2339 016e 03F00F0E 	 and lr,r3,#15
 2340 0172 4FEA8E01 	 lsl r1,lr,#2
 2341              	.LVL303:
1751:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
 2342              	 .loc 1 1751 0
 2343 0176 A2F10E00 	 sub r0,r2,#14
 2344 017a 8142     	 cmp r1,r0
 2345 017c 00F22681 	 bhi .L199
 2346 0180 1329     	 cmp r1,#19
 2347 0182 40F22381 	 bls .L199
1758:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check if the IP headers are acceptable and if it has our destination. */
 2348              	 .loc 1 1758 0
 2349 0186 98F81790 	 ldrb r9,[r8,#23]
 2350              	.LVL304:
 2351              	.LBB168:
 2352              	.LBB169:
 2353              	.LBB170:
1612:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2354              	 .loc 1 1612 0
 2355 018a D8F81EC0 	 ldr ip,[r8,#30]
 2356              	.LVL305:
1617:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2357              	 .loc 1 1617 0
 2358 018e B8F81400 	 ldrh r0,[r8,#20]
 2359 0192 20F0F000 	 bic r0,r0,#240
 2360 0196 80B2     	 uxth r0,r0
 2361 0198 0028     	 cmp r0,#0
 2362 019a 40F06E81 	 bne .L222
1624:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					 ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 2363              	 .loc 1 1624 0
 2364 019e A3F14500 	 sub r0,r3,#69
 2365 01a2 C0B2     	 uxtb r0,r0
 2366 01a4 0A28     	 cmp r0,#10
 2367 01a6 00F26A81 	 bhi .L223
1631:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it the global broadcast address 255.255.255.255 ? */
 2368              	 .loc 1 1631 0
 2369 01aa 5948     	 ldr r0,.L240+28
 2370 01ac 4069     	 ldr r0,[r0,#20]
 2371 01ae 8445     	 cmp ip,r0
 2372 01b0 0ED0     	 beq .L195
 2373 01b2 BCF1FF3F 	 cmp ip,#-1
 2374 01b6 0BD0     	 beq .L195
1635:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigUSE_LLMNR == 1 )
 2375              	 .loc 1 1635 0
 2376 01b8 DFF858B1 	 ldr fp,.L240+32
1633:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it a specific broadcast address 192.168.1.255 ? */
 2377              	 .loc 1 1633 0
 2378 01bc DBF810B0 	 ldr fp,[fp,#16]
 2379 01c0 DC45     	 cmp ip,fp
 2380 01c2 05D0     	 beq .L195
1620:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 2381              	 .loc 1 1620 0
 2382 01c4 B0FA80F0 	 clz r0,r0
 2383 01c8 4009     	 lsrs r0,r0,#5
 2384              	.LVL306:
 2385              	.LBE170:
1681:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2386              	 .loc 1 1681 0
 2387 01ca 0028     	 cmp r0,#0
 2388 01cc 00F0F480 	 beq .L191
 2389              	.LVL307:
 2390              	.L195:
 2391              	.LBB171:
 2392              	.LBB172:
2082:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 2393              	 .loc 1 2082 0
 2394 01d0 453B     	 subs r3,r3,#69
 2395              	.LVL308:
 2396 01d2 9BB2     	 uxth r3,r3
 2397              	.LVL309:
 2398 01d4 0A2B     	 cmp r3,#10
 2399 01d6 00F25481 	 bhi .L224
 2400              	.LVL310:
2089:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2401              	 .loc 1 2089 0
 2402 01da 4FEA8E03 	 lsl r3,lr,#2
 2403              	.LVL311:
2092:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2404              	 .loc 1 2092 0
 2405 01de 03F10E00 	 add r0,r3,#14
 2406 01e2 8242     	 cmp r2,r0
 2407 01e4 C0F04F81 	 bcc .L225
2098:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usLength = FreeRTOS_ntohs( usLength );
 2408              	 .loc 1 2098 0
 2409 01e8 B8F810E0 	 ldrh lr,[r8,#16]
 2410              	.LVL312:
2099:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 2411              	 .loc 1 2099 0
 2412 01ec 4FEA1E20 	 lsr r0,lr,#8
 2413 01f0 40EA0E20 	 orr r0,r0,lr,lsl#8
 2414              	.LVL313:
2100:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2415              	 .loc 1 2100 0
 2416 01f4 80B2     	 uxth r0,r0
 2417 01f6 00F10E0E 	 add lr,r0,#14
 2418 01fa 7245     	 cmp r2,lr
 2419 01fc C0F04581 	 bcc .L226
 2420              	.LVL314:
2119:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2421              	 .loc 1 2119 0
 2422 0200 B9F1110F 	 cmp r9,#17
 2423 0204 02D1     	 bne .L196
2122:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 2424              	 .loc 1 2122 0
 2425 0206 03F1160E 	 add lr,r3,#22
 2426              	.LVL315:
 2427 020a 0FE0     	 b .L197
 2428              	.LVL316:
 2429              	.L196:
2124:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2430              	 .loc 1 2124 0
 2431 020c B9F1060F 	 cmp r9,#6
 2432 0210 02D1     	 bne .L198
2126:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 2433              	 .loc 1 2126 0
 2434 0212 03F1220E 	 add lr,r3,#34
 2435              	.LVL317:
 2436 0216 09E0     	 b .L197
 2437              	.LVL318:
 2438              	.L198:
2128:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					 ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
 2439              	 .loc 1 2128 0
 2440 0218 09F1FF3E 	 add lr,r9,#-1
 2441 021c 5FFA8EFE 	 uxtb lr,lr
 2442 0220 BEF1010F 	 cmp lr,#1
 2443 0224 00F23381 	 bhi .L227
2131:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 2444              	 .loc 1 2131 0
 2445 0228 03F1160E 	 add lr,r3,#22
 2446              	.LVL319:
 2447              	.L197:
2139:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2448              	 .loc 1 2139 0
 2449 022c 7245     	 cmp r2,lr
 2450 022e C0F03081 	 bcc .L228
 2451              	.LVL320:
2146:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2452              	 .loc 1 2146 0
 2453 0232 C01A     	 subs r0,r0,r3
 2454              	.LVL321:
2148:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 2455              	 .loc 1 2148 0
 2456 0234 0728     	 cmp r0,#7
 2457 0236 40F22E81 	 bls .L229
 2458              	.LVL322:
2149:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2459              	 .loc 1 2149 0
 2460 023a C3F59663 	 rsb r3,r3,#1200
 2461              	.LVL323:
 2462              	.LBE172:
 2463              	.LBE171:
1683:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2464              	 .loc 1 1683 0
 2465 023e 9842     	 cmp r0,r3
 2466 0240 00F2C480 	 bhi .L199
1700:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 2467              	 .loc 1 1700 0
 2468 0244 B9F1110F 	 cmp r9,#17
 2469 0248 05D1     	 bne .L200
 2470              	.LVL324:
 2471              	.LBB173:
1708:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 2472              	 .loc 1 1708 0
 2473 024a 08EB0103 	 add r3,r8,r1
 2474 024e 9B8A     	 ldrh r3,[r3,#20]
 2475 0250 002B     	 cmp r3,#0
 2476 0252 00F00B81 	 beq .L230
 2477              	.LVL325:
 2478              	.L200:
 2479              	.LBE173:
 2480              	.LBE169:
 2481              	.LBE168:
1765:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2482              	 .loc 1 1765 0
 2483 0256 1429     	 cmp r1,#20
 2484 0258 40F20A81 	 bls .L202
 2485              	.LBB178:
1773:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* From: the previous start of UDP/ICMP/TCP data. */
 2486              	 .loc 1 1773 0
 2487 025c A1F1140B 	 sub fp,r1,#20
 2488              	.LVL326:
1775:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
 2489              	 .loc 1 1775 0
 2490 0260 0E31     	 adds r1,r1,#14
 2491              	.LVL327:
 2492 0262 223A     	 subs r2,r2,#34
 2493              	.LVL328:
1781:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxNetworkBuffer->xDataLength -= optlen;
 2494              	 .loc 1 1781 0
 2495 0264 08F12200 	 add r0,r8,#34
 2496              	.LVL329:
 2497 0268 4144     	 add r1,r1,r8
 2498              	.LVL330:
 2499 026a CBEB0202 	 rsb r2,fp,r2
 2500 026e FFF7FEFF 	 bl memmove
 2501              	.LVL331:
1782:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2502              	 .loc 1 1782 0
 2503 0272 F369     	 ldr r3,[r6,#28]
 2504 0274 CBEB0303 	 rsb r3,fp,r3
 2505 0278 F361     	 str r3,[r6,#28]
1785:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 														( ( ipSIZE_OF_IPv4_HEADER >> 2 ) & 0x0FU );
 2506              	 .loc 1 1785 0
 2507 027a 98F80E30 	 ldrb r3,[r8,#14]
 2508 027e 23F00F03 	 bic r3,r3,#15
 2509 0282 43F00503 	 orr r3,r3,#5
 2510 0286 88F80E30 	 strb r3,[r8,#14]
 2511 028a F1E0     	 b .L202
 2512              	.LVL332:
 2513              	.L218:
 2514              	.LBE178:
1809:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 2515              	 .loc 1 1809 0
 2516 028c 08F10600 	 add r0,r8,#6
 2517 0290 D8F81A10 	 ldr r1,[r8,#26]
 2518 0294 FFF7FEFF 	 bl vARPRefreshCacheEntry
 2519              	.LVL333:
1811:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 2520              	 .loc 1 1811 0
 2521 0298 B9F1060F 	 cmp r9,#6
 2522 029c 7DD0     	 beq .L203
 2523 029e B9F1110F 	 cmp r9,#17
 2524 02a2 5CD0     	 beq .L204
 2525 02a4 B9F1010F 	 cmp r9,#1
 2526 02a8 40F09080 	 bne .L199
1825:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							{
 2527              	 .loc 1 1825 0
 2528 02ac F369     	 ldr r3,[r6,#28]
 2529 02ae 292B     	 cmp r3,#41
 2530 02b0 40F28C80 	 bls .L199
 2531              	.LBB179:
1829:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 2532              	 .loc 1 1829 0
 2533 02b4 B269     	 ldr r2,[r6,#24]
 2534              	.LVL334:
1830:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								{
 2535              	 .loc 1 1830 0
 2536 02b6 D8F81E30 	 ldr r3,[r8,#30]
 2537 02ba 1549     	 ldr r1,.L240+28
 2538 02bc 4969     	 ldr r1,[r1,#20]
 2539 02be 8B42     	 cmp r3,r1
 2540 02c0 40F08480 	 bne .L199
 2541              	.LVL335:
 2542              	.LBB180:
 2543              	.LBB181:
2021:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2544              	 .loc 1 2021 0
 2545 02c4 92F82210 	 ldrb r1,[r2,#34]
 2546 02c8 31B3     	 cbz r1,.L206
 2547 02ca 0829     	 cmp r1,#8
 2548 02cc 73D1     	 bne .L238
 2549              	.LVL336:
 2550              	.LBB182:
 2551              	.LBB183:
1988:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 2552              	 .loc 1 1988 0
 2553 02ce 0021     	 movs r1,#0
 2554 02d0 82F82210 	 strb r1,[r2,#34]
1989:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 2555              	 .loc 1 1989 0
 2556 02d4 D2F81A10 	 ldr r1,[r2,#26]
 2557 02d8 C2F81E10 	 str r1,[r2,#30]
1990:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2558              	 .loc 1 1990 0
 2559 02dc C2F81A30 	 str r3,[r2,#26]
 2560              	.LVL337:
2000:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2561              	 .loc 1 2000 0
 2562 02e0 938C     	 ldrh r3,[r2,#36]
 2563 02e2 4FF6F671 	 movw r1,#65526
 2564 02e6 8B42     	 cmp r3,r1
2002:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 2565              	 .loc 1 2002 0
 2566 02e8 8CBF     	 ite hi
 2567 02ea 03F58473 	 addhi r3,r3,#264
2006:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 2568              	 .loc 1 2006 0
 2569 02ee 0833     	 addls r3,r3,#8
 2570 02f0 9384     	 strh r3,[r2,#36]
 2571 02f2 66E0     	 b .L215
 2572              	.L241:
 2573              	 .align 2
 2574              	.L240:
 2575 02f4 00000000 	 .word .LANCHOR7
 2576 02f8 00000000 	 .word .LANCHOR4
 2577 02fc 00000000 	 .word .LANCHOR12
 2578 0300 00000000 	 .word .LANCHOR14
 2579 0304 00000000 	 .word .LANCHOR1
 2580 0308 00000000 	 .word .LANCHOR15
 2581 030c 00000000 	 .word .LANCHOR11
 2582 0310 00000000 	 .word xDefaultPartUDPPacketHeader
 2583 0314 00000000 	 .word .LANCHOR5
 2584              	.LVL338:
 2585              	.L206:
 2586              	.LBE183:
 2587              	.LBE182:
 2588              	.LBB184:
 2589              	.LBB185:
1934:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = FreeRTOS_ntohs( usDataLength );
 2590              	 .loc 1 1934 0
 2591 0318 118A     	 ldrh r1,[r2,#16]
 2592              	.LVL339:
1935:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2593              	 .loc 1 1935 0
 2594 031a 0B0A     	 lsrs r3,r1,#8
 2595 031c 43EA0123 	 orr r3,r3,r1,lsl#8
 2596 0320 9BB2     	 uxth r3,r3
 2597              	.LVL340:
1949:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2598              	 .loc 1 1949 0
 2599 0322 02F12A01 	 add r1,r2,#42
 2600              	.LVL341:
1952:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2601              	 .loc 1 1952 0
 2602 0326 1C2B     	 cmp r3,#28
 2603 0328 10D0     	 beq .L232
1954:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2604              	 .loc 1 1954 0
 2605 032a 92F82A00 	 ldrb r0,[r2,#42]
 2606 032e 7828     	 cmp r0,#120
 2607 0330 0ED1     	 bne .L233
 2608 0332 1D3B     	 subs r3,r3,#29
 2609              	.LVL342:
 2610 0334 9BB2     	 uxth r3,r3
 2611              	.LVL343:
 2612 0336 2A33     	 adds r3,r3,#42
 2613 0338 1344     	 add r3,r3,r2
 2614 033a 03E0     	 b .L211
 2615              	.LVL344:
 2616              	.L212:
 2617 033c 11F8010F 	 ldrb r0,[r1,#1]!
 2618              	.LVL345:
 2619 0340 7828     	 cmp r0,#120
 2620 0342 07D1     	 bne .L234
 2621              	.LVL346:
 2622              	.L211:
1952:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2623              	 .loc 1 1952 0
 2624 0344 9942     	 cmp r1,r3
 2625 0346 F9D1     	 bne .L212
1929:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t usDataLength, usCount;
 2626              	 .loc 1 1929 0
 2627 0348 0020     	 movs r0,#0
 2628 034a 04E0     	 b .L210
 2629              	.LVL347:
 2630              	.L232:
 2631 034c 0020     	 movs r0,#0
 2632 034e 02E0     	 b .L210
 2633              	.L233:
1956:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2634              	 .loc 1 1956 0
 2635 0350 0220     	 movs r0,#2
 2636 0352 00E0     	 b .L210
 2637              	.LVL348:
 2638              	.L234:
 2639 0354 0220     	 movs r0,#2
 2640              	.LVL349:
 2641              	.L210:
1964:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 2642              	 .loc 1 1964 0
 2643 0356 D18C     	 ldrh r1,[r2,#38]
 2644 0358 FFF7FEFF 	 bl vApplicationPingReplyHook
 2645              	.LVL350:
 2646 035c 36E0     	 b .L199
 2647              	.LVL351:
 2648              	.L204:
 2649              	.LBE185:
 2650              	.LBE184:
 2651              	.LBE181:
 2652              	.LBE180:
 2653              	.LBE179:
 2654              	.LBB188:
1849:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						uint16_t usLength;
 2655              	 .loc 1 1849 0
 2656 035e B169     	 ldr r1,[r6,#24]
 2657              	.LVL352:
1855:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							if ( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
 2658              	 .loc 1 1855 0
 2659 0360 CA8C     	 ldrh r2,[r1,#38]
 2660 0362 130A     	 lsrs r3,r2,#8
 2661 0364 43EA0223 	 orr r3,r3,r2,lsl#8
 2662 0368 9BB2     	 uxth r3,r3
 2663              	.LVL353:
1856:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								 ( ( ( size_t ) usLength ) >= sizeof( UDPHeader_t ) ) )
 2664              	 .loc 1 1856 0
 2665 036a F269     	 ldr r2,[r6,#28]
 2666 036c 292A     	 cmp r2,#41
 2667 036e 2DD9     	 bls .L199
 2668 0370 072B     	 cmp r3,#7
 2669 0372 2BD9     	 bls .L199
 2670              	.LVL354:
 2671              	.LBB189:
1868:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
 2672              	 .loc 1 1868 0
 2673 0374 2A3A     	 subs r2,r2,#42
 2674              	.LVL355:
1869:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								if( uxPayloadSize_1 > uxPayloadSize_2 )
 2675              	 .loc 1 1869 0
 2676 0376 A3F10800 	 sub r0,r3,#8
 2677              	.LVL356:
1870:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								{
 2678              	 .loc 1 1870 0
 2679 037a 8242     	 cmp r2,r0
1872:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								}
 2680              	 .loc 1 1872 0
 2681 037c 84BF     	 itt hi
 2682 037e 2233     	 addhi r3,r3,#34
 2683              	.LVL357:
 2684 0380 F361     	 strhi r3,[r6,#28]
1876:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 								pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 2685              	 .loc 1 1876 0
 2686 0382 4B8C     	 ldrh r3,[r1,#34]
 2687 0384 3384     	 strh r3,[r6,#32]
1877:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2688              	 .loc 1 1877 0
 2689 0386 D1F81A30 	 ldr r3,[r1,#26]
 2690 038a 7361     	 str r3,[r6,#20]
1885:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 															   pxUDPPacket->xUDPHeader.usDestinationPort ) == pdPASS )
 2691              	 .loc 1 1885 0
 2692 038c 3046     	 mov r0,r6
 2693              	.LVL358:
 2694 038e 898C     	 ldrh r1,[r1,#36]
 2695              	.LVL359:
 2696 0390 FFF7FEFF 	 bl xProcessReceivedUDPPacket
 2697              	.LVL360:
 2698 0394 0128     	 cmp r0,#1
 2699 0396 19D1     	 bne .L199
 2700 0398 60E0     	 b .L174
 2701              	.L203:
 2702              	.LBE189:
 2703              	.LBE188:
1902:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							{
 2704              	 .loc 1 1902 0
 2705 039a 3046     	 mov r0,r6
 2706 039c FFF7FEFF 	 bl xProcessReceivedTCPPacket
 2707              	.LVL361:
1904:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 							}
 2708              	 .loc 1 1904 0
 2709 03a0 0128     	 cmp r0,#1
 2710 03a2 14BF     	 ite ne
 2711 03a4 0120     	 movne r0,#1
 2712 03a6 0320     	 moveq r0,#3
 2713              	.LVL362:
1909:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						}
 2714              	 .loc 1 1909 0
 2715 03a8 3C4A     	 ldr r2,.L242
 2716 03aa 1368     	 ldr r3,[r2]
 2717 03ac 0133     	 adds r3,r3,#1
 2718 03ae 1360     	 str r3,[r2]
 2719 03b0 02E0     	 b .L191
 2720              	.LVL363:
 2721              	.L237:
 2722              	.LBE167:
 2723              	.LBE166:
1529:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2724              	 .loc 1 1529 0
 2725 03b2 0020     	 movs r0,#0
 2726 03b4 00E0     	 b .L191
 2727              	.LVL364:
 2728              	.L238:
 2729              	.LBB195:
 2730              	.LBB193:
 2731              	.LBB190:
 2732              	.LBB187:
 2733              	.LBB186:
2018:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2734              	 .loc 1 2018 0
 2735 03b6 0020     	 movs r0,#0
 2736              	.LVL365:
 2737              	.L191:
 2738              	.LBE186:
 2739              	.LBE187:
 2740              	.LBE190:
 2741              	.LBE193:
 2742              	.LBE195:
1536:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 2743              	 .loc 1 1536 0
 2744 03b8 0228     	 cmp r0,#2
 2745 03ba 02D0     	 beq .L215
 2746 03bc 0328     	 cmp r0,#3
 2747 03be 4DD0     	 beq .L174
 2748 03c0 04E0     	 b .L199
 2749              	.LVL366:
 2750              	.L215:
1542:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* parameter pdTRUE: the buffer must be released once
 2751              	 .loc 1 1542 0
 2752 03c2 3046     	 mov r0,r6
 2753 03c4 0121     	 movs r1,#1
 2754 03c6 FFF7FEFF 	 bl vReturnEthernetFrame
 2755              	.LVL367:
 2756 03ca 47E0     	 b .L174
 2757              	.LVL368:
 2758              	.L199:
1558:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
 2759              	 .loc 1 1558 0
 2760 03cc 3046     	 mov r0,r6
 2761 03ce FFF7FEFF 	 bl vReleaseNetworkBufferAndDescriptor
 2762              	.LVL369:
 2763 03d2 43E0     	 b .L174
 2764              	.LVL370:
 2765              	.L178:
 2766              	.LBE163:
 2767              	.LBE162:
 2768              	.LBE161:
 415:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2769              	 .loc 1 415 0
 2770 03d4 0598     	 ldr r0,[sp,#20]
 2771 03d6 0121     	 movs r1,#1
 2772 03d8 FFF7FEFF 	 bl xNetworkInterfaceOutput
 2773              	.LVL371:
 416:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2774              	 .loc 1 416 0
 2775 03dc 3EE0     	 b .L174
 2776              	.L179:
 420:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2777              	 .loc 1 420 0
 2778 03de FFF7FEFF 	 bl vARPAgeCache
 2779              	.LVL372:
 421:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2780              	 .loc 1 421 0
 2781 03e2 3BE0     	 b .L174
 2782              	.L183:
 429:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xAddress.sin_addr = 0U;	/* For the moment. */
 2783              	 .loc 1 429 0
 2784 03e4 059E     	 ldr r6,[sp,#20]
 2785              	.LVL373:
 430:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 2786              	 .loc 1 430 0
 2787 03e6 0023     	 movs r3,#0
 2788 03e8 0393     	 str r3,[sp,#12]
 431:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxSocket->usLocalPort = 0U;
 2789              	 .loc 1 431 0
 2790 03ea B18C     	 ldrh r1,[r6,#36]
 2791 03ec 0A0A     	 lsrs r2,r1,#8
 2792 03ee 42EA0122 	 orr r2,r2,r1,lsl#8
 2793 03f2 ADF80A20 	 strh r2,[sp,#10]
 432:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 2794              	 .loc 1 432 0
 2795 03f6 B384     	 strh r3,[r6,#36]
 433:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2796              	 .loc 1 433 0
 2797 03f8 3046     	 mov r0,r6
 2798 03fa 02A9     	 add r1,sp,#8
 2799 03fc 0822     	 movs r2,#8
 2800 03fe FFF7FEFF 	 bl vSocketBind
 2801              	.LVL374:
 438:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketWakeUpUser( pxSocket );
 2802              	 .loc 1 438 0
 2803 0402 3368     	 ldr r3,[r6]
 2804 0404 43F01003 	 orr r3,r3,#16
 2805 0408 3360     	 str r3,[r6]
 439:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2806              	 .loc 1 439 0
 2807 040a 3046     	 mov r0,r6
 2808 040c FFF7FEFF 	 bl vSocketWakeUpUser
 2809              	.LVL375:
 440:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2810              	 .loc 1 440 0
 2811 0410 24E0     	 b .L174
 2812              	.LVL376:
 2813              	.L184:
 447:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2814              	 .loc 1 447 0
 2815 0412 0598     	 ldr r0,[sp,#20]
 2816 0414 FFF7FEFF 	 bl vSocketClose
 2817              	.LVL377:
 448:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2818              	 .loc 1 448 0
 2819 0418 20E0     	 b .L174
 2820              	.L180:
 2821              	.LVL378:
 454:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2822              	 .loc 1 454 0
 2823 041a 0598     	 ldr r0,[sp,#20]
 2824 041c FFF7FEFF 	 bl vProcessGeneratedUDPPacket
 2825              	.LVL379:
 455:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2826              	 .loc 1 455 0
 2827 0420 1CE0     	 b .L174
 2828              	.L187:
 2829              	.LVL380:
 461:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2830              	 .loc 1 461 0
 2831 0422 0598     	 ldr r0,[sp,#20]
 2832 0424 FFF7FEFF 	 bl vProcessGeneratedRAWPacket
 2833              	.LVL381:
 462:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2834              	 .loc 1 462 0
 2835 0428 18E0     	 b .L174
 2836              	.L185:
 2837              	.LVL382:
 488:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 2838              	 .loc 1 488 0
 2839 042a 0598     	 ldr r0,[sp,#20]
 2840 042c FFF7FEFF 	 bl vSocketSelect
 2841              	.LVL383:
 493:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2842              	 .loc 1 493 0
 2843 0430 14E0     	 b .L174
 2844              	.L186:
 500:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 2845              	 .loc 1 500 0
 2846 0432 0598     	 ldr r0,[sp,#20]
 2847 0434 FFF7FEFF 	 bl FreeRTOS_SignalSocket
 2848              	.LVL384:
 503:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2849              	 .loc 1 503 0
 2850 0438 10E0     	 b .L174
 2851              	.L181:
 510:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 2852              	 .loc 1 510 0
 2853 043a 2378     	 ldrb r3,[r4]
 2854 043c 43F00203 	 orr r3,r3,#2
 2855 0440 2370     	 strb r3,[r4]
 513:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2856              	 .loc 1 513 0
 2857 0442 0BE0     	 b .L174
 2858              	.L182:
 521:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2859              	 .loc 1 521 0
 2860 0444 059E     	 ldr r6,[sp,#20]
 2861              	.LVL385:
 523:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 2862              	 .loc 1 523 0
 2863 0446 3046     	 mov r0,r6
 2864 0448 FFF7FEFF 	 bl xTCPCheckNewClient
 2865              	.LVL386:
 2866 044c 30B1     	 cbz r0,.L174
 525:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						vSocketWakeUpUser( pxSocket );
 2867              	 .loc 1 525 0
 2868 044e 3368     	 ldr r3,[r6]
 2869 0450 43F00403 	 orr r3,r3,#4
 2870 0454 3360     	 str r3,[r6]
 526:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 2871              	 .loc 1 526 0
 2872 0456 3046     	 mov r0,r6
 2873 0458 FFF7FEFF 	 bl vSocketWakeUpUser
 2874              	.LVL387:
 2875              	.L174:
 551:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2876              	 .loc 1 551 0
 2877 045c 104B     	 ldr r3,.L242+4
 2878 045e 1B68     	 ldr r3,[r3]
 2879 0460 002B     	 cmp r3,#0
 2880 0462 3FF4E8AD 	 beq .L216
 557:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 2881              	 .loc 1 557 0
 2882 0466 FFF7FEFF 	 bl prvProcessNetworkDownEvent
 2883              	.LVL388:
 2884 046a E4E5     	 b .L216
 2885              	.LVL389:
 2886              	.L230:
 2887              	.LBB199:
 2888              	.LBB198:
 2889              	.LBB197:
 2890              	.LBB196:
 2891              	.LBB194:
 2892              	.LBB191:
 2893              	.LBB176:
 2894              	.LBB174:
1724:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 2895              	 .loc 1 1724 0
 2896 046c 0020     	 movs r0,#0
 2897              	.LVL390:
 2898 046e A3E7     	 b .L191
 2899              	.LVL391:
 2900              	.L202:
 2901              	.LBE174:
 2902              	.LBE176:
 2903              	.LBE191:
1802:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 2904              	 .loc 1 1802 0
 2905 0470 B9F1110F 	 cmp r9,#17
 2906 0474 7FF40AAF 	 bne .L218
 2907 0478 71E7     	 b .L204
 2908              	.LVL392:
 2909              	.L222:
 2910              	.LBB192:
 2911              	.LBB177:
 2912              	.LBB175:
1617:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 2913              	 .loc 1 1617 0
 2914 047a 0020     	 movs r0,#0
 2915 047c 9CE7     	 b .L191
 2916              	.L223:
1624:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					 ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 2917              	 .loc 1 1624 0
 2918 047e 0020     	 movs r0,#0
 2919 0480 9AE7     	 b .L191
 2920              	.LVL393:
 2921              	.L224:
 2922              	.LBE175:
1686:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 2923              	 .loc 1 1686 0
 2924 0482 0020     	 movs r0,#0
 2925 0484 98E7     	 b .L191
 2926              	.LVL394:
 2927              	.L225:
 2928 0486 0020     	 movs r0,#0
 2929 0488 96E7     	 b .L191
 2930              	.LVL395:
 2931              	.L226:
 2932 048a 0020     	 movs r0,#0
 2933              	.LVL396:
 2934 048c 94E7     	 b .L191
 2935              	.LVL397:
 2936              	.L227:
 2937 048e 0020     	 movs r0,#0
 2938              	.LVL398:
 2939 0490 92E7     	 b .L191
 2940              	.LVL399:
 2941              	.L228:
 2942 0492 0020     	 movs r0,#0
 2943 0494 90E7     	 b .L191
 2944              	.LVL400:
 2945              	.L229:
 2946 0496 0020     	 movs r0,#0
 2947              	.LVL401:
 2948 0498 8EE7     	 b .L191
 2949              	.L243:
 2950 049a 00BF     	 .align 2
 2951              	.L242:
 2952 049c 00000000 	 .word .LANCHOR15
 2953 04a0 00000000 	 .word .LANCHOR3
 2954              	.LBE177:
 2955              	.LBE192:
 2956              	.LBE194:
 2957              	.LBE196:
 2958              	.LBE197:
 2959              	.LBE198:
 2960              	.LBE199:
 2961              	 .cfi_endproc
 2962              	.LFE52:
 2964              	 .section .text.FreeRTOS_GetIPAddress,"ax",%progbits
 2965              	 .align 2
 2966              	 .global FreeRTOS_GetIPAddress
 2967              	 .thumb
 2968              	 .thumb_func
 2970              	FreeRTOS_GetIPAddress:
 2971              	.LFB89:
2749:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Returns the IP address of the NIC. */
 2972              	 .loc 1 2749 0
 2973              	 .cfi_startproc
 2974              	 
 2975              	 
 2976              	 
2752:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 2977              	 .loc 1 2752 0
 2978 0000 014B     	 ldr r3,.L245
 2979 0002 5869     	 ldr r0,[r3,#20]
 2980 0004 7047     	 bx lr
 2981              	.L246:
 2982 0006 00BF     	 .align 2
 2983              	.L245:
 2984 0008 00000000 	 .word xDefaultPartUDPPacketHeader
 2985              	 .cfi_endproc
 2986              	.LFE89:
 2988              	 .section .text.FreeRTOS_SetIPAddress,"ax",%progbits
 2989              	 .align 2
 2990              	 .global FreeRTOS_SetIPAddress
 2991              	 .thumb
 2992              	 .thumb_func
 2994              	FreeRTOS_SetIPAddress:
 2995              	.LFB90:
2756:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Sets the IP address of the NIC. */
 2996              	 .loc 1 2756 0
 2997              	 .cfi_startproc
 2998              	 
 2999              	 
 3000              	 
 3001              	.LVL402:
2758:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3002              	 .loc 1 2758 0
 3003 0000 014B     	 ldr r3,.L248
 3004 0002 5861     	 str r0,[r3,#20]
 3005 0004 7047     	 bx lr
 3006              	.L249:
 3007 0006 00BF     	 .align 2
 3008              	.L248:
 3009 0008 00000000 	 .word xDefaultPartUDPPacketHeader
 3010              	 .cfi_endproc
 3011              	.LFE90:
 3013              	 .section .text.FreeRTOS_GetGatewayAddress,"ax",%progbits
 3014              	 .align 2
 3015              	 .global FreeRTOS_GetGatewayAddress
 3016              	 .thumb
 3017              	 .thumb_func
 3019              	FreeRTOS_GetGatewayAddress:
 3020              	.LFB91:
2763:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulGatewayAddress;
 3021              	 .loc 1 2763 0
 3022              	 .cfi_startproc
 3023              	 
 3024              	 
 3025              	 
2765:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 3026              	 .loc 1 2765 0
 3027 0000 014B     	 ldr r3,.L251
 3028 0002 9868     	 ldr r0,[r3,#8]
 3029 0004 7047     	 bx lr
 3030              	.L252:
 3031 0006 00BF     	 .align 2
 3032              	.L251:
 3033 0008 00000000 	 .word .LANCHOR5
 3034              	 .cfi_endproc
 3035              	.LFE91:
 3037              	 .section .text.FreeRTOS_GetDNSServerAddress,"ax",%progbits
 3038              	 .align 2
 3039              	 .global FreeRTOS_GetDNSServerAddress
 3040              	 .thumb
 3041              	 .thumb_func
 3043              	FreeRTOS_GetDNSServerAddress:
 3044              	.LFB92:
2769:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulDNSServerAddress;
 3045              	 .loc 1 2769 0
 3046              	 .cfi_startproc
 3047              	 
 3048              	 
 3049              	 
2771:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 3050              	 .loc 1 2771 0
 3051 0000 014B     	 ldr r3,.L254
 3052 0002 D868     	 ldr r0,[r3,#12]
 3053 0004 7047     	 bx lr
 3054              	.L255:
 3055 0006 00BF     	 .align 2
 3056              	.L254:
 3057 0008 00000000 	 .word .LANCHOR5
 3058              	 .cfi_endproc
 3059              	.LFE92:
 3061              	 .section .text.FreeRTOS_GetNetmask,"ax",%progbits
 3062              	 .align 2
 3063              	 .global FreeRTOS_GetNetmask
 3064              	 .thumb
 3065              	 .thumb_func
 3067              	FreeRTOS_GetNetmask:
 3068              	.LFB93:
2775:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulNetMask;
 3069              	 .loc 1 2775 0
 3070              	 .cfi_startproc
 3071              	 
 3072              	 
 3073              	 
2777:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 3074              	 .loc 1 2777 0
 3075 0000 014B     	 ldr r3,.L257
 3076 0002 5868     	 ldr r0,[r3,#4]
 3077 0004 7047     	 bx lr
 3078              	.L258:
 3079 0006 00BF     	 .align 2
 3080              	.L257:
 3081 0008 00000000 	 .word .LANCHOR5
 3082              	 .cfi_endproc
 3083              	.LFE93:
 3085              	 .section .text.FreeRTOS_UpdateMACAddress,"ax",%progbits
 3086              	 .align 2
 3087              	 .global FreeRTOS_UpdateMACAddress
 3088              	 .thumb
 3089              	 .thumb_func
 3091              	FreeRTOS_UpdateMACAddress:
 3092              	.LFB94:
2781:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Copy the MAC address at the start of the default packet header fragment. */
 3093              	 .loc 1 2781 0
 3094              	 .cfi_startproc
 3095              	 
 3096              	 
 3097              	 
 3098              	.LVL403:
 3099 0000 0246     	 mov r2,r0
2783:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3100              	 .loc 1 2783 0
 3101 0002 034B     	 ldr r3,.L260
 3102 0004 0068     	 ldr r0,[r0]
 3103              	.LVL404:
 3104 0006 1860     	 str r0,[r3]
 3105 0008 9288     	 ldrh r2,[r2,#4]
 3106              	.LVL405:
 3107 000a 9A80     	 strh r2,[r3,#4]
 3108 000c 7047     	 bx lr
 3109              	.L261:
 3110 000e 00BF     	 .align 2
 3111              	.L260:
 3112 0010 00000000 	 .word xDefaultPartUDPPacketHeader
 3113              	 .cfi_endproc
 3114              	.LFE94:
 3116              	 .section .text.FreeRTOS_GetMACAddress,"ax",%progbits
 3117              	 .align 2
 3118              	 .global FreeRTOS_GetMACAddress
 3119              	 .thumb
 3120              	 .thumb_func
 3122              	FreeRTOS_GetMACAddress:
 3123              	.LFB95:
2788:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return ipLOCAL_MAC_ADDRESS;
 3124              	 .loc 1 2788 0
 3125              	 .cfi_startproc
 3126              	 
 3127              	 
 3128              	 
2790:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 3129              	 .loc 1 2790 0
 3130 0000 0048     	 ldr r0,.L263
 3131 0002 7047     	 bx lr
 3132              	.L264:
 3133              	 .align 2
 3134              	.L263:
 3135 0004 00000000 	 .word xDefaultPartUDPPacketHeader
 3136              	 .cfi_endproc
 3137              	.LFE95:
 3139              	 .section .text.FreeRTOS_SetNetmask,"ax",%progbits
 3140              	 .align 2
 3141              	 .global FreeRTOS_SetNetmask
 3142              	 .thumb
 3143              	 .thumb_func
 3145              	FreeRTOS_SetNetmask:
 3146              	.LFB96:
2794:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkAddressing.ulNetMask = ulNetmask;
 3147              	 .loc 1 2794 0
 3148              	 .cfi_startproc
 3149              	 
 3150              	 
 3151              	 
 3152              	.LVL406:
2795:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3153              	 .loc 1 2795 0
 3154 0000 014B     	 ldr r3,.L266
 3155 0002 5860     	 str r0,[r3,#4]
 3156 0004 7047     	 bx lr
 3157              	.L267:
 3158 0006 00BF     	 .align 2
 3159              	.L266:
 3160 0008 00000000 	 .word .LANCHOR5
 3161              	 .cfi_endproc
 3162              	.LFE96:
 3164              	 .section .text.FreeRTOS_SetGatewayAddress,"ax",%progbits
 3165              	 .align 2
 3166              	 .global FreeRTOS_SetGatewayAddress
 3167              	 .thumb
 3168              	 .thumb_func
 3170              	FreeRTOS_SetGatewayAddress:
 3171              	.LFB97:
2800:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkAddressing.ulGatewayAddress = ulGatewayAddress;
 3172              	 .loc 1 2800 0
 3173              	 .cfi_startproc
 3174              	 
 3175              	 
 3176              	 
 3177              	.LVL407:
2801:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3178              	 .loc 1 2801 0
 3179 0000 014B     	 ldr r3,.L269
 3180 0002 9860     	 str r0,[r3,#8]
 3181 0004 7047     	 bx lr
 3182              	.L270:
 3183 0006 00BF     	 .align 2
 3184              	.L269:
 3185 0008 00000000 	 .word .LANCHOR5
 3186              	 .cfi_endproc
 3187              	.LFE97:
 3189              	 .section .text.vIPSetDnsTimerEnableState,"ax",%progbits
 3190              	 .align 2
 3191              	 .global vIPSetDnsTimerEnableState
 3192              	 .thumb
 3193              	 .thumb_func
 3195              	vIPSetDnsTimerEnableState:
 3196              	.LFB98:
2830:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xEnableState != 0 )
 3197              	 .loc 1 2830 0
 3198              	 .cfi_startproc
 3199              	 
 3200              	 
 3201              	 
 3202              	.LVL408:
2831:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 3203              	 .loc 1 2831 0
 3204 0000 28B1     	 cbz r0,.L272
2833:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 3205              	 .loc 1 2833 0
 3206 0002 064A     	 ldr r2,.L274
 3207 0004 1378     	 ldrb r3,[r2]
 3208 0006 43F00103 	 orr r3,r3,#1
 3209 000a 1370     	 strb r3,[r2]
 3210 000c 7047     	 bx lr
 3211              	.L272:
2837:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 3212              	 .loc 1 2837 0
 3213 000e 034B     	 ldr r3,.L274
 3214 0010 1A78     	 ldrb r2,[r3]
 3215 0012 6FF30002 	 bfc r2,#0,#1
 3216 0016 1A70     	 strb r2,[r3]
 3217 0018 7047     	 bx lr
 3218              	.L275:
 3219 001a 00BF     	 .align 2
 3220              	.L274:
 3221 001c 00000000 	 .word .LANCHOR14
 3222              	 .cfi_endproc
 3223              	.LFE98:
 3225              	 .section .text.vIPReloadDNSTimer,"ax",%progbits
 3226              	 .align 2
 3227              	 .global vIPReloadDNSTimer
 3228              	 .thumb
 3229              	 .thumb_func
 3231              	vIPReloadDNSTimer:
 3232              	.LFB99:
2845:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvIPTimerReload( &xDNSTimer, ulCheckTime );
 3233              	 .loc 1 2845 0
 3234              	 .cfi_startproc
 3235              	 
 3236              	 
 3237              	.LVL409:
 3238 0000 38B5     	 push {r3,r4,r5,lr}
 3239              	.LCFI34:
 3240              	 .cfi_def_cfa_offset 16
 3241              	 .cfi_offset 3,-16
 3242              	 .cfi_offset 4,-12
 3243              	 .cfi_offset 5,-8
 3244              	 .cfi_offset 14,-4
 3245 0002 0446     	 mov r4,r0
 3246              	.LVL410:
 3247              	.LBB204:
 3248              	.LBB205:
 758:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	prvIPTimerStart( pxTimer, xTime );
 3249              	 .loc 1 758 0
 3250 0004 0B4D     	 ldr r5,.L280
 3251 0006 2861     	 str r0,[r5,#16]
 3252              	.LVL411:
 3253              	.LBB206:
 3254              	.LBB207:
 740:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulRemainingTime = xTime;
 3255              	 .loc 1 740 0
 3256 0008 281D     	 adds r0,r5,#4
 3257              	.LVL412:
 3258 000a FFF7FEFF 	 bl vTaskSetTimeOutState
 3259              	.LVL413:
 741:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 3260              	 .loc 1 741 0
 3261 000e EC60     	 str r4,[r5,#12]
 743:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 3262              	 .loc 1 743 0
 3263 0010 24B9     	 cbnz r4,.L277
 745:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 3264              	 .loc 1 745 0
 3265 0012 2B78     	 ldrb r3,[r5]
 3266 0014 43F00203 	 orr r3,r3,#2
 3267 0018 2B70     	 strb r3,[r5]
 3268 001a 04E0     	 b .L278
 3269              	.L277:
 749:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 3270              	 .loc 1 749 0
 3271 001c 054B     	 ldr r3,.L280
 3272 001e 1A78     	 ldrb r2,[r3]
 3273 0020 6FF34102 	 bfc r2,#1,#1
 3274 0024 1A70     	 strb r2,[r3]
 3275              	.L278:
 752:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3276              	 .loc 1 752 0
 3277 0026 034A     	 ldr r2,.L280
 3278 0028 1378     	 ldrb r3,[r2]
 3279 002a 43F00103 	 orr r3,r3,#1
 3280 002e 1370     	 strb r3,[r2]
 3281 0030 38BD     	 pop {r3,r4,r5,pc}
 3282              	.LVL414:
 3283              	.L281:
 3284 0032 00BF     	 .align 2
 3285              	.L280:
 3286 0034 00000000 	 .word .LANCHOR14
 3287              	.LBE207:
 3288              	.LBE206:
 3289              	.LBE205:
 3290              	.LBE204:
 3291              	 .cfi_endproc
 3292              	.LFE99:
 3294              	 .section .text.xIPIsNetworkTaskReady,"ax",%progbits
 3295              	 .align 2
 3296              	 .global xIPIsNetworkTaskReady
 3297              	 .thumb
 3298              	 .thumb_func
 3300              	xIPIsNetworkTaskReady:
 3301              	.LFB100:
2852:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xIPTaskInitialised;
 3302              	 .loc 1 2852 0
 3303              	 .cfi_startproc
 3304              	 
 3305              	 
 3306              	 
2854:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3307              	 .loc 1 2854 0
 3308 0000 014B     	 ldr r3,.L283
 3309 0002 1868     	 ldr r0,[r3]
 3310 0004 7047     	 bx lr
 3311              	.L284:
 3312 0006 00BF     	 .align 2
 3313              	.L283:
 3314 0008 00000000 	 .word .LANCHOR4
 3315              	 .cfi_endproc
 3316              	.LFE100:
 3318              	 .section .text.FreeRTOS_IsNetworkUp,"ax",%progbits
 3319              	 .align 2
 3320              	 .global FreeRTOS_IsNetworkUp
 3321              	 .thumb
 3322              	 .thumb_func
 3324              	FreeRTOS_IsNetworkUp:
 3325              	.LFB101:
2855:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2856:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2857:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t FreeRTOS_IsNetworkUp( void )
2858:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3326              	 .loc 1 2858 0
 3327              	 .cfi_startproc
 3328              	 
 3329              	 
 3330              	 
2859:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkUp;
2860:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3331              	 .loc 1 2860 0
 3332 0000 014B     	 ldr r3,.L286
 3333 0002 1868     	 ldr r0,[r3]
 3334 0004 7047     	 bx lr
 3335              	.L287:
 3336 0006 00BF     	 .align 2
 3337              	.L286:
 3338 0008 00000000 	 .word .LANCHOR11
 3339              	 .cfi_endproc
 3340              	.LFE101:
 3342              	 .section .text.FreeRTOS_strerror_r,"ax",%progbits
 3343              	 .align 2
 3344              	 .global FreeRTOS_strerror_r
 3345              	 .thumb
 3346              	 .thumb_func
 3348              	FreeRTOS_strerror_r:
 3349              	.LFB102:
2861:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2862:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2863:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
2864:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	UBaseType_t uxGetMinimumIPQueueSpace( void )
2865:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2866:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return uxQueueMinimumSpace;
2867:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2868:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
2869:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2870:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Utility function: Convert error number to a human readable
2871:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * string. Decalartion in FreeRTOS_errno_TCP.h. */
2872:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const char *FreeRTOS_strerror_r( BaseType_t xErrnum, char *pcBuffer, size_t uxLength )
2873:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3350              	 .loc 1 2873 0
 3351              	 .cfi_startproc
 3352              	 
 3353              	 
 3354              	.LVL415:
 3355 0000 38B5     	 push {r3,r4,r5,lr}
 3356              	.LCFI35:
 3357              	 .cfi_def_cfa_offset 16
 3358              	 .cfi_offset 3,-16
 3359              	 .cfi_offset 4,-12
 3360              	 .cfi_offset 5,-8
 3361              	 .cfi_offset 14,-4
 3362 0002 0346     	 mov r3,r0
 3363 0004 0D46     	 mov r5,r1
 3364 0006 1446     	 mov r4,r2
2874:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const char *pcName;
2875:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2876:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	switch( xErrnum )
 3365              	 .loc 1 2876 0
 3366 0008 021F     	 subs r2,r0,#4
 3367              	.LVL416:
 3368 000a 882A     	 cmp r2,#136
 3369 000c 5ED8     	 bhi .L289
 3370 000e DFE802F0 	 tbb [pc,r2]
 3371              	.LVL417:
 3372              	.L291:
 3373 0012 53       	 .byte (.L290-.L291)/2
 3374 0013 5D       	 .byte (.L289-.L291)/2
 3375 0014 5D       	 .byte (.L289-.L291)/2
 3376 0015 5D       	 .byte (.L289-.L291)/2
 3377 0016 5D       	 .byte (.L289-.L291)/2
 3378 0017 47       	 .byte (.L292-.L291)/2
 3379 0018 5D       	 .byte (.L289-.L291)/2
 3380 0019 59       	 .byte (.L293-.L291)/2
 3381 001a 6F       	 .byte (.L294-.L291)/2
 3382 001b 5D       	 .byte (.L289-.L291)/2
 3383 001c 5D       	 .byte (.L289-.L291)/2
 3384 001d 5D       	 .byte (.L289-.L291)/2
 3385 001e 5D       	 .byte (.L289-.L291)/2
 3386 001f 5D       	 .byte (.L289-.L291)/2
 3387 0020 5D       	 .byte (.L289-.L291)/2
 3388 0021 5D       	 .byte (.L289-.L291)/2
 3389 0022 5D       	 .byte (.L289-.L291)/2
 3390 0023 5D       	 .byte (.L289-.L291)/2
 3391 0024 57       	 .byte (.L295-.L291)/2
 3392 0025 5D       	 .byte (.L289-.L291)/2
 3393 0026 5D       	 .byte (.L289-.L291)/2
 3394 0027 5D       	 .byte (.L289-.L291)/2
 3395 0028 5D       	 .byte (.L289-.L291)/2
 3396 0029 5D       	 .byte (.L289-.L291)/2
 3397 002a 49       	 .byte (.L296-.L291)/2
 3398 002b 5D       	 .byte (.L289-.L291)/2
 3399 002c 5D       	 .byte (.L289-.L291)/2
 3400 002d 5D       	 .byte (.L289-.L291)/2
 3401 002e 5D       	 .byte (.L289-.L291)/2
 3402 002f 5D       	 .byte (.L289-.L291)/2
 3403 0030 5D       	 .byte (.L289-.L291)/2
 3404 0031 5D       	 .byte (.L289-.L291)/2
 3405 0032 5D       	 .byte (.L289-.L291)/2
 3406 0033 5D       	 .byte (.L289-.L291)/2
 3407 0034 5D       	 .byte (.L289-.L291)/2
 3408 0035 5D       	 .byte (.L289-.L291)/2
 3409 0036 5D       	 .byte (.L289-.L291)/2
 3410 0037 5D       	 .byte (.L289-.L291)/2
 3411 0038 5D       	 .byte (.L289-.L291)/2
 3412 0039 5D       	 .byte (.L289-.L291)/2
 3413 003a 5D       	 .byte (.L289-.L291)/2
 3414 003b 5D       	 .byte (.L289-.L291)/2
 3415 003c 5D       	 .byte (.L289-.L291)/2
 3416 003d 5D       	 .byte (.L289-.L291)/2
 3417 003e 5D       	 .byte (.L289-.L291)/2
 3418 003f 5D       	 .byte (.L289-.L291)/2
 3419 0040 5D       	 .byte (.L289-.L291)/2
 3420 0041 5D       	 .byte (.L289-.L291)/2
 3421 0042 5D       	 .byte (.L289-.L291)/2
 3422 0043 5D       	 .byte (.L289-.L291)/2
 3423 0044 5D       	 .byte (.L289-.L291)/2
 3424 0045 5D       	 .byte (.L289-.L291)/2
 3425 0046 5D       	 .byte (.L289-.L291)/2
 3426 0047 5D       	 .byte (.L289-.L291)/2
 3427 0048 5D       	 .byte (.L289-.L291)/2
 3428 0049 5D       	 .byte (.L289-.L291)/2
 3429 004a 5D       	 .byte (.L289-.L291)/2
 3430 004b 5D       	 .byte (.L289-.L291)/2
 3431 004c 5D       	 .byte (.L289-.L291)/2
 3432 004d 5D       	 .byte (.L289-.L291)/2
 3433 004e 5D       	 .byte (.L289-.L291)/2
 3434 004f 5D       	 .byte (.L289-.L291)/2
 3435 0050 5D       	 .byte (.L289-.L291)/2
 3436 0051 5D       	 .byte (.L289-.L291)/2
 3437 0052 5D       	 .byte (.L289-.L291)/2
 3438 0053 5D       	 .byte (.L289-.L291)/2
 3439 0054 5D       	 .byte (.L289-.L291)/2
 3440 0055 5D       	 .byte (.L289-.L291)/2
 3441 0056 5D       	 .byte (.L289-.L291)/2
 3442 0057 5D       	 .byte (.L289-.L291)/2
 3443 0058 5D       	 .byte (.L289-.L291)/2
 3444 0059 5D       	 .byte (.L289-.L291)/2
 3445 005a 5D       	 .byte (.L289-.L291)/2
 3446 005b 5D       	 .byte (.L289-.L291)/2
 3447 005c 5D       	 .byte (.L289-.L291)/2
 3448 005d 5D       	 .byte (.L289-.L291)/2
 3449 005e 5D       	 .byte (.L289-.L291)/2
 3450 005f 5D       	 .byte (.L289-.L291)/2
 3451 0060 5D       	 .byte (.L289-.L291)/2
 3452 0061 5D       	 .byte (.L289-.L291)/2
 3453 0062 5D       	 .byte (.L289-.L291)/2
 3454 0063 5D       	 .byte (.L289-.L291)/2
 3455 0064 5D       	 .byte (.L289-.L291)/2
 3456 0065 5D       	 .byte (.L289-.L291)/2
 3457 0066 5D       	 .byte (.L289-.L291)/2
 3458 0067 5D       	 .byte (.L289-.L291)/2
 3459 0068 5D       	 .byte (.L289-.L291)/2
 3460 0069 5D       	 .byte (.L289-.L291)/2
 3461 006a 5D       	 .byte (.L289-.L291)/2
 3462 006b 5D       	 .byte (.L289-.L291)/2
 3463 006c 5D       	 .byte (.L289-.L291)/2
 3464 006d 51       	 .byte (.L297-.L291)/2
 3465 006e 5D       	 .byte (.L289-.L291)/2
 3466 006f 5D       	 .byte (.L289-.L291)/2
 3467 0070 5D       	 .byte (.L289-.L291)/2
 3468 0071 5D       	 .byte (.L289-.L291)/2
 3469 0072 5D       	 .byte (.L289-.L291)/2
 3470 0073 5D       	 .byte (.L289-.L291)/2
 3471 0074 5D       	 .byte (.L289-.L291)/2
 3472 0075 5D       	 .byte (.L289-.L291)/2
 3473 0076 5D       	 .byte (.L289-.L291)/2
 3474 0077 5D       	 .byte (.L289-.L291)/2
 3475 0078 5D       	 .byte (.L289-.L291)/2
 3476 0079 5D       	 .byte (.L289-.L291)/2
 3477 007a 5D       	 .byte (.L289-.L291)/2
 3478 007b 71       	 .byte (.L308-.L291)/2
 3479 007c 5D       	 .byte (.L289-.L291)/2
 3480 007d 5D       	 .byte (.L289-.L291)/2
 3481 007e 63       	 .byte (.L309-.L291)/2
 3482 007f 5D       	 .byte (.L289-.L291)/2
 3483 0080 5D       	 .byte (.L289-.L291)/2
 3484 0081 5D       	 .byte (.L289-.L291)/2
 3485 0082 55       	 .byte (.L300-.L291)/2
 3486 0083 5D       	 .byte (.L289-.L291)/2
 3487 0084 5D       	 .byte (.L289-.L291)/2
 3488 0085 4F       	 .byte (.L301-.L291)/2
 3489 0086 5D       	 .byte (.L289-.L291)/2
 3490 0087 5D       	 .byte (.L289-.L291)/2
 3491 0088 5D       	 .byte (.L289-.L291)/2
 3492 0089 5D       	 .byte (.L289-.L291)/2
 3493 008a 5D       	 .byte (.L289-.L291)/2
 3494 008b 45       	 .byte (.L302-.L291)/2
 3495 008c 5D       	 .byte (.L289-.L291)/2
 3496 008d 5B       	 .byte (.L303-.L291)/2
 3497 008e 4D       	 .byte (.L304-.L291)/2
 3498 008f 5D       	 .byte (.L289-.L291)/2
 3499 0090 5D       	 .byte (.L289-.L291)/2
 3500 0091 5D       	 .byte (.L289-.L291)/2
 3501 0092 5D       	 .byte (.L289-.L291)/2
 3502 0093 5D       	 .byte (.L289-.L291)/2
 3503 0094 5D       	 .byte (.L289-.L291)/2
 3504 0095 5D       	 .byte (.L289-.L291)/2
 3505 0096 5D       	 .byte (.L289-.L291)/2
 3506 0097 5D       	 .byte (.L289-.L291)/2
 3507 0098 5D       	 .byte (.L289-.L291)/2
 3508 0099 5D       	 .byte (.L289-.L291)/2
 3509 009a 4B       	 .byte (.L305-.L291)/2
 3510 009b 00       	 .p2align 1
 3511              	.L302:
2877:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2878:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_EADDRINUSE:     pcName = "EADDRINUSE"; break;
2879:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_ENOMEM:         pcName = "ENOMEM"; break;
2880:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_EADDRNOTAVAIL:  pcName = "EADDRNOTAVAIL"; break;
 3512              	 .loc 1 2880 0
 3513 009c 174B     	 ldr r3,.L312
 3514 009e 1CE0     	 b .L299
 3515              	.L292:
 3516              	.LVL418:
2881:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_ENOPROTOOPT:    pcName = "ENOPROTOOPT"; break;
2882:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_EBADF:          pcName = "EBADF"; break;
 3517              	 .loc 1 2882 0
 3518 00a0 174B     	 ldr r3,.L312+4
 3519 00a2 1AE0     	 b .L299
 3520              	.LVL419:
 3521              	.L296:
2883:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_ENOSPC:         pcName = "ENOSPC"; break;
 3522              	 .loc 1 2883 0
 3523 00a4 174B     	 ldr r3,.L312+8
 3524 00a6 18E0     	 b .L299
 3525              	.LVL420:
 3526              	.L305:
2884:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_ECANCELED:      pcName = "ECANCELED"; break;
 3527              	 .loc 1 2884 0
 3528 00a8 174B     	 ldr r3,.L312+12
 3529 00aa 16E0     	 b .L299
 3530              	.LVL421:
 3531              	.L304:
2885:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_ENOTCONN:       pcName = "ENOTCONN"; break;
 3532              	 .loc 1 2885 0
 3533 00ac 174B     	 ldr r3,.L312+16
 3534 00ae 14E0     	 b .L299
 3535              	.LVL422:
 3536              	.L301:
2886:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_EINPROGRESS:    pcName = "EINPROGRESS"; break;
 3537              	 .loc 1 2886 0
 3538 00b0 174B     	 ldr r3,.L312+20
 3539 00b2 12E0     	 b .L299
 3540              	.LVL423:
 3541              	.L297:
2887:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_EOPNOTSUPP:     pcName = "EOPNOTSUPP"; break;
 3542              	 .loc 1 2887 0
 3543 00b4 174B     	 ldr r3,.L312+24
 3544 00b6 10E0     	 b .L299
 3545              	.LVL424:
 3546              	.L290:
2888:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_EINTR:          pcName = "EINTR"; break;
 3547              	 .loc 1 2888 0
 3548 00b8 174B     	 ldr r3,.L312+28
 3549 00ba 0EE0     	 b .L299
 3550              	.LVL425:
 3551              	.L300:
2889:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_ETIMEDOUT:      pcName = "ETIMEDOUT"; break;
 3552              	 .loc 1 2889 0
 3553 00bc 174B     	 ldr r3,.L312+32
 3554 00be 0CE0     	 b .L299
 3555              	.LVL426:
 3556              	.L295:
2890:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_EINVAL:         pcName = "EINVAL"; break;
 3557              	 .loc 1 2890 0
 3558 00c0 174B     	 ldr r3,.L312+36
 3559 00c2 0AE0     	 b .L299
 3560              	.LVL427:
 3561              	.L293:
2891:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_EWOULDBLOCK:    pcName = "EWOULDBLOCK"; break; /* same as EAGAIN */
 3562              	 .loc 1 2891 0
 3563 00c4 174B     	 ldr r3,.L312+40
 3564 00c6 08E0     	 b .L299
 3565              	.LVL428:
 3566              	.L303:
2892:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_EISCONN:        pcName = "EISCONN"; break;
 3567              	 .loc 1 2892 0
 3568 00c8 174B     	 ldr r3,.L312+44
 3569 00ca 06E0     	 b .L299
 3570              	.LVL429:
 3571              	.L289:
2893:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		default:
2894:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Using function "snprintf". */
2895:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( void ) snprintf( pcBuffer, uxLength, "Errno %d", ( int32_t ) xErrnum );
 3572              	 .loc 1 2895 0
 3573 00cc 2846     	 mov r0,r5
 3574              	.LVL430:
 3575 00ce 2146     	 mov r1,r4
 3576 00d0 164A     	 ldr r2,.L312+48
 3577 00d2 FFF7FEFF 	 bl snprintf
 3578              	.LVL431:
 3579 00d6 05E0     	 b .L306
 3580              	.LVL432:
 3581              	.L309:
2878:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_ENOMEM:         pcName = "ENOMEM"; break;
 3582              	 .loc 1 2878 0
 3583 00d8 154B     	 ldr r3,.L312+52
 3584              	.L299:
 3585              	.LVL433:
2896:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pcName = NULL;
2897:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
2898:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2899:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pcName != NULL )
2900:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2901:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Using function "snprintf". */
2902:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) snprintf( pcBuffer, uxLength, "%s", pcName );
 3586              	 .loc 1 2902 0
 3587 00da 2846     	 mov r0,r5
 3588              	.LVL434:
 3589 00dc 2146     	 mov r1,r4
 3590 00de 154A     	 ldr r2,.L312+56
 3591              	.LVL435:
 3592 00e0 FFF7FEFF 	 bl snprintf
 3593              	.LVL436:
 3594              	.L306:
2903:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2904:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( uxLength > 0U )
 3595              	 .loc 1 2904 0
 3596 00e4 44B1     	 cbz r4,.L310
2905:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2906:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pcBuffer[ uxLength - 1U ] = '\0';
 3597              	 .loc 1 2906 0
 3598 00e6 2C44     	 add r4,r4,r5
 3599              	.LVL437:
 3600 00e8 0023     	 movs r3,#0
 3601 00ea 04F8013C 	 strb r3,[r4,#-1]
 3602 00ee 03E0     	 b .L310
 3603              	.LVL438:
 3604              	.L294:
2879:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_EADDRNOTAVAIL:  pcName = "EADDRNOTAVAIL"; break;
 3605              	 .loc 1 2879 0
 3606 00f0 114B     	 ldr r3,.L312+60
 3607 00f2 F2E7     	 b .L299
 3608              	.L308:
2881:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case pdFREERTOS_ERRNO_EBADF:          pcName = "EBADF"; break;
 3609              	 .loc 1 2881 0
 3610 00f4 114B     	 ldr r3,.L312+64
 3611              	.LVL439:
 3612 00f6 F0E7     	 b .L299
 3613              	.LVL440:
 3614              	.L310:
2907:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2908:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2909:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return pcBuffer;
2910:../FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3615              	 .loc 1 2910 0
 3616 00f8 2846     	 mov r0,r5
 3617 00fa 38BD     	 pop {r3,r4,r5,pc}
 3618              	.LVL441:
 3619              	.L313:
 3620              	 .align 2
 3621              	.L312:
 3622 00fc 98000000 	 .word .LC15
 3623 0100 84000000 	 .word .LC13
 3624 0104 7C000000 	 .word .LC12
 3625 0108 70000000 	 .word .LC11
 3626 010c 64000000 	 .word .LC10
 3627 0110 58000000 	 .word .LC9
 3628 0114 4C000000 	 .word .LC8
 3629 0118 44000000 	 .word .LC7
 3630 011c 38000000 	 .word .LC6
 3631 0120 30000000 	 .word .LC5
 3632 0124 24000000 	 .word .LC4
 3633 0128 1C000000 	 .word .LC3
 3634 012c B0000000 	 .word .LC17
 3635 0130 10000000 	 .word .LC2
 3636 0134 BC000000 	 .word .LC18
 3637 0138 A8000000 	 .word .LC16
 3638 013c 8C000000 	 .word .LC14
 3639              	 .cfi_endproc
 3640              	.LFE102:
 3642              	 .global xDefaultAddressing
 3643              	 .global xNetworkAddressing
 3644              	 .global xBroadcastMACAddress
 3645              	 .global usPacketIdentifier
 3646              	 .global xNetworkEventQueue
 3647              	 .section .bss.xDNSTimer,"aw",%nobits
 3648              	 .align 2
 3649              	 .set .LANCHOR14,.+0
 3652              	xDNSTimer:
 3653 0000 00000000 	 .space 20
 3653      00000000 
 3653      00000000 
 3653      00000000 
 3653      00000000 
 3654              	 .section .rodata.xBroadcastMACAddress,"a",%progbits
 3655              	 .align 2
 3656              	 .set .LANCHOR10,.+0
 3659              	xBroadcastMACAddress:
 3660 0000 FF       	 .byte -1
 3661 0001 FF       	 .byte -1
 3662 0002 FF       	 .byte -1
 3663 0003 FF       	 .byte -1
 3664 0004 FF       	 .byte -1
 3665 0005 FF       	 .byte -1
 3666 0006 0000     	 .section .bss.xDefaultAddressing,"aw",%nobits
 3667              	 .align 2
 3668              	 .set .LANCHOR6,.+0
 3671              	xDefaultAddressing:
 3672 0000 00000000 	 .space 20
 3672      00000000 
 3672      00000000 
 3672      00000000 
 3672      00000000 
 3673              	 .section .bss.xNetworkEventQueue,"aw",%nobits
 3674              	 .align 2
 3675              	 .set .LANCHOR1,.+0
 3678              	xNetworkEventQueue:
 3679 0000 00000000 	 .space 4
 3680              	 .section .bss.xNetworkAddressing,"aw",%nobits
 3681              	 .align 2
 3682              	 .set .LANCHOR5,.+0
 3685              	xNetworkAddressing:
 3686 0000 00000000 	 .space 20
 3686      00000000 
 3686      00000000 
 3686      00000000 
 3686      00000000 
 3687              	 .section .bss.xCallEventHook.7043,"aw",%nobits
 3688              	 .align 2
 3689              	 .set .LANCHOR13,.+0
 3692              	xCallEventHook.7043:
 3693 0000 00000000 	 .space 4
 3694              	 .section .bss.xNetworkUp,"aw",%nobits
 3695              	 .align 2
 3696              	 .set .LANCHOR11,.+0
 3699              	xNetworkUp:
 3700 0000 00000000 	 .space 4
 3701              	 .section .bss.xARPTimer,"aw",%nobits
 3702              	 .align 2
 3703              	 .set .LANCHOR12,.+0
 3706              	xARPTimer:
 3707 0000 00000000 	 .space 20
 3707      00000000 
 3707      00000000 
 3707      00000000 
 3707      00000000 
 3708              	 .section .rodata.xNetworkDownEvent.6942,"a",%progbits
 3709              	 .align 2
 3710              	 .set .LANCHOR8,.+0
 3713              	xNetworkDownEvent.6942:
 3714 0000 00000000 	 .space 8
 3714      00000000 
 3715              	 .section .bss.xIPTaskInitialised,"aw",%nobits
 3716              	 .align 2
 3717              	 .set .LANCHOR4,.+0
 3720              	xIPTaskInitialised:
 3721 0000 00000000 	 .space 4
 3722              	 .section .bss.xNetworkDownEventPending,"aw",%nobits
 3723              	 .align 2
 3724              	 .set .LANCHOR3,.+0
 3727              	xNetworkDownEventPending:
 3728 0000 00000000 	 .space 4
 3729              	 .section .bss.usSequenceNumber.7017,"aw",%nobits
 3730              	 .align 1
 3731              	 .set .LANCHOR9,.+0
 3734              	usSequenceNumber.7017:
 3735 0000 0000     	 .space 2
 3736              	 .section .rodata.xNetworkDownEvent.6947,"a",%progbits
 3737              	 .align 2
 3738              	 .set .LANCHOR2,.+0
 3741              	xNetworkDownEvent.6947:
 3742 0000 00000000 	 .space 8
 3742      00000000 
 3743              	 .section .rodata.str1.4,"aMS",%progbits,1
 3744              	 .align 2
 3745              	.LC0:
 3746 0000 4E657445 	 .ascii "NetEvnt\000"
 3746      766E7400 
 3747              	.LC1:
 3748 0008 49502D74 	 .ascii "IP-task\000"
 3748      61736B00 
 3749              	.LC2:
 3750 0010 45414444 	 .ascii "EADDRINUSE\000"
 3750      52494E55 
 3750      534500
 3751 001b 00       	 .space 1
 3752              	.LC3:
 3753 001c 45495343 	 .ascii "EISCONN\000"
 3753      4F4E4E00 
 3754              	.LC4:
 3755 0024 45574F55 	 .ascii "EWOULDBLOCK\000"
 3755      4C44424C 
 3755      4F434B00 
 3756              	.LC5:
 3757 0030 45494E56 	 .ascii "EINVAL\000"
 3757      414C00
 3758 0037 00       	 .space 1
 3759              	.LC6:
 3760 0038 4554494D 	 .ascii "ETIMEDOUT\000"
 3760      45444F55 
 3760      5400
 3761 0042 0000     	 .space 2
 3762              	.LC7:
 3763 0044 45494E54 	 .ascii "EINTR\000"
 3763      5200
 3764 004a 0000     	 .space 2
 3765              	.LC8:
 3766 004c 454F504E 	 .ascii "EOPNOTSUPP\000"
 3766      4F545355 
 3766      505000
 3767 0057 00       	 .space 1
 3768              	.LC9:
 3769 0058 45494E50 	 .ascii "EINPROGRESS\000"
 3769      524F4752 
 3769      45535300 
 3770              	.LC10:
 3771 0064 454E4F54 	 .ascii "ENOTCONN\000"
 3771      434F4E4E 
 3771      00
 3772 006d 000000   	 .space 3
 3773              	.LC11:
 3774 0070 4543414E 	 .ascii "ECANCELED\000"
 3774      43454C45 
 3774      4400
 3775 007a 0000     	 .space 2
 3776              	.LC12:
 3777 007c 454E4F53 	 .ascii "ENOSPC\000"
 3777      504300
 3778 0083 00       	 .space 1
 3779              	.LC13:
 3780 0084 45424144 	 .ascii "EBADF\000"
 3780      4600
 3781 008a 0000     	 .space 2
 3782              	.LC14:
 3783 008c 454E4F50 	 .ascii "ENOPROTOOPT\000"
 3783      524F544F 
 3783      4F505400 
 3784              	.LC15:
 3785 0098 45414444 	 .ascii "EADDRNOTAVAIL\000"
 3785      524E4F54 
 3785      41564149 
 3785      4C00
 3786 00a6 0000     	 .space 2
 3787              	.LC16:
 3788 00a8 454E4F4D 	 .ascii "ENOMEM\000"
 3788      454D00
 3789 00af 00       	 .space 1
 3790              	.LC17:
 3791 00b0 4572726E 	 .ascii "Errno %d\000"
 3791      6F202564 
 3791      00
 3792 00b9 000000   	 .space 3
 3793              	.LC18:
 3794 00bc 257300   	 .ascii "%s\000"
 3795 00bf 00       	 .section .bss.xTCPTimer,"aw",%nobits
 3796              	 .align 2
 3797              	 .set .LANCHOR7,.+0
 3800              	xTCPTimer:
 3801 0000 00000000 	 .space 20
 3801      00000000 
 3801      00000000 
 3801      00000000 
 3801      00000000 
 3802              	 .section .bss.usPacketIdentifier,"aw",%nobits
 3803              	 .align 1
 3806              	usPacketIdentifier:
 3807 0000 0000     	 .space 2
 3808              	 .section .bss.xIPTaskHandle,"aw",%nobits
 3809              	 .align 2
 3810              	 .set .LANCHOR0,.+0
 3813              	xIPTaskHandle:
 3814 0000 00000000 	 .space 4
 3815              	 .section .bss.xProcessedTCPMessage,"aw",%nobits
 3816              	 .align 2
 3817              	 .set .LANCHOR15,.+0
 3820              	xProcessedTCPMessage:
 3821 0000 00000000 	 .space 4
 3822              	 .text
 3823              	.Letext0:
 3824              	 .file 3 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3825              	 .file 4 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3826              	 .file 5 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 3827              	 .file 6 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/projdefs.h"
 3828              	 .file 7 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/list.h"
 3829              	 .file 8 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/task.h"
 3830              	 .file 9 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/queue.h"
 3831              	 .file 10 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h"
 3832              	 .file 11 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/event_groups.h"
 3833              	 .file 12 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_Sockets.h"
 3834              	 .file 13 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
 3835              	 .file 14 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h"
 3836              	 .file 15 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_TCP_WIN.h"
 3837              	 .file 16 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/NetworkBufferManagement.h"
 3838              	 .file 17 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\string.h"
 3839              	 .file 18 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/NetworkInterface.h"
 3840              	 .file 19 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_DNS.h"
 3841              	 .file 20 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_ARP.h"
 3842              	 .file 21 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_TCP_IP.h"
 3843              	 .file 22 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 FreeRTOS_IP.c
    {standard input}:19     .text.prvIPTimerCheck:00000000 $t
    {standard input}:23     .text.prvIPTimerCheck:00000000 prvIPTimerCheck
    {standard input}:113    .text.xIsCallingFromIPTask:00000000 $t
    {standard input}:118    .text.xIsCallingFromIPTask:00000000 xIsCallingFromIPTask
    {standard input}:144    .text.xIsCallingFromIPTask:00000014 $d
    {standard input}:149    .text.FreeRTOS_NetworkDownFromISR:00000000 $t
    {standard input}:154    .text.FreeRTOS_NetworkDownFromISR:00000000 FreeRTOS_NetworkDownFromISR
    {standard input}:195    .text.FreeRTOS_NetworkDownFromISR:0000002c $d
    {standard input}:202    .text.FreeRTOS_GetUDPPayloadBuffer:00000000 $t
    {standard input}:207    .text.FreeRTOS_GetUDPPayloadBuffer:00000000 FreeRTOS_GetUDPPayloadBuffer
    {standard input}:252    .text.pxDuplicateNetworkBufferWithDescriptor:00000000 $t
    {standard input}:257    .text.pxDuplicateNetworkBufferWithDescriptor:00000000 pxDuplicateNetworkBufferWithDescriptor
    {standard input}:309    .text.pxUDPPayloadBuffer_to_NetworkBuffer:00000000 $t
    {standard input}:314    .text.pxUDPPayloadBuffer_to_NetworkBuffer:00000000 pxUDPPayloadBuffer_to_NetworkBuffer
    {standard input}:349    .text.pxRAWPayloadBuffer_to_NetworkBuffer:00000000 $t
    {standard input}:354    .text.pxRAWPayloadBuffer_to_NetworkBuffer:00000000 pxRAWPayloadBuffer_to_NetworkBuffer
    {standard input}:389    .text.FreeRTOS_ReleaseUDPPayloadBuffer:00000000 $t
    {standard input}:394    .text.FreeRTOS_ReleaseUDPPayloadBuffer:00000000 FreeRTOS_ReleaseUDPPayloadBuffer
    {standard input}:416    .text.FreeRTOS_ReleaseRAWPayloadBuffer:00000000 $t
    {standard input}:421    .text.FreeRTOS_ReleaseRAWPayloadBuffer:00000000 FreeRTOS_ReleaseRAWPayloadBuffer
    {standard input}:443    .text.FreeRTOS_IPInit:00000000 $t
    {standard input}:448    .text.FreeRTOS_IPInit:00000000 FreeRTOS_IPInit
    {standard input}:713    .text.FreeRTOS_IPInit:0000016c $d
    {standard input}:2036   .text.prvIPTask:00000000 prvIPTask
    {standard input}:726    .text.FreeRTOS_GetAddressConfiguration:00000000 $t
    {standard input}:731    .text.FreeRTOS_GetAddressConfiguration:00000000 FreeRTOS_GetAddressConfiguration
    {standard input}:785    .text.FreeRTOS_GetAddressConfiguration:0000002c $d
    {standard input}:791    .text.FreeRTOS_SetAddressConfiguration:00000000 $t
    {standard input}:796    .text.FreeRTOS_SetAddressConfiguration:00000000 FreeRTOS_SetAddressConfiguration
    {standard input}:849    .text.FreeRTOS_SetAddressConfiguration:00000028 $d
    {standard input}:855    .text.xSendEventStructToIPTask:00000000 $t
    {standard input}:860    .text.xSendEventStructToIPTask:00000000 xSendEventStructToIPTask
    {standard input}:945    .text.xSendEventStructToIPTask:00000054 $d
    {standard input}:952    .text.FreeRTOS_NetworkDown:00000000 $t
    {standard input}:957    .text.FreeRTOS_NetworkDown:00000000 FreeRTOS_NetworkDown
    {standard input}:986    .text.FreeRTOS_NetworkDown:00000018 $d
    {standard input}:992    .text.FreeRTOS_SendPingRequest:00000000 $t
    {standard input}:997    .text.FreeRTOS_SendPingRequest:00000000 FreeRTOS_SendPingRequest
    {standard input}:1147   .text.FreeRTOS_SendPingRequest:000000ac $d
    {standard input}:1152   .text.xSendEventToIPTask:00000000 $t
    {standard input}:1157   .text.xSendEventToIPTask:00000000 xSendEventToIPTask
    {standard input}:1192   .text.eConsiderFrameForProcessing:00000000 $t
    {standard input}:1197   .text.eConsiderFrameForProcessing:00000000 eConsiderFrameForProcessing
    {standard input}:1258   .text.eConsiderFrameForProcessing:00000038 $d
    {standard input}:1264   .text.vIPNetworkUpCalls:00000000 $t
    {standard input}:1269   .text.vIPNetworkUpCalls:00000000 vIPNetworkUpCalls
    {standard input}:1320   .text.vIPNetworkUpCalls:00000030 $d
    {standard input}:1330   .text.prvProcessNetworkDownEvent:00000000 $t
    {standard input}:1334   .text.prvProcessNetworkDownEvent:00000000 prvProcessNetworkDownEvent
    {standard input}:1390   .text.prvProcessNetworkDownEvent:00000040 $d
    {standard input}:1396   .text.xIsIPv4Multicast:00000000 $t
    {standard input}:1401   .text.xIsIPv4Multicast:00000000 xIsIPv4Multicast
    {standard input}:1433   .text.vSetMultiCastIPv4MacAddress:00000000 $t
    {standard input}:1438   .text.vSetMultiCastIPv4MacAddress:00000000 vSetMultiCastIPv4MacAddress
    {standard input}:1477   .text.usGenerateChecksum:00000000 $t
    {standard input}:1482   .text.usGenerateChecksum:00000000 usGenerateChecksum
    {standard input}:1685   .text.usGenerateProtocolChecksum:00000000 $t
    {standard input}:1690   .text.usGenerateProtocolChecksum:00000000 usGenerateProtocolChecksum
    {standard input}:1981   .text.vReturnEthernetFrame:00000000 $t
    {standard input}:1986   .text.vReturnEthernetFrame:00000000 vReturnEthernetFrame
    {standard input}:2027   .text.vReturnEthernetFrame:00000028 $d
    {standard input}:2032   .text.prvIPTask:00000000 $t
    {standard input}:2253   .text.prvIPTask:000000fc $d
    {standard input}:2267   .text.prvIPTask:00000118 $t
    {standard input}:2575   .text.prvIPTask:000002f4 $d
    {standard input}:2591   .text.prvIPTask:00000318 $t
    {standard input}:2952   .text.prvIPTask:0000049c $d
    {standard input}:2965   .text.FreeRTOS_GetIPAddress:00000000 $t
    {standard input}:2970   .text.FreeRTOS_GetIPAddress:00000000 FreeRTOS_GetIPAddress
    {standard input}:2984   .text.FreeRTOS_GetIPAddress:00000008 $d
    {standard input}:2989   .text.FreeRTOS_SetIPAddress:00000000 $t
    {standard input}:2994   .text.FreeRTOS_SetIPAddress:00000000 FreeRTOS_SetIPAddress
    {standard input}:3009   .text.FreeRTOS_SetIPAddress:00000008 $d
    {standard input}:3014   .text.FreeRTOS_GetGatewayAddress:00000000 $t
    {standard input}:3019   .text.FreeRTOS_GetGatewayAddress:00000000 FreeRTOS_GetGatewayAddress
    {standard input}:3033   .text.FreeRTOS_GetGatewayAddress:00000008 $d
    {standard input}:3038   .text.FreeRTOS_GetDNSServerAddress:00000000 $t
    {standard input}:3043   .text.FreeRTOS_GetDNSServerAddress:00000000 FreeRTOS_GetDNSServerAddress
    {standard input}:3057   .text.FreeRTOS_GetDNSServerAddress:00000008 $d
    {standard input}:3062   .text.FreeRTOS_GetNetmask:00000000 $t
    {standard input}:3067   .text.FreeRTOS_GetNetmask:00000000 FreeRTOS_GetNetmask
    {standard input}:3081   .text.FreeRTOS_GetNetmask:00000008 $d
    {standard input}:3086   .text.FreeRTOS_UpdateMACAddress:00000000 $t
    {standard input}:3091   .text.FreeRTOS_UpdateMACAddress:00000000 FreeRTOS_UpdateMACAddress
    {standard input}:3112   .text.FreeRTOS_UpdateMACAddress:00000010 $d
    {standard input}:3117   .text.FreeRTOS_GetMACAddress:00000000 $t
    {standard input}:3122   .text.FreeRTOS_GetMACAddress:00000000 FreeRTOS_GetMACAddress
    {standard input}:3135   .text.FreeRTOS_GetMACAddress:00000004 $d
    {standard input}:3140   .text.FreeRTOS_SetNetmask:00000000 $t
    {standard input}:3145   .text.FreeRTOS_SetNetmask:00000000 FreeRTOS_SetNetmask
    {standard input}:3160   .text.FreeRTOS_SetNetmask:00000008 $d
    {standard input}:3165   .text.FreeRTOS_SetGatewayAddress:00000000 $t
    {standard input}:3170   .text.FreeRTOS_SetGatewayAddress:00000000 FreeRTOS_SetGatewayAddress
    {standard input}:3185   .text.FreeRTOS_SetGatewayAddress:00000008 $d
    {standard input}:3190   .text.vIPSetDnsTimerEnableState:00000000 $t
    {standard input}:3195   .text.vIPSetDnsTimerEnableState:00000000 vIPSetDnsTimerEnableState
    {standard input}:3221   .text.vIPSetDnsTimerEnableState:0000001c $d
    {standard input}:3226   .text.vIPReloadDNSTimer:00000000 $t
    {standard input}:3231   .text.vIPReloadDNSTimer:00000000 vIPReloadDNSTimer
    {standard input}:3286   .text.vIPReloadDNSTimer:00000034 $d
    {standard input}:3295   .text.xIPIsNetworkTaskReady:00000000 $t
    {standard input}:3300   .text.xIPIsNetworkTaskReady:00000000 xIPIsNetworkTaskReady
    {standard input}:3314   .text.xIPIsNetworkTaskReady:00000008 $d
    {standard input}:3319   .text.FreeRTOS_IsNetworkUp:00000000 $t
    {standard input}:3324   .text.FreeRTOS_IsNetworkUp:00000000 FreeRTOS_IsNetworkUp
    {standard input}:3338   .text.FreeRTOS_IsNetworkUp:00000008 $d
    {standard input}:3343   .text.FreeRTOS_strerror_r:00000000 $t
    {standard input}:3348   .text.FreeRTOS_strerror_r:00000000 FreeRTOS_strerror_r
    {standard input}:3373   .text.FreeRTOS_strerror_r:00000012 $d
    {standard input}:3622   .text.FreeRTOS_strerror_r:000000fc $d
    {standard input}:3671   .bss.xDefaultAddressing:00000000 xDefaultAddressing
    {standard input}:3685   .bss.xNetworkAddressing:00000000 xNetworkAddressing
    {standard input}:3659   .rodata.xBroadcastMACAddress:00000000 xBroadcastMACAddress
    {standard input}:3806   .bss.usPacketIdentifier:00000000 usPacketIdentifier
    {standard input}:3678   .bss.xNetworkEventQueue:00000000 xNetworkEventQueue
    {standard input}:3648   .bss.xDNSTimer:00000000 $d
    {standard input}:3652   .bss.xDNSTimer:00000000 xDNSTimer
    {standard input}:3655   .rodata.xBroadcastMACAddress:00000000 $d
    {standard input}:3667   .bss.xDefaultAddressing:00000000 $d
    {standard input}:3674   .bss.xNetworkEventQueue:00000000 $d
    {standard input}:3681   .bss.xNetworkAddressing:00000000 $d
    {standard input}:3688   .bss.xCallEventHook.7043:00000000 $d
    {standard input}:3692   .bss.xCallEventHook.7043:00000000 xCallEventHook.7043
    {standard input}:3695   .bss.xNetworkUp:00000000 $d
    {standard input}:3699   .bss.xNetworkUp:00000000 xNetworkUp
    {standard input}:3702   .bss.xARPTimer:00000000 $d
    {standard input}:3706   .bss.xARPTimer:00000000 xARPTimer
    {standard input}:3709   .rodata.xNetworkDownEvent.6942:00000000 $d
    {standard input}:3713   .rodata.xNetworkDownEvent.6942:00000000 xNetworkDownEvent.6942
    {standard input}:3716   .bss.xIPTaskInitialised:00000000 $d
    {standard input}:3720   .bss.xIPTaskInitialised:00000000 xIPTaskInitialised
    {standard input}:3723   .bss.xNetworkDownEventPending:00000000 $d
    {standard input}:3727   .bss.xNetworkDownEventPending:00000000 xNetworkDownEventPending
    {standard input}:3730   .bss.usSequenceNumber.7017:00000000 $d
    {standard input}:3734   .bss.usSequenceNumber.7017:00000000 usSequenceNumber.7017
    {standard input}:3737   .rodata.xNetworkDownEvent.6947:00000000 $d
    {standard input}:3741   .rodata.xNetworkDownEvent.6947:00000000 xNetworkDownEvent.6947
    {standard input}:3744   .rodata.str1.4:00000000 $d
    {standard input}:3796   .bss.xTCPTimer:00000000 $d
    {standard input}:3800   .bss.xTCPTimer:00000000 xTCPTimer
    {standard input}:3803   .bss.usPacketIdentifier:00000000 $d
    {standard input}:3809   .bss.xIPTaskHandle:00000000 $d
    {standard input}:3813   .bss.xIPTaskHandle:00000000 xIPTaskHandle
    {standard input}:3816   .bss.xProcessedTCPMessage:00000000 $d
    {standard input}:3820   .bss.xProcessedTCPMessage:00000000 xProcessedTCPMessage
                     .debug_frame:00000010 $d
    {standard input}:3510   .text.FreeRTOS_strerror_r:0000009b $d
    {standard input}:3510   .text.FreeRTOS_strerror_r:0000009c $t
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.184.159df79b4ca79c76561572a55985524c
                           .group:00000000 wm4.cdefs.h.47.4002528de975c0fcce6c551c15d87b8c
                           .group:00000000 wm4.stddef.h.39.fb88e218f22ad7a0ab38f3d93c6eb3e4
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.56707660962b21991903f1fee7c13bb3
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.65.7c7009d79fb33c27bcf8e2214c76b343
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.FreeRTOSConfig.h.30.aa43eb1cb33228d5c7e359a94d48589b
                           .group:00000000 wm4.projdefs.h.28.d6a7c9061b707820f2fcf4c2ff5d9f24
                           .group:00000000 wm4.portmacro.h.30.2ddc2eaf2e032c76c597fb78c4365041
                           .group:00000000 wm4.portable.h.63.e9cc508c3850f44ce542149380c67812
                           .group:00000000 wm4.mpu_wrappers.h.28.163fb40577cf8d1578015ea3f2ff4cdb
                           .group:00000000 wm4.FreeRTOS.h.67.9945f39eea4ddeb224c0782392206292
                           .group:00000000 wm4.list.h.57.02ec67e07eacffe5ca7cfb7326896236
                           .group:00000000 wm4.task.h.47.2d3fe49a094b8ec1e3e6aac441e8db21
                           .group:00000000 wm4.queue.h.66.45d4a3cf5de24cde7e732f8dad25383c
                           .group:00000000 wm4.semphr.h.38.96f44691bfa19eb833944d3a35b81e54
                           .group:00000000 wm4.FreeRTOSIPConfig.h.37.3f9c1db988571ff1f3dec4c7e54978d6
                           .group:00000000 wm4.FreeRTOS_errno_TCP.h.27.708877b341d0e6bcb4ba112b2ad8082a
                           .group:00000000 wm4.FreeRTOSIPConfigDefaults.h.41.f972b11d9b1eba5383080cfaef1fd740
                           .group:00000000 wm4.IPTraceMacroDefaults.h.31.69642530b5a79c93e762c9b09ac0d1d5
                           .group:00000000 wm4.FreeRTOS_IP.h.59.3f5e36f6612bd0c66747c6093da47335
                           .group:00000000 wm4.FreeRTOS_IP.h.179.e5077063e624bc5d3f02542470d6ea94
                           .group:00000000 wm4.timers.h.29.025d268d6baf57298309e7b498ee1cc7
                           .group:00000000 wm4.FreeRTOS_Sockets.h.58.61d472da32c0e0f5bc49c368f15d0ac5
                           .group:00000000 wm4.FreeRTOS_TCP_WIN.h.32.f3cfab69924f28284deb16cc1a30fb93
                           .group:00000000 wm4.FreeRTOS_IP_Private.h.52.551f932b14473cea139893dda31b3fa0
                           .group:00000000 wm4.FreeRTOS_IP_Private.h.328.b5788f8d626a4cf16b8282f9399f3f55
                           .group:00000000 wm4.FreeRTOS_DNS.h.27.8432bc3440a9cfc56281e07613f9ce59

UNDEFINED SYMBOLS
xTaskCheckForTimeOut
vTaskSetTimeOutState
xTaskGetCurrentTaskHandle
xQueueGenericSendFromISR
pxGetNetworkBufferWithDescriptor
memcpy
vReleaseNetworkBufferAndDescriptor
xQueueGenericCreate
vQueueAddToRegistry
xNetworkBuffersInitialise
vNetworkSocketsInit
xTaskCreate
vQueueDelete
xDefaultPartUDPPacketHeader
uxQueueMessagesWaiting
xQueueGenericSend
uxGetNumberOfFreeNetworkBuffers
memset
memcmp
vApplicationIPNetworkEventHook
vDNSInitialise
FreeRTOS_ClearARP
xNetworkInterfaceInitialise
vTaskDelay
xNetworkInterfaceOutput
vDNSCheckCallBack
xTCPTimerCheck
xQueueReceive
eARPProcessPacket
memmove
vARPRefreshCacheEntry
vApplicationPingReplyHook
xProcessReceivedUDPPacket
xProcessReceivedTCPPacket
vARPAgeCache
vSocketBind
vSocketWakeUpUser
vSocketClose
vProcessGeneratedUDPPacket
vProcessGeneratedRAWPacket
vSocketSelect
FreeRTOS_SignalSocket
xTCPCheckNewClient
snprintf
