   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "NetworkInterface.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.prvEMACHandlerTask,"ax",%progbits
  19              	 .align 2
  20              	 .thumb
  21              	 .thumb_func
  23              	prvEMACHandlerTask:
  24              	.LFB244:
  25              	 .file 1 "../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c"
   1:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /*
   2:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** FreeRTOS+TCP V2.2.2
   3:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
   5:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** this software and associated documentation files (the "Software"), to deal in
   7:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** the Software without restriction, including without limitation the rights to
   8:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** the Software, and to permit persons to whom the Software is furnished to do so,
  10:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** subject to the following conditions:
  11:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  12:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** The above copyright notice and this permission notice shall be included in all
  13:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** copies or substantial portions of the Software.
  14:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  15:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  22:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  http://aws.amazon.com/freertos
  23:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  http://www.FreeRTOS.org
  24:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** */
  25:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  26:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  27:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**************************************************************************************************
  28:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @file     NetworkInterface.c
  29:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief    Network interface port source file for Infineon XMC4500 Relax Kit
  30:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @version
  31:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @date
  32:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
  33:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @cond
  34:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  **************************************************************************************************
  35:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * Copyright (c) 2020, Hemant Sharma - All Rights Reserved
  36:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * All rights reserved.
  37:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
  38:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  39:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * following conditions are met:
  40:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
  41:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  42:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * disclaimer.
  43:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
  44:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  45:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  46:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
  47:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  48:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * products derived from this software without specific prior written permission.
  49:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
  50:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  51:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  52:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  53:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  54:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  55:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN AN
  56:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  57:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  **************************************************************************************************
  58:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
  59:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * *************************** Change history ********************************
  60:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
  61:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @endcond
  62:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
  63:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  64:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /* FreeRTOS includes. */
  65:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "FreeRTOS.h"
  66:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "task.h"
  67:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "list.h"
  68:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "queue.h"
  69:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "semphr.h"
  70:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  71:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /* FreeRTOS+TCP includes. */
  72:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "FreeRTOS_IP.h"
  73:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "FreeRTOS_Sockets.h"
  74:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "FreeRTOS_IP_Private.h"
  75:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "FreeRTOS_DNS.h"
  76:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "NetworkBufferManagement.h"
  77:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "NetworkInterface.h"
  78:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  79:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  80:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /* Include XMC library headers */
  81:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "xmc_eth_mac.h"
  82:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #include "xmc_eth_phy.h"
  83:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  84:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  85:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /******************************************************************************
  86:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** * Preprocessor Constants
  87:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** *******************************************************************************/
  88:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  89:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  90:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /******************************************************************************
  91:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** * Configuration Constants
  92:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** *******************************************************************************/
  93:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
  94:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /* If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 1, then the Ethernet
  95:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** driver will filter incoming packets and only pass the stack those packets it
  96:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** considers need processing. */
  97:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #if( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
  98:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define ipCONSIDER_FRAME_FOR_PROCESSING( pucEthernetBuffer ) eProcessBuffer
  99:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #else
 100:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define ipCONSIDER_FRAME_FOR_PROCESSING( pucEthernetBuffer ) eConsiderFrameForProcessing( ( pucEthe
 101:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #endif
 102:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 103:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 104:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /* Default the size of the stack used by the EMAC deferred handler task to twice
 105:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** the size of the stack used by the idle task - but allow this to be overridden in
 106:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** FreeRTOSConfig.h as configMINIMAL_STACK_SIZE is a user definable constant. */
 107:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #ifndef configEMAC_TASK_STACK_SIZE
 108:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	#define configEMAC_TASK_STACK_SIZE ( 2 * configMINIMAL_STACK_SIZE )
 109:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #endif
 110:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 111:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #ifndef configEMAC_TASK_PRIORITY
 112:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	#define configEMAC_TASK_PRIORITY			( ipconfigIP_TASK_PRIORITY + 1)
 113:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #endif
 114:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 115:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /* Data configuration constants for ETH */
 116:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define ETH_0_PHY_ADDR   (0)
 117:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define ETH_0_NUM_RX_BUF (4U)
 118:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define ETH_0_NUM_TX_BUF (4U)
 119:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 120:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /* MAC address*/
 121:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define MAC_ADDR0 (0x00U)
 122:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define MAC_ADDR1 (0x03U)
 123:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define MAC_ADDR2 (0x19U)
 124:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define MAC_ADDR3 (0x45U)
 125:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define MAC_ADDR4 (0x00U)
 126:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define MAC_ADDR5 (0x00U)
 127:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 128:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 129:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /******************************************************************************
 130:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** * Macros
 131:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** *******************************************************************************/
 132:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 133:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /* Macros for Ethernet Configuration */
 134:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define MAC_ADDR    ((uint64_t)MAC_ADDR0 | \
 135:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         ((uint64_t)MAC_ADDR1 << 8) | \
 136:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         ((uint64_t)MAC_ADDR2 << 16) | \
 137:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         ((uint64_t)MAC_ADDR3 << 24) | \
 138:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         ((uint64_t)MAC_ADDR4 << 32) | \
 139:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         ((uint64_t)MAC_ADDR5 << 40))
 140:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 141:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 142:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /******************************************************************************
 143:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** * Variables
 144:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** *******************************************************************************/
 145:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 146:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 147:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief	MAC buffers
 148:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 149:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** static __attribute__((aligned(4))) XMC_ETH_MAC_DMA_DESC_t ETH_0_rx_desc[ETH_0_NUM_RX_BUF] __attribu
 150:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** static __attribute__((aligned(4))) XMC_ETH_MAC_DMA_DESC_t ETH_0_tx_desc[ETH_0_NUM_TX_BUF] __attribu
 151:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** static __attribute__((aligned(4))) uint8_t ETH_0_rx_buf[ETH_0_NUM_RX_BUF][XMC_ETH_MAC_BUF_SIZE] __a
 152:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** static __attribute__((aligned(4))) uint8_t ETH_0_tx_buf[ETH_0_NUM_TX_BUF][XMC_ETH_MAC_BUF_SIZE] __a
 153:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 154:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 155:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief	xEthRxEventSemaphore for Rx ISR Handling
 156:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 157:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** static SemaphoreHandle_t xEthRxEventSemaphore = NULL;
 158:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** static SemaphoreHandle_t xEthTxEventMutex = NULL;
 159:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** static SemaphoreHandle_t xEthRxEventMutex = NULL;
 160:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 161:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 162:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief	Holds the handle of the task used as a deferred interrupt processor.
 163:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * 			The handle is used so direct notifications can be sent to the task
 164:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * 			for all EMAC/DMA related interrupts
 165:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 166:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** static TaskHandle_t xEMACTaskHandle = NULL;
 167:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 168:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 169:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief	Ethernet Handle for ethernet mac packets processing and handling
 170:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 171:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** static XMC_ETH_MAC_t ethernet_mac_handle =
 172:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** {
 173:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     .regs = ETH0,
 174:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     .address = MAC_ADDR,
 175:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     .rx_desc = ETH_0_rx_desc,
 176:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     .tx_desc = ETH_0_tx_desc,
 177:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     .rx_buf = ETH_0_rx_buf[0],
 178:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     .tx_buf = ETH_0_tx_buf[0],
 179:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     .num_rx_buf = ETH_0_NUM_RX_BUF,
 180:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     .num_tx_buf = ETH_0_NUM_TX_BUF
 181:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** };
 182:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 183:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 184:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /******************************************************************************
 185:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** * Function Prototypes
 186:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** *******************************************************************************/
 187:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 188:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 189:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief	A deferred interrupt handler task that processes
 190:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 191:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** static void prvEMACHandlerTask( void *pvParameters );
 192:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 193:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 194:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /******************************************************************************
 195:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** * Function Definitions
 196:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** *******************************************************************************/
 197:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 198:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 199:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 200:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @function
 201:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 202:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief		Initializes the MAC driver task
 203:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 204:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @param[in]
 205:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 206:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * <i>Imp Note:</i>
 207:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 208:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 209:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** BaseType_t xNetworkInterfaceInitialise( void )
 210:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** {
 211:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Local Variables */
 212:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     BaseType_t xResult = pdPASS;
 213:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 214:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Check for PHY Link status */
 215:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     while( XMC_ETH_PHY_GetLinkStatus(&ethernet_mac_handle, ETH_0_PHY_ADDR) != XMC_ETH_LINK_STATUS_U
 216:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 217:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	/* Enter critical section */
 218:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	vPortEnterCritical();
 219:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	/* Set network speed and set it up */
 220:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	XMC_ETH_MAC_SetLink( &ethernet_mac_handle,
 221:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			XMC_ETH_PHY_GetLinkSpeed( &ethernet_mac_handle, ETH_0_PHY_ADDR ),
 222:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			XMC_ETH_PHY_GetLinkDuplex( &ethernet_mac_handle, ETH_0_PHY_ADDR ) );
 223:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	/* Enable Ethernet interrupts */
 224:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	XMC_ETH_MAC_EnableEvent( &ethernet_mac_handle, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE );
 225:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	XMC_ETH_MAC_EnableEvent( &ethernet_mac_handle, (uint32_t)XMC_ETH_MAC_EVENT_PMT );
 226:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	NVIC_SetPriority( (IRQn_Type)ETH0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 48U, 0U)
 227:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	NVIC_ClearPendingIRQ( (IRQn_Type)ETH0_0_IRQn );
 228:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	NVIC_EnableIRQ( (IRQn_Type)ETH0_0_IRQn );
 229:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 230:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	/* Enable transmission and reception */
 231:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	XMC_ETH_MAC_EnableTx( &ethernet_mac_handle );
 232:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	XMC_ETH_MAC_EnableRx( &ethernet_mac_handle );
 233:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	/* Exit critical section */
 234:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	vPortExitCritical();
 235:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 236:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Return status */
 237:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	return xResult;
 238:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** }
 239:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 240:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 241:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 242:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @function
 243:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 244:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief		Sends data received from the embedded TCP/IP stack to the
 245:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * 				Ethernet MAC driver for transmission
 246:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 247:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @param[in]
 248:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 249:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * <i>Imp Note:</i>
 250:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 251:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 252:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxNetworkBuffer, BaseType_t x
 253:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** {
 254:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Local variables */
 255:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	NetworkBufferDescriptor_t * const pxDescriptor_l = pxNetworkBuffer;
 256:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	uint8_t * p_buffer_l = NULL;
 257:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     BaseType_t xReturn = pdFAIL;
 258:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     size_t frame_lenght_l = pxDescriptor_l->xDataLength;
 259:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     BaseType_t xMutex = pdFALSE;
 260:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     XMC_ETH_LINK_STATUS_t link_status_l = XMC_ETH_LINK_STATUS_DOWN;
 261:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 262:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	/* Open a do {} while ( 0 ) loop to be able to call break. */
 263:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	do
 264:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	{
 265:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         /* Check link status */
 266:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         link_status_l = XMC_ETH_PHY_GetLinkStatus( &ethernet_mac_handle, ETH_0_PHY_ADDR );
 267:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		if( XMC_ETH_LINK_STATUS_UP == link_status_l )
 268:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		{/* Process data to be sent to Ethernet */
 269:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			/* Check the data size to be sent and decide transmission state */
 270:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			if( (frame_lenght_l > (size_t) XMC_ETH_MAC_BUF_SIZE) ||
 271:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					(0 == frame_lenght_l) )
 272:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			{
 273:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				/* Can not proceed with the request because of larger data size than available frame size */
 274:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				xReturn = pdFAIL;
 275:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			}
 276:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			else
 277:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			{
 278:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				/* Take Mutex */
 279:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				xMutex = xSemaphoreTake( xEthTxEventMutex, portMAX_DELAY );
 280:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				if( pdTRUE == xMutex )
 281:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				{
 282:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					/* Check the data size and get the DMA descriptor to send data */
 283:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					if( pdTRUE == XMC_ETH_MAC_IsTxDescriptorOwnedByDma( &ethernet_mac_handle ) )
 284:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					{
 285:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						vReleaseNetworkBuffer( pxDescriptor_l->pucEthernetBuffer );
 286:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						XMC_ETH_MAC_ResumeTx( &ethernet_mac_handle );
 287:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					}
 288:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					else
 289:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					{
 290:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						/* Get the buffer for transmission */
 291:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						p_buffer_l = XMC_ETH_MAC_GetTxBuffer( &ethernet_mac_handle );
 292:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						XMC_ETH_MAC_SetTxBufferSize( &ethernet_mac_handle, frame_lenght_l );
 293:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						/* Copy Network layer data into buffer and trigger transmission */
 294:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						memcpy( p_buffer_l, pxDescriptor_l->pucEthernetBuffer, frame_lenght_l );
 295:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						XMC_ETH_MAC_ResumeTx( &ethernet_mac_handle );
 296:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						XMC_ETH_MAC_ReturnTxDescriptor( &ethernet_mac_handle );
 297:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 298:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						/* Call the standard trace macro to log the send event */
 299:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						iptraceNETWORK_INTERFACE_TRANSMIT();
 300:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 301:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						/* Update return status */
 302:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						xReturn = pdTRUE;
 303:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					}
 304:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				}
 305:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				else
 306:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				{
 307:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					/* Could not take Mutex */
 308:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					xReturn = pdFAIL;
 309:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				}
 310:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			}
 311:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		}
 312:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		else
 313:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		{
 314:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			/* The PHY has no Link Status, packet shall be dropped. */
 315:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			xReturn = pdFAIL;
 316:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 317:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			/* Call the user handler to handle the link status */
 318:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		}
 319:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	} while( 0 );
 320:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 321:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	/* Give mutex back */
 322:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     if( pdTRUE == xMutex )
 323:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     {
 324:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     	xSemaphoreGive( xEthTxEventMutex );
 325:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     }
 326:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 327:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	/* The buffer has been sent so can be released. */
 328:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	if( xReleaseAfterSend != pdFALSE )
 329:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	{
 330:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		pxDescriptor_l->pucEthernetBuffer = NULL;
 331:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		vReleaseNetworkBufferAndDescriptor( pxDescriptor_l );
 332:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	}
 333:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 334:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Return status */
 335:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	return xReturn;
 336:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** }
 337:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 338:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 339:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /* Uncomment this in case BufferAllocation_1.c is used. */
 340:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #ifdef BUFFER_ALLOCATION_1_USED
 341:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 342:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #define niBUFFER_1_PACKET_SIZE		1536
 343:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 344:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 345:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @function
 346:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 347:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief
 348:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 349:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @param[in]
 350:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 351:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * <i>Imp Note:</i>
 352:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 353:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 354:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM
 355:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** {
 356:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	static __attribute__ ((section(".first_data"))) uint8_t ucNetworkPackets[ ipconfigNUM_NETWORK_BUFF
 357:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	uint8_t *ucRAMBuffer = ucNetworkPackets;
 358:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	uint32_t ul;
 359:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 360:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 361:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		{
 362:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 363:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			*( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 364:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			ucRAMBuffer += niBUFFER_1_PACKET_SIZE;
 365:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		}
 366:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** }
 367:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 368:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #endif	/* BUFFER_ALLOCATION_1_USED */
 369:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 370:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 371:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 372:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 373:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @function
 374:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 375:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief		Get PHY link status
 376:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 377:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @param[in]
 378:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 379:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * <i>Imp Note:</i>
 380:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 381:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 382:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** BaseType_t xGetPhyLinkStatus( void )
 383:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** {
 384:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	return (XMC_ETH_LINK_STATUS_UP == XMC_ETH_PHY_GetLinkStatus( &ethernet_mac_handle, ETH_0_PHY_ADDR 
 385:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** }
 386:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 387:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 388:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 389:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @function
 390:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 391:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief		Sends data received from Ethernet MAC driver to the
 392:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * 				embedded TCP/IP stack to the for reception
 393:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 394:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @param[in]
 395:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 396:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * <i>Imp Note:</i>
 397:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 398:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 399:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** void prvEMACHandlerTask( void *pvParameters )
 400:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** {
  26              	 .loc 1 400 0
  27              	 .cfi_startproc
  28              	 
  29              	 
  30              	.LVL0:
  31 0000 2DE9F043 	 push {r4,r5,r6,r7,r8,r9,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 28
  34              	 .cfi_offset 4,-28
  35              	 .cfi_offset 5,-24
  36              	 .cfi_offset 6,-20
  37              	 .cfi_offset 7,-16
  38              	 .cfi_offset 8,-12
  39              	 .cfi_offset 9,-8
  40              	 .cfi_offset 14,-4
  41 0004 83B0     	 sub sp,sp,#12
  42              	.LCFI1:
  43              	 .cfi_def_cfa_offset 40
  44              	.LVL1:
 401:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Remove compiler warnings about unused parameters. */
 402:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	( void ) pvParameters;
 403:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 404:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Local variables */
 405:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     NetworkBufferDescriptor_t *pxNetworkBufferDescriptor = NULL;
 406:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     uint8_t * p_buffer_l = NULL;
 407:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Used to indicate that xSendEventStructToIPTask() is being called because
 408:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****      * of an Ethernet receive event. */
 409:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     IPStackEvent_t xRxEvent = { eNetworkRxEvent, NULL };
  45              	 .loc 1 409 0
  46 0006 0123     	 movs r3,#1
  47 0008 8DF80030 	 strb r3,[sp]
  48 000c 0025     	 movs r5,#0
  49 000e 0195     	 str r5,[sp,#4]
  50              	.LVL2:
 410:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     BaseType_t xMutex = pdFALSE;
 411:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     size_t length_l = 0;
 412:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 413:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Loop processing for task */
 414:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	for( ; ; )
 415:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	{
 416:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		/* Wait for the EMAC interrupt to indicate that another packet has been received. */
 417:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         if( xSemaphoreTake( xEthRxEventSemaphore, portMAX_DELAY ) == pdPASS )
  51              	 .loc 1 417 0
  52 0010 354E     	 ldr r6,.L9
 418:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         {
 419:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	/* Disable Ethernet interrupt */
 420:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	NVIC_DisableIRQ( (IRQn_Type)ETH0_0_IRQn );
 421:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 422:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	/* Take Rx mutex */
 423:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	xMutex = xSemaphoreTake( xEthRxEventMutex, portMAX_DELAY );
 424:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	if( pdTRUE == xMutex )
 425:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	{
 426:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****             	/* Check descriptor */
 427:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****             	if( XMC_ETH_MAC_IsRxDescriptorOwnedByDma( &ethernet_mac_handle ) )
 428:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****             	{
 429:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****             		XMC_ETH_MAC_ResumeRx( &ethernet_mac_handle );
 430:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****             	}
 431:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****             	else/* Descriptor available, Check for data size received */
 432:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****             	{
 433:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****             		/* Check data using HAL */
 434:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****             		length_l = XMC_ETH_MAC_GetRxFrameSize( &ethernet_mac_handle );
 435:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                     /* If data length is valid, enter to get a network descriptor */
 436:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                     if( length_l > 0 )
 437:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                     {
 438:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         /* Obtain a network buffer to pass this data into the
 439:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                            stack.  No storage is required as the network buffer
 440:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                            will point directly to the buffer that already holds
 441:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                            the received data. */
 442:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         pxNetworkBufferDescriptor = pxGetNetworkBufferWithDescriptor( length_l, ( T
 443:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         /* Check Network Descriptor validity */
 444:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         if( pxNetworkBufferDescriptor != NULL )
 445:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         {
 446:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             /* Read descriptor buffer and assign to pcBuffer */
 447:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         	p_buffer_l = XMC_ETH_MAC_GetRxBuffer( &ethernet_mac_handle );
 448:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         	/* Copy the descriptor buffer data into network buffer */
 449:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             memcpy( pxNetworkBufferDescriptor->pucEthernetBuffer, p_buffer_l, lengt
 450:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             pxNetworkBufferDescriptor->xDataLength = length_l;
 451:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             /* Return RX descriptor */
 452:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             XMC_ETH_MAC_ReturnRxDescriptor( &ethernet_mac_handle );
 453:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             /* Resume Rx operation */
 454:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             XMC_ETH_MAC_ResumeRx( &ethernet_mac_handle );
 455:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 456:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             /* Can check for Receive data using Zero copy */
 457:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             xRxEvent.pvData = ( void * ) pxNetworkBufferDescriptor;
 458:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 459:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             /* Data was received and stored.  Send a message to the IP
 460:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                                task to let it know. */
 461:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             if( xSendEventStructToIPTask( &xRxEvent, ( TickType_t ) 0 ) == pdFAIL )
 462:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             {
 463:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                                 vReleaseNetworkBufferAndDescriptor( pxNetworkBufferDescriptor );
 464:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                                 iptraceETHERNET_RX_EVENT_LOST();
 465:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             }
 466:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         }/* if Network Buffer Descriptor != NULL */
 467:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         else
 468:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         {
 469:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             iptraceETHERNET_RX_EVENT_LOST();
 470:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         }
 471:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                     }/* if data length valid */
 472:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****             	}
 473:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	}
 474:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	else
 475:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	{
 476:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         		/* Could not take Mutex */
 477:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	}
 478:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         }/* End of semaphore if block */
 479:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 480:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         /* Give mutex back */
 481:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         if( pdTRUE == xMutex )
 482:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         {
 483:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	xSemaphoreGive( xEthRxEventMutex );
  53              	 .loc 1 483 0
  54 0012 364F     	 ldr r7,.L9+4
  55              	.LBB64:
  56              	.LBB65:
  57              	 .file 2 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include/core_cm4.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**************************************************************************//**
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * @file     core_cm4.h
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * @version  V5.0.3
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * @date     09. August 2017
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  *
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  *
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * not use this file except in compliance with the License.
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * You may obtain a copy of the License at
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  *
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  *
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * See the License for the specific language governing permissions and
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  * limitations under the License.
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #if   defined ( __ICCARM__ )
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #elif defined (__clang__)
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #include <stdint.h>
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  extern "C" {
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****      Unions are used for effective representation of core registers.
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  *                 CMSIS definitions
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup Cortex_M4
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #include "cmsis_version.h"
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* CMSIS CM4 definitions */
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** */
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #if defined ( __CC_ARM )
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #else
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #endif
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #else
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #else
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #endif
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #else
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __GNUC__ )
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #else
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #else
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __ICCARM__ )
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __ARMVFP__
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #else
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #else
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #else
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #else
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TASKING__ )
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __FPU_VFP__
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #else
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #else
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __CSMC__ )
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #else
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #else
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  extern "C" {
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* check device defines and use defaults */
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __CM4_REV
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __CM4_REV               0x0000U
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __FPU_PRESENT
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_PRESENT             0U
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __MPU_PRESENT
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __MPU_PRESENT             0U
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     \li to specify the access to peripheral variables.
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** */
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #else
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* following defines should be used for structure members */
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group Cortex_M4 */
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
 234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  *                 Register Abstraction
 235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   Core Register contain:
 236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   - Core Register
 237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   - Core NVIC Register
 238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   - Core SCB Register
 239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   - Core SysTick Register
 240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   - Core Debug Register
 241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   - Core MPU Register
 242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   - Core FPU Register
 243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
 244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** */
 248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
 251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Core Register type definitions.
 253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
 254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
 261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   struct
 262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
 263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } APSR_Type;
 274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* APSR Register Definitions */
 276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
 300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   struct
 301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
 302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } IPSR_Type;
 307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* IPSR Register Definitions */
 309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
 318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   struct
 319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
 320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } xPSR_Type;
 335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* xPSR Register Definitions */
 337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
 373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   struct
 374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
 375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } CONTROL_Type;
 382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* CONTROL Register Definitions */
 384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
 398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
 401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
 408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[24U];
 410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RSERVED1[24U];
 412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[24U];
 414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[24U];
 416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[56U];
 418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[644U];
 420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }  NVIC_Type;
 422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
 435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
 442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[5U];
 462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } SCB_Type;
 464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SCB CPUID Register Definitions */
 466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SCB System Control Register Definitions */
 539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 617:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 620:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 624:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 627:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 630:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 633:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 636:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 639:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 643:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 646:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 649:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 652:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 655:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 658:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 661:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 665:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 668:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 671:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 674:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 677:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 680:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 687:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 690:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 694:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 697:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 700:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 706:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 708:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 709:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 710:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 711:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
 714:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 715:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 716:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 717:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 719:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 720:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
 721:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
 722:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } SCnSCB_Type;
 725:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 726:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 730:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 734:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 737:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 740:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 743:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 746:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 748:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 749:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 750:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 751:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
 754:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 755:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 756:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 757:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 759:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 760:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
 761:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } SysTick_Type;
 766:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 767:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 771:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 774:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 777:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 780:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Reload Register Definitions */
 781:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 784:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Current Register Definitions */
 785:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 788:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 792:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 795:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 798:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 800:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 801:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 802:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 803:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
 806:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 807:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 808:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 809:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 811:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 812:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
 813:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __OM  union
 814:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
 815:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[864U];
 820:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[15U];
 822:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[15U];
 824:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[29U];
 826:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[43U];
 830:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[6U];
 833:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } ITM_Type;
 846:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 847:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 850:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 851:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 855:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 858:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 861:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 864:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 867:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 870:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 873:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 876:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 879:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 883:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 887:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 891:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 895:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 898:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 901:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 903:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 904:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 905:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 906:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
 909:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 910:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 911:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
 912:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
 914:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 915:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
 916:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
 928:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[1U];
 932:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[1U];
 936:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } DWT_Type;
 940:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 941:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Control Register Definitions */
 942:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 945:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 948:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 951:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 954:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 957:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 960:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 963:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 966:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 969:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 972:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 975:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 978:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 981:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 984:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 987:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 990:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 993:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
 996:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1000:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1004:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1008:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1012:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1016:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1020:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1024:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1027:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1030:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1033:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1036:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1039:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1042:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1045:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1048:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1050:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1051:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1052:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1053:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
1056:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1057:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1058:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1059:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1061:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1062:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1063:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[2U];
1066:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[55U];
1068:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[131U];
1070:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[759U];
1074:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1075:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[1U];
1078:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[39U];
1082:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED7[8U];
1085:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } TPI_Type;
1088:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1089:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1093:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1097:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI DEVID Register Definitions */
1178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
1212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } MPU_Type;
1231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_RALIASES                  4U
1233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Type Register Definitions */
1235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Control Register Definitions */
1245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Number Register Definitions */
1255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Base Address Register Definitions */
1259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_MPU */
1300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
1308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
1316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } FPU_Type;
1322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_FPU */
1407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
1414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** } CoreDebug_Type;
1426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
1516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
1519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] field  Name of the register bit field.
1524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \return           Masked and shifted value.
1526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** */
1527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] field  Name of the register bit field.
1532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \return           Masked and shifted bit field value.
1534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** */
1535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
1542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
1545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Memory mapping of Core Hardware */
1548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif
1570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*@} */
1575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
1579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  *                Hardware Abstraction Layer
1580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   Core Function Interface contains:
1581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   - Core NVIC Functions
1582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   - Core SysTick Functions
1583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   - Core Debug Functions
1584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   - Core Register Access Functions
1585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
1586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** */
1589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   @{
1598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
1604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #else
1606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1616:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1617:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1618:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1619:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1620:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1621:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1622:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1623:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #endif
1624:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1625:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #else
1626:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1627:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1628:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1629:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1630:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1631:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1632:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1633:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1634:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1635:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Priority Grouping
1636:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1637:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1638:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            Only values from 0..7 are used.
1639:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            In case of a conflict between priority grouping and available
1640:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1641:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1642:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1643:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1644:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1645:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t reg_value;
1646:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1647:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1648:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1649:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1650:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   reg_value  =  (reg_value                                   |
1651:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1652:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1653:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   SCB->AIRCR =  reg_value;
1654:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
1655:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1656:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1657:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1658:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Priority Grouping
1659:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1660:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1661:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1662:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1663:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1664:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1665:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
1666:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1667:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1668:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /* Need to include for IRQn_Type type, according to device available */
1669:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #ifdef XMC4500_F100x1024
1670:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     #include <XMC4500.h>
1671:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** #endif
1672:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1673:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1674:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1675:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Enable Interrupt
1676:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1677:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1678:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \note    IRQn must not be negative.
1679:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1680:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1681:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1682:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1683:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
1685:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1686:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
1687:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1688:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1689:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1690:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Interrupt Enable status
1691:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1692:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1693:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \return             0  Interrupt is not enabled.
1694:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \return             1  Interrupt is enabled.
1695:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \note    IRQn must not be negative.
1696:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1697:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1698:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1699:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1700:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1701:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32
1702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   else
1704:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1705:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     return(0U);
1706:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1707:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
1708:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1709:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1710:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1711:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Disable Interrupt
1712:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1713:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1714:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \note    IRQn must not be negative.
1715:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1716:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1717:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1718:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1719:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1720:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
  58              	 .loc 2 1720 0
  59 0014 364C     	 ldr r4,.L9+8
  60              	.LVL3:
  61              	.L6:
  62              	.LBE65:
  63              	.LBE64:
 417:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         {
  64              	 .loc 1 417 0
  65 0016 3068     	 ldr r0,[r6]
  66 0018 4FF0FF31 	 mov r1,#-1
  67 001c FFF7FEFF 	 bl xQueueSemaphoreTake
  68              	.LVL4:
  69 0020 0128     	 cmp r0,#1
  70 0022 52D1     	 bne .L2
  71              	.LVL5:
  72              	.LBB71:
  73              	.LBB70:
  74              	 .loc 2 1720 0
  75 0024 4FF48053 	 mov r3,#4096
  76 0028 C4F88C30 	 str r3,[r4,#140]
  77              	.LBB66:
  78              	.LBB67:
  79              	 .file 3 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include/cmsis_gcc.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @version  V5.0.2
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @date     13. February 2017
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /*
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * limitations under the License.
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __has_builtin
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ASM
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ASM                                  __asm
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __INLINE
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __INLINE                               inline
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif                                           
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __USED
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __WEAK
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ALIGNED
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __RESTRICT
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Control Register value
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               non-secure Control Register value
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get IPSR Register
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               IPSR Register value
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get APSR Register
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               APSR Register value
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get xPSR Register
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               xPSR Register value
 232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               SP Register value
 355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask
 379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask
 409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable FIQ
 436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable FIQ
 447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority
 458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority
 488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask
 524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask
 554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 616:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 617:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 618:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 619:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 620:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 621:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 622:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 623:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 624:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 625:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 626:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 627:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 628:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 629:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 630:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 631:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 632:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 633:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 634:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 635:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 636:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 637:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 638:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 639:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 640:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 641:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 642:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 643:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 644:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 645:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 646:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 647:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 648:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 649:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 650:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 651:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 652:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 653:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 654:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 655:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 656:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 657:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 658:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 659:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 660:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 661:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 662:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 663:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 664:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 665:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 666:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 667:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 668:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 669:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 670:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 671:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 672:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 673:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 674:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 675:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 676:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 677:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 678:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 679:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 680:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 681:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 682:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 683:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 685:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 686:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 687:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 688:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 689:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 690:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 691:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 692:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 693:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 694:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 695:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 696:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 697:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 698:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 699:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 700:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 701:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get FPSCR
 704:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 705:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 706:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 707:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 708:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 709:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 710:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 711:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 712:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 713:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 714:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 715:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 716:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 717:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 718:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 719:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 720:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 721:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(0U);
 722:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 723:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 724:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 725:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 726:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 727:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set FPSCR
 728:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 729:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 730:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 731:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 732:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 733:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 734:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 735:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 736:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 737:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 738:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 739:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 740:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 741:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 742:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)fpscr;
 743:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 744:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 745:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 746:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 747:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 748:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 749:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 750:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 751:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 752:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 753:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 754:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 755:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 756:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   Access to dedicated instructions
 757:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 758:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** */
 759:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 760:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 761:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 762:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 763:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 764:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 765:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 766:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 767:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 768:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 769:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 770:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 771:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 772:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 773:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 774:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   No Operation
 775:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 776:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 777:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 778:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 779:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 780:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Interrupt
 781:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 782:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 783:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 784:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 785:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 786:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 787:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Event
 788:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 789:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 790:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 791:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 792:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 793:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 794:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 795:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Send Event
 796:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 797:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 798:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 799:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 800:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 801:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 802:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 803:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 804:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 805:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            after the instruction has been completed.
 806:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 807:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 808:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 809:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 810:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 811:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 812:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 813:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 814:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 815:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 816:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 817:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 818:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 819:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 820:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  80              	 .loc 3 820 0
  81              	
  82 002c BFF34F8F 	 dsb 0xF
  83              	
  84              	 .thumb
  85              	.LBE67:
  86              	.LBE66:
  87              	.LBB68:
  88              	.LBB69:
 809:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  89              	 .loc 3 809 0
  90              	
  91 0030 BFF36F8F 	 isb 0xF
  92              	
  93              	 .thumb
  94              	.LBE69:
  95              	.LBE68:
  96              	.LBE70:
  97              	.LBE71:
 423:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	if( pdTRUE == xMutex )
  98              	 .loc 1 423 0
  99 0034 3868     	 ldr r0,[r7]
 100 0036 4FF0FF31 	 mov r1,#-1
 101 003a FFF7FEFF 	 bl xQueueSemaphoreTake
 102              	.LVL6:
 103 003e 0546     	 mov r5,r0
 104              	.LVL7:
 424:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	{
 105              	 .loc 1 424 0
 106 0040 0128     	 cmp r0,#1
 107 0042 4BD1     	 bne .L3
 108              	.LVL8:
 109              	.LBB72:
 110              	.LBB73:
 111              	 .file 4 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc_eth_mac.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @file xmc_eth_mac.h
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @date 2017-09-27
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @cond
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * All rights reserved.                        
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                             
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * following conditions are met:   
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * disclaimer.                        
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * products derived from this software without specific prior written permission.                  
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Change History
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * --------------
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2015-06-20:
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Initial
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-04-25:
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Change XMC_ETH_MAC_BUF_SIZE to 1524 to allow for Tagged MAC frame format
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *  
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-05-19:
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_GetTxBuffer() and XMC_ETH_MAC_GetRxBuffer()
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_SetTxBufferSize()
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-06-08:
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_IsRxDescriptorOwnedByDma()
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-02-25:
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - XMC_ETH_MAC_SetPortControl() fixed compilation warning
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-02:
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_InitPTPEx()
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_SetPTPTime()
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_UpdateAddend()
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-11:
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_EnablePTPAlarm() and XMC_ETH_MAC_DisablePTPAlarm
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-17:
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Fixed ordering of PTP nanoseconds and seconds in XMC_ETH_MAC_DMA_DESC_t
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-08-07:
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_TIMESTAMP_STATUS_t
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-09-27:
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_InitEx()
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - XMC_ETH_MAC_SetAddressEx(), XMC_ETH_MAC_GetAddressEx() and XMC_ETH_MAC_SetAddressPerfectFi
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @endcond
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @addtogroup XMClib XMC Peripheral Library
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @{
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @addtogroup ETH_MAC
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @brief Ethernet Low level driver for XMC4000 microcontroller family.
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The Ethernet MAC (ETH) is a major communication peripheral that supports 10/100
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MBit/s data transfer rates in compliance with the IEEE 802.3-2002 standard. The ETH
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * may be used to implement internet connected applications using IPv4 and IPv6. The
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH also includes support for IEEE1588 time synchronisation to allow implementation
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * of Real Time Ethernet protocols.
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The XMC_ETH_MAC low level driver provides functions to configure and initialize
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the ETH_MAC hardware peripheral.
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @{
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #ifndef XMC_ETH_MAC_H
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_H
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * HEADER FILES
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #include "xmc_common.h"
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (ETH0)
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #include "xmc_eth_mac_map.h"
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MACROS
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_BUF_SIZE           (1524)     /**< ETH MAC buffer size */
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_PHY_MAX_RETRIES    (0xffffUL) /**< Maximum retries */
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_WAKEUP_REGISTER_LENGTH (8U)       /**< Remote wakeup frame reg length */
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * TDES0 Descriptor TX Packet Control/Status
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_OWN  (0x80000000U) /**< Own bit 1=DMA, 0=CPU */
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IC   (0x40000000U) /**< Interrupt on competition */
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LS   (0x20000000U) /**< Last segment */
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_FS   (0x10000000U) /**< First segment */
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DC   (0x08000000U) /**< Disable CRC */
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DP   (0x04000000U) /**< Disable pad */
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TTSE (0x02000000U) /**< Transmit time stamp enable */
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_CIC  (0x00C00000U) /**< Checksum insertion control */
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TER  (0x00200000U) /**< Transmit end of ring */
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TCH  (0x00100000U) /**< Second address chained */
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TTSS (0x00020000U) /**< Transmit time stamp status */
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IHE  (0x00010000U) /**< IP header error */
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_ES   (0x00008000U) /**< Error summary */
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_JT   (0x00004000U) /**< Jabber timeout */
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_FF   (0x00002000U) /**< Frame flushed */
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IPE  (0x00001000U) /**< IP payload error */
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LOC  (0x00000800U) /**< Loss of carrier */
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_NC   (0x00000400U) /**< No carrier */
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LC   (0x00000200U) /**< Late collision */
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_EC   (0x00000100U) /**< Excessive collision */
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_VF   (0x00000080U) /**< VLAN frame */
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_CC   (0x00000078U) /**< Collision count */
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_ED   (0x00000004U) /**< Excessive deferral */
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_UF   (0x00000002U) /**< Underflow error */
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DB   (0x00000001U) /**< Deferred bit */
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * RDES0 Descriptor RX Packet Status
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_OWN  (0x80000000U) /**< Own bit 1=DMA, 0=CPU */
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_AFM  (0x40000000U) /**< Destination address filter fail */
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FL   (0x3FFF0000U) /**< Frame length mask */
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_ES   (0x00008000U) /**< Error summary */
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_DE   (0x00004000U) /**< Descriptor error */
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_SAF  (0x00002000U) /**< Source address filter fail */
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LE   (0x00001000U) /**< Length error */
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_OE   (0x00000800U) /**< Overflow error */
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_VLAN (0x00000400U) /**< VLAN tag */
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FS   (0x00000200U) /**< First descriptor */
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LS   (0x00000100U) /**< Last descriptor */
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_TSA  (0x00000080U) /**< Timestamp available */
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LC   (0x00000040U) /**< Late collision */
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FT   (0x00000020U) /**< Frame type */
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_RWT  (0x00000010U) /**< Receive watchdog timeout */
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_RE   (0x00000008U) /**< Receive error */
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_DBE  (0x00000004U) /**< Dribble bit error */
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_CE   (0x00000002U) /**< CRC error */
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_ESA  (0x00000001U) /**< Extended Status/Rx MAC address */
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ENUMS
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Ethernet MAC status return values
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_STATUS
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_OK    = 0U, /**< Driver accepted application request */
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_BUSY  = 1U, /**< Driver is busy and cannot handle request */
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_ERROR = 2U  /**< Driver could not fulfil application request */
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_STATUS_t;
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Transmission frame
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TX_FRAME
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_FRAGMENT  = 0x1U, /**< Indicate frame fragment */
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_EVENT     = 0x2U, /**< Generate event when frame is transmitted */
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_TIMESTAMP = 0x4U  /**< Capture frame time stamp */
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TX_FRAME_t;
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC event
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_EVENT
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_PMT = ETH_INTERRUPT_MASK_PMTIM_Msk << 16,        /**< Power management event */
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TIMESTAMP = ETH_INTERRUPT_MASK_TSIM_Msk << 16,   /**< Time stamp event */
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_EARLY_RECEIVE = ETH_STATUS_ERI_Msk,              /**< Early receive */
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_BUS_ERROR = ETH_STATUS_FBI_Msk,                  /**< Bus error */
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_EARLY_TRANSMIT = ETH_STATUS_ETI_Msk,             /**< Early transmit */
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT = ETH_STATUS_RWT_Msk,   /**< Receive watchdog time-out
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED = ETH_STATUS_RPS_Msk,    /**< Receive process stopped *
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE = ETH_STATUS_RU_Msk,  /**< Receive buffer unavailabl
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE = ETH_STATUS_RI_Msk,                     /**< Receive event */
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW = ETH_STATUS_UNF_Msk,         /**< Transmit underflow */
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW = ETH_STATUS_OVF_Msk,           /**< Receive overflow */
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT = ETH_STATUS_TJT_Msk,    /**< Transmit jabber time-out 
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE = ETH_STATUS_TU_Msk, /**< Transmit buffer unavailab
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED = ETH_STATUS_TPS_Msk,   /**< Transmit process stopped 
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT = ETH_STATUS_TI_Msk                     /**< Transmit event */
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_EVENT_t;
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Link interface
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_INTERFACE
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_INTERFACE_MII, /**< Link interface: Media independent interface */
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_INTERFACE_RMII /**< Link interface: Reduced media independent interface */
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_INTERFACE_t;
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH link status
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_STATUS
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_STATUS_DOWN, /**< Link status down */
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_STATUS_UP    /**< Link status up */
 232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_STATUS_t;
 233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH link speed
 236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_SPEED
 238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_SPEED_10M  = 0UL << ETH_MAC_CONFIGURATION_FES_Pos, /**< Link speed: 10M */
 240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_SPEED_100M = 1UL << ETH_MAC_CONFIGURATION_FES_Pos  /**< Link speed: 100M */
 241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_SPEED_t;
 242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH duplex settings (full/half?)
 245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_DUPLEX
 247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_DUPLEX_HALF = 0UL << ETH_MAC_CONFIGURATION_DM_Pos, /**< Half duplex */
 249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_DUPLEX_FULL = 1UL << ETH_MAC_CONFIGURATION_DM_Pos  /**< Full duplex */
 250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_DUPLEX_t;
 251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MAC address filter
 254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_ADDR_FILTER
 256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE0 = 0x01000000UL, /**< Address filter mask: byte 0 */
 258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE1 = 0x02000000UL, /**< Address filter mask: byte 1 */
 259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE2 = 0x04000000UL, /**< Address filter mask: byte 2 */
 260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE3 = 0x08000000UL, /**< Address filter mask: byte 3 */
 261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE4 = 0x10000000UL, /**< Address filter mask: byte 4 */
 262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE5 = 0x20000000UL, /**< Address filter mask: byte 5 */
 263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_SA         = 0x40000000UL  /**< Address filter SA */
 264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_ADDR_FILTER_t;
 265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Power management events that triggers a PMT interrupt
 268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_PMT_EVENT
 270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_WAKEUP_FRAME         = ETH_PMT_CONTROL_STATUS_RWKPKTEN_Msk,  /**< Wakeup
 272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_MAGIC_PACKET         = ETH_PMT_CONTROL_STATUS_MGKPKTEN_Msk,  /**< Magic 
 273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_UNICAST_FRAME_FILTER = ETH_PMT_CONTROL_STATUS_GLBLUCAST_Msk  /**< Unicas
 274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_PMT_EVENT_t;
 275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time-stamp configuration enable
 279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TIMESTAMP_CONFIG
 281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE = ETH_TIMESTAMP_CONTROL_TSCFUPDT_Msk,             /**< F
 283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_TS_INTERRUPT = ETH_TIMESTAMP_CONTROL_TSTRIG_Msk,       /**< T
 284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_ALL_FRAMES = ETH_TIMESTAMP_CONTROL_TSENALL_Msk,        /**< E
 285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTPV2 = ETH_TIMESTAMP_CONTROL_TSVER2ENA_Msk,           /**< P
 286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_ETHERNET = ETH_TIMESTAMP_CONTROL_TSIPENA_Msk, /**< P
 287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV6 = ETH_TIMESTAMP_CONTROL_TSIPV6ENA_Msk,   /**< P
 288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV4 = ETH_TIMESTAMP_CONTROL_TSIPV4ENA_Msk,   /**< P
 289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_MAC_ADDRESS_FILTER = ETH_TIMESTAMP_CONTROL_TSENMACADDR_Msk /*
 290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIMESTAMP_CONFIG_t;
 291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time-stamp status
 294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TIMESTAMP_STATUS
 296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_SECONDS_OVERFLOW = ETH_TIMESTAMP_STATUS_TSSOVF_Msk,           /**< I
 298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_TARGET_TIME_REACHED = ETH_TIMESTAMP_STATUS_TSTARGT_Msk,       /**< I
 299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_TARGET_TIMER_ERROR = ETH_TIMESTAMP_STATUS_TSTRGTERR_Msk,      /**< S
 300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIMESTAMP_STATUS_t;
 301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * DATA STRUCTURES
 305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /* Anonymous structure/union guard start */
 308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (__CC_ARM)
 309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma push
 310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma anon_unions
 311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #elif defined (__TASKING__)
 312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma warning 586
 313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC port control
 317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef union XMC_ETH_MAC_PORT_CTRL
 319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   struct
 321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   {
 322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd0: 2;     /**< Receive data bit 0 (::XMC_ETH_MAC_PORT_CTRL_RXD0_t) */
 323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd1: 2;     /**< Receive data bit 1 (::XMC_ETH_MAC_PORT_CTRL_RXD1_t) */
 324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd2: 2;     /**< Receive data bit 2 (only MII) (::XMC_ETH_MAC_PORT_CTRL_RXD2_t) */
 325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd3: 2;     /**< Receive data bit 3 (only MII) (::XMC_ETH_MAC_PORT_CTRL_RXD3_t) */
 326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t clk_rmii: 2; /**< RMII: Continuous 50 MHz reference clock.
 327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                MII: Receive clock, 25 MHz for 100Mbit/s, 2.5 MHz for 10Mbit/s
 328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                (::XMC_ETH_MAC_PORT_CTRL_CLK_RMII_t) */
 329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t crs_dv: 2;   /**< RMII: carrier sense/RX_Data valid. MII: RX_Data valid (::XMC_ETH_MAC
 330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t crs: 2;      /**< Carrier sense for only MII (::XMC_ETH_MAC_PORT_CTRL_CRS_t) */
 331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxer: 2;     /**< Receive error (::XMC_ETH_MAC_PORT_CTRL_RXER_t) */
 332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t col: 2;      /**< Collision Detect for only MII (::XMC_ETH_MAC_PORT_CTRL_COL_t) */
 333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t clk_tx: 2;   /**< Transmit clock (only MII), 25 MHz for 100Mbit/s, 2.5 MHz for 10Mbit/
 334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t: 2;          /**< Reserved bits */
 335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t mdio: 2;     /**< Bidirectional, push-pull management data I/O line (::XMC_ETH_MAC_POR
 336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t: 2;          /**< Reserved bits */
 337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t mode: 1;     /**< RMII or MII (::XMC_ETH_MAC_PORT_CTRL_MODE_t) */
 338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   };
 339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t raw;
 341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_PORT_CTRL_t;
 342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC DMA descriptor
 345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC_DMA_DESC
 347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t status;                 /**< DMA descriptor status */
 349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t length;                 /**< Descriptor length */
 350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t buffer1;                /**< Buffer 1 */
 351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t buffer2;                /**< Buffer 2 */
 352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t extended_status;        /**< Extended status */
 353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t reserved;               /**< Reserved */
 354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t time_stamp_nanoseconds; /**< Time stamp low */
 355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t time_stamp_seconds;     /**< Time stamp high */
 356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_DMA_DESC_t;
 357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time
 360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC_TIME
 362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t seconds;                 /**< Seconds */
 364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   int32_t nanoseconds;              /**< Nanoseconds */
 365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIME_t;
 366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH driver structure
 369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC
 371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   ETH_GLOBAL_TypeDef *regs;        /**< ETH module 0 (now, we have a single ETH module) */
 373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint64_t address;              /**< MAC address */
 374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_DMA_DESC_t *rx_desc; /**< DMA descriptor: RX */
 375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_DMA_DESC_t *tx_desc; /**< DMA descriptor: TX */
 376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *rx_buf;                /**< RX buffer */
 377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *tx_buf;                /**< TX buffer */
 378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *frame_end;              /**< End of assembled frame fragments */
 379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t num_rx_buf;              /**< How many RX descriptors? */
 380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t num_tx_buf;              /**< How many TX descriptors? */
 381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t tx_index;                /**< Transmit descriptor index */
 382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t rx_index;                /**< Receive descriptor index */
 383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t tx_ts_index;             /**< Transmit time-stamp descriptor index */
 384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_t;
 385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /* Anonymous structure/union guard end */
 387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (__CC_ARM)
 388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma pop
 389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #elif defined (__TASKING__)
 390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma warning restore
 391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * API PROTOTYPES
 395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #ifdef __cplusplus
 398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** extern "C" {
 399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t Initialization status
 404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the Ethernet MAC peripheral <br>
 407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the link speed, applies the duplex mode, sets auto-negotiation
 410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * and loop-back settings.
 411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac);
 413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the Ethernet MAC peripheral. <br>
 420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Required when initializing the PHY, to deliver the clocks to the MAC, before MAC is reseted.
 421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \note The module needs to be enabled before using XMC_ETH_MAC_Enable() <br>
 422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the link speed, applies the duplex mode, sets auto-negotiation
 425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * and loop-back settings.
 426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitEx(XMC_ETH_MAC_t *const eth_mac);
 428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the RX DMA descriptors <br>
 435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function initializes the RX descriptors in a chained configuration. It sets
 438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * up the status bit, control bit, buffer length and the buffer pointer.
 439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac);
 441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the TX DMA descriptors <br>
 448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function initializes the TX descriptors in a chained configuration. It sets
 451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * up the status bit, control bit, buffer length and the buffer pointer.
 452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac);
 454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  
 455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable the Ethernet MAC peripheral <br>
 461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function de-asserts the peripheral reset.
 464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac);
 466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable the Ethernet MAC peripheral <br>
 473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function asserts the peripheral reset.
 476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_Disable(XMC_ETH_MAC_t *const eth_mac);
 478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return bool
 482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Check if the ETH MAC is enabled <br>
 485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function checks if the ETH MAC is enabled or not. It returns "true" if the
 488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * peripheral is enabled, "false" otherwise.
 489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** bool XMC_ETH_MAC_IsEnabled(const XMC_ETH_MAC_t *const eth_mac);
 491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Reset the ETH MAC peripheral <br>
 498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function resets the ETH MAC peripheral. It blocks until reset.
 501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_Reset(XMC_ETH_MAC_t *const eth_mac)
 503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
 505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
 506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   {
 507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   }
 508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param phy_addr PHY address
 513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param reg_addr Register address
 514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param data The destination to which the read data needs to be copied to
 515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Read a PHY register <br>
 519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function reads a PHY register. It essentially polls busy bit during max
 522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * PHY_TIMEOUT time and reads the information into 'data' when not busy.
 523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, uint8_t re
 525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param phy_addr PHY address
 529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param reg_addr Register address
 530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param data The data to write
 531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Write a PHY register <br>
 535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function reads a PHY register. It essentially writes the data and polls
 538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the busy bit until it is no longer busy.
 539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, uint8_t r
 541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param port_ctrl Port control configuration
 545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set port control configuration <br>
 549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the port control by writing the configuration into the
 552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * CON register.
 553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \note
 555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MII Mode is only available in:
 556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4500 LQFP144 and BGA144 packages
 557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4700 LQFP144 and BGA196 packages
 558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4800 LQFP144 and BGA196 packages
 559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetPortControl(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_POR
 562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_UNUSED_ARG(eth_mac);
 564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   ETH0_CON->CON = (uint32_t)port_ctrl.raw;
 565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set management clock divider <br>
 573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the management clock divider by writing to the GMII_ADDRESS
 576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * register.
 577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac);
 579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param addr The MAC address to set
 583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set MAC address <br>
 587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MAC_ADDRESS0_LOW registers.
 591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetAddress(XMC_ETH_MAC_t *const eth_mac, uint64_t addr)
 593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param addr Pointer to 6 byte MAC address
 601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set MAC address <br>
 605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MAC_ADDRESS0_LOW registers.
 609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_SetAddressEx(XMC_ETH_MAC_t *const eth_mac, uint8_t *const addr);
 611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return uint64_t The MAC address which has been set
 615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 616:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 617:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Get MAC address <br>
 618:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 619:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 620:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function returns the current ETH MAC address.
 621:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 622:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE uint64_t XMC_ETH_MAC_GetAddress(XMC_ETH_MAC_t *const eth_mac)
 623:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 624:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   return ((((uint64_t)eth_mac->regs->MAC_ADDRESS0_HIGH << 32)) | (uint64_t)eth_mac->regs->MAC_ADDRE
 625:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 626:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 627:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 628:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 629:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return uint64_t The MAC address which has been set
 630:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 631:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 632:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Get MAC address <br>
 633:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 634:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 635:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function returns the current ETH MAC address.
 636:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 637:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_GetAddressEx(XMC_ETH_MAC_t *const eth_mac, uint8_t *const addr);
 638:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 639:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 640:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 641:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param index Table entry index
 642:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param addr Address value
 643:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param flags Compare control. OR'ed combination of @ref XMC_ETH_MAC_ADDR_FILTER_t or zero. 
 644:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 645:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 646:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 647:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 648:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set perfect filter for address filtering <br>
 649:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 650:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 651:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function can be used to set perfect filter for address filtering.
 652:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 653:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_SetAddressPerfectFilter(XMC_ETH_MAC_t *const eth_mac, uint8_t index, const uint64_
 654:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 655:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 656:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 657:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param index Table entry index
 658:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param addr Pointer to 6 byte MAC address
 659:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param flags Compare control. OR'ed combination of @ref XMC_ETH_MAC_ADDR_FILTER_t or zero. 
 660:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 661:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 662:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 663:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 664:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set perfect filter for address filtering <br>
 665:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 666:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 667:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function can be used to set perfect filter for address filtering.
 668:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 669:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_SetAddressPerfectFilterEx(XMC_ETH_MAC_t *const eth_mac, uint8_t index, uint8_t *co
 670:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 671:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 672:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 673:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param hash The hash to be used for filtering
 674:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 675:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 676:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 677:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set hash filter for group address filtering <br>
 678:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 679:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 680:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets up a hash filter for group address filtering. It writes the
 681:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * given hash value into the HASH_TABLE_LOW and HASH_TABLE_HIGH registers.
 682:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 683:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_SetAddressHashFilter(XMC_ETH_MAC_t *const eth_mac, const uint64_t hash);
 684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 685:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 686:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 687:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 688:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 689:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 690:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable frame filter <br>
 691:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 692:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 693:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function resets the RA bitfield of the MAC_FRAME_FILTER register. This
 694:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ensures that the receiver module passes only those frames (to the application)
 695:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * that pass the SA or DA address filter.
 696:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 697:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableFrameFilter(XMC_ETH_MAC_t *const eth_mac)
 698:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 699:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_RA_Msk;
 700:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 701:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 704:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 705:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 706:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 707:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable frame filter <br>
 708:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 709:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 710:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the RA bitfield of the MAC_FRAME_FILTER register. This
 711:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ensures that the receiver module passes all received frames, irrespective
 712:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * of whether they pass the address filter or not.
 713:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 714:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableFrameFilter(XMC_ETH_MAC_t *const eth_mac)
 715:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 716:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_RA_Msk;
 717:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 718:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 719:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 720:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 721:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 722:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 723:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 724:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable hash perfect filter <br>
 725:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 726:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 727:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the HPF bitfield of the MAC_FRAME_FILTER register. The
 728:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * function configures the address filter to pass a frame if it matches
 729:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * either the perfect filtering or the hash filtering.
 730:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 731:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableHashPerfectFilter(XMC_ETH_MAC_t *const eth_mac)
 732:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 733:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_HPF_Msk;
 734:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 735:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 736:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 737:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 738:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 739:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 740:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 741:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable perfect filter <br>
 742:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 743:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 744:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function clears the HPF bitfield of the MAC_FRAME_FILTER register. When the
 745:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * function is invoked, the frame is passed only if it matches the hash filter.
 746:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 747:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnablePerfectFilter(XMC_ETH_MAC_t *const eth_mac)
 748:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 749:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_HPF_Msk;
 750:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 751:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 752:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 753:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 754:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 755:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 756:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 757:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable source address filter <br>
 758:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 759:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 760:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the SAF bitfield of the MAC_FRAME_FILTER register. Verbatim
 761:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * from the reference manual - "When invoked, the MAC compares the SA field of the
 762:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * received frames with the values programmed in the enabled SA registers. If the
 763:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * comparison matches, then the SA Match bit of RxStatus Word is set high. When
 764:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * this bit is set high and the SA filter fails, the MAC drops the frame.
 765:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 766:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableSourceAddressFilter(XMC_ETH_MAC_t *const eth_mac)
 767:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 768:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_SAF_Msk;
 769:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 770:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 771:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 772:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 773:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 774:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 775:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 776:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable source address filter <br>
 777:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 778:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 779:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function resets the SAF bitfield of the MAC_FRAME_FILTER register. Verbatim
 780:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * from the reference manual - "When invoked, the MAC forwards the received frame to
 781:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the application and updates the SA Match bit of the RxStatus depending on
 782:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the SA address comparison".
 783:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 784:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableSourceAddressFilter(XMC_ETH_MAC_t *const eth_mac)
 785:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 786:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_SAF_Msk;
 787:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 788:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 789:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 790:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 791:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 792:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 793:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 794:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable source address inverse filtering <br>
 795:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 796:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 797:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function resets the SAIF bitfield of the MAC_FRAME_FILTER register. Verbatim
 798:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * from the reference manual - "When invoked, the address check block operates in
 799:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * inverse filtering mode for the SA address comparison. The frames whose SA matches
 800:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the SA registers are marked as failing the SA Address filter".
 801:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 802:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableSourceAddressInverseFilter(XMC_ETH_MAC_t *const eth_mac)
 803:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 804:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_SAIF_Msk;
 805:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 806:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 807:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 808:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 809:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 810:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 811:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 812:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable source address inverse filtering <br>
 813:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 814:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 815:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function resets the SAIF bitfield of the MAC_FRAME_FILTER register. Verbatim
 816:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * from the reference manual - "When invoked, frames whose SA does not match the SA
 817:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * registers are marked as failing the SA Address filter".
 818:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 819:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableSourceAddressInverseFilter(XMC_ETH_MAC_t *const eth_mac)
 820:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 821:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_SAIF_Msk;
 822:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 823:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 824:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 825:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 826:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 827:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 828:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 829:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable destination address inverse filtering <br>
 830:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 831:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 832:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the DAIF bitfield of the MAC_FRAME_FILTER register. Verbatim
 833:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * from the reference manual - "When invoked, the address check block operates in
 834:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * inverse filtering mode for the DA address comparison for both unicast and
 835:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * multicast frames".
 836:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 837:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableDestinationAddressInverseFilter(XMC_ETH_MAC_t *const eth_mac
 838:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 839:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_DAIF_Msk;
 840:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 841:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 842:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 843:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 844:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 845:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 846:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 847:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable destination address inverse filtering <br>
 848:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 849:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 850:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the DAIF bitfield of the MAC_FRAME_FILTER register. It can
 851:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * be used to perform normal filtering of frames.
 852:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 853:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableDestinationAddressInverseFilter(XMC_ETH_MAC_t *const eth_ma
 854:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 855:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_DAIF_Msk;
 856:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 857:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 858:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 859:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 860:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 861:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 862:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 863:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable multicast hash filter <br>
 864:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 865:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 866:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * When invoked, the MAC performs destination address filtering of received
 867:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * multicast frames according to the hash table.
 868:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 869:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableMulticastHashFilter(XMC_ETH_MAC_t *const eth_mac)
 870:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 871:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_HMC_Msk;
 872:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 873:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 874:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 875:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 876:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 877:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 878:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 879:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable multicast hash filter <br>
 880:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 881:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 882:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function disables multicast hash filtering. The MAC performs a perfect
 883:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * destination address filtering for multicast frames post invocation.
 884:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 885:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableMulticastHashFilter(XMC_ETH_MAC_t *const eth_mac)
 886:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 887:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_HMC_Msk;
 888:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 889:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 890:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 891:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 892:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 893:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 894:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 895:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable unicast hash filter <br>
 896:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 897:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 898:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function enables the MAC to perform destination address filtering of
 899:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * unicast frames according to the hash table.
 900:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 901:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableUnicastHashFilter(XMC_ETH_MAC_t *const eth_mac)
 902:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 903:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_HUC_Msk;
 904:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 905:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 906:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 907:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 908:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 909:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 910:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 911:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable unicast hash filter <br>
 912:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 913:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 914:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function disables unicast hash filtering. When invoked, the MAC performs a
 915:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * perfect destination address filtering for unicast frames.
 916:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 917:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableUnicastHashFilter(XMC_ETH_MAC_t *const eth_mac)
 918:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 919:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_HUC_Msk;
 920:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 921:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 922:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 923:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 924:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param frame A pointer to a uint8_t constant, holding the frame to be transmitted
 925:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param len Length of the frame to transmit
 926:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param flags Additional flags: ored combination of ::XMC_ETH_MAC_TX_FRAME_t or zero.
 927:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status (XMC_ETH_MAC_STATUS_BUSY if busy,
 928:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *         XMC_ETH_MAC_STATUS_OK otherwise).
 929:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 930:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 931:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Send a frame <br>
 932:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 933:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 934:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function is used to send a frame. The transmission is done using
 935:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the ETH MAC's dedicated DMA unit.
 936:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 937:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SendFrame(XMC_ETH_MAC_t *const eth_mac,
 938:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                            const uint8_t *frame,
 939:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                            uint32_t len,
 940:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                            uint32_t flags);
 941:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 942:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 943:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 944:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param frame A constant pointer to a uint8_t constant, holding the received frame
 945:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param len Frame length?
 946:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return uint32_t Length of the frame
 947:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 948:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 949:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Read a frame <br>
 950:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 951:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 952:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function is used to read a frame. The function returns 'len', the length
 953:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * as specified as the actual parameter in the function call.
 954:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 955:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** uint32_t XMC_ETH_MAC_ReadFrame(XMC_ETH_MAC_t *const eth_mac, uint8_t *const frame, uint32_t len);
 956:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 957:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 958:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 959:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return uint32_t RX frame size
 960:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 961:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 962:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Get RX frame size <br>
 963:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 964:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 965:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function is used to get the effective length of the RX frame size.
 966:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 967:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** uint32_t XMC_ETH_MAC_GetRxFrameSize(XMC_ETH_MAC_t *const eth_mac);
 968:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 969:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 970:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 971:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 972:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 973:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 974:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable reception of broadcast frames <br>
 975:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 976:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 977:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * This function enables the AFM module to pass all received broadcast frames.
 978:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 979:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableReceptionBroadcastFrames(XMC_ETH_MAC_t *const eth_mac)
 980:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 981:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_DBF_Msk;
 982:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 983:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 984:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 985:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 986:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 987:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 988:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 989:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable reception of broadcast frames <br>
 990:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 991:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 992:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the DBF bitfield of the MAC_FRAME_FILTER register. When set,
 993:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the AFM module filters all incoming broadcast frames. In addition, it overrides
 994:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * all other filter settings.
 995:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 996:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableReceptionBroadcastFrames(XMC_ETH_MAC_t *const eth_mac)
 997:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 998:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_DBF_Msk;
 999:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1000:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1001:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1002:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1003:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1004:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1005:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1006:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable reception of multicast frames <br>
1007:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1008:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1009:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the DBF bitfield of the MAC_FRAME_FILTER register. When set,
1010:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the AFM module filters all incoming broadcast frames. In addition, it overrides
1011:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * all other filter settings.
1012:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1013:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableReceptionMulticastFrames(XMC_ETH_MAC_t *const eth_mac)
1014:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1015:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_PM_Msk;
1016:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1017:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1018:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1019:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1020:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1021:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1022:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1023:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable reception of multicast frames <br>
1024:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1025:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1026:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function disables the reception of multicast frames. When invoked, the AFM
1027:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * module passes all received broadcast frames.
1028:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1029:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableReceptionMulticastFrames(XMC_ETH_MAC_t *const eth_mac)
1030:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1031:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_PM_Msk;
1032:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1033:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1034:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1035:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1036:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1037:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1038:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1039:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable promiscuous mode <br>
1040:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1041:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1042:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function enables the promiscuous mode. In this mode, the address filter
1043:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * module passes all incoming frames regardless of its destination or source
1044:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * address.
1045:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1046:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnablePromiscuousMode(XMC_ETH_MAC_t *const eth_mac)
1047:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1048:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_PR_Msk;
1049:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1050:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1051:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1052:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1053:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1054:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1055:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1056:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable promiscuous mode <br>
1057:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1058:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1059:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function disables the promiscuous mode.
1060:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1061:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisablePromiscuousMode(XMC_ETH_MAC_t *const eth_mac)
1062:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1063:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_PR_Msk;
1064:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1065:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1066:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1067:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1068:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1069:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1070:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1071:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable RX watchdog <br>
1072:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1073:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1074:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function enables the RX watchdog by clearing the WD bitfield of the
1075:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MAC_CONFIGURATION register. When invoked, the MAC does not allow more
1076:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * than 2048 bytes of the frame being received.
1077:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1078:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableRxWatchdog(XMC_ETH_MAC_t *const eth_mac)
1079:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1080:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_WD_Msk;
1081:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1082:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1083:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1084:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1085:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1086:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1087:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1088:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable RX watchdog <br>
1089:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1090:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1091:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function disables the RX watchdog by disabling the timer on the RX.
1092:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1093:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableRxWatchdog(XMC_ETH_MAC_t *const eth_mac)
1094:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1095:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_WD_Msk;
1096:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1097:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1098:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1099:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable TX jabber <br>
1104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * When the function is invoked, the MAC cuts off the transmitter if the application
1107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * sends out more than 2,048 bytes of data during transmission (10,240 bytes if
1108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * jumbo frames are enabled)
1109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableTxJabber(XMC_ETH_MAC_t *const eth_mac)
1111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_JD_Msk;
1113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable TX jabber <br>
1121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * When the function is invoked, the MAC disables the jabber timer on TX.
1124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableTxJabber(XMC_ETH_MAC_t *const eth_mac)
1126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_JD_Msk;
1128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** } 
1129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Frame burst enable <br>
1136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function can be used to enable frame bursting during transmission in the
1139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MII half-duplex mode.
1140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableFrameBurst(XMC_ETH_MAC_t *const eth_mac)
1142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_BE_Msk;
1144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Frame burst disable <br>
1152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function can be used to disable frame bursting.
1155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableFrameBurst(XMC_ETH_MAC_t *const eth_mac)
1157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_BE_Msk;
1159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Jumbo frame enable <br>
1167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function can be used to enable jumbo frames. When enabled, the MAC allows
1170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * jumbo frames of 9,018 bytes without reporting a giant frame error in the receive
1171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * frame status.
1172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableJumboFrame(XMC_ETH_MAC_t *const eth_mac)
1174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_JE_Msk;
1176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Jumbo frame disable <br>
1184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function can be used to disable jumbo frames.
1187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableJumboFrame(XMC_ETH_MAC_t *const eth_mac)
1189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_JE_Msk;
1191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable receive own <br>
1199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function enables the MAC to receive all packets that are given by the PHY
1202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * while transmitting.
1203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableRxOwn(XMC_ETH_MAC_t *const eth_mac)
1205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_DO_Msk;
1207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable receive own <br>
1215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * On invocation of the function, the MAC disables the reception of frames in the
1218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * half-duplex mode.
1219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableRxOwn(XMC_ETH_MAC_t *const eth_mac)
1221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_DO_Msk;
1223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable loopback mode <br>
1231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function enables the MAC to operate in the loopback mode using the MII.
1234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableLoopback(XMC_ETH_MAC_t *const eth_mac)
1236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_LM_Msk;
1238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable loopback mode <br>
1246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function can be used to disable the loopback mode.
1249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableLoopback(XMC_ETH_MAC_t *const eth_mac)
1251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_LM_Msk;
1253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param speed The speed at which the link is set (10M or 100M?)
1258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param duplex Duplex settings (half or full duplex?)
1259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set link <br>
1263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the link speed and duplex settings.
1266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
1268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                          XMC_ETH_LINK_SPEED_t speed,
1269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                          XMC_ETH_LINK_DUPLEX_t duplex)
1270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
1272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                       (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURAT
1273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                      (uint32_t)speed | (uint32_t)duplex;
1274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Return RX descriptor <br>
1282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the specified DMA RX descriptor own bit.
1285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_ReturnRxDescriptor(XMC_ETH_MAC_t *const eth_mac);
1287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return bool true if RX descriptor is owned by DMA, false otherwise
1291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Is RX descriptor owned by DMA? <br>
1294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function checks if the RX descriptor is owned by the DMA.
1297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE bool XMC_ETH_MAC_IsRxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
1299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   return ((eth_mac->rx_desc[eth_mac->rx_index].status & ETH_MAC_DMA_RDES0_OWN) != 0U);
 112              	 .loc 4 1300 0
 113 0044 2B4A     	 ldr r2,.L9+12
 114 0046 92F82730 	 ldrb r3,[r2,#39]
 115 004a 1269     	 ldr r2,[r2,#16]
 116 004c 5B01     	 lsls r3,r3,#5
 117              	.LBE73:
 118              	.LBE72:
 427:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****             	{
 119              	 .loc 1 427 0
 120 004e D358     	 ldr r3,[r2,r3]
 121 0050 002B     	 cmp r3,#0
 122 0052 0ADA     	 bge .L4
 123              	.LVL9:
 124              	.LBB74:
 125              	.LBB75:
1301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Return TX descriptor <br>
1309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the specified DMA TX descriptor own bit.
1312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_ReturnTxDescriptor(XMC_ETH_MAC_t *const eth_mac);
1314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return bool true if TX descriptor is owned by DMA, false otherwise
1318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Is TX descriptor owned by DMA? <br>
1321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function checks if the TX descriptor is owned by the DMA.
1324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE bool XMC_ETH_MAC_IsTxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
1326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   return ((eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN) != 0U);
1328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC Enable RX <br>
1336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function enables the receiver state machine of the MAC and puts the
1339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * receive process in running state. The DMA then acquires the descriptor
1340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * from the receive list and processes the received frames.
1341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableRx(XMC_ETH_MAC_t *const eth_mac)
1343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
1345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_RE_Msk;
1346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC Disable RX <br>
1354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function disables the receive process.
1357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableRx(XMC_ETH_MAC_t *const eth_mac)
1359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_RE_Msk;
1361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
1362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC Enable TX <br>
1370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function enables the transmit state machine of the MAC and puts the
1373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * transmit process in running state. The DMA then checks the TX list at the
1374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * current position for transmitting a frame.
1375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_EnableTx(XMC_ETH_MAC_t *const eth_mac)
1377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
1379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_TE_Msk;
1380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC Disable TX <br>
1388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function disables the transmit process.
1391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_DisableTx(XMC_ETH_MAC_t *const eth_mac)
1393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_TE_Msk;
1395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
1396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Flush TX <br>
1404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function initializes the TX DMA descriptors and enables the DMA transmission.
1407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_FlushTx(XMC_ETH_MAC_t *const eth_mac);
1409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Flush RX <br>
1416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function initializes the RX DMA descriptors and enables the DMA transmission.
1419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_FlushRx(XMC_ETH_MAC_t *const eth_mac);
1421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Resume TX <br>
1428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Verbatim from the reference manual, the function enables the DMA to read the
1431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * current descriptor pointed to by the "current host transmit descriptor" reg.
1432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * If that descriptor is not available (owned by the CPU), the transmission
1433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * returns to the suspend state else the transmission resumes.
1434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_ResumeTx(XMC_ETH_MAC_t *const eth_mac)
1436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
1438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
1439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Resume RX <br>
1447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
1449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Verbatim from the reference manual the function enables the DMA to read the
1450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * current descriptor pointed to by the "current host transmit descriptor" reg.
1451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * If that descriptor is not available (owned by the CPU), the transmission
1452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * returns to the suspend state else the transmission resumes.
1453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_ResumeRx(XMC_ETH_MAC_t *const eth_mac)
1455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 126              	 .loc 4 1456 0
 127 0054 274B     	 ldr r3,.L9+12
 128 0056 1B68     	 ldr r3,[r3]
 129 0058 8021     	 movs r1,#128
 130 005a 41F21402 	 movw r2,#4116
 131 005e 9950     	 str r1,[r3,r2]
1457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 132              	 .loc 4 1457 0
 133 0060 0021     	 movs r1,#0
 134 0062 41F20802 	 movw r2,#4104
 135 0066 9950     	 str r1,[r3,r2]
 136 0068 31E0     	 b .L7
 137              	.LVL10:
 138              	.L4:
 139              	.LBE75:
 140              	.LBE74:
 434:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                     /* If data length is valid, enter to get a network descriptor */
 141              	 .loc 1 434 0
 142 006a 2248     	 ldr r0,.L9+12
 143              	.LVL11:
 144 006c FFF7FEFF 	 bl XMC_ETH_MAC_GetRxFrameSize
 145              	.LVL12:
 436:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                     {
 146              	 .loc 1 436 0
 147 0070 0546     	 mov r5,r0
 148              	.LVL13:
 149 0072 60B3     	 cbz r0,.L7
 442:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         /* Check Network Descriptor validity */
 150              	 .loc 1 442 0
 151 0074 0021     	 movs r1,#0
 152 0076 FFF7FEFF 	 bl pxGetNetworkBufferWithDescriptor
 153              	.LVL14:
 444:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                         {
 154              	 .loc 1 444 0
 155 007a 8146     	 mov r9,r0
 156 007c 38B3     	 cbz r0,.L7
 157              	.LVL15:
 158              	.LBB76:
 159              	.LBB77:
1458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return Pointer to current TX buffer
1463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Returns the current TX buffer.
1466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE uint8_t *XMC_ETH_MAC_GetTxBuffer(XMC_ETH_MAC_t *const eth_mac)
1468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   return (uint8_t *)(eth_mac->tx_desc[eth_mac->tx_index].buffer1);
1470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return Pointer to current RX buffer
1475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Returns the current RX buffer.
1478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE uint8_t *XMC_ETH_MAC_GetRxBuffer(XMC_ETH_MAC_t *const eth_mac)
1480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   return (uint8_t *)(eth_mac->rx_desc[eth_mac->rx_index].buffer1); 
 160              	 .loc 4 1481 0
 161 007e DFF87480 	 ldr r8,.L9+12
 162 0082 98F82720 	 ldrb r2,[r8,#39]
 163 0086 D8F81030 	 ldr r3,[r8,#16]
 164 008a 03EB4213 	 add r3,r3,r2,lsl#5
 165              	.LBE77:
 166              	.LBE76:
 449:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             pxNetworkBufferDescriptor->xDataLength = length_l;
 167              	 .loc 1 449 0
 168 008e 8069     	 ldr r0,[r0,#24]
 169              	.LVL16:
 170 0090 9968     	 ldr r1,[r3,#8]
 171 0092 2A46     	 mov r2,r5
 172 0094 FFF7FEFF 	 bl memcpy
 173              	.LVL17:
 450:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             /* Return RX descriptor */
 174              	 .loc 1 450 0
 175 0098 C9F81C50 	 str r5,[r9,#28]
 452:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             /* Resume Rx operation */
 176              	 .loc 1 452 0
 177 009c 4046     	 mov r0,r8
 178 009e FFF7FEFF 	 bl XMC_ETH_MAC_ReturnRxDescriptor
 179              	.LVL18:
 180              	.LBB78:
 181              	.LBB79:
1456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 182              	 .loc 4 1456 0
 183 00a2 D8F80030 	 ldr r3,[r8]
 184 00a6 8021     	 movs r1,#128
 185 00a8 41F21402 	 movw r2,#4116
 186 00ac 9950     	 str r1,[r3,r2]
1457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 187              	 .loc 4 1457 0
 188 00ae 0021     	 movs r1,#0
 189 00b0 41F20802 	 movw r2,#4104
 190 00b4 9950     	 str r1,[r3,r2]
 191              	.LBE79:
 192              	.LBE78:
 457:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 193              	 .loc 1 457 0
 194 00b6 CDF80490 	 str r9,[sp,#4]
 461:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                             {
 195              	 .loc 1 461 0
 196 00ba 6846     	 mov r0,sp
 197 00bc FFF7FEFF 	 bl xSendEventStructToIPTask
 198              	.LVL19:
 199 00c0 28B9     	 cbnz r0,.L7
 463:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****                                 iptraceETHERNET_RX_EVENT_LOST();
 200              	 .loc 1 463 0
 201 00c2 4846     	 mov r0,r9
 202 00c4 FFF7FEFF 	 bl vReleaseNetworkBufferAndDescriptor
 203              	.LVL20:
 204 00c8 01E0     	 b .L7
 205              	.LVL21:
 206              	.L2:
 481:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         {
 207              	 .loc 1 481 0
 208 00ca 012D     	 cmp r5,#1
 209 00cc 06D1     	 bne .L3
 210              	.LVL22:
 211              	.L7:
 212              	 .loc 1 483 0
 213 00ce 3868     	 ldr r0,[r7]
 214 00d0 0021     	 movs r1,#0
 215 00d2 0A46     	 mov r2,r1
 216 00d4 0B46     	 mov r3,r1
 217 00d6 FFF7FEFF 	 bl xQueueGenericSend
 218              	.LVL23:
 219 00da 0125     	 movs r5,#1
 220              	.LVL24:
 221              	.L3:
 222              	.LBB80:
 223              	.LBB81:
1721:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     __DSB();
1722:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     __ISB();
1723:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1724:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
1725:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1726:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1727:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1728:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Pending Interrupt
1729:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1730:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1731:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \return             0  Interrupt status is not pending.
1732:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \return             1  Interrupt status is pending.
1733:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \note    IRQn must not be negative.
1734:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1735:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1736:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1737:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1738:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1739:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32
1740:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1741:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   else
1742:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1743:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     return(0U);
1744:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1745:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
1746:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1747:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1748:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1749:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Pending Interrupt
1750:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1751:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1752:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \note    IRQn must not be negative.
1753:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1754:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1755:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1756:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1757:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1758:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
1759:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1760:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
1761:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1762:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1763:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1764:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Clear Pending Interrupt
1765:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1766:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1767:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \note    IRQn must not be negative.
1768:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1769:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1770:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1771:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1772:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1773:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
 224              	 .loc 2 1773 0
 225 00dc 4FF48053 	 mov r3,#4096
 226 00e0 C4F88C31 	 str r3,[r4,#396]
 227              	.LVL25:
 228              	.LBE81:
 229              	.LBE80:
 230              	.LBB82:
 231              	.LBB83:
1684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
 232              	 .loc 2 1684 0
 233 00e4 E360     	 str r3,[r4,#12]
 234 00e6 96E7     	 b .L6
 235              	.L10:
 236              	 .align 2
 237              	.L9:
 238 00e8 00000000 	 .word .LANCHOR0
 239 00ec 00000000 	 .word .LANCHOR1
 240 00f0 00E100E0 	 .word -536813312
 241 00f4 00000000 	 .word .LANCHOR2
 242              	.LBE83:
 243              	.LBE82:
 244              	 .cfi_endproc
 245              	.LFE244:
 247              	 .section .text.xNetworkInterfaceInitialise,"ax",%progbits
 248              	 .align 2
 249              	 .global xNetworkInterfaceInitialise
 250              	 .thumb
 251              	 .thumb_func
 253              	xNetworkInterfaceInitialise:
 254              	.LFB241:
 210:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Local Variables */
 255              	 .loc 1 210 0
 256              	 .cfi_startproc
 257              	 
 258              	 
 259 0000 38B5     	 push {r3,r4,r5,lr}
 260              	.LCFI2:
 261              	 .cfi_def_cfa_offset 16
 262              	 .cfi_offset 3,-16
 263              	 .cfi_offset 4,-12
 264              	 .cfi_offset 5,-8
 265              	 .cfi_offset 14,-4
 266              	.LVL26:
 215:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 267              	 .loc 1 215 0
 268 0002 2F4D     	 ldr r5,.L17
 269 0004 0024     	 movs r4,#0
 270              	.L12:
 215:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 271              	 .loc 1 215 0 is_stmt 0 discriminator 1
 272 0006 2846     	 mov r0,r5
 273 0008 2146     	 mov r1,r4
 274 000a FFF7FEFF 	 bl XMC_ETH_PHY_GetLinkStatus
 275              	.LVL27:
 276 000e 0128     	 cmp r0,#1
 277 0010 F9D1     	 bne .L12
 218:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	/* Set network speed and set it up */
 278              	 .loc 1 218 0 is_stmt 1
 279 0012 FFF7FEFF 	 bl vPortEnterCritical
 280              	.LVL28:
 220:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			XMC_ETH_PHY_GetLinkSpeed( &ethernet_mac_handle, ETH_0_PHY_ADDR ),
 281              	 .loc 1 220 0
 282 0016 2A4C     	 ldr r4,.L17
 283 0018 2046     	 mov r0,r4
 284 001a 0021     	 movs r1,#0
 285 001c FFF7FEFF 	 bl XMC_ETH_PHY_GetLinkSpeed
 286              	.LVL29:
 287 0020 0546     	 mov r5,r0
 288 0022 2046     	 mov r0,r4
 289 0024 0021     	 movs r1,#0
 290 0026 FFF7FEFF 	 bl XMC_ETH_PHY_GetLinkDuplex
 291              	.LVL30:
 292              	.LBB84:
 293              	.LBB85:
1271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                       (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURAT
 294              	 .loc 4 1271 0
 295 002a 2268     	 ldr r2,[r4]
 296 002c 1368     	 ldr r3,[r2]
 297 002e 2843     	 orrs r0,r0,r5
 298              	.LVL31:
 299 0030 80B2     	 uxth r0,r0
 300 0032 23F49043 	 bic r3,r3,#18432
1273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 301              	 .loc 4 1273 0
 302 0036 0343     	 orrs r3,r3,r0
1271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                       (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURAT
 303              	 .loc 4 1271 0
 304 0038 1360     	 str r3,[r2]
 305              	.LBE85:
 306              	.LBE84:
 224:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	XMC_ETH_MAC_EnableEvent( &ethernet_mac_handle, (uint32_t)XMC_ETH_MAC_EVENT_PMT );
 307              	 .loc 1 224 0
 308 003a 2046     	 mov r0,r4
 309 003c 4021     	 movs r1,#64
 310 003e FFF7FEFF 	 bl XMC_ETH_MAC_EnableEvent
 311              	.LVL32:
 225:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	NVIC_SetPriority( (IRQn_Type)ETH0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 48U, 0U)
 312              	 .loc 1 225 0
 313 0042 2046     	 mov r0,r4
 314 0044 4FF40021 	 mov r1,#524288
 315 0048 FFF7FEFF 	 bl XMC_ETH_MAC_EnableEvent
 316              	.LVL33:
 317              	.LBB86:
 318              	.LBB87:
1664:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
 319              	 .loc 2 1664 0
 320 004c 1D4B     	 ldr r3,.L17+4
 321 004e DB68     	 ldr r3,[r3,#12]
 322              	.LVL34:
 323              	.LBE87:
 324              	.LBE86:
 325              	.LBB88:
 326              	.LBB89:
1774:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1775:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
1776:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1777:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1778:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1779:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Active Interrupt
1780:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1781:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1782:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \return             0  Interrupt status is not active.
1783:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \return             1  Interrupt status is active.
1784:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \note    IRQn must not be negative.
1785:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1786:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1787:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1788:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1789:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1790:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32
1791:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1792:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   else
1793:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1794:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     return(0U);
1795:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1796:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
1797:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1798:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1799:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1800:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Interrupt Priority
1801:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1802:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1803:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            or negative to specify a processor exception.
1804:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1805:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]  priority  Priority to set.
1806:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \note    The priority cannot be set for every processor exception.
1807:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1808:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1809:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1810:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1811:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1812:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1813:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1814:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   else
1815:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1816:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1817:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1818:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
1819:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1820:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1821:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1822:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Interrupt Priority
1823:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1824:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1825:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            or negative to specify a processor exception.
1826:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1827:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \return             Interrupt Priority.
1828:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1829:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1830:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1831:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1832:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1833:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1834:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1835:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1836:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1837:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   else
1838:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   {
1839:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1840:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
1841:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** }
1842:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1843:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1844:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** /**
1845:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Encode Priority
1846:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1847:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            preemptive priority value, and subpriority value.
1848:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            In case of a conflict between priority grouping and available
1849:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1850:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1851:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1852:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1853:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1854:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****  */
1855:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1856:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** {
1857:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 327              	 .loc 2 1857 0
 328 0050 C3F30223 	 ubfx r3,r3,#8,#3
 329              	.LVL35:
1858:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t PreemptPriorityBits;
1859:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t SubPriorityBits;
1860:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1861:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 330              	 .loc 2 1861 0
 331 0054 C3F10701 	 rsb r1,r3,#7
 332 0058 0629     	 cmp r1,#6
 333 005a 28BF     	 it cs
 334 005c 0621     	 movcs r1,#6
 335              	.LVL36:
1862:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 336              	 .loc 2 1862 0
 337 005e 9A1D     	 adds r2,r3,#6
 338 0060 062A     	 cmp r2,#6
 339 0062 8CBF     	 ite hi
 340 0064 03F1FF32 	 addhi r2,r3,#-1
 341 0068 0022     	 movls r2,#0
 342              	.LVL37:
1863:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h **** 
1864:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   return (
1865:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 343              	 .loc 2 1865 0
 344 006a 0124     	 movs r4,#1
 345 006c 04FA01F3 	 lsl r3,r4,r1
 346              	.LVL38:
 347 0070 013B     	 subs r3,r3,#1
 348 0072 03F03003 	 and r3,r3,#48
 349 0076 9340     	 lsls r3,r3,r2
 350              	.LVL39:
 351              	.LBE89:
 352              	.LBE88:
 353              	.LBB90:
 354              	.LBB91:
1812:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
 355              	 .loc 2 1812 0
 356 0078 9B00     	 lsls r3,r3,#2
 357              	.LVL40:
 358 007a DBB2     	 uxtb r3,r3
 359 007c 124A     	 ldr r2,.L17+8
 360              	.LVL41:
 361 007e 82F86C33 	 strb r3,[r2,#876]
 362              	.LVL42:
 363              	.LBE91:
 364              	.LBE90:
 365              	.LBB92:
 366              	.LBB93:
1773:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
 367              	 .loc 2 1773 0
 368 0082 4FF48053 	 mov r3,#4096
 369 0086 C2F88C31 	 str r3,[r2,#396]
 370              	.LVL43:
 371              	.LBE93:
 372              	.LBE92:
 373              	.LBB94:
 374              	.LBB95:
1684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\core_cm4.h ****   }
 375              	 .loc 2 1684 0
 376 008a D360     	 str r3,[r2,#12]
 377              	.LVL44:
 378              	.LBE95:
 379              	.LBE94:
 380              	.LBB96:
 381              	.LBB97:
1378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_TE_Msk;
 382              	 .loc 4 1378 0
 383 008c 0C48     	 ldr r0,.L17
 384 008e 0368     	 ldr r3,[r0]
 385 0090 41F21802 	 movw r2,#4120
 386 0094 9958     	 ldr r1,[r3,r2]
 387              	.LVL45:
 388 0096 41F40051 	 orr r1,r1,#8192
 389 009a 9950     	 str r1,[r3,r2]
1379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 390              	 .loc 4 1379 0
 391 009c 1968     	 ldr r1,[r3]
 392 009e 41F00801 	 orr r1,r1,#8
 393 00a2 1960     	 str r1,[r3]
 394              	.LVL46:
 395              	.LBE97:
 396              	.LBE96:
 397              	.LBB98:
 398              	.LBB99:
1344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_RE_Msk;
 399              	 .loc 4 1344 0
 400 00a4 0368     	 ldr r3,[r0]
 401 00a6 9958     	 ldr r1,[r3,r2]
 402 00a8 41F00201 	 orr r1,r1,#2
 403 00ac 9950     	 str r1,[r3,r2]
1345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 404              	 .loc 4 1345 0
 405 00ae 1A68     	 ldr r2,[r3]
 406 00b0 42F00402 	 orr r2,r2,#4
 407 00b4 1A60     	 str r2,[r3]
 408              	.LBE99:
 409              	.LBE98:
 234:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 410              	 .loc 1 234 0
 411 00b6 FFF7FEFF 	 bl vPortExitCritical
 412              	.LVL47:
 238:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 413              	 .loc 1 238 0
 414 00ba 2046     	 mov r0,r4
 415 00bc 38BD     	 pop {r3,r4,r5,pc}
 416              	.LVL48:
 417              	.L18:
 418 00be 00BF     	 .align 2
 419              	.L17:
 420 00c0 00000000 	 .word .LANCHOR2
 421 00c4 00ED00E0 	 .word -536810240
 422 00c8 00E100E0 	 .word -536813312
 423              	 .cfi_endproc
 424              	.LFE241:
 426              	 .section .text.xNetworkInterfaceOutput,"ax",%progbits
 427              	 .align 2
 428              	 .global xNetworkInterfaceOutput
 429              	 .thumb
 430              	 .thumb_func
 432              	xNetworkInterfaceOutput:
 433              	.LFB242:
 253:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Local variables */
 434              	 .loc 1 253 0
 435              	 .cfi_startproc
 436              	 
 437              	 
 438              	.LVL49:
 439 0000 70B5     	 push {r4,r5,r6,lr}
 440              	.LCFI3:
 441              	 .cfi_def_cfa_offset 16
 442              	 .cfi_offset 4,-16
 443              	 .cfi_offset 5,-12
 444              	 .cfi_offset 6,-8
 445              	 .cfi_offset 14,-4
 446 0002 0446     	 mov r4,r0
 447 0004 0E46     	 mov r6,r1
 448              	.LVL50:
 258:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     BaseType_t xMutex = pdFALSE;
 449              	 .loc 1 258 0
 450 0006 C569     	 ldr r5,[r0,#28]
 451              	.LVL51:
 266:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		if( XMC_ETH_LINK_STATUS_UP == link_status_l )
 452              	 .loc 1 266 0
 453 0008 2848     	 ldr r0,.L27
 454              	.LVL52:
 455 000a 0021     	 movs r1,#0
 456              	.LVL53:
 457 000c FFF7FEFF 	 bl XMC_ETH_PHY_GetLinkStatus
 458              	.LVL54:
 267:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		{/* Process data to be sent to Ethernet */
 459              	 .loc 1 267 0
 460 0010 0128     	 cmp r0,#1
 461 0012 46D1     	 bne .L20
 270:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					(0 == frame_lenght_l) )
 462              	 .loc 1 270 0
 463 0014 6A1E     	 subs r2,r5,#1
 464 0016 40F2F353 	 movw r3,#1523
 465 001a 9A42     	 cmp r2,r3
 466 001c 41D8     	 bhi .L20
 279:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				if( pdTRUE == xMutex )
 467              	 .loc 1 279 0
 468 001e 244B     	 ldr r3,.L27+4
 469 0020 1868     	 ldr r0,[r3]
 470              	.LVL55:
 471 0022 4FF0FF31 	 mov r1,#-1
 472 0026 FFF7FEFF 	 bl xQueueSemaphoreTake
 473              	.LVL56:
 280:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 				{
 474              	 .loc 1 280 0
 475 002a 0128     	 cmp r0,#1
 476 002c 39D1     	 bne .L20
 477              	.LVL57:
 478              	.LBB100:
 479              	.LBB101:
1327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 480              	 .loc 4 1327 0
 481 002e 1F4A     	 ldr r2,.L27
 482 0030 92F82630 	 ldrb r3,[r2,#38]
 483 0034 5B01     	 lsls r3,r3,#5
 484 0036 5269     	 ldr r2,[r2,#20]
 485 0038 D118     	 adds r1,r2,r3
 486              	.LBE101:
 487              	.LBE100:
 283:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					{
 488              	 .loc 1 283 0
 489 003a D358     	 ldr r3,[r2,r3]
 490 003c 002B     	 cmp r3,#0
 491 003e 0DDA     	 bge .L21
 285:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						XMC_ETH_MAC_ResumeTx( &ethernet_mac_handle );
 492              	 .loc 1 285 0
 493 0040 A069     	 ldr r0,[r4,#24]
 494              	.LVL58:
 495 0042 FFF7FEFF 	 bl vReleaseNetworkBuffer
 496              	.LVL59:
 497              	.LBB102:
 498              	.LBB103:
1437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 499              	 .loc 4 1437 0
 500 0046 194B     	 ldr r3,.L27
 501 0048 1B68     	 ldr r3,[r3]
 502 004a 0221     	 movs r1,#2
 503 004c 41F21402 	 movw r2,#4116
 504 0050 9950     	 str r1,[r3,r2]
1438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 505              	 .loc 4 1438 0
 506 0052 0025     	 movs r5,#0
 507              	.LVL60:
 508 0054 41F20402 	 movw r2,#4100
 509 0058 9D50     	 str r5,[r3,r2]
 510 005a 1AE0     	 b .L22
 511              	.LVL61:
 512              	.L21:
 513              	.LBE103:
 514              	.LBE102:
 515              	.LBB104:
 516              	.LBB105:
1469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 517              	 .loc 4 1469 0
 518 005c 8868     	 ldr r0,[r1,#8]
 519              	.LVL62:
 520              	.LBE105:
 521              	.LBE104:
 522              	.LBB106:
 523              	.LBB107:
1482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
1483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
1484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
1485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
1486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param size Size of buffer
1487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
1488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
1489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
1490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Sets the current TX buffer size.
1491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
1492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetTxBufferSize(XMC_ETH_MAC_t *const eth_mac, uint32_t size)
1493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
1494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->tx_desc[eth_mac->tx_index].length = size;
 524              	 .loc 4 1494 0
 525 005e 4D60     	 str r5,[r1,#4]
 526              	.LBE107:
 527              	.LBE106:
 294:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 						XMC_ETH_MAC_ResumeTx( &ethernet_mac_handle );
 528              	 .loc 1 294 0
 529 0060 A169     	 ldr r1,[r4,#24]
 530 0062 2A46     	 mov r2,r5
 531 0064 FFF7FEFF 	 bl memcpy
 532              	.LVL63:
 533              	.LBB108:
 534              	.LBB109:
1437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 535              	 .loc 4 1437 0
 536 0068 1048     	 ldr r0,.L27
 537 006a 0368     	 ldr r3,[r0]
 538 006c 0221     	 movs r1,#2
 539 006e 41F21402 	 movw r2,#4116
 540 0072 9950     	 str r1,[r3,r2]
1438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 541              	 .loc 4 1438 0
 542 0074 0021     	 movs r1,#0
 543 0076 41F20402 	 movw r2,#4100
 544 007a 9950     	 str r1,[r3,r2]
 545              	.LBE109:
 546              	.LBE108:
 296:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 547              	 .loc 1 296 0
 548 007c FFF7FEFF 	 bl XMC_ETH_MAC_ReturnTxDescriptor
 549              	.LVL64:
 302:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 					}
 550              	 .loc 1 302 0
 551 0080 0125     	 movs r5,#1
 552              	.LVL65:
 553 0082 06E0     	 b .L22
 554              	.LVL66:
 555              	.L24:
 328:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	{
 556              	 .loc 1 328 0
 557 0084 7EB1     	 cbz r6,.L25
 330:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		vReleaseNetworkBufferAndDescriptor( pxDescriptor_l );
 558              	 .loc 1 330 0
 559 0086 0023     	 movs r3,#0
 560 0088 A361     	 str r3,[r4,#24]
 331:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	}
 561              	 .loc 1 331 0
 562 008a 2046     	 mov r0,r4
 563 008c FFF7FEFF 	 bl vReleaseNetworkBufferAndDescriptor
 564              	.LVL67:
 565 0090 09E0     	 b .L25
 566              	.LVL68:
 567              	.L22:
 324:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     }
 568              	 .loc 1 324 0
 569 0092 074B     	 ldr r3,.L27+4
 570 0094 1868     	 ldr r0,[r3]
 571 0096 0021     	 movs r1,#0
 572 0098 0A46     	 mov r2,r1
 573 009a 0B46     	 mov r3,r1
 574 009c FFF7FEFF 	 bl xQueueGenericSend
 575              	.LVL69:
 576 00a0 F0E7     	 b .L24
 577              	.LVL70:
 578              	.L20:
 253:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Local variables */
 579              	 .loc 1 253 0
 580 00a2 0025     	 movs r5,#0
 581              	.LVL71:
 582 00a4 EEE7     	 b .L24
 583              	.LVL72:
 584              	.L25:
 336:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 585              	 .loc 1 336 0
 586 00a6 2846     	 mov r0,r5
 587 00a8 70BD     	 pop {r4,r5,r6,pc}
 588              	.LVL73:
 589              	.L28:
 590 00aa 00BF     	 .align 2
 591              	.L27:
 592 00ac 00000000 	 .word .LANCHOR2
 593 00b0 00000000 	 .word .LANCHOR3
 594              	 .cfi_endproc
 595              	.LFE242:
 597              	 .section .text.xGetPhyLinkStatus,"ax",%progbits
 598              	 .align 2
 599              	 .global xGetPhyLinkStatus
 600              	 .thumb
 601              	 .thumb_func
 603              	xGetPhyLinkStatus:
 604              	.LFB243:
 383:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	return (XMC_ETH_LINK_STATUS_UP == XMC_ETH_PHY_GetLinkStatus( &ethernet_mac_handle, ETH_0_PHY_ADDR 
 605              	 .loc 1 383 0
 606              	 .cfi_startproc
 607              	 
 608              	 
 609 0000 08B5     	 push {r3,lr}
 610              	.LCFI4:
 611              	 .cfi_def_cfa_offset 8
 612              	 .cfi_offset 3,-8
 613              	 .cfi_offset 14,-4
 384:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** }
 614              	 .loc 1 384 0
 615 0002 0448     	 ldr r0,.L31
 616 0004 0021     	 movs r1,#0
 617 0006 FFF7FEFF 	 bl XMC_ETH_PHY_GetLinkStatus
 618              	.LVL74:
 385:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 619              	 .loc 1 385 0
 620 000a 0128     	 cmp r0,#1
 621 000c 14BF     	 ite ne
 622 000e 0020     	 movne r0,#0
 623 0010 0120     	 moveq r0,#1
 624 0012 08BD     	 pop {r3,pc}
 625              	.L32:
 626              	 .align 2
 627              	.L31:
 628 0014 00000000 	 .word .LANCHOR2
 629              	 .cfi_endproc
 630              	.LFE243:
 632              	 .section .text.initialize_ethernet_mac,"ax",%progbits
 633              	 .align 2
 634              	 .global initialize_ethernet_mac
 635              	 .thumb
 636              	 .thumb_func
 638              	initialize_ethernet_mac:
 639              	.LFB245:
 484:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         }
 485:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 486:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         /* Enable Ethernet Interrupt */
 487:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         NVIC_ClearPendingIRQ( (IRQn_Type)ETH0_0_IRQn );
 488:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         NVIC_EnableIRQ( (IRQn_Type)ETH0_0_IRQn );
 489:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	}
 490:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** }
 491:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 492:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 493:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 494:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @function
 495:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 496:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief		Initializes the MAC driver w.r.t Hardware
 497:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 498:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @param[in]
 499:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 500:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * <i>Imp Note:</i>
 501:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 502:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 503:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** BaseType_t initialize_ethernet_mac( void )
 504:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** {
 640              	 .loc 1 504 0
 641              	 .cfi_startproc
 642              	 
 643              	 
 644 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 645              	.LCFI5:
 646              	 .cfi_def_cfa_offset 20
 647              	 .cfi_offset 4,-20
 648              	 .cfi_offset 5,-16
 649              	 .cfi_offset 6,-12
 650              	 .cfi_offset 7,-8
 651              	 .cfi_offset 14,-4
 652 0002 85B0     	 sub sp,sp,#20
 653              	.LCFI6:
 654              	 .cfi_def_cfa_offset 40
 655              	.LVL75:
 505:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Local Variables */
 506:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     BaseType_t xResult = pdFAIL;
 507:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /** Local Variables **/
 508:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	unsigned char count_outer_l = 0;
 509:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 510:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Ethernet PHY configuration */
 511:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     const XMC_ETH_PHY_CONFIG_t eth_phy_config_l =
 656              	 .loc 1 511 0
 657 0004 4F4A     	 ldr r2,.L51
 658 0006 02AB     	 add r3,sp,#8
 659 0008 1068     	 ldr r0,[r2]
 660 000a 5168     	 ldr r1,[r2,#4]
 661 000c 03C3     	 stmia r3!,{r0,r1}
 662              	.LVL76:
 663 000e 4E4B     	 ldr r3,.L51+4
 664 0010 1A68     	 ldr r2,[r3]
 665              	.LVL77:
 666              	.LBB110:
 667              	.LBB111:
 564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 668              	 .loc 4 564 0
 669 0012 4E4B     	 ldr r3,.L51+8
 670 0014 1A60     	 str r2,[r3]
 671              	.LBE111:
 672              	.LBE110:
 512:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     {
 513:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         .interface = XMC_ETH_LINK_INTERFACE_RMII,
 514:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         .speed = XMC_ETH_LINK_SPEED_100M,
 515:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         .duplex = XMC_ETH_LINK_DUPLEX_FULL,
 516:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		.enable_auto_negotiate = 1,
 517:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		.enable_loop_back = 0
 518:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     };
 519:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Ethernet port protocol configuration */
 520:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     const XMC_ETH_MAC_PORT_CTRL_t port_control_l =
 521:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     {
 522:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         .mode = XMC_ETH_MAC_PORT_CTRL_MODE_RMII,
 523:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         .rxd0 = XMC_ETH_MAC_PORT_CTRL_RXD0_P2_2,
 524:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         .rxd1 = XMC_ETH_MAC_PORT_CTRL_RXD1_P2_3,
 525:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         .clk_rmii = XMC_ETH_MAC_PORT_CTRL_CLK_RMII_P15_8,
 526:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         .crs_dv = XMC_ETH_MAC_PORT_CTRL_CRS_DV_P15_9,
 527:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         .rxer= XMC_ETH_MAC_PORT_CTRL_RXER_P2_4,
 528:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		.mdio = XMC_ETH_MAC_PORT_CTRL_MDIO_P2_0
 529:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     };
 530:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 531:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Set port control for EMAC */
 532:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     XMC_ETH_MAC_SetPortControl( &ethernet_mac_handle, port_control_l );
 533:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 534:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     XMC_ETH_MAC_Init( &ethernet_mac_handle );
 673              	 .loc 1 534 0
 674 0016 4E4C     	 ldr r4,.L51+12
 675 0018 2046     	 mov r0,r4
 676 001a FFF7FEFF 	 bl XMC_ETH_MAC_Init
 677              	.LVL78:
 678              	.LBB112:
 679              	.LBB113:
1190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 680              	 .loc 4 1190 0
 681 001e 2268     	 ldr r2,[r4]
 682 0020 1368     	 ldr r3,[r2]
 683 0022 23F48013 	 bic r3,r3,#1048576
 684 0026 1360     	 str r3,[r2]
 685              	.LVL79:
 686              	.LBE113:
 687              	.LBE112:
 688              	.LBB114:
 689              	.LBB115:
 981:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 690              	 .loc 4 981 0
 691 0028 2268     	 ldr r2,[r4]
 692 002a 5368     	 ldr r3,[r2,#4]
 693 002c 23F02003 	 bic r3,r3,#32
 694 0030 5360     	 str r3,[r2,#4]
 695              	.LBE115:
 696              	.LBE114:
 535:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     XMC_ETH_MAC_DisableJumboFrame( &ethernet_mac_handle );
 536:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     XMC_ETH_MAC_EnableReceptionBroadcastFrames( &ethernet_mac_handle );
 537:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 538:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /* Initialize PHY */
 539:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     if( XMC_ETH_PHY_STATUS_OK == XMC_ETH_PHY_Init( &ethernet_mac_handle, ETH_0_PHY_ADDR, &eth_phy_c
 697              	 .loc 1 539 0
 698 0032 2046     	 mov r0,r4
 699 0034 0021     	 movs r1,#0
 700 0036 02AA     	 add r2,sp,#8
 701 0038 FFF7FEFF 	 bl XMC_ETH_PHY_Init
 702              	.LVL80:
 703 003c 0028     	 cmp r0,#0
 704 003e 7CD1     	 bne .L45
 705 0040 444C     	 ldr r4,.L51+16
 706 0042 04F5BE55 	 add r5,r4,#6080
 707 0046 1035     	 adds r5,r5,#16
 540:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     {
 541:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         /* Initialize Network descriptor buffers */
 542:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         for( count_outer_l = 0; count_outer_l < ETH_0_NUM_TX_BUF; ++count_outer_l )
 543:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         {
 544:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	memset( (uint8_t *) (ETH_0_tx_buf + count_outer_l), '\0', XMC_ETH_MAC_BUF_SIZE );
 708              	 .loc 1 544 0
 709 0048 40F2F457 	 movw r7,#1524
 710 004c 0026     	 movs r6,#0
 711              	.LVL81:
 712              	.L35:
 713              	 .loc 1 544 0 is_stmt 0 discriminator 3
 714 004e 2046     	 mov r0,r4
 715 0050 3146     	 mov r1,r6
 716 0052 3A46     	 mov r2,r7
 717 0054 FFF7FEFF 	 bl memset
 718              	.LVL82:
 719 0058 04F2F454 	 addw r4,r4,#1524
 542:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         {
 720              	 .loc 1 542 0 is_stmt 1 discriminator 3
 721 005c AC42     	 cmp r4,r5
 722 005e F6D1     	 bne .L35
 723 0060 3D4C     	 ldr r4,.L51+20
 724 0062 04F5BE55 	 add r5,r4,#6080
 725 0066 1035     	 adds r5,r5,#16
 545:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         }
 546:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         for( count_outer_l = 0; count_outer_l < ETH_0_NUM_RX_BUF; ++count_outer_l )
 547:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         {
 548:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	memset( (uint8_t *) (ETH_0_rx_buf + count_outer_l), '\0', XMC_ETH_MAC_BUF_SIZE );
 726              	 .loc 1 548 0
 727 0068 40F2F457 	 movw r7,#1524
 728 006c 0026     	 movs r6,#0
 729              	.L36:
 730              	 .loc 1 548 0 is_stmt 0 discriminator 3
 731 006e 2046     	 mov r0,r4
 732 0070 3146     	 mov r1,r6
 733 0072 3A46     	 mov r2,r7
 734 0074 FFF7FEFF 	 bl memset
 735              	.LVL83:
 736 0078 04F2F454 	 addw r4,r4,#1524
 546:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         {
 737              	 .loc 1 546 0 is_stmt 1 discriminator 3
 738 007c AC42     	 cmp r4,r5
 739 007e F6D1     	 bne .L36
 549:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         }
 550:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         while( XMC_ETH_PHY_GetLinkStatus(&ethernet_mac_handle, ETH_0_PHY_ADDR) != XMC_ETH_LINK_STAT
 740              	 .loc 1 550 0 discriminator 1
 741 0080 334D     	 ldr r5,.L51+12
 742 0082 0024     	 movs r4,#0
 743              	.L46:
 744 0084 2846     	 mov r0,r5
 745 0086 2146     	 mov r1,r4
 746 0088 FFF7FEFF 	 bl XMC_ETH_PHY_GetLinkStatus
 747              	.LVL84:
 748 008c 0128     	 cmp r0,#1
 749 008e F9D1     	 bne .L46
 551:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     	/* PHY successfully initialized */
 552:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 553:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         /* Create Semaphore for EMAC Handler task */
 554:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         vSemaphoreCreateBinary( xEthRxEventSemaphore );
 750              	 .loc 1 554 0
 751 0090 0021     	 movs r1,#0
 752 0092 0322     	 movs r2,#3
 753 0094 FFF7FEFF 	 bl xQueueGenericCreate
 754              	.LVL85:
 755 0098 304B     	 ldr r3,.L51+24
 756 009a 1860     	 str r0,[r3]
 757 009c 20B1     	 cbz r0,.L38
 758              	 .loc 1 554 0 is_stmt 0 discriminator 1
 759 009e 0021     	 movs r1,#0
 760 00a0 0A46     	 mov r2,r1
 761 00a2 0B46     	 mov r3,r1
 762 00a4 FFF7FEFF 	 bl xQueueGenericSend
 763              	.LVL86:
 764              	.L38:
 555:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         xEthTxEventMutex = xSemaphoreCreateMutex();
 765              	 .loc 1 555 0 is_stmt 1
 766 00a8 0120     	 movs r0,#1
 767 00aa FFF7FEFF 	 bl xQueueCreateMutex
 768              	.LVL87:
 769 00ae 2C4B     	 ldr r3,.L51+28
 770 00b0 1860     	 str r0,[r3]
 556:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         xEthRxEventMutex = xSemaphoreCreateMutex();
 771              	 .loc 1 556 0
 772 00b2 0120     	 movs r0,#1
 773 00b4 FFF7FEFF 	 bl xQueueCreateMutex
 774              	.LVL88:
 775 00b8 2A4B     	 ldr r3,.L51+32
 776 00ba 1860     	 str r0,[r3]
 557:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         configASSERT( xEthRxEventSemaphore );
 777              	 .loc 1 557 0
 778 00bc 274B     	 ldr r3,.L51+24
 779 00be 1B68     	 ldr r3,[r3]
 780 00c0 43B9     	 cbnz r3,.L39
 781              	.LBB116:
 782              	.LBB117:
 783              	 .file 5 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * FreeRTOS Kernel V10.4.1
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * subject to the following conditions:
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * copies or substantial portions of the Software.
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * https://www.FreeRTOS.org
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * https://github.com/FreeRTOS
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * 1 tab == 4 spaces!
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef PORTMACRO_H
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define PORTMACRO_H
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifdef __cplusplus
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         extern "C" {
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Port specific definitions.
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * given hardware and compiler.
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * These settings should not be altered.
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *-----------------------------------------------------------
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Type definitions. */
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portCHAR          char
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portFLOAT         float
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDOUBLE        double
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portLONG          long
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSHORT         short
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portBASE_TYPE     long
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef long             BaseType_t;
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         typedef uint16_t     TickType_t;
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #else
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         typedef uint32_t     TickType_t;
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * not need to be guarded with a critical section. */
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specifics. */
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Scheduler utilities. */
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portYIELD()                                 \
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {                                                   \
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****                                                         \
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Critical section management. */
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     extern void vPortEnterCritical( void );
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     extern void vPortExitCritical( void );
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * (which build with all the ports) will build. */
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Tickless idle/low power functionality. */
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specific optimisations. */
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Generic helper function. */
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             uint8_t ucReturn;
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             return ucReturn;
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Check the configuration. */
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #endif
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifdef configASSERT
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* portNOP() is not required by this port. */
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNOP()
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portINLINE              __inline
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef portFORCE_INLINE
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         BaseType_t xReturn;
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             xReturn = pdFALSE;
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         else
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             xReturn = pdTRUE;
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         return xReturn;
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulNewBASEPRI;
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile
 784              	 .loc 5 197 0
 785              	
 786 00c2 4FF01403 	 mov r3,#20
 787 00c6 83F31188 	 msr basepri,r3
 788 00ca BFF36F8F 	 isb 
 789 00ce BFF34F8F 	 dsb 
 790              	
 791              	
 792              	.LVL89:
 793              	 .thumb
 794              	.L40:
 795              	.LBE117:
 796              	.LBE116:
 797              	 .loc 1 557 0 discriminator 1
 798 00d2 FEE7     	 b .L40
 799              	.L39:
 558:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         configASSERT( xEthTxEventMutex );
 800              	 .loc 1 558 0
 801 00d4 224B     	 ldr r3,.L51+28
 802 00d6 1B68     	 ldr r3,[r3]
 803 00d8 43B9     	 cbnz r3,.L41
 804              	.LBB118:
 805              	.LBB119:
 806              	 .loc 5 197 0
 807              	
 808 00da 4FF01403 	 mov r3,#20
 809 00de 83F31188 	 msr basepri,r3
 810 00e2 BFF36F8F 	 isb 
 811 00e6 BFF34F8F 	 dsb 
 812              	
 813              	
 814              	.LVL90:
 815              	 .thumb
 816              	.L42:
 817              	.LBE119:
 818              	.LBE118:
 819              	 .loc 1 558 0 discriminator 2
 820 00ea FEE7     	 b .L42
 821              	.L41:
 559:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         configASSERT( xEthRxEventMutex );
 822              	 .loc 1 559 0
 823 00ec 40B9     	 cbnz r0,.L43
 824              	.LBB120:
 825              	.LBB121:
 826              	 .loc 5 197 0
 827              	
 828 00ee 4FF01403 	 mov r3,#20
 829 00f2 83F31188 	 msr basepri,r3
 830 00f6 BFF36F8F 	 isb 
 831 00fa BFF34F8F 	 dsb 
 832              	
 833              	
 834              	.LVL91:
 835              	 .thumb
 836              	.L44:
 837              	.LBE121:
 838              	.LBE120:
 839              	 .loc 1 559 0 discriminator 3
 840 00fe FEE7     	 b .L44
 841              	.L43:
 560:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 561:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         /* Create EMAC handler Task to process received frames */
 562:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         xResult = xTaskCreate( prvEMACHandlerTask, "EMAC Task", configEMAC_TASK_STACK_SIZE,
 842              	 .loc 1 562 0
 843 0100 0223     	 movs r3,#2
 844 0102 0093     	 str r3,[sp]
 845 0104 184B     	 ldr r3,.L51+36
 846 0106 0193     	 str r3,[sp,#4]
 847 0108 1848     	 ldr r0,.L51+40
 848 010a 1949     	 ldr r1,.L51+44
 849 010c F022     	 movs r2,#240
 850 010e 0023     	 movs r3,#0
 851 0110 FFF7FEFF 	 bl xTaskCreate
 852              	.LVL92:
 853 0114 0446     	 mov r4,r0
 854              	.LVL93:
 563:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         		NULL, configEMAC_TASK_PRIORITY, &xEMACTaskHandle );
 564:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         /* Check return status */
 565:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         if( xResult != pdTRUE )
 855              	 .loc 1 565 0
 856 0116 0128     	 cmp r0,#1
 857 0118 10D0     	 beq .L34
 566:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         {
 567:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	vSemaphoreDelete( xEthRxEventSemaphore );
 858              	 .loc 1 567 0
 859 011a 104B     	 ldr r3,.L51+24
 860 011c 1868     	 ldr r0,[r3]
 861              	.LVL94:
 862 011e FFF7FEFF 	 bl vQueueDelete
 863              	.LVL95:
 568:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	vSemaphoreDelete( xEthTxEventMutex );
 864              	 .loc 1 568 0
 865 0122 0F4B     	 ldr r3,.L51+28
 866 0124 1868     	 ldr r0,[r3]
 867 0126 FFF7FEFF 	 bl vQueueDelete
 868              	.LVL96:
 569:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			vSemaphoreDelete( xEthRxEventMutex );
 869              	 .loc 1 569 0
 870 012a 0E4B     	 ldr r3,.L51+32
 871 012c 1868     	 ldr r0,[r3]
 872 012e FFF7FEFF 	 bl vQueueDelete
 873              	.LVL97:
 570:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	/* Free Resources */
 571:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         	vTaskDelete( NULL );
 874              	 .loc 1 571 0
 875 0132 0020     	 movs r0,#0
 876 0134 FFF7FEFF 	 bl vTaskDelete
 877              	.LVL98:
 878 0138 00E0     	 b .L34
 879              	.LVL99:
 880              	.L45:
 506:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     /** Local Variables **/
 881              	 .loc 1 506 0
 882 013a 0024     	 movs r4,#0
 883              	.LVL100:
 884              	.L34:
 572:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****         }
 573:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     }
 574:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 575:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     return xResult;
 576:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** }
 885              	 .loc 1 576 0
 886 013c 2046     	 mov r0,r4
 887 013e 05B0     	 add sp,sp,#20
 888              	.LCFI7:
 889              	 .cfi_def_cfa_offset 20
 890              	 
 891 0140 F0BD     	 pop {r4,r5,r6,r7,pc}
 892              	.LVL101:
 893              	.L52:
 894 0142 00BF     	 .align 2
 895              	.L51:
 896 0144 00000000 	 .word .LANCHOR4
 897 0148 00000000 	 .word .LANCHOR5
 898 014c 40400050 	 .word 1342193728
 899 0150 00000000 	 .word .LANCHOR2
 900 0154 00000000 	 .word .LANCHOR6
 901 0158 D0170000 	 .word .LANCHOR7+1752
 902 015c 00000000 	 .word .LANCHOR0
 903 0160 00000000 	 .word .LANCHOR3
 904 0164 00000000 	 .word .LANCHOR1
 905 0168 00000000 	 .word .LANCHOR8
 906 016c 00000000 	 .word prvEMACHandlerTask
 907 0170 00000000 	 .word .LC1
 908              	 .cfi_endproc
 909              	.LFE245:
 911              	 .section .text.vApplicationIPNetworkEventHook,"ax",%progbits
 912              	 .align 2
 913              	 .global vApplicationIPNetworkEventHook
 914              	 .thumb
 915              	 .thumb_func
 917              	vApplicationIPNetworkEventHook:
 918              	.LFB246:
 577:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 578:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 579:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #if (ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
 580:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 581:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @function
 582:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 583:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief
 584:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 585:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @param[in]
 586:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 587:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * <i>Imp Note:</i>
 588:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 589:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 590:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
 591:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** {
 919              	 .loc 1 591 0
 920              	 .cfi_startproc
 921              	 
 922              	 
 923              	.LVL102:
 592:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	switch( eNetworkEvent )
 924              	 .loc 1 592 0
 925 0000 0128     	 cmp r0,#1
 926 0002 17D1     	 bne .L57
 591:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	switch( eNetworkEvent )
 927              	 .loc 1 591 0
 928 0004 38B5     	 push {r3,r4,r5,lr}
 929              	.LCFI8:
 930              	 .cfi_def_cfa_offset 16
 931              	 .cfi_offset 3,-16
 932              	 .cfi_offset 4,-12
 933              	 .cfi_offset 5,-8
 934              	 .cfi_offset 14,-4
 593:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	{
 594:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	default:
 595:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		case eNetworkUp:
 596:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		break;
 597:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 598:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		case eNetworkDown:
 599:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			/* Get link status, TODO: Note: Time Consuming for hooks */
 600:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			if( 1 == xGetPhyLinkStatus() )
 935              	 .loc 1 600 0
 936 0006 FFF7FEFF 	 bl xGetPhyLinkStatus
 937              	.LVL103:
 938 000a 0128     	 cmp r0,#1
 939 000c 11D1     	 bne .L53
 601:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			{
 602:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     			/* Set network speed and set it up */
 603:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     			XMC_ETH_MAC_SetLink( &ethernet_mac_handle,
 940              	 .loc 1 603 0
 941 000e 0A4D     	 ldr r5,.L58
 942 0010 2846     	 mov r0,r5
 943 0012 0021     	 movs r1,#0
 944 0014 FFF7FEFF 	 bl XMC_ETH_PHY_GetLinkSpeed
 945              	.LVL104:
 946 0018 0446     	 mov r4,r0
 947 001a 2846     	 mov r0,r5
 948 001c 0021     	 movs r1,#0
 949 001e FFF7FEFF 	 bl XMC_ETH_PHY_GetLinkDuplex
 950              	.LVL105:
 951              	.LBB122:
 952              	.LBB123:
1271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                       (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURAT
 953              	 .loc 4 1271 0
 954 0022 2A68     	 ldr r2,[r5]
 955 0024 1368     	 ldr r3,[r2]
 956 0026 2043     	 orrs r0,r0,r4
 957              	.LVL106:
 958 0028 80B2     	 uxth r0,r0
 959 002a 23F49043 	 bic r3,r3,#18432
1273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 960              	 .loc 4 1273 0
 961 002e 0343     	 orrs r3,r3,r0
1271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                       (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURAT
 962              	 .loc 4 1271 0
 963 0030 1360     	 str r3,[r2]
 964              	.LVL107:
 965              	.L53:
 966 0032 38BD     	 pop {r3,r4,r5,pc}
 967              	.LVL108:
 968              	.L57:
 969              	.LCFI9:
 970              	 .cfi_def_cfa_offset 0
 971              	 .cfi_restore 3
 972              	 .cfi_restore 4
 973              	 .cfi_restore 5
 974              	 .cfi_restore 14
 975 0034 7047     	 bx lr
 976              	.L59:
 977 0036 00BF     	 .align 2
 978              	.L58:
 979 0038 00000000 	 .word .LANCHOR2
 980              	.LBE123:
 981              	.LBE122:
 982              	 .cfi_endproc
 983              	.LFE246:
 985              	 .section .text.vApplicationPingReplyHook,"ax",%progbits
 986              	 .align 2
 987              	 .global vApplicationPingReplyHook
 988              	 .thumb
 989              	 .thumb_func
 991              	vApplicationPingReplyHook:
 992              	.LFB247:
 604:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     					XMC_ETH_PHY_GetLinkSpeed( &ethernet_mac_handle, ETH_0_PHY_ADDR ),
 605:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****     					XMC_ETH_PHY_GetLinkDuplex( &ethernet_mac_handle, ETH_0_PHY_ADDR ) );
 606:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			}
 607:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		break;
 608:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	}
 609:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** }
 610:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 611:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #endif	/* ipconfigUSE_NETWORK_EVENT_HOOK == 1 */
 612:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 613:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 614:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #if( ipconfigUSE_LLMNR == 1 )
 615:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** BaseType_t xApplicationDNSQueryHook( const char *pcName )
 616:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** {
 617:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 618:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** }
 619:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #endif
 620:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 621:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #if (ipconfigSUPPORT_OUTGOING_PINGS == 1)
 622:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 623:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
 624:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** {
 993              	 .loc 1 624 0
 994              	 .cfi_startproc
 995              	 
 996              	 
 997              	 
 998              	.LVL109:
 999 0000 7047     	 bx lr
 1000              	 .cfi_endproc
 1001              	.LFE247:
 1003 0002 00BF     	 .section .text.ETH0_0_IRQHandler,"ax",%progbits
 1004              	 .align 2
 1005              	 .global ETH0_0_IRQHandler
 1006              	 .thumb
 1007              	 .thumb_func
 1009              	ETH0_0_IRQHandler:
 1010              	.LFB248:
 625:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	(void) eStatus;
 626:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	(void) usIdentifier;
 627:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** }
 628:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 629:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** #endif	/* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
 630:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 631:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 632:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /******************************************************************************/
 633:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 634:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 635:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** /**
 636:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @function
 637:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 638:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @brief		XMC4500 Ethernet 0 IRQ Handler
 639:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 640:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * @param[in]
 641:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 642:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * <i>Imp Note:</i>
 643:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  * 				can be named as IRQ_Hdlr_108 also
 644:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  *
 645:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c ****  */
 646:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** void ETH0_0_IRQHandler( void )
 647:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** {
 1011              	 .loc 1 647 0
 1012              	 .cfi_startproc
 1013              	 
 1014              	 
 1015              	 .loc 1 647 0
 1016 0000 00B5     	 push {lr}
 1017              	.LCFI10:
 1018              	 .cfi_def_cfa_offset 4
 1019              	 .cfi_offset 14,-4
 1020 0002 83B0     	 sub sp,sp,#12
 1021              	.LCFI11:
 1022              	 .cfi_def_cfa_offset 16
 648:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	/* Local variables */
 649:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 1023              	 .loc 1 649 0
 1024 0004 0023     	 movs r3,#0
 1025 0006 0193     	 str r3,[sp,#4]
 650:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	static unsigned long status_l = 0;
 651:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 652:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	if( xEMACTaskHandle != NULL )
 1026              	 .loc 1 652 0
 1027 0008 104B     	 ldr r3,.L65
 1028 000a 1B68     	 ldr r3,[r3]
 1029 000c D3B1     	 cbz r3,.L61
 653:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	{
 654:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		/* Get Event status */
 655:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		status_l = XMC_ETH_MAC_GetEventStatus( &ethernet_mac_handle );
 1030              	 .loc 1 655 0
 1031 000e 1048     	 ldr r0,.L65+4
 1032 0010 FFF7FEFF 	 bl XMC_ETH_MAC_GetEventStatus
 1033              	.LVL110:
 1034 0014 0F4B     	 ldr r3,.L65+8
 1035 0016 1860     	 str r0,[r3]
 656:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		/* Check for receive status */
 657:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		if( status_l & XMC_ETH_MAC_EVENT_RECEIVE )
 1036              	 .loc 1 657 0
 1037 0018 10F0400F 	 tst r0,#64
 1038 001c 04D0     	 beq .L63
 658:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		{
 659:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			/* Trigger semaphore indicating that some data has been received using FromISR */
 660:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 			xSemaphoreGiveFromISR( xEthRxEventSemaphore, &xHigherPriorityTaskWoken );
 1039              	 .loc 1 660 0
 1040 001e 0E4B     	 ldr r3,.L65+12
 1041 0020 1868     	 ldr r0,[r3]
 1042 0022 01A9     	 add r1,sp,#4
 1043 0024 FFF7FEFF 	 bl xQueueGiveFromISR
 1044              	.LVL111:
 1045              	.L63:
 661:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		}
 662:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 663:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		/* Clear Interrupt Flag */
 664:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		XMC_ETH_MAC_ClearEventStatus( &ethernet_mac_handle, XMC_ETH_MAC_EVENT_RECEIVE );
 1046              	 .loc 1 664 0
 1047 0028 0948     	 ldr r0,.L65+4
 1048 002a 4021     	 movs r1,#64
 1049 002c FFF7FEFF 	 bl XMC_ETH_MAC_ClearEventStatus
 1050              	.LVL112:
 665:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 666:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	    /* Can call user defined callback function from here to process some other things */
 667:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 
 668:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 		/* Leave ISR */
 669:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 1051              	 .loc 1 669 0
 1052 0030 019B     	 ldr r3,[sp,#4]
 1053 0032 3BB1     	 cbz r3,.L61
 1054              	 .loc 1 669 0 is_stmt 0 discriminator 1
 1055 0034 4FF08052 	 mov r2,#268435456
 1056 0038 084B     	 ldr r3,.L65+16
 1057 003a 1A60     	 str r2,[r3]
 1058              	
 1059 003c BFF34F8F 	 dsb
 1060              	
 1061              	
 1062 0040 BFF36F8F 	 isb
 1063              	
 1064              	 .thumb
 1065              	.L61:
 670:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** 	}
 671:../FreeRTOS-Plus-TCP/portable/NetworkInterface/board_family/NetworkInterface.c **** }
 1066              	 .loc 1 671 0 is_stmt 1
 1067 0044 03B0     	 add sp,sp,#12
 1068              	.LCFI12:
 1069              	 .cfi_def_cfa_offset 4
 1070              	 
 1071 0046 5DF804FB 	 ldr pc,[sp],#4
 1072              	.L66:
 1073 004a 00BF     	 .align 2
 1074              	.L65:
 1075 004c 00000000 	 .word .LANCHOR8
 1076 0050 00000000 	 .word .LANCHOR2
 1077 0054 00000000 	 .word .LANCHOR9
 1078 0058 00000000 	 .word .LANCHOR0
 1079 005c 04ED00E0 	 .word -536810236
 1080              	 .cfi_endproc
 1081              	.LFE248:
 1083              	 .section .rodata
 1084              	 .align 2
 1085              	 .set .LANCHOR4,.+0
 1086              	.LC0:
 1087 0000 01       	 .byte 1
 1088 0001 00       	 .space 1
 1089 0002 0040     	 .short 16384
 1090 0004 0008     	 .short 2048
 1091 0006 01       	 .byte 1
 1092 0007 00       	 .byte 0
 1093              	 .section .rodata.port_control_l.8951,"a",%progbits
 1094              	 .align 2
 1095              	 .set .LANCHOR5,.+0
 1098              	port_control_l.8951:
 1099 0000 00       	 .byte 0
 1100 0001 0A       	 .byte 10
 1101 0002 40       	 .byte 64
 1102 0003 04       	 .byte 4
 1103              	 .section .data.ethernet_mac_handle,"aw",%progbits
 1104              	 .align 3
 1105              	 .set .LANCHOR2,.+0
 1108              	ethernet_mac_handle:
 1109 0000 00C00050 	 .word 1342226432
 1110 0004 00000000 	 .space 4
 1111 0008 00031945 	 .word 1159267072
 1112 000c 00000000 	 .word 0
 1113 0010 20300000 	 .word ETH_0_rx_desc
 1114 0014 A02F0000 	 .word ETH_0_tx_desc
 1115 0018 D0170000 	 .word ETH_0_rx_buf
 1116 001c 00000000 	 .word ETH_0_tx_buf
 1117 0020 00000000 	 .space 4
 1118 0024 04       	 .byte 4
 1119 0025 04       	 .byte 4
 1120 0026 00000000 	 .space 10
 1120      00000000 
 1120      0000
 1121              	 .section .bss.xEMACTaskHandle,"aw",%nobits
 1122              	 .align 2
 1123              	 .set .LANCHOR8,.+0
 1126              	xEMACTaskHandle:
 1127 0000 00000000 	 .space 4
 1128              	 .section .bss.status_l.8979,"aw",%nobits
 1129              	 .align 2
 1130              	 .set .LANCHOR9,.+0
 1133              	status_l.8979:
 1134 0000 00000000 	 .space 4
 1135              	 .section .rodata.str1.4,"aMS",%progbits,1
 1136              	 .align 2
 1137              	.LC1:
 1138 0000 454D4143 	 .ascii "EMAC Task\000"
 1138      20546173 
 1138      6B00
 1139 000a 0000     	 .section ETH_RAM,"aw",%progbits
 1140              	 .align 2
 1141              	 .set .LANCHOR6,.+0
 1142              	 .set .LANCHOR7,.+4344
 1145              	ETH_0_tx_buf:
 1146 0000 00000000 	 .space 6096
 1146      00000000 
 1146      00000000 
 1146      00000000 
 1146      00000000 
 1149              	ETH_0_rx_buf:
 1150 17d0 00000000 	 .space 6096
 1150      00000000 
 1150      00000000 
 1150      00000000 
 1150      00000000 
 1153              	ETH_0_tx_desc:
 1154 2fa0 00000000 	 .space 128
 1154      00000000 
 1154      00000000 
 1154      00000000 
 1154      00000000 
 1157              	ETH_0_rx_desc:
 1158 3020 00000000 	 .space 128
 1158      00000000 
 1158      00000000 
 1158      00000000 
 1158      00000000 
 1159              	 .section .bss.xEthRxEventMutex,"aw",%nobits
 1160              	 .align 2
 1161              	 .set .LANCHOR1,.+0
 1164              	xEthRxEventMutex:
 1165 0000 00000000 	 .space 4
 1166              	 .section .bss.xEthTxEventMutex,"aw",%nobits
 1167              	 .align 2
 1168              	 .set .LANCHOR3,.+0
 1171              	xEthTxEventMutex:
 1172 0000 00000000 	 .space 4
 1173              	 .section .bss.xEthRxEventSemaphore,"aw",%nobits
 1174              	 .align 2
 1175              	 .set .LANCHOR0,.+0
 1178              	xEthRxEventSemaphore:
 1179 0000 00000000 	 .space 4
 1180              	 .text
 1181              	.Letext0:
 1182              	 .file 6 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 1183              	 .file 7 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1184              	 .file 8 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1185              	 .file 9 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/projdefs.h"
 1186              	 .file 10 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/list.h"
 1187              	 .file 11 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/task.h"
 1188              	 .file 12 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/queue.h"
 1189              	 .file 13 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/semphr.h"
 1190              	 .file 14 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h"
 1191              	 .file 15 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
 1192              	 .file 16 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1193              	 .file 17 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc_eth_mac_map.h"
 1194              	 .file 18 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc_eth_phy.h"
 1195              	 .file 19 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/NetworkBufferManagement.h"
DEFINED SYMBOLS
                            *ABS*:00000000 NetworkInterface.c
    {standard input}:19     .text.prvEMACHandlerTask:00000000 $t
    {standard input}:23     .text.prvEMACHandlerTask:00000000 prvEMACHandlerTask
    {standard input}:238    .text.prvEMACHandlerTask:000000e8 $d
    {standard input}:248    .text.xNetworkInterfaceInitialise:00000000 $t
    {standard input}:253    .text.xNetworkInterfaceInitialise:00000000 xNetworkInterfaceInitialise
    {standard input}:420    .text.xNetworkInterfaceInitialise:000000c0 $d
    {standard input}:427    .text.xNetworkInterfaceOutput:00000000 $t
    {standard input}:432    .text.xNetworkInterfaceOutput:00000000 xNetworkInterfaceOutput
    {standard input}:592    .text.xNetworkInterfaceOutput:000000ac $d
    {standard input}:598    .text.xGetPhyLinkStatus:00000000 $t
    {standard input}:603    .text.xGetPhyLinkStatus:00000000 xGetPhyLinkStatus
    {standard input}:628    .text.xGetPhyLinkStatus:00000014 $d
    {standard input}:633    .text.initialize_ethernet_mac:00000000 $t
    {standard input}:638    .text.initialize_ethernet_mac:00000000 initialize_ethernet_mac
    {standard input}:896    .text.initialize_ethernet_mac:00000144 $d
    {standard input}:912    .text.vApplicationIPNetworkEventHook:00000000 $t
    {standard input}:917    .text.vApplicationIPNetworkEventHook:00000000 vApplicationIPNetworkEventHook
    {standard input}:979    .text.vApplicationIPNetworkEventHook:00000038 $d
    {standard input}:986    .text.vApplicationPingReplyHook:00000000 $t
    {standard input}:991    .text.vApplicationPingReplyHook:00000000 vApplicationPingReplyHook
    {standard input}:1004   .text.ETH0_0_IRQHandler:00000000 $t
    {standard input}:1009   .text.ETH0_0_IRQHandler:00000000 ETH0_0_IRQHandler
    {standard input}:1075   .text.ETH0_0_IRQHandler:0000004c $d
    {standard input}:1084   .rodata:00000000 $d
    {standard input}:1094   .rodata.port_control_l.8951:00000000 $d
    {standard input}:1098   .rodata.port_control_l.8951:00000000 port_control_l.8951
    {standard input}:1104   .data.ethernet_mac_handle:00000000 $d
    {standard input}:1108   .data.ethernet_mac_handle:00000000 ethernet_mac_handle
    {standard input}:1157   ETH_RAM:00003020 ETH_0_rx_desc
    {standard input}:1153   ETH_RAM:00002fa0 ETH_0_tx_desc
    {standard input}:1149   ETH_RAM:000017d0 ETH_0_rx_buf
    {standard input}:1145   ETH_RAM:00000000 ETH_0_tx_buf
    {standard input}:1122   .bss.xEMACTaskHandle:00000000 $d
    {standard input}:1126   .bss.xEMACTaskHandle:00000000 xEMACTaskHandle
    {standard input}:1129   .bss.status_l.8979:00000000 $d
    {standard input}:1133   .bss.status_l.8979:00000000 status_l.8979
    {standard input}:1136   .rodata.str1.4:00000000 $d
    {standard input}:1140   ETH_RAM:00000000 $d
    {standard input}:1160   .bss.xEthRxEventMutex:00000000 $d
    {standard input}:1164   .bss.xEthRxEventMutex:00000000 xEthRxEventMutex
    {standard input}:1167   .bss.xEthTxEventMutex:00000000 $d
    {standard input}:1171   .bss.xEthTxEventMutex:00000000 xEthTxEventMutex
    {standard input}:1174   .bss.xEthRxEventSemaphore:00000000 $d
    {standard input}:1178   .bss.xEthRxEventSemaphore:00000000 xEthRxEventSemaphore
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.FreeRTOSConfig.h.30.aa43eb1cb33228d5c7e359a94d48589b
                           .group:00000000 wm4.projdefs.h.28.d6a7c9061b707820f2fcf4c2ff5d9f24
                           .group:00000000 wm4.portmacro.h.30.2ddc2eaf2e032c76c597fb78c4365041
                           .group:00000000 wm4.portable.h.63.e9cc508c3850f44ce542149380c67812
                           .group:00000000 wm4.mpu_wrappers.h.28.163fb40577cf8d1578015ea3f2ff4cdb
                           .group:00000000 wm4.FreeRTOS.h.67.9945f39eea4ddeb224c0782392206292
                           .group:00000000 wm4.list.h.57.02ec67e07eacffe5ca7cfb7326896236
                           .group:00000000 wm4.task.h.47.2d3fe49a094b8ec1e3e6aac441e8db21
                           .group:00000000 wm4.queue.h.66.45d4a3cf5de24cde7e732f8dad25383c
                           .group:00000000 wm4.semphr.h.38.96f44691bfa19eb833944d3a35b81e54
                           .group:00000000 wm4.FreeRTOSIPConfig.h.37.3f9c1db988571ff1f3dec4c7e54978d6
                           .group:00000000 wm4.FreeRTOS_errno_TCP.h.27.708877b341d0e6bcb4ba112b2ad8082a
                           .group:00000000 wm4.FreeRTOSIPConfigDefaults.h.41.f972b11d9b1eba5383080cfaef1fd740
                           .group:00000000 wm4.IPTraceMacroDefaults.h.31.69642530b5a79c93e762c9b09ac0d1d5
                           .group:00000000 wm4.FreeRTOS_IP.h.59.3f5e36f6612bd0c66747c6093da47335
                           .group:00000000 wm4.FreeRTOS_IP.h.179.e5077063e624bc5d3f02542470d6ea94
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4002528de975c0fcce6c551c15d87b8c
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.timers.h.29.025d268d6baf57298309e7b498ee1cc7
                           .group:00000000 wm4.FreeRTOS_Sockets.h.58.61d472da32c0e0f5bc49c368f15d0ac5
                           .group:00000000 wm4.FreeRTOS_TCP_WIN.h.32.f3cfab69924f28284deb16cc1a30fb93
                           .group:00000000 wm4.FreeRTOS_IP_Private.h.52.551f932b14473cea139893dda31b3fa0
                           .group:00000000 wm4.FreeRTOS_IP_Private.h.328.b5788f8d626a4cf16b8282f9399f3f55
                           .group:00000000 wm4.FreeRTOS_DNS.h.27.8432bc3440a9cfc56281e07613f9ce59
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.48aa5dfcc4adf36b323cf9dbe32c793a
                           .group:00000000 wm4.core_cm4.h.174.824e0532337e90525b645435b961cc25
                           .group:00000000 wm4.mpu_armv7.h.32.7da498ea6f18d3b74a42202d7c1d394e
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:00000000 wm4.xmc_common.h.92.bbcf261068c7c74d7033b80d0dbf155c
                           .group:00000000 wm4.xmc_eth_mac.h.114.b3c2c5df178f676f85b0b5c969c16bf0

UNDEFINED SYMBOLS
xQueueSemaphoreTake
XMC_ETH_MAC_GetRxFrameSize
pxGetNetworkBufferWithDescriptor
memcpy
XMC_ETH_MAC_ReturnRxDescriptor
xSendEventStructToIPTask
vReleaseNetworkBufferAndDescriptor
xQueueGenericSend
XMC_ETH_PHY_GetLinkStatus
vPortEnterCritical
XMC_ETH_PHY_GetLinkSpeed
XMC_ETH_PHY_GetLinkDuplex
XMC_ETH_MAC_EnableEvent
vPortExitCritical
vReleaseNetworkBuffer
XMC_ETH_MAC_ReturnTxDescriptor
XMC_ETH_MAC_Init
XMC_ETH_PHY_Init
memset
xQueueGenericCreate
xQueueCreateMutex
xTaskCreate
vQueueDelete
vTaskDelete
XMC_ETH_MAC_GetEventStatus
xQueueGiveFromISR
XMC_ETH_MAC_ClearEventStatus
