   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "FreeRTOS_ARP.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.vARPRefreshCacheEntry,"ax",%progbits
  19              	 .align 2
  20              	 .global vARPRefreshCacheEntry
  21              	 .thumb
  22              	 .thumb_func
  24              	vARPRefreshCacheEntry:
  25              	.LFB51:
  26              	 .file 1 "../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c"
   1:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*
   2:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * FreeRTOS+TCP V2.2.2
   3:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  *
   5:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * the Software without restriction, including without limitation the rights to
   8:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * subject to the following conditions:
  11:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  *
  12:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * copies or substantial portions of the Software.
  14:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  *
  15:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  *
  22:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * http://aws.amazon.com/freertos
  23:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * http://www.FreeRTOS.org
  24:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  */
  25:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  26:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /* Standard includes. */
  27:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include <stdint.h>
  28:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include <stdio.h>
  29:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  30:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /* FreeRTOS includes. */
  31:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "FreeRTOS.h"
  32:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "task.h"
  33:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "queue.h"
  34:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "semphr.h"
  35:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  36:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /* FreeRTOS+TCP includes. */
  37:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "FreeRTOS_IP.h"
  38:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "FreeRTOS_Sockets.h"
  39:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "FreeRTOS_IP_Private.h"
  40:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "FreeRTOS_ARP.h"
  41:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "FreeRTOS_UDP_IP.h"
  42:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "FreeRTOS_DHCP.h"
  43:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #if( ipconfigUSE_LLMNR == 1 )
  44:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	#include "FreeRTOS_DNS.h"
  45:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #endif /* ipconfigUSE_LLMNR */
  46:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "NetworkBufferManagement.h"
  47:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #include "NetworkInterface.h"
  48:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  49:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  50:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /* When the age of an entry in the ARP table reaches this value (it counts down
  51:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** to zero, so this is an old entry) an ARP request will be sent to see if the
  52:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** entry is still valid and can therefore be refreshed. */
  53:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #define arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST		( 3 )
  54:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  55:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /* The time between gratuitous ARPs. */
  56:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #ifndef arpGRATUITOUS_ARP_PERIOD
  57:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	#define arpGRATUITOUS_ARP_PERIOD					( pdMS_TO_TICKS( 20000U ) )
  58:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #endif
  59:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  60:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
  61:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  62:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*
  63:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * Lookup an MAC address in the ARP cache from the IP address.
  64:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  */
  65:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup, MACAddress_t * const pxMACAdd
  66:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  67:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
  68:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  69:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /* The ARP cache. */
  70:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** static ARPCacheRow_t xARPCache[ ipconfigARP_CACHE_ENTRIES ];
  71:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  72:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /* The time at which the last gratuitous ARP was sent.  Gratuitous ARPs are used
  73:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** to ensure ARP tables are up to date and to detect IP address conflicts. */
  74:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** static TickType_t xLastGratuitousARPTime = ( TickType_t ) 0;
  75:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  76:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*
  77:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * IP-clash detection is currently only used internally. When DHCP doesn't respond, the
  78:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * driver can try out a random LinkLayer IP address (169.254.x.x).  It will send out a
  79:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  * gratuitos ARP message and, after a period of time, check the variables here below:
  80:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c ****  */
  81:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #if( ipconfigARP_USE_CLASH_DETECTION != 0 )
  82:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* Becomes non-zero if another device responded to a gratuitos ARP message. */
  83:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	BaseType_t xARPHadIPClash;
  84:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* MAC-address of the other device containing the same IP-address. */
  85:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	MACAddress_t xARPClashMacAddress;
  86:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #endif /* ipconfigARP_USE_CLASH_DETECTION */
  87:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  88:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
  89:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  90:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
  91:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** {
  92:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** eFrameProcessingResult_t eReturn = eReleaseBuffer;
  93:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** ARPHeader_t *pxARPHeader;
  94:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;
  95:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  96:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	pxARPHeader = &( pxARPFrame->xARPHeader );
  97:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
  98:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* The field ulSenderProtocolAddress is badly aligned, copy byte-by-byte. */
  99:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	( void ) memcpy( ( void * ) ( &( ulSenderProtocolAddress ) ), ( const void * ) ( pxARPHeader->ucSe
 100:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
 101:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 102:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 103:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	traceARP_PACKET_RECEIVED();
 104:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 105:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* Don't do anything if the local IP address is zero because
 106:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	that means a DHCP request has not completed. */
 107:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 108:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 109:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		switch( pxARPHeader->usOperation )
 110:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 111:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			case ipARP_REQUEST	:
 112:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* The packet contained an ARP request.  Was it for the IP
 113:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				address of the node running this code? */
 114:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 115:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 116:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );
 117:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 118:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					/* The request is for the address of this node.  Add the
 119:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					entry into the ARP cache, or refresh the entry if it
 120:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					already exists. */
 121:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 122:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 123:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					/* Generate a reply payload in the same buffer. */
 124:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 125:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 126:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					{
 127:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						/* A double IP address is detected! */
 128:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						/* Give the sources MAC address the value of the broadcast address, will be swapped later */
 129:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						( void ) memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucB
 130:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 131:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						pxARPHeader->ulTargetProtocolAddress = 0UL;
 132:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					}
 133:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					else
 134:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					{
 135:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						( void ) memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAdd
 136:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 137:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					}
 138:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					( void ) memcpy( ( void * ) ( pxARPHeader->xSenderHardwareAddress.ucBytes ), ( const void * ) 
 139:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					( void ) memcpy( ( void * ) ( pxARPHeader->ucSenderProtocolAddress ), ( const void * ) ( ipLOC
 140:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 141:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					eReturn = eReturnEthernetFrame;
 142:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 143:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				break;
 144:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 145:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			case ipARP_REPLY :
 146:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
 147:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 148:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* Process received ARP frame to see if there is a clash. */
 149:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				#if( ipconfigARP_USE_CLASH_DETECTION != 0 )
 150:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 151:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					if( ulSenderProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 152:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					{
 153:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						xARPHadIPClash = pdTRUE;
 154:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						/* Remember the MAC-address of the other device which has the same IP-address. */
 155:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						( void ) memcpy( xARPClashMacAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, si
 156:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					}
 157:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 158:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				#endif /* ipconfigARP_USE_CLASH_DETECTION */
 159:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				break;
 160:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 161:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			default :
 162:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* Invalid. */
 163:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				break;
 164:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 165:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 166:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 167:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	return eReturn;
 168:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** }
 169:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 170:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 171:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #if( ipconfigUSE_ARP_REMOVE_ENTRY != 0 )
 172:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 173:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	uint32_t ulARPRemoveCacheEntryByMac( const MACAddress_t * pxMACAddress )
 174:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 175:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	BaseType_t x;
 176:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	uint32_t lResult = 0;
 177:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 178:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* For each entry in the ARP cache table. */
 179:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 180:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 181:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->u
 182:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 183:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				lResult = xARPCache[ x ].ulIPAddress;
 184:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				( void ) memset( &xARPCache[ x ], 0, sizeof( xARPCache[ x ] ) );
 185:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				break;
 186:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 187:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 188:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 189:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		return lResult;
 190:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 191:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 192:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
 193:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 194:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 195:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
 196:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** {
  27              	 .loc 1 196 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	.LVL0:
  32 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 36
  35              	 .cfi_offset 4,-36
  36              	 .cfi_offset 5,-32
  37              	 .cfi_offset 6,-28
  38              	 .cfi_offset 7,-24
  39              	 .cfi_offset 8,-20
  40              	 .cfi_offset 9,-16
  41              	 .cfi_offset 10,-12
  42              	 .cfi_offset 11,-8
  43              	 .cfi_offset 14,-4
  44 0004 83B0     	 sub sp,sp,#12
  45              	.LCFI1:
  46              	 .cfi_def_cfa_offset 48
  47              	.LVL1:
 197:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** BaseType_t x = 0;
 198:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** BaseType_t xIpEntry = -1;
 199:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** BaseType_t xMacEntry = -1;
 200:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** BaseType_t xUseEntry = 0;
 201:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** uint8_t ucMinAgeFound = 0U;
 202:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 203:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
 204:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* Only process the IP address if it is on the local network.
 205:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
 206:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	and netmask are still unknown. */
 207:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetwo
  48              	 .loc 1 207 0
  49 0006 474B     	 ldr r3,.L22
  50 0008 5B69     	 ldr r3,[r3,#20]
  51 000a 81EA0304 	 eor r4,r1,r3
  52 000e 464A     	 ldr r2,.L22+4
  53 0010 5268     	 ldr r2,[r2,#4]
  54 0012 1442     	 tst r4,r2
  55 0014 02D0     	 beq .L2
  56              	 .loc 1 207 0 is_stmt 0 discriminator 1
  57 0016 002B     	 cmp r3,#0
  58 0018 40F08180 	 bne .L1
  59              	.L2:
  60 001c 0F46     	 mov r7,r1
  61 001e 0646     	 mov r6,r0
  62 0020 424C     	 ldr r4,.L22+8
 196:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** BaseType_t x = 0;
  63              	 .loc 1 196 0 is_stmt 1
  64 0022 4FF0FF0B 	 mov fp,#255
  65 0026 0023     	 movs r3,#0
  66 0028 0193     	 str r3,[sp,#4]
  67 002a 4FF0FF38 	 mov r8,#-1
  68 002e C146     	 mov r9,r8
  69 0030 1D46     	 mov r5,r3
  70              	.LBB11:
 208:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 209:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #else
 210:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* If ipconfigARP_STORES_REMOTE_ADDRESSES is non-zero, IP addresses with
 211:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		a different netmask will also be stored.  After when replying to a UDP
 212:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		message from a different netmask, the IP address can be looped up and a
 213:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		reply sent.  This option is useful for systems with multiple gateways,
 214:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		the reply will surely arrive.  If ipconfigARP_STORES_REMOTE_ADDRESSES is
 215:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		zero the the gateway address is the only option. */
 216:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 217:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	if( pdTRUE )
 218:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #endif
 219:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 220:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* Start with the maximum possible number. */
 221:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		ucMinAgeFound--;
 222:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 223:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* For each entry in the ARP cache table. */
 224:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 225:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 226:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		BaseType_t xMatchingMAC;
 227:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 228:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( pxMACAddress != NULL )
 229:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 230:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->uc
  71              	 .loc 1 230 0
  72 0032 4FF0060A 	 mov r10,#6
  73              	.LVL2:
  74              	.L7:
 228:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
  75              	 .loc 1 228 0
  76 0036 002E     	 cmp r6,#0
  77 0038 5CD0     	 beq .L4
  78              	 .loc 1 230 0
  79 003a 2046     	 mov r0,r4
  80 003c 3146     	 mov r1,r6
  81 003e 5246     	 mov r2,r10
  82 0040 FFF7FEFF 	 bl memcmp
  83              	.LVL3:
  84 0044 B0FA80F0 	 clz r0,r0
  85 0048 4009     	 lsrs r0,r0,#5
  86              	.LVL4:
 231:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 232:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					xMatchingMAC = pdTRUE;
 233:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 234:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				else
 235:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 236:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					xMatchingMAC = pdFALSE;
 237:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 238:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 239:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			else
 240:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 241:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				xMatchingMAC = pdFALSE;
 242:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 243:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* Does this line in the cache table hold an entry for the IP
 244:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			address	being queried? */
 245:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
  87              	 .loc 1 245 0
  88 004a 54F8043C 	 ldr r3,[r4,#-4]
  89 004e BB42     	 cmp r3,r7
  90 0050 0AD1     	 bne .L5
 246:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 247:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				if( pxMACAddress == NULL )
 248:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 249:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					/* In case the parameter pxMACAddress is NULL, an entry will be reserved to
 250:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					indicate that there is an outstanding ARP request, This entry will have
 251:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					"ucValid == pdFALSE". */
 252:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					xIpEntry = x;
 253:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					break;
 254:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 255:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 256:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* See if the MAC-address also matches. */
 257:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				if( xMatchingMAC != pdFALSE )
  91              	 .loc 1 257 0
  92 0052 80B1     	 cbz r0,.L15
 258:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 259:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					/* This function will be called for each received packet
 260:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					As this is by far the most common path the coding standard
 261:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					is relaxed in this case and a return is permitted as an
 262:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					optimisation. */
 263:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
  93              	 .loc 1 263 0
  94 0054 364B     	 ldr r3,.L22+12
  95 0056 6A00     	 lsls r2,r5,#1
  96 0058 5119     	 adds r1,r2,r5
  97 005a 03EB8101 	 add r1,r3,r1,lsl#2
  98 005e 9620     	 movs r0,#150
  99              	.LVL5:
 100 0060 8872     	 strb r0,[r1,#10]
 264:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 101              	 .loc 1 264 0
 102 0062 0122     	 movs r2,#1
 103 0064 CA72     	 strb r2,[r1,#11]
 265:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					return;
 104              	 .loc 1 265 0
 105 0066 5AE0     	 b .L1
 106              	.LVL6:
 107              	.L5:
 266:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 267:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 268:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* Found an entry containing ulIPAddress, but the MAC address
 269:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
 270:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				for an ARP reply.  Still want to see if there is match with the
 271:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				given MAC address.ucBytes.  If found, either of the two entries
 272:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				must be cleared. */
 273:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				xIpEntry = x;
 274:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 275:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			else if( xMatchingMAC != pdFALSE )
 108              	 .loc 1 275 0
 109 0068 38B9     	 cbnz r0,.L16
 110              	.LVL7:
 111              	.L12:
 276:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 277:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* Found an entry with the given MAC-address, but the IP-address
 278:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				is different.  Continue looping to find a possible match with
 279:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				ulIPAddress. */
 280:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	#if( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
 281:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* If ARP stores the MAC address of IP addresses outside the
 282:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				network, than the MAC address of the gateway should not be
 283:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				overwritten. */
 284:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				BaseType_t bIsLocal[ 2 ];
 285:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL
 286:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				bIsLocal[ 1 ] = ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POI
 287:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
 288:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 289:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					xMacEntry = x;
 290:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 291:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	#else
 292:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				xMacEntry = x;
 293:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	#endif
 294:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 295:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* _HT_
 296:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
 297:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 112              	 .loc 1 297 0
 113 006a A379     	 ldrb r3,[r4,#6]
 114 006c 5B45     	 cmp r3,fp
 115 006e 05D2     	 bcs .L6
 298:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 299:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* As the table is traversed, remember the table row that
 300:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				contains the oldest entry (the lowest age count, as ages are
 301:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				decremented to zero) so the row can be re-used if this function
 302:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				needs to add an entry that does not already exist. */
 303:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				ucMinAgeFound = xARPCache[ x ].ucAge;
 116              	 .loc 1 303 0
 117 0070 9B46     	 mov fp,r3
 118              	.LVL8:
 297:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 119              	 .loc 1 297 0
 120 0072 0195     	 str r5,[sp,#4]
 121 0074 02E0     	 b .L6
 122              	.LVL9:
 123              	.L15:
 124 0076 A946     	 mov r9,r5
 125 0078 00E0     	 b .L6
 126              	.L16:
 127 007a A846     	 mov r8,r5
 128              	.LVL10:
 129              	.L6:
 130              	.LBE11:
 224:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 131              	 .loc 1 224 0 discriminator 2
 132 007c 0135     	 adds r5,r5,#1
 133              	.LVL11:
 134 007e 0C34     	 adds r4,r4,#12
 135 0080 062D     	 cmp r5,#6
 136 0082 D8D1     	 bne .L7
 137 0084 00E0     	 b .L11
 138              	.LVL12:
 139              	.L18:
 140              	.LBB12:
 245:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 141              	 .loc 1 245 0
 142 0086 A946     	 mov r9,r5
 143              	.LVL13:
 144              	.L11:
 145              	.LBE12:
 304:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				xUseEntry = x;
 305:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 306:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			else
 307:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 308:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* Nothing happes to this cache entry for now. */
 309:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 310:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 311:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 312:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		if( xMacEntry >= 0 )
 146              	 .loc 1 312 0
 147 0088 B8F1000F 	 cmp r8,#0
 148 008c 0FDB     	 blt .L8
 149              	.LVL14:
 313:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 314:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			xUseEntry = xMacEntry;
 315:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 316:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( xIpEntry >= 0 )
 150              	 .loc 1 316 0
 151 008e B9F1000F 	 cmp r9,#0
 152 0092 34DB     	 blt .L9
 317:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 318:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* Both the MAC address as well as the IP address were found in
 319:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				different locations: clear the entry which matches the
 320:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				IP-address */
 321:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				( void ) memset( &( xARPCache[ xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 153              	 .loc 1 321 0
 154 0094 2649     	 ldr r1,.L22+12
 155 0096 09EB4909 	 add r9,r9,r9,lsl#1
 156              	.LVL15:
 157 009a 4FEA8909 	 lsl r9,r9,#2
 158 009e 01EB0903 	 add r3,r1,r9
 159 00a2 0022     	 movs r2,#0
 160 00a4 41F80920 	 str r2,[r1,r9]
 161 00a8 5A60     	 str r2,[r3,#4]
 162 00aa 9A60     	 str r2,[r3,#8]
 163 00ac 30E0     	 b .L10
 164              	.LVL16:
 165              	.L8:
 322:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 323:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 324:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		else if( xIpEntry >= 0 )
 166              	 .loc 1 324 0
 167 00ae B9F1000F 	 cmp r9,#0
 168 00b2 2CDA     	 bge .L17
 169 00b4 DDF80480 	 ldr r8,[sp,#4]
 170 00b8 21E0     	 b .L9
 171              	.LVL17:
 172              	.L13:
 325:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 326:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* An entry containing the IP-address was found, but it had a different MAC address */
 327:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			xUseEntry = xIpEntry;
 328:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 329:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		else
 330:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 331:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* No matching entry found. */
 332:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 333:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 334:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* If the entry was not found, we use the oldest entry and set the IPaddress */
 335:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 336:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 337:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		if( pxMACAddress != NULL )
 338:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 339:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMA
 173              	 .loc 1 339 0
 174 00ba 1D4A     	 ldr r2,.L22+12
 175 00bc 4FEA4801 	 lsl r1,r8,#1
 176 00c0 01EB0803 	 add r3,r1,r8
 177 00c4 02EB8303 	 add r3,r2,r3,lsl#2
 178 00c8 3068     	 ldr r0,[r6]
 179 00ca 5860     	 str r0,[r3,#4]
 180 00cc B088     	 ldrh r0,[r6,#4]
 181 00ce 1881     	 strh r0,[r3,#8]
 340:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 341:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
 342:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* And this entry does not need immediate attention */
 343:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 182              	 .loc 1 343 0
 183 00d0 9620     	 movs r0,#150
 184 00d2 9872     	 strb r0,[r3,#10]
 344:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 185              	 .loc 1 344 0
 186 00d4 1A46     	 mov r2,r3
 187 00d6 0123     	 movs r3,#1
 188 00d8 D372     	 strb r3,[r2,#11]
 189 00da 20E0     	 b .L1
 190              	.LVL18:
 191              	.L20:
 345:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 346:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		else if( xIpEntry < 0 )
 347:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 348:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 192              	 .loc 1 348 0
 193 00dc 144B     	 ldr r3,.L22+12
 194 00de 4FEA4802 	 lsl r2,r8,#1
 195 00e2 02EB0801 	 add r1,r2,r8
 196 00e6 03EB8101 	 add r1,r3,r1,lsl#2
 197 00ea 0520     	 movs r0,#5
 198 00ec 8872     	 strb r0,[r1,#10]
 349:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 199              	 .loc 1 349 0
 200 00ee 0022     	 movs r2,#0
 201 00f0 CA72     	 strb r2,[r1,#11]
 202 00f2 14E0     	 b .L1
 203              	.LVL19:
 204              	.L4:
 205              	.LBB13:
 245:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 206              	 .loc 1 245 0
 207 00f4 54F8043C 	 ldr r3,[r4,#-4]
 208 00f8 BB42     	 cmp r3,r7
 209 00fa B6D1     	 bne .L12
 210 00fc C3E7     	 b .L18
 211              	.LVL20:
 212              	.L9:
 213              	.LBE13:
 335:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 214              	 .loc 1 335 0
 215 00fe 08EB4803 	 add r3,r8,r8,lsl#1
 216 0102 0B4A     	 ldr r2,.L22+12
 217 0104 42F82370 	 str r7,[r2,r3,lsl#2]
 337:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 218              	 .loc 1 337 0
 219 0108 002E     	 cmp r6,#0
 220 010a D6D1     	 bne .L13
 221 010c E6E7     	 b .L20
 222              	.LVL21:
 223              	.L17:
 224 010e C846     	 mov r8,r9
 225              	.LVL22:
 226              	.L10:
 335:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 227              	 .loc 1 335 0
 228 0110 08EB4803 	 add r3,r8,r8,lsl#1
 229 0114 064A     	 ldr r2,.L22+12
 230 0116 42F82370 	 str r7,[r2,r3,lsl#2]
 337:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 231              	 .loc 1 337 0
 232 011a 002E     	 cmp r6,#0
 233 011c CDD1     	 bne .L13
 234              	.LVL23:
 235              	.L1:
 350:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 351:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		else
 352:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 353:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* Nothing will be stored. */
 354:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 355:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 356:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** }
 236              	 .loc 1 356 0
 237 011e 03B0     	 add sp,sp,#12
 238              	.LCFI2:
 239              	 .cfi_def_cfa_offset 36
 240              	 
 241 0120 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 242              	.L23:
 243              	 .align 2
 244              	.L22:
 245 0124 00000000 	 .word xDefaultPartUDPPacketHeader
 246 0128 00000000 	 .word xNetworkAddressing
 247 012c 04000000 	 .word .LANCHOR0+4
 248 0130 00000000 	 .word .LANCHOR0
 249              	 .cfi_endproc
 250              	.LFE51:
 252              	 .section .text.eARPProcessPacket,"ax",%progbits
 253              	 .align 2
 254              	 .global eARPProcessPacket
 255              	 .thumb
 256              	 .thumb_func
 258              	eARPProcessPacket:
 259              	.LFB50:
  91:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** eFrameProcessingResult_t eReturn = eReleaseBuffer;
 260              	 .loc 1 91 0
 261              	 .cfi_startproc
 262              	 
 263              	 
 264              	.LVL24:
 265 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 266              	.LCFI3:
 267              	 .cfi_def_cfa_offset 20
 268              	 .cfi_offset 4,-20
 269              	 .cfi_offset 5,-16
 270              	 .cfi_offset 6,-12
 271              	 .cfi_offset 7,-8
 272              	 .cfi_offset 14,-4
 273 0002 83B0     	 sub sp,sp,#12
 274              	.LCFI4:
 275              	 .cfi_def_cfa_offset 32
 276 0004 0346     	 mov r3,r0
 277              	.LVL25:
  99:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
 278              	 .loc 1 99 0
 279 0006 C069     	 ldr r0,[r0,#28]
 280              	.LVL26:
 281 0008 0190     	 str r0,[sp,#4]
 101:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 282              	 .loc 1 101 0
 283 000a D3F82650 	 ldr r5,[r3,#38]
 284              	.LVL27:
 107:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 285              	 .loc 1 107 0
 286 000e 2B4A     	 ldr r2,.L35
 287 0010 5269     	 ldr r2,[r2,#20]
 288 0012 002A     	 cmp r2,#0
 289 0014 4AD0     	 beq .L30
 290 0016 1C46     	 mov r4,r3
 109:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 291              	 .loc 1 109 0
 292 0018 9B8A     	 ldrh r3,[r3,#20]
 293              	.LVL28:
 294 001a B3F5807F 	 cmp r3,#256
 295 001e 03D0     	 beq .L26
 296 0020 B3F5007F 	 cmp r3,#512
 297 0024 3BD0     	 beq .L27
 298 0026 43E0     	 b .L33
 299              	.L26:
 114:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 300              	 .loc 1 114 0
 301 0028 9542     	 cmp r5,r2
 302 002a 43D1     	 bne .L32
 121:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 303              	 .loc 1 121 0
 304 002c 04F11606 	 add r6,r4,#22
 305 0030 019F     	 ldr r7,[sp,#4]
 306 0032 3046     	 mov r0,r6
 307 0034 3946     	 mov r1,r7
 308 0036 FFF7FEFF 	 bl vARPRefreshCacheEntry
 309              	.LVL29:
 124:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 310              	 .loc 1 124 0
 311 003a 0023     	 movs r3,#0
 312 003c 2375     	 strb r3,[r4,#20]
 313 003e 0223     	 movs r3,#2
 314 0040 6375     	 strb r3,[r4,#21]
 125:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					{
 315              	 .loc 1 125 0
 316 0042 BD42     	 cmp r5,r7
 317 0044 1BD1     	 bne .L28
 129:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 318              	 .loc 1 129 0
 319 0046 1E4B     	 ldr r3,.L35+4
 320 0048 1A68     	 ldr r2,[r3]
 321 004a C4F80620 	 str r2,[r4,#6]
 322 004e 9B88     	 ldrh r3,[r3,#4]
 323 0050 6381     	 strh r3,[r4,#10]
 130:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						pxARPHeader->ulTargetProtocolAddress = 0UL;
 324              	 .loc 1 130 0
 325 0052 0023     	 movs r3,#0
 326 0054 84F82030 	 strb r3,[r4,#32]
 327 0058 84F82130 	 strb r3,[r4,#33]
 328 005c 84F82230 	 strb r3,[r4,#34]
 329 0060 84F82330 	 strb r3,[r4,#35]
 330 0064 84F82430 	 strb r3,[r4,#36]
 331 0068 84F82530 	 strb r3,[r4,#37]
 131:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					}
 332              	 .loc 1 131 0
 333 006c 84F82630 	 strb r3,[r4,#38]
 334 0070 84F82730 	 strb r3,[r4,#39]
 335 0074 84F82830 	 strb r3,[r4,#40]
 336 0078 84F82930 	 strb r3,[r4,#41]
 337 007c 05E0     	 b .L29
 338              	.L28:
 135:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 						pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 339              	 .loc 1 135 0
 340 007e 3368     	 ldr r3,[r6]
 341 0080 2362     	 str r3,[r4,#32]
 342 0082 B388     	 ldrh r3,[r6,#4]
 343 0084 A384     	 strh r3,[r4,#36]
 136:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					}
 344              	 .loc 1 136 0
 345 0086 C4F82670 	 str r7,[r4,#38]
 346              	.L29:
 138:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					( void ) memcpy( ( void * ) ( pxARPHeader->ucSenderProtocolAddress ), ( const void * ) ( ipLOC
 347              	 .loc 1 138 0
 348 008a 0C4B     	 ldr r3,.L35
 349 008c 1868     	 ldr r0,[r3]
 350 008e C4F81600 	 str r0,[r4,#22]
 351 0092 9A88     	 ldrh r2,[r3,#4]
 352 0094 B280     	 strh r2,[r6,#4]
 139:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 353              	 .loc 1 139 0
 354 0096 5869     	 ldr r0,[r3,#20]
 355 0098 E061     	 str r0,[r4,#28]
 356              	.LVL30:
 141:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 357              	 .loc 1 141 0
 358 009a 0220     	 movs r0,#2
 359 009c 0BE0     	 b .L25
 360              	.LVL31:
 361              	.L27:
 147:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* Process received ARP frame to see if there is a clash. */
 362              	 .loc 1 147 0
 363 009e 04F11600 	 add r0,r4,#22
 364 00a2 0199     	 ldr r1,[sp,#4]
 365 00a4 FFF7FEFF 	 bl vARPRefreshCacheEntry
 366              	.LVL32:
  92:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** ARPHeader_t *pxARPHeader;
 367              	 .loc 1 92 0
 368 00a8 0020     	 movs r0,#0
 159:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 369              	 .loc 1 159 0
 370 00aa 04E0     	 b .L25
 371              	.LVL33:
 372              	.L30:
  92:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** ARPHeader_t *pxARPHeader;
 373              	 .loc 1 92 0
 374 00ac 0020     	 movs r0,#0
 375 00ae 02E0     	 b .L25
 376              	.LVL34:
 377              	.L33:
 378 00b0 0020     	 movs r0,#0
 379 00b2 00E0     	 b .L25
 380              	.L32:
 381 00b4 0020     	 movs r0,#0
 382              	.LVL35:
 383              	.L25:
 168:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 384              	 .loc 1 168 0
 385 00b6 03B0     	 add sp,sp,#12
 386              	.LCFI5:
 387              	 .cfi_def_cfa_offset 20
 388              	 
 389 00b8 F0BD     	 pop {r4,r5,r6,r7,pc}
 390              	.LVL36:
 391              	.L36:
 392 00ba 00BF     	 .align 2
 393              	.L35:
 394 00bc 00000000 	 .word xDefaultPartUDPPacketHeader
 395 00c0 00000000 	 .word xBroadcastMACAddress
 396              	 .cfi_endproc
 397              	.LFE50:
 399              	 .section .text.eARPGetCacheEntry,"ax",%progbits
 400              	 .align 2
 401              	 .global eARPGetCacheEntry
 402              	 .thumb
 403              	 .thumb_func
 405              	eARPGetCacheEntry:
 406              	.LFB52:
 357:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 358:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 359:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #if( ipconfigUSE_ARP_REVERSED_LOOKUP == 1 )
 360:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	eARPLookupResult_t eARPGetCacheEntryByMac( MACAddress_t * const pxMACAddress, uint32_t *pulIPAddre
 361:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 362:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	BaseType_t x;
 363:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	eARPLookupResult_t eReturn = eARPCacheMiss;
 364:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 365:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* Loop through each entry in the ARP cache. */
 366:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 367:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 368:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* Does this row in the ARP cache table hold an entry for the MAC
 369:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			address being searched? */
 370:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( memcmp( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) ) 
 371:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 372:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				*pulIPAddress = xARPCache[ x ].ulIPAddress;
 373:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				eReturn = eARPCacheHit;
 374:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				break;
 375:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 376:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 377:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 378:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		return eReturn;
 379:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 380:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #endif /* ipconfigUSE_ARP_REVERSED_LOOKUP */
 381:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 382:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 383:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 384:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** eARPLookupResult_t eARPGetCacheEntry( uint32_t *pulIPAddress, MACAddress_t * const pxMACAddress )
 385:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** {
 407              	 .loc 1 385 0
 408              	 .cfi_startproc
 409              	 
 410              	 
 411              	.LVL37:
 412 0000 70B5     	 push {r4,r5,r6,lr}
 413              	.LCFI6:
 414              	 .cfi_def_cfa_offset 16
 415              	 .cfi_offset 4,-16
 416              	 .cfi_offset 5,-12
 417              	 .cfi_offset 6,-8
 418              	 .cfi_offset 14,-4
 419 0002 0446     	 mov r4,r0
 420 0004 0E46     	 mov r6,r1
 386:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** eARPLookupResult_t eReturn;
 387:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** uint32_t ulAddressToLookup;
 388:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** ulAddressToLookup = *pulIPAddress;
 421              	 .loc 1 388 0
 422 0006 0568     	 ldr r5,[r0]
 423              	.LVL38:
 389:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 390:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #if( ipconfigUSE_LLMNR == 1 )
 391:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	if( ulAddressToLookup == ipLLMNR_IP_ADDR )	/* Is in network byte order. */
 392:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 393:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* The LLMNR IP-address has a fixed virtual MAC address. */
 394:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		( void ) memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 395:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		eReturn = eARPCacheHit;
 396:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 397:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	else
 398:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #endif
 399:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 424              	 .loc 1 399 0
 425 0008 2846     	 mov r0,r5
 426              	.LVL39:
 427 000a FFF7FEFF 	 bl xIsIPv4Multicast
 428              	.LVL40:
 429 000e 28B1     	 cbz r0,.L38
 400:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 401:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* Get the lowest 23 bits of the IP-address. */
 402:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 430              	 .loc 1 402 0
 431 0010 2846     	 mov r0,r5
 432 0012 3146     	 mov r1,r6
 433 0014 FFF7FEFF 	 bl vSetMultiCastIPv4MacAddress
 434              	.LVL41:
 403:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 404:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		eReturn = eARPCacheHit;
 435              	 .loc 1 404 0
 436 0018 0120     	 movs r0,#1
 437 001a 70BD     	 pop {r4,r5,r6,pc}
 438              	.LVL42:
 439              	.L38:
 405:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 406:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255
 440              	 .loc 1 406 0
 441 001c 2368     	 ldr r3,[r4]
 442 001e B3F1FF3F 	 cmp r3,#-1
 443 0022 03D0     	 beq .L40
 407:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 1
 444              	 .loc 1 407 0 discriminator 1
 445 0024 224A     	 ldr r2,.L57
 406:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 1
 446              	 .loc 1 406 0 discriminator 1
 447 0026 1269     	 ldr r2,[r2,#16]
 448 0028 9342     	 cmp r3,r2
 449 002a 06D1     	 bne .L41
 450              	.L40:
 408:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 409:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* This is a broadcast so it uses the broadcast MAC address. */
 410:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 451              	 .loc 1 410 0
 452 002c 214B     	 ldr r3,.L57+4
 453 002e 1A68     	 ldr r2,[r3]
 454 0030 3260     	 str r2,[r6]
 455 0032 9B88     	 ldrh r3,[r3,#4]
 456 0034 B380     	 strh r3,[r6,#4]
 457              	.LVL43:
 411:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		eReturn = eARPCacheHit;
 458              	 .loc 1 411 0
 459 0036 0120     	 movs r0,#1
 460 0038 70BD     	 pop {r4,r5,r6,pc}
 461              	.LVL44:
 462              	.L41:
 412:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 413:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 463              	 .loc 1 413 0
 464 003a 1F4A     	 ldr r2,.L57+8
 465 003c 5269     	 ldr r2,[r2,#20]
 466 003e 4AB3     	 cbz r2,.L49
 467              	.LVL45:
 414:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 415:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* The IP address has not yet been assigned, so there is nothing that
 416:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		can be done. */
 417:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		eReturn = eCantSendPacket;
 418:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 419:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	else
 420:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 421:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		eReturn = eARPCacheMiss;
 422:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 423:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetw
 468              	 .loc 1 423 0
 469 0040 5A40     	 eors r2,r2,r3
 470 0042 1B49     	 ldr r1,.L57
 471 0044 4968     	 ldr r1,[r1,#4]
 472 0046 0A42     	 tst r2,r1
 473 0048 28D0     	 beq .L42
 424:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 425:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* No matching end-point is found, look for a gateway. */
 426:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #if( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
 427:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			eReturn = prvCacheLookup( *pulIPAddress, pxMACAddress );
 428:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 429:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( eReturn == eARPCacheHit )
 430:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 431:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* The stack is configured to store 'remote IP addresses', i.e. addresses
 432:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				belonging to a different the netmask.  prvCacheLookup() returned a hit, so
 433:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				the MAC address is known. */
 434:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 435:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			else
 436:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #endif
 437:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 438:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* The IP address is off the local network, so look up the
 439:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				hardware address of the router, if any. */
 440:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				if( xNetworkAddressing.ulGatewayAddress != ( uint32_t ) 0U )
 474              	 .loc 1 440 0
 475 004a 194A     	 ldr r2,.L57
 476 004c 9168     	 ldr r1,[r2,#8]
 477 004e 29B3     	 cbz r1,.L42
 478              	.LVL46:
 479              	.L48:
 480              	.LBB16:
 481              	.LBB17:
 441:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 442:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 443:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 444:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				else
 445:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 446:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					ulAddressToLookup = *pulIPAddress;
 447:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 448:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 449:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 450:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		else
 451:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 452:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* The IP address is on the local network, so lookup the requested
 453:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			IP address directly. */
 454:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			ulAddressToLookup = *pulIPAddress;
 455:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 456:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 457:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
 458:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		if( eReturn == eARPCacheMiss )	/*lint !e774: (Info -- Boolean within 'if' always evaluates to Tru
 459:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		#else
 460:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* No cache look-up was done, so the result is still 'eARPCacheMiss'. */
 461:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		#endif
 462:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 463:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( ulAddressToLookup == 0UL )
 464:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 465:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* The address is not on the local network, and there is not a
 466:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				router. */
 467:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				eReturn = eCantSendPacket;
 468:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 469:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			else
 470:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 471:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 472:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 473:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				if( eReturn == eARPCacheMiss )
 474:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 475:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					/* It might be that the ARP has to go to the gateway. */
 476:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					*pulIPAddress = ulAddressToLookup;
 477:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 478:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 479:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 480:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 481:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 482:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	return eReturn;
 483:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** }
 484:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 485:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 486:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 487:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup, MACAddress_t * const pxMACAdd
 488:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** {
 489:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** BaseType_t x;
 490:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** eARPLookupResult_t eReturn = eARPCacheMiss;
 491:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 492:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* Loop through each entry in the ARP cache. */
 493:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 494:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 495:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* Does this row in the ARP cache table hold an entry for the IP address
 496:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		being queried? */
 497:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 482              	 .loc 1 497 0
 483 0050 1A4B     	 ldr r3,.L57+12
 484 0052 1B68     	 ldr r3,[r3]
 485 0054 9942     	 cmp r1,r3
 486 0056 05D0     	 beq .L50
 487 0058 184A     	 ldr r2,.L57+12
 493:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 488              	 .loc 1 493 0
 489 005a 0123     	 movs r3,#1
 490              	.LVL47:
 491              	.L46:
 492              	 .loc 1 497 0
 493 005c D068     	 ldr r0,[r2,#12]
 494 005e 8142     	 cmp r1,r0
 495 0060 13D1     	 bne .L44
 496 0062 00E0     	 b .L43
 497              	.LVL48:
 498              	.L50:
 499 0064 0023     	 movs r3,#0
 500              	.LVL49:
 501              	.L43:
 498:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 499:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* A matching valid entry was found. */
 500:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 502              	 .loc 1 500 0
 503 0066 03EB4302 	 add r2,r3,r3,lsl#1
 504 006a 1449     	 ldr r1,.L57+12
 505              	.LVL50:
 506 006c 01EB8202 	 add r2,r1,r2,lsl#2
 507 0070 D27A     	 ldrb r2,[r2,#11]
 508 0072 D2B1     	 cbz r2,.L51
 501:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 502:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* This entry is waiting an ARP reply, so is not valid. */
 503:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				eReturn = eCantSendPacket;
 504:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 505:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			else
 506:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 507:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* A valid entry was found. */
 508:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_
 509              	 .loc 1 508 0
 510 0074 03EB4303 	 add r3,r3,r3,lsl#1
 511 0078 01EB8303 	 add r3,r1,r3,lsl#2
 512 007c 53F8040F 	 ldr r0,[r3,#4]!
 513 0080 3060     	 str r0,[r6]
 514 0082 9B88     	 ldrh r3,[r3,#4]
 515 0084 B380     	 strh r3,[r6,#4]
 516              	.LVL51:
 509:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				eReturn = eARPCacheHit;
 517              	 .loc 1 509 0
 518 0086 0120     	 movs r0,#1
 519 0088 70BD     	 pop {r4,r5,r6,pc}
 520              	.LVL52:
 521              	.L44:
 493:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 522              	 .loc 1 493 0
 523 008a 0133     	 adds r3,r3,#1
 524              	.LVL53:
 525 008c 0C32     	 adds r2,r2,#12
 526 008e 062B     	 cmp r3,#6
 527 0090 E4D1     	 bne .L46
 528 0092 07E0     	 b .L55
 529              	.LVL54:
 530              	.L49:
 531              	.LBE17:
 532              	.LBE16:
 417:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 533              	 .loc 1 417 0
 534 0094 0220     	 movs r0,#2
 535 0096 70BD     	 pop {r4,r5,r6,pc}
 536              	.LVL55:
 537              	.L52:
 467:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 538              	 .loc 1 467 0
 539 0098 0220     	 movs r0,#2
 540 009a 70BD     	 pop {r4,r5,r6,pc}
 541              	.LVL56:
 542              	.L42:
 463:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 543              	 .loc 1 463 0
 544 009c 002B     	 cmp r3,#0
 545 009e FBD0     	 beq .L52
 546 00a0 1946     	 mov r1,r3
 547 00a2 D5E7     	 b .L48
 548              	.LVL57:
 549              	.L55:
 476:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 550              	 .loc 1 476 0
 551 00a4 2160     	 str r1,[r4]
 471:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 552              	 .loc 1 471 0
 553 00a6 0020     	 movs r0,#0
 554 00a8 70BD     	 pop {r4,r5,r6,pc}
 555              	.LVL58:
 556              	.L51:
 557              	.LBB19:
 558              	.LBB18:
 503:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 559              	 .loc 1 503 0
 560 00aa 0220     	 movs r0,#2
 561              	.LVL59:
 562              	.LBE18:
 563              	.LBE19:
 483:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 564              	 .loc 1 483 0
 565 00ac 70BD     	 pop {r4,r5,r6,pc}
 566              	.LVL60:
 567              	.L58:
 568 00ae 00BF     	 .align 2
 569              	.L57:
 570 00b0 00000000 	 .word xNetworkAddressing
 571 00b4 00000000 	 .word xBroadcastMACAddress
 572 00b8 00000000 	 .word xDefaultPartUDPPacketHeader
 573 00bc 00000000 	 .word .LANCHOR0
 574              	 .cfi_endproc
 575              	.LFE52:
 577              	 .section .text.vARPSendGratuitous,"ax",%progbits
 578              	 .align 2
 579              	 .global vARPSendGratuitous
 580              	 .thumb
 581              	 .thumb_func
 583              	vARPSendGratuitous:
 584              	.LFB55:
 510:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 511:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			break;
 512:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 513:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 514:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 515:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	return eReturn;
 516:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** }
 517:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 518:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 519:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** void vARPAgeCache( void )
 520:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** {
 521:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** BaseType_t x;
 522:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** TickType_t xTimeNow;
 523:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 524:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* Loop through each entry in the ARP cache. */
 525:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 526:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 527:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		/* If the entry is valid (its age is greater than zero). */
 528:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		if( xARPCache[ x ].ucAge > 0U )
 529:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 530:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* Decrement the age value of the entry in this ARP cache table row.
 531:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			When the age reaches zero it is no longer considered valid. */
 532:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			( xARPCache[ x ].ucAge )--;
 533:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 534:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* If the entry is not yet valid, then it is waiting an ARP
 535:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			reply, and the ARP request should be retransmitted. */
 536:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 537:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 538:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 539:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 540:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 541:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 542:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* This entry will get removed soon.  See if the MAC address is
 543:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				still valid to prevent this happening. */
 544:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
 545:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 546:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 547:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			else
 548:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 549:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* The age has just ticked down, with nothing to do. */
 550:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 551:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 552:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( xARPCache[ x ].ucAge == 0U )
 553:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 554:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* The entry is no longer valid.  Wipe it out. */
 555:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
 556:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				xARPCache[ x ].ulIPAddress = 0UL;
 557:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 558:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 559:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 560:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 561:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	xTimeNow = xTaskGetTickCount ();
 562:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 563:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( 
 564:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 565:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 566:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		xLastGratuitousARPTime = xTimeNow;
 567:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 568:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** }
 569:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 570:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 571:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** void vARPSendGratuitous( void )
 572:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** {
 585              	 .loc 1 572 0
 586              	 .cfi_startproc
 587              	 
 588              	 
 589 0000 08B5     	 push {r3,lr}
 590              	.LCFI7:
 591              	 .cfi_def_cfa_offset 8
 592              	 .cfi_offset 3,-8
 593              	 .cfi_offset 14,-4
 573:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
 574:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	time vARPAgeCache() is called. */
 575:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	xLastGratuitousARPTime = ( TickType_t ) 0;
 594              	 .loc 1 575 0
 595 0002 0022     	 movs r2,#0
 596 0004 024B     	 ldr r3,.L61
 597 0006 1A60     	 str r2,[r3]
 576:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 577:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* Let the IP-task call vARPAgeCache(). */
 578:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	( void ) xSendEventToIPTask( eARPTimerEvent );
 598              	 .loc 1 578 0
 599 0008 0320     	 movs r0,#3
 600 000a FFF7FEFF 	 bl xSendEventToIPTask
 601              	.LVL61:
 602 000e 08BD     	 pop {r3,pc}
 603              	.L62:
 604              	 .align 2
 605              	.L61:
 606 0010 00000000 	 .word .LANCHOR1
 607              	 .cfi_endproc
 608              	.LFE55:
 610              	 .section .text.vARPGenerateRequestPacket,"ax",%progbits
 611              	 .align 2
 612              	 .global vARPGenerateRequestPacket
 613              	 .thumb
 614              	 .thumb_func
 616              	vARPGenerateRequestPacket:
 617              	.LFB57:
 579:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** }
 580:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 581:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 582:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
 583:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** {
 584:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 585:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 586:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* This is called from the context of the IP event task, so a block time
 587:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	must not be used. */
 588:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 589:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 590:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	if( pxNetworkBuffer != NULL )
 591:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 592:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 593:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		vARPGenerateRequestPacket( pxNetworkBuffer );
 594:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 595:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		#if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 596:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 597:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 598:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 599:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			BaseType_t xIndex;
 600:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 601:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHE
 602:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 603:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 604:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 605:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 606:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 607:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 608:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		#endif
 609:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 610:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		if( xIsCallingFromIPTask() != 0 )
 611:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 612:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* Only the IP-task is allowed to call this function directly. */
 613:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 614:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 615:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		else
 616:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 617:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		IPStackEvent_t xSendEvent;
 618:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 619:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			/* Send a message to the IP-task to send this ARP packet. */
 620:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			xSendEvent.eEventType = eNetworkTxEvent;
 621:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			xSendEvent.pvData = pxNetworkBuffer;
 622:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 623:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 624:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* Failed to send the message, so release the network buffer. */
 625:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 626:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 627:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 628:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 629:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** }
 630:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 631:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
 632:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** {
 618              	 .loc 1 632 0
 619              	 .cfi_startproc
 620              	 
 621              	 
 622              	.LVL62:
 633:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /* Part of the Ethernet and ARP headers are always constant when sending an IPv4
 634:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** ARP packet.  This array defines the constant parts, allowing this part of the
 635:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** packet to be filled in using a simple memcpy() instead of individual writes. */
 636:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** static const uint8_t xDefaultPartARPPacketHeader[] =
 637:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** {
 638:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 	/* Ethernet destination address. */
 639:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* Ethernet source address. */
 640:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	0x08, 0x06, 							/* Ethernet frame type (ipARP_FRAME_TYPE). */
 641:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	0x00, 0x01, 							/* usHardwareType (ipARP_HARDWARE_TYPE_ETHERNET). */
 642:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	0x08, 0x00,								/* usProtocolType. */
 643:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	ipMAC_ADDRESS_LENGTH_BYTES, 			/* ucHardwareAddressLength. */
 644:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	ipIP_ADDRESS_LENGTH_BYTES, 				/* ucProtocolAddressLength. */
 645:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	0x00, 0x01, 							/* usOperation (ipARP_REQUEST). */
 646:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* xSenderHardwareAddress. */
 647:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	0x00, 0x00, 0x00, 0x00, 				/* ulSenderProtocolAddress. */
 648:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00 		/* xTargetHardwareAddress. */
 649:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** };
 650:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 651:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** ARPPacket_t *pxARPPacket;
 652:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 653:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* Buffer allocation ensures that buffers always have space
 654:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	for an ARP packet. See buffer allocation implementations 1
 655:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	and 2 under portable/BufferManagement. */
 656:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	configASSERT( pxNetworkBuffer != NULL );
 623              	 .loc 1 656 0
 624 0000 40B9     	 cbnz r0,.L64
 625              	.LBB20:
 626              	.LBB21:
 627              	 .file 2 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * FreeRTOS Kernel V10.4.1
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * subject to the following conditions:
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * copies or substantial portions of the Software.
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * https://www.FreeRTOS.org
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * https://github.com/FreeRTOS
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * 1 tab == 4 spaces!
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef PORTMACRO_H
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define PORTMACRO_H
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifdef __cplusplus
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         extern "C" {
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Port specific definitions.
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * given hardware and compiler.
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * These settings should not be altered.
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *-----------------------------------------------------------
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Type definitions. */
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portCHAR          char
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portFLOAT         float
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDOUBLE        double
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portLONG          long
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSHORT         short
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portBASE_TYPE     long
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef long             BaseType_t;
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         typedef uint16_t     TickType_t;
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #else
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         typedef uint32_t     TickType_t;
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * not need to be guarded with a critical section. */
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specifics. */
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Scheduler utilities. */
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portYIELD()                                 \
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {                                                   \
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****                                                         \
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Critical section management. */
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     extern void vPortEnterCritical( void );
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     extern void vPortExitCritical( void );
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * (which build with all the ports) will build. */
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Tickless idle/low power functionality. */
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specific optimisations. */
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Generic helper function. */
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             uint8_t ucReturn;
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             return ucReturn;
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Check the configuration. */
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #endif
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifdef configASSERT
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* portNOP() is not required by this port. */
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNOP()
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portINLINE              __inline
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef portFORCE_INLINE
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         BaseType_t xReturn;
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             xReturn = pdFALSE;
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         else
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             xReturn = pdTRUE;
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         return xReturn;
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulNewBASEPRI;
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile
 628              	 .loc 2 197 0
 629              	
 630 0002 4FF01403 	 mov r3,#20
 631 0006 83F31188 	 msr basepri,r3
 632 000a BFF36F8F 	 isb 
 633 000e BFF34F8F 	 dsb 
 634              	
 635              	
 636              	.LVL63:
 637              	 .thumb
 638              	.L65:
 639              	.LBE21:
 640              	.LBE20:
 641              	 .loc 1 656 0 discriminator 1
 642 0012 FEE7     	 b .L65
 643              	.L64:
 632:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /* Part of the Ethernet and ARP headers are always constant when sending an IPv4
 644              	 .loc 1 632 0
 645 0014 F0B5     	 push {r4,r5,r6,r7,lr}
 646              	.LCFI8:
 647              	 .cfi_def_cfa_offset 20
 648              	 .cfi_offset 4,-20
 649              	 .cfi_offset 5,-16
 650              	 .cfi_offset 6,-12
 651              	 .cfi_offset 7,-8
 652              	 .cfi_offset 14,-4
 653 0016 8646     	 mov lr,r0
 657:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	configASSERT( pxNetworkBuffer->xDataLength >= sizeof(ARPPacket_t) );
 654              	 .loc 1 657 0
 655 0018 C369     	 ldr r3,[r0,#28]
 656 001a 292B     	 cmp r3,#41
 657 001c 08D8     	 bhi .L66
 658              	.LBB22:
 659              	.LBB23:
 660              	 .loc 2 197 0
 661              	
 662 001e 4FF01403 	 mov r3,#20
 663 0022 83F31188 	 msr basepri,r3
 664 0026 BFF36F8F 	 isb 
 665 002a BFF34F8F 	 dsb 
 666              	
 667              	
 668              	.LVL64:
 669              	 .thumb
 670              	.L67:
 671              	.LBE23:
 672              	.LBE22:
 673              	 .loc 1 657 0 discriminator 2
 674 002e FEE7     	 b .L67
 675              	.L66:
 658:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 659:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	pxARPPacket = ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 676              	 .loc 1 659 0
 677 0030 8569     	 ldr r5,[r0,#24]
 678              	.LVL65:
 660:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 661:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* memcpy the const part of the header information into the correct
 662:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	location in the packet.  This copies:
 663:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		xEthernetHeader.ulDestinationAddress
 664:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		xEthernetHeader.usFrameType;
 665:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		xARPHeader.usHardwareType;
 666:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		xARPHeader.usProtocolType;
 667:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		xARPHeader.ucHardwareAddressLength;
 668:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		xARPHeader.ucProtocolAddressLength;
 669:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		xARPHeader.usOperation;
 670:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		xARPHeader.xTargetHardwareAddress;
 671:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	*/
 672:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	( void ) memcpy( ( void * ) pxARPPacket, ( const void * ) xDefaultPartARPPacketHeader, sizeof( xDe
 679              	 .loc 1 672 0
 680 0032 124E     	 ldr r6,.L71
 681 0034 2C46     	 mov r4,r5
 682 0036 06F1200C 	 add ip,r6,#32
 683              	.LVL66:
 684              	.L68:
 685 003a 3746     	 mov r7,r6
 686 003c 0FCF     	 ldmia r7!,{r0,r1,r2,r3}
 687 003e 2060     	 str r0,[r4]
 688 0040 6160     	 str r1,[r4,#4]
 689 0042 A260     	 str r2,[r4,#8]
 690 0044 E360     	 str r3,[r4,#12]
 691 0046 3E46     	 mov r6,r7
 692 0048 1034     	 adds r4,r4,#16
 693 004a 6745     	 cmp r7,ip
 694 004c F5D1     	 bne .L68
 695 004e 3868     	 ldr r0,[r7]
 696 0050 2060     	 str r0,[r4]
 697 0052 BB88     	 ldrh r3,[r7,#4]
 698 0054 A380     	 strh r3,[r4,#4]
 673:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	( void ) memcpy( ( void * ) ( pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes ) , ( const void
 699              	 .loc 1 673 0
 700 0056 0A4B     	 ldr r3,.L71+4
 701 0058 1868     	 ldr r0,[r3]
 702 005a C5F80600 	 str r0,[r5,#6]
 703 005e 9A88     	 ldrh r2,[r3,#4]
 704 0060 6A81     	 strh r2,[r5,#10]
 674:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	( void ) memcpy( ( void * ) ( pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes ), ( const vo
 705              	 .loc 1 674 0
 706 0062 C5F81600 	 str r0,[r5,#22]
 707 0066 6A83     	 strh r2,[r5,#26]
 675:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 676:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	( void ) memcpy( ( void * ) ( pxARPPacket->xARPHeader.ucSenderProtocolAddress ), ( const void * ) 
 708              	 .loc 1 676 0
 709 0068 5869     	 ldr r0,[r3,#20]
 710 006a E861     	 str r0,[r5,#28]
 677:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 711              	 .loc 1 677 0
 712 006c DEF81430 	 ldr r3,[lr,#20]
 713 0070 C5F82630 	 str r3,[r5,#38]
 678:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 679:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 714              	 .loc 1 679 0
 715 0074 2A23     	 movs r3,#42
 716 0076 CEF81C30 	 str r3,[lr,#28]
 717 007a F0BD     	 pop {r4,r5,r6,r7,pc}
 718              	.LVL67:
 719              	.L72:
 720              	 .align 2
 721              	.L71:
 722 007c 00000000 	 .word .LANCHOR2
 723 0080 00000000 	 .word xDefaultPartUDPPacketHeader
 724              	 .cfi_endproc
 725              	.LFE57:
 727              	 .section .text.FreeRTOS_OutputARPRequest,"ax",%progbits
 728              	 .align 2
 729              	 .global FreeRTOS_OutputARPRequest
 730              	 .thumb
 731              	 .thumb_func
 733              	FreeRTOS_OutputARPRequest:
 734              	.LFB56:
 583:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 735              	 .loc 1 583 0
 736              	 .cfi_startproc
 737              	 
 738              	 
 739              	.LVL68:
 740 0000 30B5     	 push {r4,r5,lr}
 741              	.LCFI9:
 742              	 .cfi_def_cfa_offset 12
 743              	 .cfi_offset 4,-12
 744              	 .cfi_offset 5,-8
 745              	 .cfi_offset 14,-4
 746 0002 83B0     	 sub sp,sp,#12
 747              	.LCFI10:
 748              	 .cfi_def_cfa_offset 24
 749 0004 0546     	 mov r5,r0
 588:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 750              	 .loc 1 588 0
 751 0006 2A20     	 movs r0,#42
 752              	.LVL69:
 753 0008 0021     	 movs r1,#0
 754 000a FFF7FEFF 	 bl pxGetNetworkBufferWithDescriptor
 755              	.LVL70:
 590:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 756              	 .loc 1 590 0
 757 000e C0B1     	 cbz r0,.L73
 758 0010 0446     	 mov r4,r0
 592:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		vARPGenerateRequestPacket( pxNetworkBuffer );
 759              	 .loc 1 592 0
 760 0012 4561     	 str r5,[r0,#20]
 593:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 761              	 .loc 1 593 0
 762 0014 FFF7FEFF 	 bl vARPGenerateRequestPacket
 763              	.LVL71:
 610:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 764              	 .loc 1 610 0
 765 0018 FFF7FEFF 	 bl xIsCallingFromIPTask
 766              	.LVL72:
 767 001c 20B1     	 cbz r0,.L75
 613:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 768              	 .loc 1 613 0
 769 001e 2046     	 mov r0,r4
 770 0020 0121     	 movs r1,#1
 771 0022 FFF7FEFF 	 bl xNetworkInterfaceOutput
 772              	.LVL73:
 773 0026 0CE0     	 b .L73
 774              	.L75:
 775              	.LBB24:
 620:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			xSendEvent.pvData = pxNetworkBuffer;
 776              	 .loc 1 620 0
 777 0028 0223     	 movs r3,#2
 778 002a 8DF80030 	 strb r3,[sp]
 621:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 779              	 .loc 1 621 0
 780 002e 0194     	 str r4,[sp,#4]
 622:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 781              	 .loc 1 622 0
 782 0030 6846     	 mov r0,sp
 783 0032 4FF0FF31 	 mov r1,#-1
 784 0036 FFF7FEFF 	 bl xSendEventStructToIPTask
 785              	.LVL74:
 786 003a 10B9     	 cbnz r0,.L73
 625:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 787              	 .loc 1 625 0
 788 003c 2046     	 mov r0,r4
 789 003e FFF7FEFF 	 bl vReleaseNetworkBufferAndDescriptor
 790              	.LVL75:
 791              	.L73:
 792              	.LBE24:
 629:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 793              	 .loc 1 629 0
 794 0042 03B0     	 add sp,sp,#12
 795              	.LCFI11:
 796              	 .cfi_def_cfa_offset 12
 797              	 
 798 0044 30BD     	 pop {r4,r5,pc}
 799              	 .cfi_endproc
 800              	.LFE56:
 802 0046 00BF     	 .section .text.vARPAgeCache,"ax",%progbits
 803              	 .align 2
 804              	 .global vARPAgeCache
 805              	 .thumb
 806              	 .thumb_func
 808              	vARPAgeCache:
 809              	.LFB54:
 520:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** BaseType_t x;
 810              	 .loc 1 520 0
 811              	 .cfi_startproc
 812              	 
 813              	 
 814 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 815              	.LCFI12:
 816              	 .cfi_def_cfa_offset 24
 817              	 .cfi_offset 3,-24
 818              	 .cfi_offset 4,-20
 819              	 .cfi_offset 5,-16
 820              	 .cfi_offset 6,-12
 821              	 .cfi_offset 7,-8
 822              	 .cfi_offset 14,-4
 823              	.LVL76:
 824 0002 1A4E     	 ldr r6,.L87
 825 0004 06F10B04 	 add r4,r6,#11
 826 0008 5336     	 adds r6,r6,#83
 556:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 827              	 .loc 1 556 0
 828 000a 0027     	 movs r7,#0
 829              	.LVL77:
 830              	.L82:
 831 000c 2546     	 mov r5,r4
 528:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 832              	 .loc 1 528 0
 833 000e 14F8013C 	 ldrb r3,[r4,#-1]
 834 0012 ABB1     	 cbz r3,.L79
 532:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 835              	 .loc 1 532 0
 836 0014 013B     	 subs r3,r3,#1
 837 0016 DBB2     	 uxtb r3,r3
 838 0018 04F8013C 	 strb r3,[r4,#-1]
 536:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 839              	 .loc 1 536 0
 840 001c 2278     	 ldrb r2,[r4]
 841 001e 22B9     	 cbnz r2,.L80
 538:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 842              	 .loc 1 538 0
 843 0020 54F80B0C 	 ldr r0,[r4,#-11]
 844 0024 FFF7FEFF 	 bl FreeRTOS_OutputARPRequest
 845              	.LVL78:
 846 0028 05E0     	 b .L81
 847              	.L80:
 540:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 848              	 .loc 1 540 0
 849 002a 032B     	 cmp r3,#3
 850 002c 03D8     	 bhi .L81
 545:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 851              	 .loc 1 545 0
 852 002e 54F80B0C 	 ldr r0,[r4,#-11]
 853 0032 FFF7FEFF 	 bl FreeRTOS_OutputARPRequest
 854              	.LVL79:
 855              	.L81:
 552:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 856              	 .loc 1 552 0
 857 0036 15F8013C 	 ldrb r3,[r5,#-1]
 858 003a 0BB9     	 cbnz r3,.L79
 556:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 859              	 .loc 1 556 0
 860 003c 45F80B7C 	 str r7,[r5,#-11]
 861              	.L79:
 862 0040 0C34     	 adds r4,r4,#12
 525:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 863              	 .loc 1 525 0 discriminator 2
 864 0042 B442     	 cmp r4,r6
 865 0044 E2D1     	 bne .L82
 561:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 866              	 .loc 1 561 0
 867 0046 FFF7FEFF 	 bl xTaskGetTickCount
 868              	.LVL80:
 869 004a 0446     	 mov r4,r0
 870              	.LVL81:
 563:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 871              	 .loc 1 563 0
 872 004c 084B     	 ldr r3,.L87+4
 873 004e 1B68     	 ldr r3,[r3]
 874 0050 23B1     	 cbz r3,.L83
 563:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 875              	 .loc 1 563 0 is_stmt 0 discriminator 1
 876 0052 C31A     	 subs r3,r0,r3
 877 0054 44F62062 	 movw r2,#20000
 878 0058 9342     	 cmp r3,r2
 879 005a 05D9     	 bls .L78
 880              	.L83:
 565:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		xLastGratuitousARPTime = xTimeNow;
 881              	 .loc 1 565 0 is_stmt 1
 882 005c 054B     	 ldr r3,.L87+8
 883 005e 5869     	 ldr r0,[r3,#20]
 884              	.LVL82:
 885 0060 FFF7FEFF 	 bl FreeRTOS_OutputARPRequest
 886              	.LVL83:
 566:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 887              	 .loc 1 566 0
 888 0064 024B     	 ldr r3,.L87+4
 889 0066 1C60     	 str r4,[r3]
 890              	.L78:
 891 0068 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 892              	.LVL84:
 893              	.L88:
 894 006a 00BF     	 .align 2
 895              	.L87:
 896 006c 00000000 	 .word .LANCHOR0
 897 0070 00000000 	 .word .LANCHOR1
 898 0074 00000000 	 .word xDefaultPartUDPPacketHeader
 899              	 .cfi_endproc
 900              	.LFE54:
 902              	 .section .text.FreeRTOS_ClearARP,"ax",%progbits
 903              	 .align 2
 904              	 .global FreeRTOS_ClearARP
 905              	 .thumb
 906              	 .thumb_func
 908              	FreeRTOS_ClearARP:
 909              	.LFB58:
 680:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 681:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
 682:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** }
 683:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 684:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 685:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** void FreeRTOS_ClearARP( void )
 686:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** {
 910              	 .loc 1 686 0
 911              	 .cfi_startproc
 912              	 
 913              	 
 914 0000 08B5     	 push {r3,lr}
 915              	.LCFI13:
 916              	 .cfi_def_cfa_offset 8
 917              	 .cfi_offset 3,-8
 918              	 .cfi_offset 14,-4
 687:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 919              	 .loc 1 687 0
 920 0002 0348     	 ldr r0,.L91
 921 0004 0021     	 movs r1,#0
 922 0006 4822     	 movs r2,#72
 923 0008 FFF7FEFF 	 bl memset
 924              	.LVL85:
 925 000c 08BD     	 pop {r3,pc}
 926              	.L92:
 927 000e 00BF     	 .align 2
 928              	.L91:
 929 0010 00000000 	 .word .LANCHOR0
 930              	 .cfi_endproc
 931              	.LFE58:
 933              	 .section .text.xCheckLoopback,"ax",%progbits
 934              	 .align 2
 935              	 .global xCheckLoopback
 936              	 .thumb
 937              	 .thumb_func
 939              	xCheckLoopback:
 940              	.LFB59:
 688:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** }
 689:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 690:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 691:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** #if 1
 692:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** BaseType_t xCheckLoopback( NetworkBufferDescriptor_t * const pxDescriptor, BaseType_t bReleaseAfter
 693:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** {
 941              	 .loc 1 693 0
 942              	 .cfi_startproc
 943              	 
 944              	 
 945              	.LVL86:
 694:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** BaseType_t xResult = pdFALSE;
 695:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** NetworkBufferDescriptor_t * pxUseDescriptor = pxDescriptor;
 696:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** const IPPacket_t *pxIPPacket = ipCAST_PTR_TO_TYPE_PTR( IPPacket_t, pxUseDescriptor->pucEthernetBuff
 946              	 .loc 1 696 0
 947 0000 8369     	 ldr r3,[r0,#24]
 948              	.LVL87:
 697:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 698:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	/* This function will check if the target IP-address belongs to this device.
 699:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	 * If so, the packet will be passed to the IP-stack, who will answer it.
 700:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	 * The function is to be called within the function xNetworkInterfaceOutput().
 701:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	 */
 702:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 703:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	if( pxIPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE )
 949              	 .loc 1 703 0
 950 0002 9A89     	 ldrh r2,[r3,#12]
 951 0004 082A     	 cmp r2,#8
 952 0006 1FD1     	 bne .L97
 693:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** BaseType_t xResult = pdFALSE;
 953              	 .loc 1 693 0
 954 0008 30B5     	 push {r4,r5,lr}
 955              	.LCFI14:
 956              	 .cfi_def_cfa_offset 12
 957              	 .cfi_offset 4,-12
 958              	 .cfi_offset 5,-8
 959              	 .cfi_offset 14,-4
 960 000a 83B0     	 sub sp,sp,#12
 961              	.LCFI15:
 962              	 .cfi_def_cfa_offset 24
 963 000c 0D46     	 mov r5,r1
 964 000e 0446     	 mov r4,r0
 704:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	{
 705:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		if( memcmp( pxIPPacket->xEthernetHeader.xDestinationAddress.ucBytes, ipLOCAL_MAC_ADDRESS, ipMAC_A
 965              	 .loc 1 705 0
 966 0010 1846     	 mov r0,r3
 967              	.LVL88:
 968 0012 1149     	 ldr r1,.L102
 969              	.LVL89:
 970 0014 0622     	 movs r2,#6
 971 0016 FFF7FEFF 	 bl memcmp
 972              	.LVL90:
 973 001a B8B9     	 cbnz r0,.L98
 974              	.LVL91:
 706:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		{
 707:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			xResult = pdTRUE;
 708:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( bReleaseAfterSend == pdFALSE )
 975              	 .loc 1 708 0
 976 001c 25B9     	 cbnz r5,.L95
 709:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 710:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				/* Driver is not allowed to transfer the ownership
 711:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				of descriptor,  so make a copy of it */
 712:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				pxUseDescriptor =
 977              	 .loc 1 712 0
 978 001e 2046     	 mov r0,r4
 979 0020 E169     	 ldr r1,[r4,#28]
 980 0022 FFF7FEFF 	 bl pxDuplicateNetworkBufferWithDescriptor
 981              	.LVL92:
 982 0026 0446     	 mov r4,r0
 983              	.LVL93:
 984              	.L95:
 713:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, pxDescriptor->xDataLength );
 714:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 715:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( pxUseDescriptor != NULL )
 985              	 .loc 1 715 0
 986 0028 94B1     	 cbz r4,.L100
 987              	.LBB25:
 716:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			{
 717:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			IPStackEvent_t xRxEvent;
 718:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 
 719:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				xRxEvent.eEventType = eNetworkRxEvent;
 988              	 .loc 1 719 0
 989 002a 0123     	 movs r3,#1
 990 002c 8DF80030 	 strb r3,[sp]
 720:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				xRxEvent.pvData = pxUseDescriptor;
 991              	 .loc 1 720 0
 992 0030 0194     	 str r4,[sp,#4]
 721:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				if( xSendEventStructToIPTask( &xRxEvent, 0U ) != pdTRUE )
 993              	 .loc 1 721 0
 994 0032 6846     	 mov r0,sp
 995 0034 0021     	 movs r1,#0
 996 0036 FFF7FEFF 	 bl xSendEventStructToIPTask
 997              	.LVL94:
 998 003a 0128     	 cmp r0,#1
 999 003c 02D0     	 beq .L96
 722:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				{
 723:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					vReleaseNetworkBufferAndDescriptor( pxUseDescriptor );
 1000              	 .loc 1 723 0
 1001 003e 2046     	 mov r0,r4
 1002 0040 FFF7FEFF 	 bl vReleaseNetworkBufferAndDescriptor
 1003              	.LVL95:
 1004              	.L96:
 1005              	.LBE25:
 707:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( bReleaseAfterSend == pdFALSE )
 1006              	 .loc 1 707 0
 1007 0044 0120     	 movs r0,#1
 1008 0046 04E0     	 b .L94
 1009              	.LVL96:
 1010              	.L97:
 1011              	.LCFI16:
 1012              	 .cfi_def_cfa_offset 0
 1013              	 .cfi_restore 4
 1014              	 .cfi_restore 5
 1015              	 .cfi_restore 14
 694:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** NetworkBufferDescriptor_t * pxUseDescriptor = pxDescriptor;
 1016              	 .loc 1 694 0
 1017 0048 0020     	 movs r0,#0
 1018              	.LVL97:
 724:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					iptraceETHERNET_RX_EVENT_LOST();
 725:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 					FreeRTOS_printf( ( "prvEMACRxPoll: Can not queue return packet!\n" ) );
 726:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				}
 727:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 				
 728:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			}
 729:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 		}
 730:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	}
 731:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 	return xResult;
 732:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** }
 1019              	 .loc 1 732 0
 1020 004a 7047     	 bx lr
 1021              	.LVL98:
 1022              	.L98:
 1023              	.LCFI17:
 1024              	 .cfi_def_cfa_offset 24
 1025              	 .cfi_offset 4,-12
 1026              	 .cfi_offset 5,-8
 1027              	 .cfi_offset 14,-4
 694:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** NetworkBufferDescriptor_t * pxUseDescriptor = pxDescriptor;
 1028              	 .loc 1 694 0
 1029 004c 0020     	 movs r0,#0
 1030 004e 00E0     	 b .L94
 1031              	.LVL99:
 1032              	.L100:
 707:../FreeRTOS-Plus-TCP/FreeRTOS_ARP.c **** 			if( bReleaseAfterSend == pdFALSE )
 1033              	 .loc 1 707 0
 1034 0050 0120     	 movs r0,#1
 1035              	.LVL100:
 1036              	.L94:
 1037              	 .loc 1 732 0
 1038 0052 03B0     	 add sp,sp,#12
 1039              	.LCFI18:
 1040              	 .cfi_def_cfa_offset 12
 1041              	 
 1042 0054 30BD     	 pop {r4,r5,pc}
 1043              	.LVL101:
 1044              	.L103:
 1045 0056 00BF     	 .align 2
 1046              	.L102:
 1047 0058 00000000 	 .word xDefaultPartUDPPacketHeader
 1048              	 .cfi_endproc
 1049              	.LFE59:
 1051              	 .section .bss.xLastGratuitousARPTime,"aw",%nobits
 1052              	 .align 2
 1053              	 .set .LANCHOR1,.+0
 1056              	xLastGratuitousARPTime:
 1057 0000 00000000 	 .space 4
 1058              	 .section .bss.xARPCache,"aw",%nobits
 1059              	 .align 2
 1060              	 .set .LANCHOR0,.+0
 1063              	xARPCache:
 1064 0000 00000000 	 .space 72
 1064      00000000 
 1064      00000000 
 1064      00000000 
 1064      00000000 
 1065              	 .section .rodata.xDefaultPartARPPacketHeader.6860,"a",%progbits
 1066              	 .align 2
 1067              	 .set .LANCHOR2,.+0
 1070              	xDefaultPartARPPacketHeader.6860:
 1071 0000 FF       	 .byte -1
 1072 0001 FF       	 .byte -1
 1073 0002 FF       	 .byte -1
 1074 0003 FF       	 .byte -1
 1075 0004 FF       	 .byte -1
 1076 0005 FF       	 .byte -1
 1077 0006 00       	 .byte 0
 1078 0007 00       	 .byte 0
 1079 0008 00       	 .byte 0
 1080 0009 00       	 .byte 0
 1081 000a 00       	 .byte 0
 1082 000b 00       	 .byte 0
 1083 000c 08       	 .byte 8
 1084 000d 06       	 .byte 6
 1085 000e 00       	 .byte 0
 1086 000f 01       	 .byte 1
 1087 0010 08       	 .byte 8
 1088 0011 00       	 .byte 0
 1089 0012 06       	 .byte 6
 1090 0013 04       	 .byte 4
 1091 0014 00       	 .byte 0
 1092 0015 01       	 .byte 1
 1093 0016 00       	 .byte 0
 1094 0017 00       	 .byte 0
 1095 0018 00       	 .byte 0
 1096 0019 00       	 .byte 0
 1097 001a 00       	 .byte 0
 1098 001b 00       	 .byte 0
 1099 001c 00       	 .byte 0
 1100 001d 00       	 .byte 0
 1101 001e 00       	 .byte 0
 1102 001f 00       	 .byte 0
 1103 0020 00       	 .byte 0
 1104 0021 00       	 .byte 0
 1105 0022 00       	 .byte 0
 1106 0023 00       	 .byte 0
 1107 0024 00       	 .byte 0
 1108 0025 00       	 .byte 0
 1109 0026 0000     	 .text
 1110              	.Letext0:
 1111              	 .file 3 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1112              	 .file 4 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1113              	 .file 5 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 1114              	 .file 6 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/list.h"
 1115              	 .file 7 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h"
 1116              	 .file 8 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
 1117              	 .file 9 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/FreeRTOS_ARP.h"
 1118              	 .file 10 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\string.h"
 1119              	 .file 11 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/NetworkBufferManagement.h"
 1120              	 .file 12 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS-Plus-TCP/include/NetworkInterface.h"
 1121              	 .file 13 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 FreeRTOS_ARP.c
    {standard input}:19     .text.vARPRefreshCacheEntry:00000000 $t
    {standard input}:24     .text.vARPRefreshCacheEntry:00000000 vARPRefreshCacheEntry
    {standard input}:245    .text.vARPRefreshCacheEntry:00000124 $d
    {standard input}:253    .text.eARPProcessPacket:00000000 $t
    {standard input}:258    .text.eARPProcessPacket:00000000 eARPProcessPacket
    {standard input}:394    .text.eARPProcessPacket:000000bc $d
    {standard input}:400    .text.eARPGetCacheEntry:00000000 $t
    {standard input}:405    .text.eARPGetCacheEntry:00000000 eARPGetCacheEntry
    {standard input}:570    .text.eARPGetCacheEntry:000000b0 $d
    {standard input}:578    .text.vARPSendGratuitous:00000000 $t
    {standard input}:583    .text.vARPSendGratuitous:00000000 vARPSendGratuitous
    {standard input}:606    .text.vARPSendGratuitous:00000010 $d
    {standard input}:611    .text.vARPGenerateRequestPacket:00000000 $t
    {standard input}:616    .text.vARPGenerateRequestPacket:00000000 vARPGenerateRequestPacket
    {standard input}:722    .text.vARPGenerateRequestPacket:0000007c $d
    {standard input}:728    .text.FreeRTOS_OutputARPRequest:00000000 $t
    {standard input}:733    .text.FreeRTOS_OutputARPRequest:00000000 FreeRTOS_OutputARPRequest
    {standard input}:803    .text.vARPAgeCache:00000000 $t
    {standard input}:808    .text.vARPAgeCache:00000000 vARPAgeCache
    {standard input}:896    .text.vARPAgeCache:0000006c $d
    {standard input}:903    .text.FreeRTOS_ClearARP:00000000 $t
    {standard input}:908    .text.FreeRTOS_ClearARP:00000000 FreeRTOS_ClearARP
    {standard input}:929    .text.FreeRTOS_ClearARP:00000010 $d
    {standard input}:934    .text.xCheckLoopback:00000000 $t
    {standard input}:939    .text.xCheckLoopback:00000000 xCheckLoopback
    {standard input}:1047   .text.xCheckLoopback:00000058 $d
    {standard input}:1052   .bss.xLastGratuitousARPTime:00000000 $d
    {standard input}:1056   .bss.xLastGratuitousARPTime:00000000 xLastGratuitousARPTime
    {standard input}:1059   .bss.xARPCache:00000000 $d
    {standard input}:1063   .bss.xARPCache:00000000 xARPCache
    {standard input}:1066   .rodata.xDefaultPartARPPacketHeader.6860:00000000 $d
    {standard input}:1070   .rodata.xDefaultPartARPPacketHeader.6860:00000000 xDefaultPartARPPacketHeader.6860
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.184.159df79b4ca79c76561572a55985524c
                           .group:00000000 wm4.cdefs.h.47.4002528de975c0fcce6c551c15d87b8c
                           .group:00000000 wm4.stddef.h.39.fb88e218f22ad7a0ab38f3d93c6eb3e4
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.56707660962b21991903f1fee7c13bb3
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.65.7c7009d79fb33c27bcf8e2214c76b343
                           .group:00000000 wm4.FreeRTOSConfig.h.30.aa43eb1cb33228d5c7e359a94d48589b
                           .group:00000000 wm4.projdefs.h.28.d6a7c9061b707820f2fcf4c2ff5d9f24
                           .group:00000000 wm4.portmacro.h.30.2ddc2eaf2e032c76c597fb78c4365041
                           .group:00000000 wm4.portable.h.63.e9cc508c3850f44ce542149380c67812
                           .group:00000000 wm4.mpu_wrappers.h.28.163fb40577cf8d1578015ea3f2ff4cdb
                           .group:00000000 wm4.FreeRTOS.h.67.9945f39eea4ddeb224c0782392206292
                           .group:00000000 wm4.list.h.57.02ec67e07eacffe5ca7cfb7326896236
                           .group:00000000 wm4.task.h.47.2d3fe49a094b8ec1e3e6aac441e8db21
                           .group:00000000 wm4.queue.h.66.45d4a3cf5de24cde7e732f8dad25383c
                           .group:00000000 wm4.semphr.h.38.96f44691bfa19eb833944d3a35b81e54
                           .group:00000000 wm4.FreeRTOSIPConfig.h.37.3f9c1db988571ff1f3dec4c7e54978d6
                           .group:00000000 wm4.FreeRTOS_errno_TCP.h.27.708877b341d0e6bcb4ba112b2ad8082a
                           .group:00000000 wm4.FreeRTOSIPConfigDefaults.h.41.f972b11d9b1eba5383080cfaef1fd740
                           .group:00000000 wm4.IPTraceMacroDefaults.h.31.69642530b5a79c93e762c9b09ac0d1d5
                           .group:00000000 wm4.FreeRTOS_IP.h.59.3f5e36f6612bd0c66747c6093da47335
                           .group:00000000 wm4.FreeRTOS_IP.h.179.e5077063e624bc5d3f02542470d6ea94
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.timers.h.29.025d268d6baf57298309e7b498ee1cc7
                           .group:00000000 wm4.FreeRTOS_Sockets.h.58.61d472da32c0e0f5bc49c368f15d0ac5
                           .group:00000000 wm4.FreeRTOS_TCP_WIN.h.32.f3cfab69924f28284deb16cc1a30fb93
                           .group:00000000 wm4.FreeRTOS_IP_Private.h.52.551f932b14473cea139893dda31b3fa0
                           .group:00000000 wm4.FreeRTOS_IP_Private.h.328.b5788f8d626a4cf16b8282f9399f3f55

UNDEFINED SYMBOLS
memcmp
xDefaultPartUDPPacketHeader
xNetworkAddressing
xBroadcastMACAddress
xIsIPv4Multicast
vSetMultiCastIPv4MacAddress
xSendEventToIPTask
pxGetNetworkBufferWithDescriptor
xIsCallingFromIPTask
xNetworkInterfaceOutput
xSendEventStructToIPTask
vReleaseNetworkBufferAndDescriptor
xTaskGetTickCount
memset
pxDuplicateNetworkBufferWithDescriptor
