   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "cmsis_os2.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.TimerCallback,"ax",%progbits
  19              	 .align 2
  20              	 .thumb
  21              	 .thumb_func
  23              	TimerCallback:
  24              	.LFB139:
  25              	 .file 1 "../CMSIS_RTOS_V2/cmsis_os2.c"
   1:../CMSIS_RTOS_V2/cmsis_os2.c **** /* --------------------------------------------------------------------------
   2:../CMSIS_RTOS_V2/cmsis_os2.c ****  * Portions Copyright ï¿½ 2019 STMicroelectronics International N.V. All rights reserved.
   3:../CMSIS_RTOS_V2/cmsis_os2.c ****  * Copyright (c) 2013-2019 Arm Limited. All rights reserved.
   4:../CMSIS_RTOS_V2/cmsis_os2.c ****  *
   5:../CMSIS_RTOS_V2/cmsis_os2.c ****  * SPDX-License-Identifier: Apache-2.0
   6:../CMSIS_RTOS_V2/cmsis_os2.c ****  *
   7:../CMSIS_RTOS_V2/cmsis_os2.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   8:../CMSIS_RTOS_V2/cmsis_os2.c ****  * not use this file except in compliance with the License.
   9:../CMSIS_RTOS_V2/cmsis_os2.c ****  * You may obtain a copy of the License at
  10:../CMSIS_RTOS_V2/cmsis_os2.c ****  *
  11:../CMSIS_RTOS_V2/cmsis_os2.c ****  * www.apache.org/licenses/LICENSE-2.0
  12:../CMSIS_RTOS_V2/cmsis_os2.c ****  *
  13:../CMSIS_RTOS_V2/cmsis_os2.c ****  * Unless required by applicable law or agreed to in writing, software
  14:../CMSIS_RTOS_V2/cmsis_os2.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  15:../CMSIS_RTOS_V2/cmsis_os2.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  16:../CMSIS_RTOS_V2/cmsis_os2.c ****  * See the License for the specific language governing permissions and
  17:../CMSIS_RTOS_V2/cmsis_os2.c ****  * limitations under the License.
  18:../CMSIS_RTOS_V2/cmsis_os2.c ****  *
  19:../CMSIS_RTOS_V2/cmsis_os2.c ****  *      Name:    cmsis_os2.c
  20:../CMSIS_RTOS_V2/cmsis_os2.c ****  *      Purpose: CMSIS RTOS2 wrapper for FreeRTOS
  21:../CMSIS_RTOS_V2/cmsis_os2.c ****  *
  22:../CMSIS_RTOS_V2/cmsis_os2.c ****  *---------------------------------------------------------------------------*/
  23:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  24:../CMSIS_RTOS_V2/cmsis_os2.c **** #include <string.h>
  25:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  26:../CMSIS_RTOS_V2/cmsis_os2.c **** #include "cmsis_os2.h"                  // ::CMSIS:RTOS2
  27:../CMSIS_RTOS_V2/cmsis_os2.c **** #include "cmsis_compiler.h"
  28:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  29:../CMSIS_RTOS_V2/cmsis_os2.c **** #include "FreeRTOS.h"                   // ARM.FreeRTOS::RTOS:Core
  30:../CMSIS_RTOS_V2/cmsis_os2.c **** #include "task.h"                       // ARM.FreeRTOS::RTOS:Core
  31:../CMSIS_RTOS_V2/cmsis_os2.c **** #include "event_groups.h"               // ARM.FreeRTOS::RTOS:Event Groups
  32:../CMSIS_RTOS_V2/cmsis_os2.c **** #include "semphr.h"                     // ARM.FreeRTOS::RTOS:Core
  33:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  34:../CMSIS_RTOS_V2/cmsis_os2.c **** /*---------------------------------------------------------------------------*/
  35:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef __ARM_ARCH_6M__
  36:../CMSIS_RTOS_V2/cmsis_os2.c ****   #define __ARM_ARCH_6M__         0
  37:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
  38:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef __ARM_ARCH_7M__
  39:../CMSIS_RTOS_V2/cmsis_os2.c ****   #define __ARM_ARCH_7M__         0
  40:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
  41:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef __ARM_ARCH_7EM__
  42:../CMSIS_RTOS_V2/cmsis_os2.c ****   #define __ARM_ARCH_7EM__        0
  43:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
  44:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef __ARM_ARCH_8M_MAIN__
  45:../CMSIS_RTOS_V2/cmsis_os2.c ****   #define __ARM_ARCH_8M_MAIN__    0
  46:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
  47:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef __ARM_ARCH_7A__
  48:../CMSIS_RTOS_V2/cmsis_os2.c ****   #define __ARM_ARCH_7A__         0
  49:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
  50:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  51:../CMSIS_RTOS_V2/cmsis_os2.c **** #if   ((__ARM_ARCH_7M__      == 1U) || \
  52:../CMSIS_RTOS_V2/cmsis_os2.c ****        (__ARM_ARCH_7EM__     == 1U) || \
  53:../CMSIS_RTOS_V2/cmsis_os2.c ****        (__ARM_ARCH_8M_MAIN__ == 1U))
  54:../CMSIS_RTOS_V2/cmsis_os2.c **** #define IS_IRQ_MASKED()           ((__get_PRIMASK() != 0U) || (__get_BASEPRI() != 0U))
  55:../CMSIS_RTOS_V2/cmsis_os2.c **** #elif  (__ARM_ARCH_6M__      == 1U)
  56:../CMSIS_RTOS_V2/cmsis_os2.c **** #define IS_IRQ_MASKED()           (__get_PRIMASK() != 0U)
  57:../CMSIS_RTOS_V2/cmsis_os2.c **** #elif (__ARM_ARCH_7A__       == 1U)
  58:../CMSIS_RTOS_V2/cmsis_os2.c **** /* CPSR mask bits */
  59:../CMSIS_RTOS_V2/cmsis_os2.c **** #define CPSR_MASKBIT_I            0x80U
  60:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  61:../CMSIS_RTOS_V2/cmsis_os2.c **** #define IS_IRQ_MASKED()           ((__get_CPSR() & CPSR_MASKBIT_I) != 0U)
  62:../CMSIS_RTOS_V2/cmsis_os2.c **** #else
  63:../CMSIS_RTOS_V2/cmsis_os2.c **** #define IS_IRQ_MASKED()           (__get_PRIMASK() != 0U)
  64:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
  65:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  66:../CMSIS_RTOS_V2/cmsis_os2.c **** #if    (__ARM_ARCH_7A__      == 1U)
  67:../CMSIS_RTOS_V2/cmsis_os2.c **** /* CPSR mode bitmasks */
  68:../CMSIS_RTOS_V2/cmsis_os2.c **** #define CPSR_MODE_USER            0x10U
  69:../CMSIS_RTOS_V2/cmsis_os2.c **** #define CPSR_MODE_SYSTEM          0x1FU
  70:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  71:../CMSIS_RTOS_V2/cmsis_os2.c **** #define IS_IRQ_MODE()             ((__get_mode() != CPSR_MODE_USER) && (__get_mode() != CPSR_MODE_S
  72:../CMSIS_RTOS_V2/cmsis_os2.c **** #else
  73:../CMSIS_RTOS_V2/cmsis_os2.c **** #define IS_IRQ_MODE()             (__get_IPSR() != 0U)
  74:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
  75:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  76:../CMSIS_RTOS_V2/cmsis_os2.c **** #define IS_IRQ()                  (IS_IRQ_MODE() || (IS_IRQ_MASKED() && (KernelState == osKernelRun
  77:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  78:../CMSIS_RTOS_V2/cmsis_os2.c **** /* Limits */
  79:../CMSIS_RTOS_V2/cmsis_os2.c **** #define MAX_BITS_TASK_NOTIFY      31U
  80:../CMSIS_RTOS_V2/cmsis_os2.c **** #define MAX_BITS_EVENT_GROUPS     24U
  81:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  82:../CMSIS_RTOS_V2/cmsis_os2.c **** #define THREAD_FLAGS_INVALID_BITS (~((1UL << MAX_BITS_TASK_NOTIFY)  - 1U))
  83:../CMSIS_RTOS_V2/cmsis_os2.c **** #define EVENT_FLAGS_INVALID_BITS  (~((1UL << MAX_BITS_EVENT_GROUPS) - 1U))
  84:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  85:../CMSIS_RTOS_V2/cmsis_os2.c **** /* Kernel version and identification string definition (major.minor.rev: mmnnnrrrr dec) */
  86:../CMSIS_RTOS_V2/cmsis_os2.c **** #define KERNEL_VERSION            (((uint32_t)tskKERNEL_VERSION_MAJOR * 10000000UL) | \
  87:../CMSIS_RTOS_V2/cmsis_os2.c ****                                    ((uint32_t)tskKERNEL_VERSION_MINOR *    10000UL) | \
  88:../CMSIS_RTOS_V2/cmsis_os2.c ****                                    ((uint32_t)tskKERNEL_VERSION_BUILD *        1UL))
  89:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  90:../CMSIS_RTOS_V2/cmsis_os2.c **** #define KERNEL_ID                 ("FreeRTOS " tskKERNEL_VERSION_NUMBER)
  91:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  92:../CMSIS_RTOS_V2/cmsis_os2.c **** /* Timer callback information structure definition */
  93:../CMSIS_RTOS_V2/cmsis_os2.c **** typedef struct {
  94:../CMSIS_RTOS_V2/cmsis_os2.c ****   osTimerFunc_t func;
  95:../CMSIS_RTOS_V2/cmsis_os2.c ****   void         *arg;
  96:../CMSIS_RTOS_V2/cmsis_os2.c **** } TimerCallback_t;
  97:../CMSIS_RTOS_V2/cmsis_os2.c **** 
  98:../CMSIS_RTOS_V2/cmsis_os2.c **** /* Kernel initialization state */
  99:../CMSIS_RTOS_V2/cmsis_os2.c **** static osKernelState_t KernelState = osKernelInactive;
 100:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 101:../CMSIS_RTOS_V2/cmsis_os2.c **** /*
 102:../CMSIS_RTOS_V2/cmsis_os2.c ****   Heap region definition used by heap_5 variant
 103:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 104:../CMSIS_RTOS_V2/cmsis_os2.c ****   Define configAPPLICATION_ALLOCATED_HEAP as nonzero value in FreeRTOSConfig.h if
 105:../CMSIS_RTOS_V2/cmsis_os2.c ****   heap regions are already defined and vPortDefineHeapRegions is called in application.
 106:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 107:../CMSIS_RTOS_V2/cmsis_os2.c ****   Otherwise vPortDefineHeapRegions will be called by osKernelInitialize using
 108:../CMSIS_RTOS_V2/cmsis_os2.c ****   definition configHEAP_5_REGIONS as parameter. Overriding configHEAP_5_REGIONS
 109:../CMSIS_RTOS_V2/cmsis_os2.c ****   is possible by defining it globally or in FreeRTOSConfig.h.
 110:../CMSIS_RTOS_V2/cmsis_os2.c **** */
 111:../CMSIS_RTOS_V2/cmsis_os2.c **** #if defined(USE_FREERTOS_HEAP_5)
 112:../CMSIS_RTOS_V2/cmsis_os2.c **** #if (configAPPLICATION_ALLOCATED_HEAP == 0)
 113:../CMSIS_RTOS_V2/cmsis_os2.c ****   /*
 114:../CMSIS_RTOS_V2/cmsis_os2.c ****     FreeRTOS heap is not defined by the application.
 115:../CMSIS_RTOS_V2/cmsis_os2.c ****     Single region of size configTOTAL_HEAP_SIZE (defined in FreeRTOSConfig.h)
 116:../CMSIS_RTOS_V2/cmsis_os2.c ****     is provided by default. Define configHEAP_5_REGIONS to provide custom
 117:../CMSIS_RTOS_V2/cmsis_os2.c ****     HeapRegion_t array.
 118:../CMSIS_RTOS_V2/cmsis_os2.c ****   */
 119:../CMSIS_RTOS_V2/cmsis_os2.c ****   #define HEAP_5_REGION_SETUP   1
 120:../CMSIS_RTOS_V2/cmsis_os2.c ****   
 121:../CMSIS_RTOS_V2/cmsis_os2.c ****   #ifndef configHEAP_5_REGIONS
 122:../CMSIS_RTOS_V2/cmsis_os2.c ****     #define configHEAP_5_REGIONS xHeapRegions
 123:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 124:../CMSIS_RTOS_V2/cmsis_os2.c ****     static uint8_t ucHeap[configTOTAL_HEAP_SIZE];
 125:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 126:../CMSIS_RTOS_V2/cmsis_os2.c ****     static HeapRegion_t xHeapRegions[] = {
 127:../CMSIS_RTOS_V2/cmsis_os2.c ****       { ucHeap, configTOTAL_HEAP_SIZE },
 128:../CMSIS_RTOS_V2/cmsis_os2.c ****       { NULL,   0                     }
 129:../CMSIS_RTOS_V2/cmsis_os2.c ****     };
 130:../CMSIS_RTOS_V2/cmsis_os2.c ****   #else
 131:../CMSIS_RTOS_V2/cmsis_os2.c ****     /* Global definition is provided to override default heap array */
 132:../CMSIS_RTOS_V2/cmsis_os2.c ****     extern HeapRegion_t configHEAP_5_REGIONS[];
 133:../CMSIS_RTOS_V2/cmsis_os2.c ****   #endif
 134:../CMSIS_RTOS_V2/cmsis_os2.c **** #else
 135:../CMSIS_RTOS_V2/cmsis_os2.c ****   /*
 136:../CMSIS_RTOS_V2/cmsis_os2.c ****     The application already defined the array used for the FreeRTOS heap and
 137:../CMSIS_RTOS_V2/cmsis_os2.c ****     called vPortDefineHeapRegions to initialize heap.
 138:../CMSIS_RTOS_V2/cmsis_os2.c ****   */
 139:../CMSIS_RTOS_V2/cmsis_os2.c ****   #define HEAP_5_REGION_SETUP   0
 140:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
 141:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif /* USE_FREERTOS_HEAP_5 */
 142:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 143:../CMSIS_RTOS_V2/cmsis_os2.c **** #if defined(SysTick)
 144:../CMSIS_RTOS_V2/cmsis_os2.c **** #undef SysTick_Handler
 145:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 146:../CMSIS_RTOS_V2/cmsis_os2.c **** /* CMSIS SysTick interrupt handler prototype */
 147:../CMSIS_RTOS_V2/cmsis_os2.c **** extern void SysTick_Handler     (void);
 148:../CMSIS_RTOS_V2/cmsis_os2.c **** /* FreeRTOS tick timer interrupt handler prototype */
 149:../CMSIS_RTOS_V2/cmsis_os2.c **** extern void xPortSysTickHandler (void);
 150:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 151:../CMSIS_RTOS_V2/cmsis_os2.c **** /*
 152:../CMSIS_RTOS_V2/cmsis_os2.c ****   SysTick handler implementation that also clears overflow flag.
 153:../CMSIS_RTOS_V2/cmsis_os2.c **** */
 154:../CMSIS_RTOS_V2/cmsis_os2.c **** void SysTick_Handler (void) {
 155:../CMSIS_RTOS_V2/cmsis_os2.c ****   /* Clear overflow flag */
 156:../CMSIS_RTOS_V2/cmsis_os2.c ****   SysTick->CTRL;
 157:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 158:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 159:../CMSIS_RTOS_V2/cmsis_os2.c ****     /* Call tick handler */
 160:../CMSIS_RTOS_V2/cmsis_os2.c ****     xPortSysTickHandler();
 161:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 162:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 163:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif /* SysTick */
 164:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 165:../CMSIS_RTOS_V2/cmsis_os2.c **** /*
 166:../CMSIS_RTOS_V2/cmsis_os2.c ****   Setup SVC to reset value.
 167:../CMSIS_RTOS_V2/cmsis_os2.c **** */
 168:../CMSIS_RTOS_V2/cmsis_os2.c **** __STATIC_INLINE void SVC_Setup (void) {
 169:../CMSIS_RTOS_V2/cmsis_os2.c **** #if (__ARM_ARCH_7A__ == 0U)
 170:../CMSIS_RTOS_V2/cmsis_os2.c ****   /* Service Call interrupt might be configured before kernel start     */
 171:../CMSIS_RTOS_V2/cmsis_os2.c ****   /* and when its priority is lower or equal to BASEPRI, svc intruction */
 172:../CMSIS_RTOS_V2/cmsis_os2.c ****   /* causes a Hard Fault.                                               */
 173:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 174:../CMSIS_RTOS_V2/cmsis_os2.c ****  /* 
 175:../CMSIS_RTOS_V2/cmsis_os2.c ****   * the call below has introduced a regression compared to revious release
 176:../CMSIS_RTOS_V2/cmsis_os2.c ****   * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
 177:../CMSIS_RTOS_V2/cmsis_os2.c ****   * until it is correctly fixed, the code below is commented
 178:../CMSIS_RTOS_V2/cmsis_os2.c ****   */
 179:../CMSIS_RTOS_V2/cmsis_os2.c **** /*    NVIC_SetPriority (SVCall_IRQn, 0U); */
 180:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
 181:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 182:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 183:../CMSIS_RTOS_V2/cmsis_os2.c **** /*---------------------------------------------------------------------------*/
 184:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 185:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osKernelInitialize (void) {
 186:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 187:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 188:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 189:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 190:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 191:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 192:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (KernelState == osKernelInactive) {
 193:../CMSIS_RTOS_V2/cmsis_os2.c ****       #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
 194:../CMSIS_RTOS_V2/cmsis_os2.c ****         vPortDefineHeapRegions (configHEAP_5_REGIONS);
 195:../CMSIS_RTOS_V2/cmsis_os2.c ****       #endif
 196:../CMSIS_RTOS_V2/cmsis_os2.c ****       KernelState = osKernelReady;
 197:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osOK;
 198:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
 199:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osError;
 200:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 201:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 202:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 203:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
 204:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 205:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 206:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 207:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 208:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (version != NULL) {
 209:../CMSIS_RTOS_V2/cmsis_os2.c ****     /* Version encoding is major.minor.rev: mmnnnrrrr dec */
 210:../CMSIS_RTOS_V2/cmsis_os2.c ****     version->api    = KERNEL_VERSION;
 211:../CMSIS_RTOS_V2/cmsis_os2.c ****     version->kernel = KERNEL_VERSION;
 212:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 213:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 214:../CMSIS_RTOS_V2/cmsis_os2.c ****   if ((id_buf != NULL) && (id_size != 0U)) {
 215:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (id_size > sizeof(KERNEL_ID)) {
 216:../CMSIS_RTOS_V2/cmsis_os2.c ****       id_size = sizeof(KERNEL_ID);
 217:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 218:../CMSIS_RTOS_V2/cmsis_os2.c ****     memcpy(id_buf, KERNEL_ID, id_size);
 219:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 220:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 221:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (osOK);
 222:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 223:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 224:../CMSIS_RTOS_V2/cmsis_os2.c **** osKernelState_t osKernelGetState (void) {
 225:../CMSIS_RTOS_V2/cmsis_os2.c ****   osKernelState_t state;
 226:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 227:../CMSIS_RTOS_V2/cmsis_os2.c ****   switch (xTaskGetSchedulerState()) {
 228:../CMSIS_RTOS_V2/cmsis_os2.c ****     case taskSCHEDULER_RUNNING:
 229:../CMSIS_RTOS_V2/cmsis_os2.c ****       state = osKernelRunning;
 230:../CMSIS_RTOS_V2/cmsis_os2.c ****       break;
 231:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 232:../CMSIS_RTOS_V2/cmsis_os2.c ****     case taskSCHEDULER_SUSPENDED:
 233:../CMSIS_RTOS_V2/cmsis_os2.c ****       state = osKernelLocked;
 234:../CMSIS_RTOS_V2/cmsis_os2.c ****       break;
 235:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 236:../CMSIS_RTOS_V2/cmsis_os2.c ****     case taskSCHEDULER_NOT_STARTED:
 237:../CMSIS_RTOS_V2/cmsis_os2.c ****     default:
 238:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (KernelState == osKernelReady) {
 239:../CMSIS_RTOS_V2/cmsis_os2.c ****         state = osKernelReady;
 240:../CMSIS_RTOS_V2/cmsis_os2.c ****       } else {
 241:../CMSIS_RTOS_V2/cmsis_os2.c ****         state = osKernelInactive;
 242:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 243:../CMSIS_RTOS_V2/cmsis_os2.c ****       break;
 244:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 245:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 246:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (state);
 247:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 248:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 249:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osKernelStart (void) {
 250:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 251:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 252:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 253:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 254:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 255:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 256:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (KernelState == osKernelReady) {
 257:../CMSIS_RTOS_V2/cmsis_os2.c ****       /* Ensure SVC priority is at the reset value */
 258:../CMSIS_RTOS_V2/cmsis_os2.c ****       SVC_Setup();
 259:../CMSIS_RTOS_V2/cmsis_os2.c ****       /* Change state to enable IRQ masking check */
 260:../CMSIS_RTOS_V2/cmsis_os2.c ****       KernelState = osKernelRunning;
 261:../CMSIS_RTOS_V2/cmsis_os2.c ****       /* Start the kernel scheduler */
 262:../CMSIS_RTOS_V2/cmsis_os2.c ****       vTaskStartScheduler();
 263:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osOK;
 264:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
 265:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osError;
 266:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 267:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 268:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 269:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
 270:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 271:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 272:../CMSIS_RTOS_V2/cmsis_os2.c **** int32_t osKernelLock (void) {
 273:../CMSIS_RTOS_V2/cmsis_os2.c ****   int32_t lock;
 274:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 275:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 276:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 277:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 278:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 279:../CMSIS_RTOS_V2/cmsis_os2.c ****     switch (xTaskGetSchedulerState()) {
 280:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_SUSPENDED:
 281:../CMSIS_RTOS_V2/cmsis_os2.c ****         lock = 1;
 282:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 283:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 284:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_RUNNING:
 285:../CMSIS_RTOS_V2/cmsis_os2.c ****         vTaskSuspendAll();
 286:../CMSIS_RTOS_V2/cmsis_os2.c ****         lock = 0;
 287:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 288:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 289:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_NOT_STARTED:
 290:../CMSIS_RTOS_V2/cmsis_os2.c ****       default:
 291:../CMSIS_RTOS_V2/cmsis_os2.c ****         lock = (int32_t)osError;
 292:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 293:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 294:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 295:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 296:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (lock);
 297:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 298:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 299:../CMSIS_RTOS_V2/cmsis_os2.c **** int32_t osKernelUnlock (void) {
 300:../CMSIS_RTOS_V2/cmsis_os2.c ****   int32_t lock;
 301:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 302:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 303:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 304:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 305:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 306:../CMSIS_RTOS_V2/cmsis_os2.c ****     switch (xTaskGetSchedulerState()) {
 307:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_SUSPENDED:
 308:../CMSIS_RTOS_V2/cmsis_os2.c ****         lock = 1;
 309:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 310:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (xTaskResumeAll() != pdTRUE) {
 311:../CMSIS_RTOS_V2/cmsis_os2.c ****           if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 312:../CMSIS_RTOS_V2/cmsis_os2.c ****             lock = (int32_t)osError;
 313:../CMSIS_RTOS_V2/cmsis_os2.c ****           }
 314:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 315:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 316:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 317:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_RUNNING:
 318:../CMSIS_RTOS_V2/cmsis_os2.c ****         lock = 0;
 319:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 320:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 321:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_NOT_STARTED:
 322:../CMSIS_RTOS_V2/cmsis_os2.c ****       default:
 323:../CMSIS_RTOS_V2/cmsis_os2.c ****         lock = (int32_t)osError;
 324:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 325:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 326:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 327:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 328:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (lock);
 329:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 330:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 331:../CMSIS_RTOS_V2/cmsis_os2.c **** int32_t osKernelRestoreLock (int32_t lock) {
 332:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 333:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 334:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 335:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 336:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 337:../CMSIS_RTOS_V2/cmsis_os2.c ****     switch (xTaskGetSchedulerState()) {
 338:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_SUSPENDED:
 339:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_RUNNING:
 340:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (lock == 1) {
 341:../CMSIS_RTOS_V2/cmsis_os2.c ****           vTaskSuspendAll();
 342:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 343:../CMSIS_RTOS_V2/cmsis_os2.c ****         else {
 344:../CMSIS_RTOS_V2/cmsis_os2.c ****           if (lock != 0) {
 345:../CMSIS_RTOS_V2/cmsis_os2.c ****             lock = (int32_t)osError;
 346:../CMSIS_RTOS_V2/cmsis_os2.c ****           }
 347:../CMSIS_RTOS_V2/cmsis_os2.c ****           else {
 348:../CMSIS_RTOS_V2/cmsis_os2.c ****             if (xTaskResumeAll() != pdTRUE) {
 349:../CMSIS_RTOS_V2/cmsis_os2.c ****               if (xTaskGetSchedulerState() != taskSCHEDULER_RUNNING) {
 350:../CMSIS_RTOS_V2/cmsis_os2.c ****                 lock = (int32_t)osError;
 351:../CMSIS_RTOS_V2/cmsis_os2.c ****               }
 352:../CMSIS_RTOS_V2/cmsis_os2.c ****             }
 353:../CMSIS_RTOS_V2/cmsis_os2.c ****           }
 354:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 355:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 356:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 357:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_NOT_STARTED:
 358:../CMSIS_RTOS_V2/cmsis_os2.c ****       default:
 359:../CMSIS_RTOS_V2/cmsis_os2.c ****         lock = (int32_t)osError;
 360:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 361:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 362:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 363:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 364:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (lock);
 365:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 366:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 367:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osKernelGetTickCount (void) {
 368:../CMSIS_RTOS_V2/cmsis_os2.c ****   TickType_t ticks;
 369:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 370:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 371:../CMSIS_RTOS_V2/cmsis_os2.c ****     ticks = xTaskGetTickCountFromISR();
 372:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 373:../CMSIS_RTOS_V2/cmsis_os2.c ****     ticks = xTaskGetTickCount();
 374:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 375:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 376:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (ticks);
 377:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 378:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 379:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osKernelGetTickFreq (void) {
 380:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (configTICK_RATE_HZ);
 381:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 382:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 383:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osKernelGetSysTimerCount (void) {
 384:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t irqmask = IS_IRQ_MASKED();
 385:../CMSIS_RTOS_V2/cmsis_os2.c ****   TickType_t ticks;
 386:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t val;
 387:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 388:../CMSIS_RTOS_V2/cmsis_os2.c ****   __disable_irq();
 389:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 390:../CMSIS_RTOS_V2/cmsis_os2.c ****   ticks = xTaskGetTickCount();
 391:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 392:../CMSIS_RTOS_V2/cmsis_os2.c ****   val = ticks * ( configCPU_CLOCK_HZ / configTICK_RATE_HZ );
 393:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (irqmask == 0U) {
 394:../CMSIS_RTOS_V2/cmsis_os2.c ****     __enable_irq();
 395:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 396:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 397:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (val);
 398:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 399:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 400:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osKernelGetSysTimerFreq (void) {
 401:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (configCPU_CLOCK_HZ);
 402:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 403:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 404:../CMSIS_RTOS_V2/cmsis_os2.c **** /*---------------------------------------------------------------------------*/
 405:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 406:../CMSIS_RTOS_V2/cmsis_os2.c **** osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 407:../CMSIS_RTOS_V2/cmsis_os2.c ****   const char *name;
 408:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t stack;
 409:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask;
 410:../CMSIS_RTOS_V2/cmsis_os2.c ****   UBaseType_t prio;
 411:../CMSIS_RTOS_V2/cmsis_os2.c ****   int32_t mem;
 412:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 413:../CMSIS_RTOS_V2/cmsis_os2.c ****   hTask = NULL;
 414:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 415:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (!IS_IRQ() && (func != NULL)) {
 416:../CMSIS_RTOS_V2/cmsis_os2.c ****     stack = configMINIMAL_STACK_SIZE;
 417:../CMSIS_RTOS_V2/cmsis_os2.c ****     prio  = (UBaseType_t)osPriorityNormal;
 418:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 419:../CMSIS_RTOS_V2/cmsis_os2.c ****     name = NULL;
 420:../CMSIS_RTOS_V2/cmsis_os2.c ****     mem  = -1;
 421:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 422:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (attr != NULL) {
 423:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (attr->name != NULL) {
 424:../CMSIS_RTOS_V2/cmsis_os2.c ****         name = attr->name;
 425:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 426:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (attr->priority != osPriorityNone) {
 427:../CMSIS_RTOS_V2/cmsis_os2.c ****         prio = (UBaseType_t)attr->priority;
 428:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 429:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 430:../CMSIS_RTOS_V2/cmsis_os2.c ****       if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable
 431:../CMSIS_RTOS_V2/cmsis_os2.c ****         return (NULL);
 432:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 433:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 434:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (attr->stack_size > 0U) {
 435:../CMSIS_RTOS_V2/cmsis_os2.c ****         /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.  
 436:../CMSIS_RTOS_V2/cmsis_os2.c ****         /* Stack size should be therefore 4 byte aligned in order to avoid division caused side eff
 437:../CMSIS_RTOS_V2/cmsis_os2.c ****         stack = attr->stack_size / sizeof(StackType_t);
 438:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 439:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 440:../CMSIS_RTOS_V2/cmsis_os2.c ****       if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 441:../CMSIS_RTOS_V2/cmsis_os2.c ****           (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 442:../CMSIS_RTOS_V2/cmsis_os2.c ****         mem = 1;
 443:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 444:../CMSIS_RTOS_V2/cmsis_os2.c ****       else {
 445:../CMSIS_RTOS_V2/cmsis_os2.c ****         if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 446:../CMSIS_RTOS_V2/cmsis_os2.c ****           mem = 0;
 447:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 448:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 449:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 450:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
 451:../CMSIS_RTOS_V2/cmsis_os2.c ****       mem = 0;
 452:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 453:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 454:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (mem == 1) {
 455:../CMSIS_RTOS_V2/cmsis_os2.c ****       hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *
 456:../CMSIS_RTOS_V2/cmsis_os2.c ****                                                                                     (StaticTask_t *
 457:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 458:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
 459:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (mem == 0) {
 460:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pd
 461:../CMSIS_RTOS_V2/cmsis_os2.c ****           hTask = NULL;
 462:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 463:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 464:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 465:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 466:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 467:../CMSIS_RTOS_V2/cmsis_os2.c ****   return ((osThreadId_t)hTask);
 468:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 469:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 470:../CMSIS_RTOS_V2/cmsis_os2.c **** const char *osThreadGetName (osThreadId_t thread_id) {
 471:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 472:../CMSIS_RTOS_V2/cmsis_os2.c ****   const char *name;
 473:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 474:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ() || (hTask == NULL)) {
 475:../CMSIS_RTOS_V2/cmsis_os2.c ****     name = NULL;
 476:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 477:../CMSIS_RTOS_V2/cmsis_os2.c ****     name = pcTaskGetName (hTask);
 478:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 479:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 480:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (name);
 481:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 482:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 483:../CMSIS_RTOS_V2/cmsis_os2.c **** osThreadId_t osThreadGetId (void) {
 484:../CMSIS_RTOS_V2/cmsis_os2.c ****   osThreadId_t id;
 485:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 486:../CMSIS_RTOS_V2/cmsis_os2.c ****   id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 487:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 488:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (id);
 489:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 490:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 491:../CMSIS_RTOS_V2/cmsis_os2.c **** osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 492:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 493:../CMSIS_RTOS_V2/cmsis_os2.c ****   osThreadState_t state;
 494:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 495:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ() || (hTask == NULL)) {
 496:../CMSIS_RTOS_V2/cmsis_os2.c ****     state = osThreadError;
 497:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 498:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 499:../CMSIS_RTOS_V2/cmsis_os2.c ****     switch (eTaskGetState (hTask)) {
 500:../CMSIS_RTOS_V2/cmsis_os2.c ****       case eRunning:   state = osThreadRunning;    break;
 501:../CMSIS_RTOS_V2/cmsis_os2.c ****       case eReady:     state = osThreadReady;      break;
 502:../CMSIS_RTOS_V2/cmsis_os2.c ****       case eBlocked:
 503:../CMSIS_RTOS_V2/cmsis_os2.c ****       case eSuspended: state = osThreadBlocked;    break;
 504:../CMSIS_RTOS_V2/cmsis_os2.c ****       case eDeleted:   state = osThreadTerminated; break;
 505:../CMSIS_RTOS_V2/cmsis_os2.c ****       case eInvalid:
 506:../CMSIS_RTOS_V2/cmsis_os2.c ****       default:         state = osThreadError;      break;
 507:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 508:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 509:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 510:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (state);
 511:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 512:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 513:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 514:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 515:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t sz;
 516:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 517:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ() || (hTask == NULL)) {
 518:../CMSIS_RTOS_V2/cmsis_os2.c ****     sz = 0U;
 519:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 520:../CMSIS_RTOS_V2/cmsis_os2.c ****     sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 521:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 522:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 523:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (sz);
 524:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 525:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 526:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 527:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 528:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 529:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 530:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 531:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 532:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 533:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 534:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 535:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 536:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 537:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osOK;
 538:../CMSIS_RTOS_V2/cmsis_os2.c ****     vTaskPrioritySet (hTask, (UBaseType_t)priority);
 539:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 540:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 541:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
 542:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 543:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 544:../CMSIS_RTOS_V2/cmsis_os2.c **** osPriority_t osThreadGetPriority (osThreadId_t thread_id) {
 545:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 546:../CMSIS_RTOS_V2/cmsis_os2.c ****   osPriority_t prio;
 547:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 548:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ() || (hTask == NULL)) {
 549:../CMSIS_RTOS_V2/cmsis_os2.c ****     prio = osPriorityError;
 550:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 551:../CMSIS_RTOS_V2/cmsis_os2.c ****     prio = (osPriority_t)uxTaskPriorityGet (hTask);
 552:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 553:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 554:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (prio);
 555:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 556:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 557:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osThreadYield (void) {
 558:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 559:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 560:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 561:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 562:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 563:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osOK;
 564:../CMSIS_RTOS_V2/cmsis_os2.c ****     taskYIELD();
 565:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 566:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 567:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
 568:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 569:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 570:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 571:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 572:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 573:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 574:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 575:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 576:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 577:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hTask == NULL) {
 578:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 579:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 580:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 581:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osOK;
 582:../CMSIS_RTOS_V2/cmsis_os2.c ****     vTaskSuspend (hTask);
 583:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 584:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 585:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
 586:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 587:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 588:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osThreadResume (osThreadId_t thread_id) {
 589:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 590:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 591:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 592:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 593:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 594:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 595:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hTask == NULL) {
 596:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 597:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 598:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 599:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osOK;
 600:../CMSIS_RTOS_V2/cmsis_os2.c ****     vTaskResume (hTask);
 601:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 602:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 603:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
 604:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 605:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 606:../CMSIS_RTOS_V2/cmsis_os2.c **** __NO_RETURN void osThreadExit (void) {
 607:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef USE_FreeRTOS_HEAP_1
 608:../CMSIS_RTOS_V2/cmsis_os2.c ****   vTaskDelete (NULL);
 609:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
 610:../CMSIS_RTOS_V2/cmsis_os2.c ****   for (;;);
 611:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 612:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 613:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 614:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 615:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 616:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef USE_FreeRTOS_HEAP_1
 617:../CMSIS_RTOS_V2/cmsis_os2.c ****   eTaskState tstate;
 618:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 619:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 620:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 621:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 622:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hTask == NULL) {
 623:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 624:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 625:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 626:../CMSIS_RTOS_V2/cmsis_os2.c ****     tstate = eTaskGetState (hTask);
 627:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 628:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (tstate != eDeleted) {
 629:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osOK;
 630:../CMSIS_RTOS_V2/cmsis_os2.c ****       vTaskDelete (hTask);
 631:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
 632:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorResource;
 633:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 634:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 635:../CMSIS_RTOS_V2/cmsis_os2.c **** #else
 636:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osError;
 637:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
 638:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 639:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
 640:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 641:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 642:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osThreadGetCount (void) {
 643:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t count;
 644:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 645:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 646:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 647:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 648:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = uxTaskGetNumberOfTasks();
 649:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 650:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 651:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (count);
 652:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 653:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 654:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osThreadEnumerate (osThreadId_t *thread_array, uint32_t array_items) {
 655:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t i, count;
 656:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskStatus_t *task;
 657:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 658:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ() || (thread_array == NULL) || (array_items == 0U)) {
 659:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 660:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 661:../CMSIS_RTOS_V2/cmsis_os2.c ****     vTaskSuspendAll();
 662:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 663:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = uxTaskGetNumberOfTasks();
 664:../CMSIS_RTOS_V2/cmsis_os2.c ****     task  = pvPortMalloc (count * sizeof(TaskStatus_t));
 665:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 666:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (task != NULL) {
 667:../CMSIS_RTOS_V2/cmsis_os2.c ****       count = uxTaskGetSystemState (task, count, NULL);
 668:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 669:../CMSIS_RTOS_V2/cmsis_os2.c ****       for (i = 0U; (i < count) && (i < array_items); i++) {
 670:../CMSIS_RTOS_V2/cmsis_os2.c ****         thread_array[i] = (osThreadId_t)task[i].xHandle;
 671:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 672:../CMSIS_RTOS_V2/cmsis_os2.c ****       count = i;
 673:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 674:../CMSIS_RTOS_V2/cmsis_os2.c ****     (void)xTaskResumeAll();
 675:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 676:../CMSIS_RTOS_V2/cmsis_os2.c ****     vPortFree (task);
 677:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 678:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 679:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (count);
 680:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 681:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 682:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 683:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 684:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rflags;
 685:../CMSIS_RTOS_V2/cmsis_os2.c ****   BaseType_t yield;
 686:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 687:../CMSIS_RTOS_V2/cmsis_os2.c ****   if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 688:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorParameter;
 689:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 690:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 691:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osError;
 692:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 693:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (IS_IRQ()) {
 694:../CMSIS_RTOS_V2/cmsis_os2.c ****       yield = pdFALSE;
 695:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 696:../CMSIS_RTOS_V2/cmsis_os2.c ****       (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 697:../CMSIS_RTOS_V2/cmsis_os2.c ****       (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 698:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 699:../CMSIS_RTOS_V2/cmsis_os2.c ****       portYIELD_FROM_ISR (yield);
 700:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 701:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
 702:../CMSIS_RTOS_V2/cmsis_os2.c ****       (void)xTaskNotify (hTask, flags, eSetBits);
 703:../CMSIS_RTOS_V2/cmsis_os2.c ****       (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 704:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 705:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 706:../CMSIS_RTOS_V2/cmsis_os2.c ****   /* Return flags after setting */
 707:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (rflags);
 708:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 709:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 710:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osThreadFlagsClear (uint32_t flags) {
 711:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask;
 712:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rflags, cflags;
 713:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 714:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 715:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 716:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 717:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 718:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorParameter;
 719:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 720:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 721:../CMSIS_RTOS_V2/cmsis_os2.c ****     hTask = xTaskGetCurrentTaskHandle();
 722:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 723:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 724:../CMSIS_RTOS_V2/cmsis_os2.c ****       rflags = cflags;
 725:../CMSIS_RTOS_V2/cmsis_os2.c ****       cflags &= ~flags;
 726:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 727:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 728:../CMSIS_RTOS_V2/cmsis_os2.c ****         rflags = (uint32_t)osError;
 729:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 730:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 731:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
 732:../CMSIS_RTOS_V2/cmsis_os2.c ****       rflags = (uint32_t)osError;
 733:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 734:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 735:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 736:../CMSIS_RTOS_V2/cmsis_os2.c ****   /* Return flags before clearing */
 737:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (rflags);
 738:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 739:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 740:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osThreadFlagsGet (void) {
 741:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask;
 742:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rflags;
 743:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 744:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 745:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 746:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 747:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 748:../CMSIS_RTOS_V2/cmsis_os2.c ****     hTask = xTaskGetCurrentTaskHandle();
 749:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 750:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 751:../CMSIS_RTOS_V2/cmsis_os2.c ****       rflags = (uint32_t)osError;
 752:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 753:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 754:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 755:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (rflags);
 756:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 757:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 758:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 759:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rflags, nval;
 760:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t clear;
 761:../CMSIS_RTOS_V2/cmsis_os2.c ****   TickType_t t0, td, tout;
 762:../CMSIS_RTOS_V2/cmsis_os2.c ****   BaseType_t rval;
 763:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 764:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 765:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 766:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 767:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 768:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorParameter;
 769:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 770:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 771:../CMSIS_RTOS_V2/cmsis_os2.c ****     if ((options & osFlagsNoClear) == osFlagsNoClear) {
 772:../CMSIS_RTOS_V2/cmsis_os2.c ****       clear = 0U;
 773:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
 774:../CMSIS_RTOS_V2/cmsis_os2.c ****       clear = flags;
 775:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 776:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 777:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = 0U;
 778:../CMSIS_RTOS_V2/cmsis_os2.c ****     tout   = timeout;
 779:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 780:../CMSIS_RTOS_V2/cmsis_os2.c ****     t0 = xTaskGetTickCount();
 781:../CMSIS_RTOS_V2/cmsis_os2.c ****     do {
 782:../CMSIS_RTOS_V2/cmsis_os2.c ****       rval = xTaskNotifyWait (0, clear, &nval, tout);
 783:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 784:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (rval == pdPASS) {
 785:../CMSIS_RTOS_V2/cmsis_os2.c ****         rflags &= flags;
 786:../CMSIS_RTOS_V2/cmsis_os2.c ****         rflags |= nval;
 787:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 788:../CMSIS_RTOS_V2/cmsis_os2.c ****         if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 789:../CMSIS_RTOS_V2/cmsis_os2.c ****           if ((flags & rflags) == flags) {
 790:../CMSIS_RTOS_V2/cmsis_os2.c ****             break;
 791:../CMSIS_RTOS_V2/cmsis_os2.c ****           } else {
 792:../CMSIS_RTOS_V2/cmsis_os2.c ****             if (timeout == 0U) {
 793:../CMSIS_RTOS_V2/cmsis_os2.c ****               rflags = (uint32_t)osErrorResource;
 794:../CMSIS_RTOS_V2/cmsis_os2.c ****               break;
 795:../CMSIS_RTOS_V2/cmsis_os2.c ****             }
 796:../CMSIS_RTOS_V2/cmsis_os2.c ****           }
 797:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 798:../CMSIS_RTOS_V2/cmsis_os2.c ****         else {
 799:../CMSIS_RTOS_V2/cmsis_os2.c ****           if ((flags & rflags) != 0) {
 800:../CMSIS_RTOS_V2/cmsis_os2.c ****             break;
 801:../CMSIS_RTOS_V2/cmsis_os2.c ****           } else {
 802:../CMSIS_RTOS_V2/cmsis_os2.c ****             if (timeout == 0U) {
 803:../CMSIS_RTOS_V2/cmsis_os2.c ****               rflags = (uint32_t)osErrorResource;
 804:../CMSIS_RTOS_V2/cmsis_os2.c ****               break;
 805:../CMSIS_RTOS_V2/cmsis_os2.c ****             }
 806:../CMSIS_RTOS_V2/cmsis_os2.c ****           }
 807:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 808:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 809:../CMSIS_RTOS_V2/cmsis_os2.c ****         /* Update timeout */
 810:../CMSIS_RTOS_V2/cmsis_os2.c ****         td = xTaskGetTickCount() - t0;
 811:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 812:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (td > tout) {
 813:../CMSIS_RTOS_V2/cmsis_os2.c ****           tout  = 0;
 814:../CMSIS_RTOS_V2/cmsis_os2.c ****         } else {
 815:../CMSIS_RTOS_V2/cmsis_os2.c ****           tout -= td;
 816:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 817:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 818:../CMSIS_RTOS_V2/cmsis_os2.c ****       else {
 819:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (timeout == 0) {
 820:../CMSIS_RTOS_V2/cmsis_os2.c ****           rflags = (uint32_t)osErrorResource;
 821:../CMSIS_RTOS_V2/cmsis_os2.c ****         } else {
 822:../CMSIS_RTOS_V2/cmsis_os2.c ****           rflags = (uint32_t)osErrorTimeout;
 823:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 824:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 825:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 826:../CMSIS_RTOS_V2/cmsis_os2.c ****     while (rval != pdFAIL);
 827:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 828:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 829:../CMSIS_RTOS_V2/cmsis_os2.c ****   /* Return flags before clearing */
 830:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (rflags);
 831:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 832:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 833:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osDelay (uint32_t ticks) {
 834:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 835:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 836:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 837:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 838:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 839:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 840:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osOK;
 841:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 842:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (ticks != 0U) {
 843:../CMSIS_RTOS_V2/cmsis_os2.c ****       vTaskDelay(ticks);
 844:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 845:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 846:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 847:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
 848:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 849:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 850:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osDelayUntil (uint32_t ticks) {
 851:../CMSIS_RTOS_V2/cmsis_os2.c ****   TickType_t tcnt, delay;
 852:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 853:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 854:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 855:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 856:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 857:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 858:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osOK;
 859:../CMSIS_RTOS_V2/cmsis_os2.c ****     tcnt = xTaskGetTickCount();
 860:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 861:../CMSIS_RTOS_V2/cmsis_os2.c ****     /* Determine remaining number of ticks to delay */
 862:../CMSIS_RTOS_V2/cmsis_os2.c ****     delay = (TickType_t)ticks - tcnt;
 863:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 864:../CMSIS_RTOS_V2/cmsis_os2.c ****     /* Check if target tick has not expired */
 865:../CMSIS_RTOS_V2/cmsis_os2.c ****     if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 866:../CMSIS_RTOS_V2/cmsis_os2.c ****       vTaskDelayUntil (&tcnt, delay);
 867:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 868:../CMSIS_RTOS_V2/cmsis_os2.c ****     else
 869:../CMSIS_RTOS_V2/cmsis_os2.c ****     {
 870:../CMSIS_RTOS_V2/cmsis_os2.c ****       /* No delay or already expired */
 871:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorParameter;
 872:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 873:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 874:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 875:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
 876:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 877:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 878:../CMSIS_RTOS_V2/cmsis_os2.c **** /*---------------------------------------------------------------------------*/
 879:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 880:../CMSIS_RTOS_V2/cmsis_os2.c **** static void TimerCallback (TimerHandle_t hTimer) {
  26              	 .loc 1 880 0
  27              	 .cfi_startproc
  28              	 
  29              	 
  30              	.LVL0:
  31 0000 08B5     	 push {r3,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 8
  34              	 .cfi_offset 3,-8
  35              	 .cfi_offset 14,-4
 881:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerCallback_t *callb;
 882:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 883:../CMSIS_RTOS_V2/cmsis_os2.c ****   callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
  36              	 .loc 1 883 0
  37 0002 FFF7FEFF 	 bl pvTimerGetTimerID
  38              	.LVL1:
 884:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 885:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (callb != NULL) {
  39              	 .loc 1 885 0
  40 0006 10B1     	 cbz r0,.L1
 886:../CMSIS_RTOS_V2/cmsis_os2.c ****     callb->func (callb->arg);
  41              	 .loc 1 886 0
  42 0008 0268     	 ldr r2,[r0]
  43 000a 4068     	 ldr r0,[r0,#4]
  44              	.LVL2:
  45 000c 9047     	 blx r2
  46              	.LVL3:
  47              	.L1:
  48 000e 08BD     	 pop {r3,pc}
  49              	 .cfi_endproc
  50              	.LFE139:
  52              	 .section .text.osKernelInitialize,"ax",%progbits
  53              	 .align 2
  54              	 .global osKernelInitialize
  55              	 .thumb
  56              	 .thumb_func
  58              	osKernelInitialize:
  59              	.LFB108:
 185:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
  60              	 .loc 1 185 0
  61              	 .cfi_startproc
  62              	 
  63              	 
  64              	 
  65              	.LBB342:
  66              	.LBB343:
  67              	 .file 2 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include/cmsis_gcc.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @version  V5.0.2
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @date     13. February 2017
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /*
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  * limitations under the License.
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __has_builtin
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ASM
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ASM                                  __asm
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __INLINE
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __INLINE                               inline
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif                                           
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __USED
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __WEAK
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ALIGNED
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __RESTRICT
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Control Register value
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               non-secure Control Register value
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get IPSR Register
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               IPSR Register value
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
  68              	 .loc 2 209 0
  69              	
  70 0000 EFF30583 	 MRS r3,ipsr
  71              	
  72              	.LVL4:
  73              	 .thumb
  74              	.LBE343:
  75              	.LBE342:
 188:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
  76              	 .loc 1 188 0
  77 0004 8BB9     	 cbnz r3,.L8
  78              	.LBB344:
  79              	.LBB345:
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get APSR Register
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               APSR Register value
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get xPSR Register
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               xPSR Register value
 232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               SP Register value
 355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask
 379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  80              	 .loc 2 386 0
  81              	
  82 0006 EFF31083 	 MRS r3,primask
  83              	
  84              	.LVL5:
  85              	 .thumb
  86              	.LBE345:
  87              	.LBE344:
 188:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
  88              	 .loc 1 188 0
  89 000a 13B9     	 cbnz r3,.L6
  90              	.LBB346:
  91              	.LBB347:
 387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask
 409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable FIQ
 436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable FIQ
 447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority
 458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
  92              	 .loc 2 465 0
  93              	
  94 000c EFF31183 	 MRS r3,basepri
  95              	
  96              	.LVL6:
  97              	 .thumb
  98              	.LBE347:
  99              	.LBE346:
 188:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 100              	 .loc 1 188 0
 101 0010 1BB1     	 cbz r3,.L7
 102              	.LVL7:
 103              	.L6:
 188:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 104              	 .loc 1 188 0 is_stmt 0 discriminator 4
 105 0012 0A4B     	 ldr r3,.L11
 106 0014 1B68     	 ldr r3,[r3]
 107 0016 022B     	 cmp r3,#2
 108 0018 0AD0     	 beq .L9
 109              	.L7:
 192:../CMSIS_RTOS_V2/cmsis_os2.c ****       #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
 110              	 .loc 1 192 0 is_stmt 1
 111 001a 084B     	 ldr r3,.L11
 112 001c 1B68     	 ldr r3,[r3]
 113 001e 53B9     	 cbnz r3,.L10
 196:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osOK;
 114              	 .loc 1 196 0
 115 0020 0122     	 movs r2,#1
 116 0022 064B     	 ldr r3,.L11
 117 0024 1A60     	 str r2,[r3]
 118              	.LVL8:
 197:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
 119              	 .loc 1 197 0
 120 0026 0020     	 movs r0,#0
 121 0028 7047     	 bx lr
 122              	.LVL9:
 123              	.L8:
 189:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 124              	 .loc 1 189 0
 125 002a 6FF00500 	 mvn r0,#5
 126 002e 7047     	 bx lr
 127              	.LVL10:
 128              	.L9:
 129 0030 6FF00500 	 mvn r0,#5
 130 0034 7047     	 bx lr
 131              	.L10:
 199:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 132              	 .loc 1 199 0
 133 0036 4FF0FF30 	 mov r0,#-1
 134              	.LVL11:
 204:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 135              	 .loc 1 204 0
 136 003a 7047     	 bx lr
 137              	.L12:
 138              	 .align 2
 139              	.L11:
 140 003c 00000000 	 .word .LANCHOR0
 141              	 .cfi_endproc
 142              	.LFE108:
 144              	 .section .text.osKernelGetInfo,"ax",%progbits
 145              	 .align 2
 146              	 .global osKernelGetInfo
 147              	 .thumb
 148              	 .thumb_func
 150              	osKernelGetInfo:
 151              	.LFB109:
 206:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 152              	 .loc 1 206 0
 153              	 .cfi_startproc
 154              	 
 155              	 
 156              	.LVL12:
 157 0000 08B5     	 push {r3,lr}
 158              	.LCFI1:
 159              	 .cfi_def_cfa_offset 8
 160              	 .cfi_offset 3,-8
 161              	 .cfi_offset 14,-4
 208:../CMSIS_RTOS_V2/cmsis_os2.c ****     /* Version encoding is major.minor.rev: mmnnnrrrr dec */
 162              	 .loc 1 208 0
 163 0002 18B1     	 cbz r0,.L14
 164 0004 0346     	 mov r3,r0
 210:../CMSIS_RTOS_V2/cmsis_os2.c ****     version->kernel = KERNEL_VERSION;
 165              	 .loc 1 210 0
 166 0006 0748     	 ldr r0,.L17
 167              	.LVL13:
 168 0008 1860     	 str r0,[r3]
 211:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 169              	 .loc 1 211 0
 170 000a 5860     	 str r0,[r3,#4]
 171              	.LVL14:
 172              	.L14:
 214:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (id_size > sizeof(KERNEL_ID)) {
 173              	 .loc 1 214 0
 174 000c 39B1     	 cbz r1,.L15
 214:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (id_size > sizeof(KERNEL_ID)) {
 175              	 .loc 1 214 0 is_stmt 0 discriminator 1
 176 000e 32B1     	 cbz r2,.L15
 177 0010 0846     	 mov r0,r1
 178              	.LVL15:
 218:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 179              	 .loc 1 218 0 is_stmt 1
 180 0012 0549     	 ldr r1,.L17+4
 181              	.LVL16:
 182 0014 112A     	 cmp r2,#17
 183 0016 28BF     	 it cs
 184 0018 1122     	 movcs r2,#17
 185              	.LVL17:
 186 001a FFF7FEFF 	 bl memcpy
 187              	.LVL18:
 188              	.L15:
 222:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 189              	 .loc 1 222 0
 190 001e 0020     	 movs r0,#0
 191 0020 08BD     	 pop {r3,pc}
 192              	.L18:
 193 0022 00BF     	 .align 2
 194              	.L17:
 195 0024 41FDF505 	 .word 100007233
 196 0028 00000000 	 .word .LC0
 197              	 .cfi_endproc
 198              	.LFE109:
 200              	 .section .text.osKernelGetState,"ax",%progbits
 201              	 .align 2
 202              	 .global osKernelGetState
 203              	 .thumb
 204              	 .thumb_func
 206              	osKernelGetState:
 207              	.LFB110:
 224:../CMSIS_RTOS_V2/cmsis_os2.c ****   osKernelState_t state;
 208              	 .loc 1 224 0
 209              	 .cfi_startproc
 210              	 
 211              	 
 212 0000 08B5     	 push {r3,lr}
 213              	.LCFI2:
 214              	 .cfi_def_cfa_offset 8
 215              	 .cfi_offset 3,-8
 216              	 .cfi_offset 14,-4
 227:../CMSIS_RTOS_V2/cmsis_os2.c ****     case taskSCHEDULER_RUNNING:
 217              	 .loc 1 227 0
 218 0002 FFF7FEFF 	 bl xTaskGetSchedulerState
 219              	.LVL19:
 220 0006 10B1     	 cbz r0,.L21
 221 0008 0228     	 cmp r0,#2
 222 000a 09D0     	 beq .L23
 223 000c 01E0     	 b .L24
 224              	.L21:
 233:../CMSIS_RTOS_V2/cmsis_os2.c ****       break;
 225              	 .loc 1 233 0
 226 000e 0320     	 movs r0,#3
 227 0010 08BD     	 pop {r3,pc}
 228              	.L24:
 238:../CMSIS_RTOS_V2/cmsis_os2.c ****         state = osKernelReady;
 229              	 .loc 1 238 0
 230 0012 044B     	 ldr r3,.L26
 231 0014 1868     	 ldr r0,[r3]
 232 0016 0128     	 cmp r0,#1
 233 0018 14BF     	 ite ne
 234 001a 0020     	 movne r0,#0
 235 001c 0120     	 moveq r0,#1
 236 001e 08BD     	 pop {r3,pc}
 237              	.L23:
 229:../CMSIS_RTOS_V2/cmsis_os2.c ****       break;
 238              	 .loc 1 229 0
 239 0020 0220     	 movs r0,#2
 240              	.LVL20:
 247:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 241              	 .loc 1 247 0
 242 0022 08BD     	 pop {r3,pc}
 243              	.L27:
 244              	 .align 2
 245              	.L26:
 246 0024 00000000 	 .word .LANCHOR0
 247              	 .cfi_endproc
 248              	.LFE110:
 250              	 .section .text.osKernelStart,"ax",%progbits
 251              	 .align 2
 252              	 .global osKernelStart
 253              	 .thumb
 254              	 .thumb_func
 256              	osKernelStart:
 257              	.LFB111:
 249:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 258              	 .loc 1 249 0
 259              	 .cfi_startproc
 260              	 
 261              	 
 262 0000 08B5     	 push {r3,lr}
 263              	.LCFI3:
 264              	 .cfi_def_cfa_offset 8
 265              	 .cfi_offset 3,-8
 266              	 .cfi_offset 14,-4
 267              	.LBB348:
 268              	.LBB349:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 269              	 .loc 2 209 0
 270              	
 271 0002 EFF30583 	 MRS r3,ipsr
 272              	
 273              	.LVL21:
 274              	 .thumb
 275              	.LBE349:
 276              	.LBE348:
 252:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 277              	 .loc 1 252 0
 278 0006 A3B9     	 cbnz r3,.L32
 279              	.LBB350:
 280              	.LBB351:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 281              	 .loc 2 386 0
 282              	
 283 0008 EFF31083 	 MRS r3,primask
 284              	
 285              	.LVL22:
 286              	 .thumb
 287              	.LBE351:
 288              	.LBE350:
 252:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 289              	 .loc 1 252 0
 290 000c 13B9     	 cbnz r3,.L30
 291              	.LBB352:
 292              	.LBB353:
 293              	 .loc 2 465 0
 294              	
 295 000e EFF31183 	 MRS r3,basepri
 296              	
 297              	.LVL23:
 298              	 .thumb
 299              	.LBE353:
 300              	.LBE352:
 252:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 301              	 .loc 1 252 0
 302 0012 1BB1     	 cbz r3,.L31
 303              	.LVL24:
 304              	.L30:
 252:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 305              	 .loc 1 252 0 is_stmt 0 discriminator 4
 306 0014 0B4B     	 ldr r3,.L36
 307 0016 1B68     	 ldr r3,[r3]
 308 0018 022B     	 cmp r3,#2
 309 001a 0DD0     	 beq .L33
 310              	.L31:
 256:../CMSIS_RTOS_V2/cmsis_os2.c ****       /* Ensure SVC priority is at the reset value */
 311              	 .loc 1 256 0 is_stmt 1
 312 001c 094B     	 ldr r3,.L36
 313 001e 1B68     	 ldr r3,[r3]
 314 0020 012B     	 cmp r3,#1
 315 0022 0CD1     	 bne .L34
 260:../CMSIS_RTOS_V2/cmsis_os2.c ****       /* Start the kernel scheduler */
 316              	 .loc 1 260 0
 317 0024 0222     	 movs r2,#2
 318 0026 074B     	 ldr r3,.L36
 319 0028 1A60     	 str r2,[r3]
 262:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osOK;
 320              	 .loc 1 262 0
 321 002a FFF7FEFF 	 bl vTaskStartScheduler
 322              	.LVL25:
 263:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
 323              	 .loc 1 263 0
 324 002e 0020     	 movs r0,#0
 325 0030 08BD     	 pop {r3,pc}
 326              	.LVL26:
 327              	.L32:
 253:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 328              	 .loc 1 253 0
 329 0032 6FF00500 	 mvn r0,#5
 330 0036 08BD     	 pop {r3,pc}
 331              	.LVL27:
 332              	.L33:
 333 0038 6FF00500 	 mvn r0,#5
 334 003c 08BD     	 pop {r3,pc}
 335              	.L34:
 265:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 336              	 .loc 1 265 0
 337 003e 4FF0FF30 	 mov r0,#-1
 338              	.LVL28:
 270:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 339              	 .loc 1 270 0
 340 0042 08BD     	 pop {r3,pc}
 341              	.L37:
 342              	 .align 2
 343              	.L36:
 344 0044 00000000 	 .word .LANCHOR0
 345              	 .cfi_endproc
 346              	.LFE111:
 348              	 .section .text.osKernelLock,"ax",%progbits
 349              	 .align 2
 350              	 .global osKernelLock
 351              	 .thumb
 352              	 .thumb_func
 354              	osKernelLock:
 355              	.LFB112:
 272:../CMSIS_RTOS_V2/cmsis_os2.c ****   int32_t lock;
 356              	 .loc 1 272 0
 357              	 .cfi_startproc
 358              	 
 359              	 
 360 0000 08B5     	 push {r3,lr}
 361              	.LCFI4:
 362              	 .cfi_def_cfa_offset 8
 363              	 .cfi_offset 3,-8
 364              	 .cfi_offset 14,-4
 365              	.LBB354:
 366              	.LBB355:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 367              	 .loc 2 209 0
 368              	
 369 0002 EFF30583 	 MRS r3,ipsr
 370              	
 371              	.LVL29:
 372              	 .thumb
 373              	.LBE355:
 374              	.LBE354:
 275:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 375              	 .loc 1 275 0
 376 0006 ABB9     	 cbnz r3,.L44
 377              	.LBB356:
 378              	.LBB357:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 379              	 .loc 2 386 0
 380              	
 381 0008 EFF31083 	 MRS r3,primask
 382              	
 383              	.LVL30:
 384              	 .thumb
 385              	.LBE357:
 386              	.LBE356:
 275:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 387              	 .loc 1 275 0
 388 000c 13B9     	 cbnz r3,.L40
 389              	.LBB358:
 390              	.LBB359:
 391              	 .loc 2 465 0
 392              	
 393 000e EFF31183 	 MRS r3,basepri
 394              	
 395              	.LVL31:
 396              	 .thumb
 397              	.LBE359:
 398              	.LBE358:
 275:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 399              	 .loc 1 275 0
 400 0012 1BB1     	 cbz r3,.L41
 401              	.LVL32:
 402              	.L40:
 275:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 403              	 .loc 1 275 0 is_stmt 0 discriminator 4
 404 0014 0B4B     	 ldr r3,.L48
 405 0016 1B68     	 ldr r3,[r3]
 406 0018 022B     	 cmp r3,#2
 407 001a 0ED0     	 beq .L45
 408              	.L41:
 279:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_SUSPENDED:
 409              	 .loc 1 279 0 is_stmt 1
 410 001c FFF7FEFF 	 bl xTaskGetSchedulerState
 411              	.LVL33:
 412 0020 70B1     	 cbz r0,.L46
 413 0022 0228     	 cmp r0,#2
 414 0024 02D0     	 beq .L43
 291:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 415              	 .loc 1 291 0
 416 0026 4FF0FF30 	 mov r0,#-1
 417 002a 08BD     	 pop {r3,pc}
 418              	.L43:
 285:../CMSIS_RTOS_V2/cmsis_os2.c ****         lock = 0;
 419              	 .loc 1 285 0
 420 002c FFF7FEFF 	 bl vTaskSuspendAll
 421              	.LVL34:
 286:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 422              	 .loc 1 286 0
 423 0030 0020     	 movs r0,#0
 287:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 424              	 .loc 1 287 0
 425 0032 08BD     	 pop {r3,pc}
 426              	.LVL35:
 427              	.L44:
 276:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 428              	 .loc 1 276 0
 429 0034 6FF00500 	 mvn r0,#5
 430 0038 08BD     	 pop {r3,pc}
 431              	.LVL36:
 432              	.L45:
 433 003a 6FF00500 	 mvn r0,#5
 434 003e 08BD     	 pop {r3,pc}
 435              	.L46:
 281:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 436              	 .loc 1 281 0
 437 0040 0120     	 movs r0,#1
 438              	.LVL37:
 297:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 439              	 .loc 1 297 0
 440 0042 08BD     	 pop {r3,pc}
 441              	.L49:
 442              	 .align 2
 443              	.L48:
 444 0044 00000000 	 .word .LANCHOR0
 445              	 .cfi_endproc
 446              	.LFE112:
 448              	 .section .text.osKernelUnlock,"ax",%progbits
 449              	 .align 2
 450              	 .global osKernelUnlock
 451              	 .thumb
 452              	 .thumb_func
 454              	osKernelUnlock:
 455              	.LFB113:
 299:../CMSIS_RTOS_V2/cmsis_os2.c ****   int32_t lock;
 456              	 .loc 1 299 0
 457              	 .cfi_startproc
 458              	 
 459              	 
 460 0000 08B5     	 push {r3,lr}
 461              	.LCFI5:
 462              	 .cfi_def_cfa_offset 8
 463              	 .cfi_offset 3,-8
 464              	 .cfi_offset 14,-4
 465              	.LBB360:
 466              	.LBB361:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 467              	 .loc 2 209 0
 468              	
 469 0002 EFF30583 	 MRS r3,ipsr
 470              	
 471              	.LVL38:
 472              	 .thumb
 473              	.LBE361:
 474              	.LBE360:
 302:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 475              	 .loc 1 302 0
 476 0006 F3B9     	 cbnz r3,.L56
 477              	.LBB362:
 478              	.LBB363:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 479              	 .loc 2 386 0
 480              	
 481 0008 EFF31083 	 MRS r3,primask
 482              	
 483              	.LVL39:
 484              	 .thumb
 485              	.LBE363:
 486              	.LBE362:
 302:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 487              	 .loc 1 302 0
 488 000c 13B9     	 cbnz r3,.L52
 489              	.LBB364:
 490              	.LBB365:
 491              	 .loc 2 465 0
 492              	
 493 000e EFF31183 	 MRS r3,basepri
 494              	
 495              	.LVL40:
 496              	 .thumb
 497              	.LBE365:
 498              	.LBE364:
 302:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 499              	 .loc 1 302 0
 500 0012 1BB1     	 cbz r3,.L53
 501              	.LVL41:
 502              	.L52:
 302:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 503              	 .loc 1 302 0 is_stmt 0 discriminator 4
 504 0014 104B     	 ldr r3,.L62
 505 0016 1B68     	 ldr r3,[r3]
 506 0018 022B     	 cmp r3,#2
 507 001a 17D0     	 beq .L57
 508              	.L53:
 306:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_SUSPENDED:
 509              	 .loc 1 306 0 is_stmt 1
 510 001c FFF7FEFF 	 bl xTaskGetSchedulerState
 511              	.LVL42:
 512 0020 28B1     	 cbz r0,.L55
 323:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 513              	 .loc 1 323 0
 514 0022 0228     	 cmp r0,#2
 515 0024 0CBF     	 ite eq
 516 0026 0020     	 moveq r0,#0
 517 0028 4FF0FF30 	 movne r0,#-1
 518 002c 08BD     	 pop {r3,pc}
 519              	.L55:
 520              	.LVL43:
 310:../CMSIS_RTOS_V2/cmsis_os2.c ****           if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 521              	 .loc 1 310 0
 522 002e FFF7FEFF 	 bl xTaskResumeAll
 523              	.LVL44:
 524 0032 0128     	 cmp r0,#1
 525 0034 0DD0     	 beq .L59
 311:../CMSIS_RTOS_V2/cmsis_os2.c ****             lock = (int32_t)osError;
 526              	 .loc 1 311 0
 527 0036 FFF7FEFF 	 bl xTaskGetSchedulerState
 528              	.LVL45:
 529 003a 0028     	 cmp r0,#0
 312:../CMSIS_RTOS_V2/cmsis_os2.c ****           }
 530              	 .loc 1 312 0
 531 003c 14BF     	 ite ne
 532 003e 0120     	 movne r0,#1
 533 0040 4FF0FF30 	 moveq r0,#-1
 534 0044 08BD     	 pop {r3,pc}
 535              	.LVL46:
 536              	.L56:
 303:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 537              	 .loc 1 303 0
 538 0046 6FF00500 	 mvn r0,#5
 539 004a 08BD     	 pop {r3,pc}
 540              	.LVL47:
 541              	.L57:
 542 004c 6FF00500 	 mvn r0,#5
 543 0050 08BD     	 pop {r3,pc}
 544              	.LVL48:
 545              	.L59:
 308:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 546              	 .loc 1 308 0
 547 0052 0120     	 movs r0,#1
 548              	.LVL49:
 329:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 549              	 .loc 1 329 0
 550 0054 08BD     	 pop {r3,pc}
 551              	.L63:
 552 0056 00BF     	 .align 2
 553              	.L62:
 554 0058 00000000 	 .word .LANCHOR0
 555              	 .cfi_endproc
 556              	.LFE113:
 558              	 .section .text.osKernelRestoreLock,"ax",%progbits
 559              	 .align 2
 560              	 .global osKernelRestoreLock
 561              	 .thumb
 562              	 .thumb_func
 564              	osKernelRestoreLock:
 565              	.LFB114:
 331:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 566              	 .loc 1 331 0
 567              	 .cfi_startproc
 568              	 
 569              	 
 570              	.LVL50:
 571 0000 10B5     	 push {r4,lr}
 572              	.LCFI6:
 573              	 .cfi_def_cfa_offset 8
 574              	 .cfi_offset 4,-8
 575              	 .cfi_offset 14,-4
 576              	.LBB366:
 577              	.LBB367:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 578              	 .loc 2 209 0
 579              	
 580 0002 EFF30583 	 MRS r3,ipsr
 581              	
 582              	.LVL51:
 583              	 .thumb
 584              	.LBE367:
 585              	.LBE366:
 333:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 586              	 .loc 1 333 0
 587 0006 03BB     	 cbnz r3,.L70
 588 0008 0446     	 mov r4,r0
 589              	.LBB368:
 590              	.LBB369:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 591              	 .loc 2 386 0
 592              	
 593 000a EFF31083 	 MRS r3,primask
 594              	
 595              	.LVL52:
 596              	 .thumb
 597              	.LBE369:
 598              	.LBE368:
 333:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 599              	 .loc 1 333 0
 600 000e 13B9     	 cbnz r3,.L66
 601              	.LBB370:
 602              	.LBB371:
 603              	 .loc 2 465 0
 604              	
 605 0010 EFF31183 	 MRS r3,basepri
 606              	
 607              	.LVL53:
 608              	 .thumb
 609              	.LBE371:
 610              	.LBE370:
 333:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 611              	 .loc 1 333 0
 612 0014 1BB1     	 cbz r3,.L67
 613              	.LVL54:
 614              	.L66:
 333:../CMSIS_RTOS_V2/cmsis_os2.c ****     lock = (int32_t)osErrorISR;
 615              	 .loc 1 333 0 is_stmt 0 discriminator 4
 616 0016 134B     	 ldr r3,.L76
 617 0018 1B68     	 ldr r3,[r3]
 618 001a 022B     	 cmp r3,#2
 619 001c 18D0     	 beq .L71
 620              	.L67:
 337:../CMSIS_RTOS_V2/cmsis_os2.c ****       case taskSCHEDULER_SUSPENDED:
 621              	 .loc 1 337 0 is_stmt 1
 622 001e FFF7FEFF 	 bl xTaskGetSchedulerState
 623              	.LVL55:
 624 0022 08B1     	 cbz r0,.L68
 625 0024 0228     	 cmp r0,#2
 626 0026 16D1     	 bne .L74
 627              	.L68:
 340:../CMSIS_RTOS_V2/cmsis_os2.c ****           vTaskSuspendAll();
 628              	 .loc 1 340 0
 629 0028 012C     	 cmp r4,#1
 630 002a 02D1     	 bne .L69
 341:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 631              	 .loc 1 341 0
 632 002c FFF7FEFF 	 bl vTaskSuspendAll
 633              	.LVL56:
 634 0030 16E0     	 b .L65
 635              	.L69:
 344:../CMSIS_RTOS_V2/cmsis_os2.c ****             lock = (int32_t)osError;
 636              	 .loc 1 344 0
 637 0032 9CB9     	 cbnz r4,.L73
 348:../CMSIS_RTOS_V2/cmsis_os2.c ****               if (xTaskGetSchedulerState() != taskSCHEDULER_RUNNING) {
 638              	 .loc 1 348 0
 639 0034 FFF7FEFF 	 bl xTaskResumeAll
 640              	.LVL57:
 641 0038 0128     	 cmp r0,#1
 642 003a 11D0     	 beq .L65
 349:../CMSIS_RTOS_V2/cmsis_os2.c ****                 lock = (int32_t)osError;
 643              	 .loc 1 349 0
 644 003c FFF7FEFF 	 bl xTaskGetSchedulerState
 645              	.LVL58:
 646 0040 841E     	 subs r4,r0,#2
 647              	.LVL59:
 648 0042 18BF     	 it ne
 649 0044 4FF0FF34 	 movne r4,#-1
 650 0048 0AE0     	 b .L65
 651              	.LVL60:
 652              	.L70:
 334:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 653              	 .loc 1 334 0
 654 004a 6FF00504 	 mvn r4,#5
 655 004e 07E0     	 b .L65
 656              	.LVL61:
 657              	.L71:
 658 0050 6FF00504 	 mvn r4,#5
 659 0054 04E0     	 b .L65
 660              	.LVL62:
 661              	.L74:
 359:../CMSIS_RTOS_V2/cmsis_os2.c ****         break;
 662              	 .loc 1 359 0
 663 0056 4FF0FF34 	 mov r4,#-1
 664              	.LVL63:
 665 005a 01E0     	 b .L65
 666              	.LVL64:
 667              	.L73:
 345:../CMSIS_RTOS_V2/cmsis_os2.c ****           }
 668              	 .loc 1 345 0
 669 005c 4FF0FF34 	 mov r4,#-1
 670              	.LVL65:
 671              	.L65:
 365:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 672              	 .loc 1 365 0
 673 0060 2046     	 mov r0,r4
 674 0062 10BD     	 pop {r4,pc}
 675              	.LVL66:
 676              	.L77:
 677              	 .align 2
 678              	.L76:
 679 0064 00000000 	 .word .LANCHOR0
 680              	 .cfi_endproc
 681              	.LFE114:
 683              	 .section .text.osKernelGetTickCount,"ax",%progbits
 684              	 .align 2
 685              	 .global osKernelGetTickCount
 686              	 .thumb
 687              	 .thumb_func
 689              	osKernelGetTickCount:
 690              	.LFB115:
 367:../CMSIS_RTOS_V2/cmsis_os2.c ****   TickType_t ticks;
 691              	 .loc 1 367 0
 692              	 .cfi_startproc
 693              	 
 694              	 
 695 0000 08B5     	 push {r3,lr}
 696              	.LCFI7:
 697              	 .cfi_def_cfa_offset 8
 698              	 .cfi_offset 3,-8
 699              	 .cfi_offset 14,-4
 700              	.LBB372:
 701              	.LBB373:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 702              	 .loc 2 209 0
 703              	
 704 0002 EFF30583 	 MRS r3,ipsr
 705              	
 706              	.LVL67:
 707              	 .thumb
 708              	.LBE373:
 709              	.LBE372:
 370:../CMSIS_RTOS_V2/cmsis_os2.c ****     ticks = xTaskGetTickCountFromISR();
 710              	 .loc 1 370 0
 711 0006 4BB9     	 cbnz r3,.L79
 712              	.LBB374:
 713              	.LBB375:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 714              	 .loc 2 386 0
 715              	
 716 0008 EFF31083 	 MRS r3,primask
 717              	
 718              	.LVL68:
 719              	 .thumb
 720              	.LBE375:
 721              	.LBE374:
 370:../CMSIS_RTOS_V2/cmsis_os2.c ****     ticks = xTaskGetTickCountFromISR();
 722              	 .loc 1 370 0
 723 000c 13B9     	 cbnz r3,.L80
 724              	.LBB376:
 725              	.LBB377:
 726              	 .loc 2 465 0
 727              	
 728 000e EFF31183 	 MRS r3,basepri
 729              	
 730              	.LVL69:
 731              	 .thumb
 732              	.LBE377:
 733              	.LBE376:
 370:../CMSIS_RTOS_V2/cmsis_os2.c ****     ticks = xTaskGetTickCountFromISR();
 734              	 .loc 1 370 0
 735 0012 33B1     	 cbz r3,.L81
 736              	.LVL70:
 737              	.L80:
 370:../CMSIS_RTOS_V2/cmsis_os2.c ****     ticks = xTaskGetTickCountFromISR();
 738              	 .loc 1 370 0 is_stmt 0 discriminator 4
 739 0014 044B     	 ldr r3,.L84
 740 0016 1B68     	 ldr r3,[r3]
 741 0018 022B     	 cmp r3,#2
 742 001a 02D1     	 bne .L81
 743              	.L79:
 371:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 744              	 .loc 1 371 0 is_stmt 1
 745 001c FFF7FEFF 	 bl xTaskGetTickCountFromISR
 746              	.LVL71:
 747 0020 08BD     	 pop {r3,pc}
 748              	.LVL72:
 749              	.L81:
 373:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 750              	 .loc 1 373 0
 751 0022 FFF7FEFF 	 bl xTaskGetTickCount
 752              	.LVL73:
 377:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 753              	 .loc 1 377 0
 754 0026 08BD     	 pop {r3,pc}
 755              	.L85:
 756              	 .align 2
 757              	.L84:
 758 0028 00000000 	 .word .LANCHOR0
 759              	 .cfi_endproc
 760              	.LFE115:
 762              	 .section .text.osKernelGetTickFreq,"ax",%progbits
 763              	 .align 2
 764              	 .global osKernelGetTickFreq
 765              	 .thumb
 766              	 .thumb_func
 768              	osKernelGetTickFreq:
 769              	.LFB116:
 379:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (configTICK_RATE_HZ);
 770              	 .loc 1 379 0
 771              	 .cfi_startproc
 772              	 
 773              	 
 774              	 
 381:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 775              	 .loc 1 381 0
 776 0000 4FF47A70 	 mov r0,#1000
 777 0004 7047     	 bx lr
 778              	 .cfi_endproc
 779              	.LFE116:
 781 0006 00BF     	 .section .text.osKernelGetSysTimerCount,"ax",%progbits
 782              	 .align 2
 783              	 .global osKernelGetSysTimerCount
 784              	 .thumb
 785              	 .thumb_func
 787              	osKernelGetSysTimerCount:
 788              	.LFB117:
 383:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t irqmask = IS_IRQ_MASKED();
 789              	 .loc 1 383 0
 790              	 .cfi_startproc
 791              	 
 792              	 
 793 0000 10B5     	 push {r4,lr}
 794              	.LCFI8:
 795              	 .cfi_def_cfa_offset 8
 796              	 .cfi_offset 4,-8
 797              	 .cfi_offset 14,-4
 798              	.LBB378:
 799              	.LBB379:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 800              	 .loc 2 386 0
 801              	
 802 0002 EFF31083 	 MRS r3,primask
 803              	
 804              	.LVL74:
 805              	 .thumb
 806              	.LBE379:
 807              	.LBE378:
 384:../CMSIS_RTOS_V2/cmsis_os2.c ****   TickType_t ticks;
 808              	 .loc 1 384 0
 809 0006 2BB9     	 cbnz r3,.L90
 810              	.LBB380:
 811              	.LBB381:
 812              	 .loc 2 465 0
 813              	
 814 0008 EFF31184 	 MRS r4,basepri
 815              	
 816              	.LVL75:
 817              	 .thumb
 818              	.LBE381:
 819              	.LBE380:
 384:../CMSIS_RTOS_V2/cmsis_os2.c ****   TickType_t ticks;
 820              	 .loc 1 384 0
 821 000c 0034     	 adds r4,r4,#0
 822 000e 18BF     	 it ne
 823 0010 0124     	 movne r4,#1
 824              	.LVL76:
 825 0012 00E0     	 b .L88
 826              	.L90:
 827 0014 0124     	 movs r4,#1
 828              	.L88:
 829              	.LVL77:
 830              	.LBB382:
 831              	.LBB383:
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 832              	 .loc 2 142 0 discriminator 6
 833              	
 834 0016 72B6     	 cpsid i
 835              	
 836              	 .thumb
 837              	.LBE383:
 838              	.LBE382:
 390:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 839              	 .loc 1 390 0 discriminator 6
 840 0018 FFF7FEFF 	 bl xTaskGetTickCount
 841              	.LVL78:
 392:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (irqmask == 0U) {
 842              	 .loc 1 392 0 discriminator 6
 843 001c 054B     	 ldr r3,.L92
 844 001e 1B68     	 ldr r3,[r3]
 845 0020 054A     	 ldr r2,.L92+4
 846 0022 A2FB0323 	 umull r2,r3,r2,r3
 847 0026 9B09     	 lsrs r3,r3,#6
 848 0028 03FB00F0 	 mul r0,r3,r0
 849              	.LVL79:
 393:../CMSIS_RTOS_V2/cmsis_os2.c ****     __enable_irq();
 850              	 .loc 1 393 0 discriminator 6
 851 002c 04B9     	 cbnz r4,.L89
 852              	.LBB384:
 853              	.LBB385:
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 854              	 .loc 2 131 0
 855              	
 856 002e 62B6     	 cpsie i
 857              	
 858              	 .thumb
 859              	.L89:
 860              	.LBE385:
 861              	.LBE384:
 398:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 862              	 .loc 1 398 0
 863 0030 10BD     	 pop {r4,pc}
 864              	.LVL80:
 865              	.L93:
 866 0032 00BF     	 .align 2
 867              	.L92:
 868 0034 00000000 	 .word SystemCoreClock
 869 0038 D34D6210 	 .word 274877907
 870              	 .cfi_endproc
 871              	.LFE117:
 873              	 .section .text.osKernelGetSysTimerFreq,"ax",%progbits
 874              	 .align 2
 875              	 .global osKernelGetSysTimerFreq
 876              	 .thumb
 877              	 .thumb_func
 879              	osKernelGetSysTimerFreq:
 880              	.LFB118:
 400:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (configCPU_CLOCK_HZ);
 881              	 .loc 1 400 0
 882              	 .cfi_startproc
 883              	 
 884              	 
 885              	 
 402:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 886              	 .loc 1 402 0
 887 0000 014B     	 ldr r3,.L95
 888 0002 1868     	 ldr r0,[r3]
 889 0004 7047     	 bx lr
 890              	.L96:
 891 0006 00BF     	 .align 2
 892              	.L95:
 893 0008 00000000 	 .word SystemCoreClock
 894              	 .cfi_endproc
 895              	.LFE118:
 897              	 .section .text.osThreadNew,"ax",%progbits
 898              	 .align 2
 899              	 .global osThreadNew
 900              	 .thumb
 901              	 .thumb_func
 903              	osThreadNew:
 904              	.LFB119:
 406:../CMSIS_RTOS_V2/cmsis_os2.c ****   const char *name;
 905              	 .loc 1 406 0
 906              	 .cfi_startproc
 907              	 
 908              	 
 909              	.LVL81:
 910 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 911              	.LCFI9:
 912              	 .cfi_def_cfa_offset 20
 913              	 .cfi_offset 4,-20
 914              	 .cfi_offset 5,-16
 915              	 .cfi_offset 6,-12
 916              	 .cfi_offset 7,-8
 917              	 .cfi_offset 14,-4
 918 0002 87B0     	 sub sp,sp,#28
 919              	.LCFI10:
 920              	 .cfi_def_cfa_offset 48
 413:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 921              	 .loc 1 413 0
 922 0004 0024     	 movs r4,#0
 923 0006 0594     	 str r4,[sp,#20]
 924              	.LBB386:
 925              	.LBB387:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 926              	 .loc 2 209 0
 927              	
 928 0008 EFF30584 	 MRS r4,ipsr
 929              	
 930              	.LVL82:
 931              	 .thumb
 932              	.LBE387:
 933              	.LBE386:
 415:../CMSIS_RTOS_V2/cmsis_os2.c ****     stack = configMINIMAL_STACK_SIZE;
 934              	 .loc 1 415 0
 935 000c 002C     	 cmp r4,#0
 936 000e 4BD1     	 bne .L98
 937              	.LBB388:
 938              	.LBB389:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 939              	 .loc 2 386 0
 940              	
 941 0010 EFF31083 	 MRS r3,primask
 942              	
 943              	.LVL83:
 944              	 .thumb
 945              	.LBE389:
 946              	.LBE388:
 415:../CMSIS_RTOS_V2/cmsis_os2.c ****     stack = configMINIMAL_STACK_SIZE;
 947              	 .loc 1 415 0
 948 0014 13B9     	 cbnz r3,.L99
 949              	.LBB390:
 950              	.LBB391:
 951              	 .loc 2 465 0
 952              	
 953 0016 EFF31183 	 MRS r3,basepri
 954              	
 955              	.LVL84:
 956              	 .thumb
 957              	.LBE391:
 958              	.LBE390:
 415:../CMSIS_RTOS_V2/cmsis_os2.c ****     stack = configMINIMAL_STACK_SIZE;
 959              	 .loc 1 415 0
 960 001a 1BB1     	 cbz r3,.L100
 961              	.LVL85:
 962              	.L99:
 415:../CMSIS_RTOS_V2/cmsis_os2.c ****     stack = configMINIMAL_STACK_SIZE;
 963              	 .loc 1 415 0 is_stmt 0 discriminator 5
 964 001c 264B     	 ldr r3,.L114
 965 001e 1B68     	 ldr r3,[r3]
 966 0020 022B     	 cmp r3,#2
 967 0022 41D0     	 beq .L98
 968              	.L100:
 415:../CMSIS_RTOS_V2/cmsis_os2.c ****     stack = configMINIMAL_STACK_SIZE;
 969              	 .loc 1 415 0 discriminator 6
 970 0024 0028     	 cmp r0,#0
 971 0026 3FD0     	 beq .L98
 972 0028 0B46     	 mov r3,r1
 973              	.LVL86:
 422:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (attr->name != NULL) {
 974              	 .loc 1 422 0 is_stmt 1
 975 002a 72B3     	 cbz r2,.L108
 423:../CMSIS_RTOS_V2/cmsis_os2.c ****         name = attr->name;
 976              	 .loc 1 423 0
 977 002c 1168     	 ldr r1,[r2]
 978              	.LVL87:
 426:../CMSIS_RTOS_V2/cmsis_os2.c ****         prio = (UBaseType_t)attr->priority;
 979              	 .loc 1 426 0
 980 002e 9469     	 ldr r4,[r2,#24]
 981              	.LVL88:
 982 0030 24B1     	 cbz r4,.L109
 427:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 983              	 .loc 1 427 0
 984 0032 2646     	 mov r6,r4
 985              	.LVL89:
 430:../CMSIS_RTOS_V2/cmsis_os2.c ****         return (NULL);
 986              	 .loc 1 430 0
 987 0034 013C     	 subs r4,r4,#1
 988              	.LVL90:
 989 0036 372C     	 cmp r4,#55
 990 0038 01D9     	 bls .L102
 991 003a 37E0     	 b .L110
 992              	.LVL91:
 993              	.L109:
 417:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 994              	 .loc 1 417 0
 995 003c 1826     	 movs r6,#24
 996              	.LVL92:
 997              	.L102:
 430:../CMSIS_RTOS_V2/cmsis_os2.c ****         return (NULL);
 998              	 .loc 1 430 0 discriminator 1
 999 003e 5468     	 ldr r4,[r2,#4]
 1000 0040 14F0010F 	 tst r4,#1
 1001 0044 34D1     	 bne .L111
 434:../CMSIS_RTOS_V2/cmsis_os2.c ****         /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.  
 1002              	 .loc 1 434 0
 1003 0046 5469     	 ldr r4,[r2,#20]
 1004 0048 14B1     	 cbz r4,.L112
 437:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 1005              	 .loc 1 437 0
 1006 004a 4FEA940E 	 lsr lr,r4,#2
 1007              	.LVL93:
 1008 004e 01E0     	 b .L104
 1009              	.LVL94:
 1010              	.L112:
 416:../CMSIS_RTOS_V2/cmsis_os2.c ****     prio  = (UBaseType_t)osPriorityNormal;
 1011              	 .loc 1 416 0
 1012 0050 4FF0780E 	 mov lr,#120
 1013              	.LVL95:
 1014              	.L104:
 440:../CMSIS_RTOS_V2/cmsis_os2.c ****           (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 1015              	 .loc 1 440 0
 1016 0054 9568     	 ldr r5,[r2,#8]
 1017 0056 35B1     	 cbz r5,.L105
 440:../CMSIS_RTOS_V2/cmsis_os2.c ****           (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 1018              	 .loc 1 440 0 is_stmt 0 discriminator 1
 1019 0058 D768     	 ldr r7,[r2,#12]
 1020 005a 5F2F     	 cmp r7,#95
 1021 005c 24D9     	 bls .L98
 440:../CMSIS_RTOS_V2/cmsis_os2.c ****           (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 1022              	 .loc 1 440 0 discriminator 2
 1023 005e 1769     	 ldr r7,[r2,#16]
 1024 0060 17B3     	 cbz r7,.L98
 441:../CMSIS_RTOS_V2/cmsis_os2.c ****         mem = 1;
 1025              	 .loc 1 441 0 is_stmt 1
 1026 0062 4CB9     	 cbnz r4,.L106
 1027 0064 20E0     	 b .L98
 1028              	.L105:
 445:../CMSIS_RTOS_V2/cmsis_os2.c ****           mem = 0;
 1029              	 .loc 1 445 0 discriminator 1
 1030 0066 D468     	 ldr r4,[r2,#12]
 1031 0068 F4B9     	 cbnz r4,.L98
 445:../CMSIS_RTOS_V2/cmsis_os2.c ****           mem = 0;
 1032              	 .loc 1 445 0 is_stmt 0 discriminator 2
 1033 006a 1269     	 ldr r2,[r2,#16]
 1034              	.LVL96:
 1035 006c 0032     	 adds r2,r2,#0
 1036 006e 18BF     	 it ne
 1037 0070 0122     	 movne r2,#1
 1038 0072 5242     	 negs r2,r2
 1039              	.LVL97:
 459:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pd
 1040              	 .loc 1 459 0 is_stmt 1 discriminator 2
 1041 0074 C2B9     	 cbnz r2,.L98
 1042 0076 0CE0     	 b .L101
 1043              	.LVL98:
 1044              	.L106:
 1045              	.LBB392:
 455:../CMSIS_RTOS_V2/cmsis_os2.c ****                                                                                     (StaticTask_t *
 1046              	 .loc 1 455 0
 1047 0078 0096     	 str r6,[sp]
 1048 007a 1269     	 ldr r2,[r2,#16]
 1049              	.LVL99:
 1050 007c 0192     	 str r2,[sp,#4]
 1051 007e 0295     	 str r5,[sp,#8]
 1052 0080 7246     	 mov r2,lr
 1053 0082 FFF7FEFF 	 bl xTaskCreateStatic
 1054              	.LVL100:
 1055 0086 0590     	 str r0,[sp,#20]
 1056              	.LBE392:
 1057 0088 0EE0     	 b .L98
 1058              	.LVL101:
 1059              	.L108:
 417:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1060              	 .loc 1 417 0
 1061 008a 1826     	 movs r6,#24
 416:../CMSIS_RTOS_V2/cmsis_os2.c ****     prio  = (UBaseType_t)osPriorityNormal;
 1062              	 .loc 1 416 0
 1063 008c 4FF0780E 	 mov lr,#120
 419:../CMSIS_RTOS_V2/cmsis_os2.c ****     mem  = -1;
 1064              	 .loc 1 419 0
 1065 0090 0021     	 movs r1,#0
 1066              	.LVL102:
 1067              	.L101:
 460:../CMSIS_RTOS_V2/cmsis_os2.c ****           hTask = NULL;
 1068              	 .loc 1 460 0
 1069 0092 0096     	 str r6,[sp]
 1070 0094 05AA     	 add r2,sp,#20
 1071 0096 0192     	 str r2,[sp,#4]
 1072 0098 1FFA8EF2 	 uxth r2,lr
 1073 009c FFF7FEFF 	 bl xTaskCreate
 1074              	.LVL103:
 1075 00a0 0128     	 cmp r0,#1
 461:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 1076              	 .loc 1 461 0
 1077 00a2 1CBF     	 itt ne
 1078 00a4 0023     	 movne r3,#0
 1079 00a6 0593     	 strne r3,[sp,#20]
 1080              	.LVL104:
 1081              	.L98:
 467:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 1082              	 .loc 1 467 0
 1083 00a8 0598     	 ldr r0,[sp,#20]
 1084 00aa 02E0     	 b .L103
 1085              	.LVL105:
 1086              	.L110:
 431:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 1087              	 .loc 1 431 0
 1088 00ac 0020     	 movs r0,#0
 1089              	.LVL106:
 1090 00ae 00E0     	 b .L103
 1091              	.LVL107:
 1092              	.L111:
 1093 00b0 0020     	 movs r0,#0
 1094              	.LVL108:
 1095              	.L103:
 468:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1096              	 .loc 1 468 0
 1097 00b2 07B0     	 add sp,sp,#28
 1098              	.LCFI11:
 1099              	 .cfi_def_cfa_offset 20
 1100              	 
 1101 00b4 F0BD     	 pop {r4,r5,r6,r7,pc}
 1102              	.L115:
 1103 00b6 00BF     	 .align 2
 1104              	.L114:
 1105 00b8 00000000 	 .word .LANCHOR0
 1106              	 .cfi_endproc
 1107              	.LFE119:
 1109              	 .section .text.osThreadGetName,"ax",%progbits
 1110              	 .align 2
 1111              	 .global osThreadGetName
 1112              	 .thumb
 1113              	 .thumb_func
 1115              	osThreadGetName:
 1116              	.LFB120:
 470:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 1117              	 .loc 1 470 0
 1118              	 .cfi_startproc
 1119              	 
 1120              	 
 1121              	.LVL109:
 1122 0000 08B5     	 push {r3,lr}
 1123              	.LCFI12:
 1124              	 .cfi_def_cfa_offset 8
 1125              	 .cfi_offset 3,-8
 1126              	 .cfi_offset 14,-4
 1127              	.LVL110:
 1128              	.LBB393:
 1129              	.LBB394:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1130              	 .loc 2 209 0
 1131              	
 1132 0002 EFF30583 	 MRS r3,ipsr
 1133              	
 1134              	.LVL111:
 1135              	 .thumb
 1136              	.LBE394:
 1137              	.LBE393:
 474:../CMSIS_RTOS_V2/cmsis_os2.c ****     name = NULL;
 1138              	 .loc 1 474 0
 1139 0006 6BB9     	 cbnz r3,.L120
 1140              	.LBB395:
 1141              	.LBB396:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1142              	 .loc 2 386 0
 1143              	
 1144 0008 EFF31083 	 MRS r3,primask
 1145              	
 1146              	.LVL112:
 1147              	 .thumb
 1148              	.LBE396:
 1149              	.LBE395:
 474:../CMSIS_RTOS_V2/cmsis_os2.c ****     name = NULL;
 1150              	 .loc 1 474 0
 1151 000c 13B9     	 cbnz r3,.L118
 1152              	.LBB397:
 1153              	.LBB398:
 1154              	 .loc 2 465 0
 1155              	
 1156 000e EFF31183 	 MRS r3,basepri
 1157              	
 1158              	.LVL113:
 1159              	 .thumb
 1160              	.LBE398:
 1161              	.LBE397:
 474:../CMSIS_RTOS_V2/cmsis_os2.c ****     name = NULL;
 1162              	 .loc 1 474 0
 1163 0012 1BB1     	 cbz r3,.L119
 1164              	.LVL114:
 1165              	.L118:
 474:../CMSIS_RTOS_V2/cmsis_os2.c ****     name = NULL;
 1166              	 .loc 1 474 0 is_stmt 0 discriminator 4
 1167 0014 064B     	 ldr r3,.L124
 1168 0016 1B68     	 ldr r3,[r3]
 1169 0018 022B     	 cmp r3,#2
 1170 001a 05D0     	 beq .L121
 1171              	.L119:
 474:../CMSIS_RTOS_V2/cmsis_os2.c ****     name = NULL;
 1172              	 .loc 1 474 0 discriminator 6
 1173 001c 30B1     	 cbz r0,.L122
 477:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1174              	 .loc 1 477 0 is_stmt 1
 1175 001e FFF7FEFF 	 bl pcTaskGetName
 1176              	.LVL115:
 1177 0022 08BD     	 pop {r3,pc}
 1178              	.LVL116:
 1179              	.L120:
 475:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 1180              	 .loc 1 475 0
 1181 0024 0020     	 movs r0,#0
 1182              	.LVL117:
 1183 0026 08BD     	 pop {r3,pc}
 1184              	.LVL118:
 1185              	.L121:
 1186 0028 0020     	 movs r0,#0
 1187              	.LVL119:
 1188 002a 08BD     	 pop {r3,pc}
 1189              	.LVL120:
 1190              	.L122:
 1191 002c 0020     	 movs r0,#0
 1192              	.LVL121:
 481:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1193              	 .loc 1 481 0
 1194 002e 08BD     	 pop {r3,pc}
 1195              	.L125:
 1196              	 .align 2
 1197              	.L124:
 1198 0030 00000000 	 .word .LANCHOR0
 1199              	 .cfi_endproc
 1200              	.LFE120:
 1202              	 .section .text.osThreadGetId,"ax",%progbits
 1203              	 .align 2
 1204              	 .global osThreadGetId
 1205              	 .thumb
 1206              	 .thumb_func
 1208              	osThreadGetId:
 1209              	.LFB121:
 483:../CMSIS_RTOS_V2/cmsis_os2.c ****   osThreadId_t id;
 1210              	 .loc 1 483 0
 1211              	 .cfi_startproc
 1212              	 
 1213              	 
 1214 0000 08B5     	 push {r3,lr}
 1215              	.LCFI13:
 1216              	 .cfi_def_cfa_offset 8
 1217              	 .cfi_offset 3,-8
 1218              	 .cfi_offset 14,-4
 486:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1219              	 .loc 1 486 0
 1220 0002 FFF7FEFF 	 bl xTaskGetCurrentTaskHandle
 1221              	.LVL122:
 489:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1222              	 .loc 1 489 0
 1223 0006 08BD     	 pop {r3,pc}
 1224              	 .cfi_endproc
 1225              	.LFE121:
 1227              	 .section .text.osThreadGetState,"ax",%progbits
 1228              	 .align 2
 1229              	 .global osThreadGetState
 1230              	 .thumb
 1231              	 .thumb_func
 1233              	osThreadGetState:
 1234              	.LFB122:
 491:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 1235              	 .loc 1 491 0
 1236              	 .cfi_startproc
 1237              	 
 1238              	 
 1239              	.LVL123:
 1240 0000 08B5     	 push {r3,lr}
 1241              	.LCFI14:
 1242              	 .cfi_def_cfa_offset 8
 1243              	 .cfi_offset 3,-8
 1244              	 .cfi_offset 14,-4
 1245              	.LVL124:
 1246              	.LBB399:
 1247              	.LBB400:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1248              	 .loc 2 209 0
 1249              	
 1250 0002 EFF30583 	 MRS r3,ipsr
 1251              	
 1252              	.LVL125:
 1253              	 .thumb
 1254              	.LBE400:
 1255              	.LBE399:
 495:../CMSIS_RTOS_V2/cmsis_os2.c ****     state = osThreadError;
 1256              	 .loc 1 495 0
 1257 0006 E3B9     	 cbnz r3,.L137
 1258              	.LBB401:
 1259              	.LBB402:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1260              	 .loc 2 386 0
 1261              	
 1262 0008 EFF31083 	 MRS r3,primask
 1263              	
 1264              	.LVL126:
 1265              	 .thumb
 1266              	.LBE402:
 1267              	.LBE401:
 495:../CMSIS_RTOS_V2/cmsis_os2.c ****     state = osThreadError;
 1268              	 .loc 1 495 0
 1269 000c 13B9     	 cbnz r3,.L130
 1270              	.LBB403:
 1271              	.LBB404:
 1272              	 .loc 2 465 0
 1273              	
 1274 000e EFF31183 	 MRS r3,basepri
 1275              	
 1276              	.LVL127:
 1277              	 .thumb
 1278              	.LBE404:
 1279              	.LBE403:
 495:../CMSIS_RTOS_V2/cmsis_os2.c ****     state = osThreadError;
 1280              	 .loc 1 495 0
 1281 0012 1BB1     	 cbz r3,.L131
 1282              	.LVL128:
 1283              	.L130:
 495:../CMSIS_RTOS_V2/cmsis_os2.c ****     state = osThreadError;
 1284              	 .loc 1 495 0 is_stmt 0 discriminator 4
 1285 0014 104B     	 ldr r3,.L142
 1286 0016 1B68     	 ldr r3,[r3]
 1287 0018 022B     	 cmp r3,#2
 1288 001a 15D0     	 beq .L138
 1289              	.L131:
 495:../CMSIS_RTOS_V2/cmsis_os2.c ****     state = osThreadError;
 1290              	 .loc 1 495 0 discriminator 6
 1291 001c B8B1     	 cbz r0,.L139
 499:../CMSIS_RTOS_V2/cmsis_os2.c ****       case eRunning:   state = osThreadRunning;    break;
 1292              	 .loc 1 499 0 is_stmt 1
 1293 001e FFF7FEFF 	 bl eTaskGetState
 1294              	.LVL129:
 1295 0022 0428     	 cmp r0,#4
 1296 0024 0AD8     	 bhi .L132
 1297 0026 DFE800F0 	 tbb [pc,r0]
 1298              	.L133:
 1299 002a 15       	 .byte (.L140-.L133)/2
 1300 002b 03       	 .byte (.L134-.L133)/2
 1301 002c 05       	 .byte (.L135-.L133)/2
 1302 002d 05       	 .byte (.L135-.L133)/2
 1303 002e 07       	 .byte (.L136-.L133)/2
 1304 002f 00       	 .p2align 1
 1305              	.L134:
 501:../CMSIS_RTOS_V2/cmsis_os2.c ****       case eBlocked:
 1306              	 .loc 1 501 0
 1307 0030 0120     	 movs r0,#1
 1308 0032 08BD     	 pop {r3,pc}
 1309              	.L135:
 1310              	.LVL130:
 503:../CMSIS_RTOS_V2/cmsis_os2.c ****       case eDeleted:   state = osThreadTerminated; break;
 1311              	 .loc 1 503 0
 1312 0034 0320     	 movs r0,#3
 1313 0036 08BD     	 pop {r3,pc}
 1314              	.LVL131:
 1315              	.L136:
 504:../CMSIS_RTOS_V2/cmsis_os2.c ****       case eInvalid:
 1316              	 .loc 1 504 0
 1317 0038 0420     	 movs r0,#4
 1318 003a 08BD     	 pop {r3,pc}
 1319              	.LVL132:
 1320              	.L132:
 506:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 1321              	 .loc 1 506 0
 1322 003c 4FF0FF30 	 mov r0,#-1
 1323 0040 08BD     	 pop {r3,pc}
 1324              	.LVL133:
 1325              	.L137:
 496:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1326              	 .loc 1 496 0
 1327 0042 4FF0FF30 	 mov r0,#-1
 1328              	.LVL134:
 1329 0046 08BD     	 pop {r3,pc}
 1330              	.LVL135:
 1331              	.L138:
 1332 0048 4FF0FF30 	 mov r0,#-1
 1333              	.LVL136:
 1334 004c 08BD     	 pop {r3,pc}
 1335              	.LVL137:
 1336              	.L139:
 1337 004e 4FF0FF30 	 mov r0,#-1
 1338              	.LVL138:
 1339 0052 08BD     	 pop {r3,pc}
 1340              	.L140:
 500:../CMSIS_RTOS_V2/cmsis_os2.c ****       case eReady:     state = osThreadReady;      break;
 1341              	 .loc 1 500 0
 1342 0054 0220     	 movs r0,#2
 1343              	.LVL139:
 511:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1344              	 .loc 1 511 0
 1345 0056 08BD     	 pop {r3,pc}
 1346              	.L143:
 1347              	 .align 2
 1348              	.L142:
 1349 0058 00000000 	 .word .LANCHOR0
 1350              	 .cfi_endproc
 1351              	.LFE122:
 1353              	 .section .text.osThreadGetStackSpace,"ax",%progbits
 1354              	 .align 2
 1355              	 .global osThreadGetStackSpace
 1356              	 .thumb
 1357              	 .thumb_func
 1359              	osThreadGetStackSpace:
 1360              	.LFB123:
 513:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 1361              	 .loc 1 513 0
 1362              	 .cfi_startproc
 1363              	 
 1364              	 
 1365              	.LVL140:
 1366 0000 08B5     	 push {r3,lr}
 1367              	.LCFI15:
 1368              	 .cfi_def_cfa_offset 8
 1369              	 .cfi_offset 3,-8
 1370              	 .cfi_offset 14,-4
 1371              	.LVL141:
 1372              	.LBB405:
 1373              	.LBB406:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1374              	 .loc 2 209 0
 1375              	
 1376 0002 EFF30583 	 MRS r3,ipsr
 1377              	
 1378              	.LVL142:
 1379              	 .thumb
 1380              	.LBE406:
 1381              	.LBE405:
 517:../CMSIS_RTOS_V2/cmsis_os2.c ****     sz = 0U;
 1382              	 .loc 1 517 0
 1383 0006 6BB9     	 cbnz r3,.L148
 1384              	.LBB407:
 1385              	.LBB408:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1386              	 .loc 2 386 0
 1387              	
 1388 0008 EFF31083 	 MRS r3,primask
 1389              	
 1390              	.LVL143:
 1391              	 .thumb
 1392              	.LBE408:
 1393              	.LBE407:
 517:../CMSIS_RTOS_V2/cmsis_os2.c ****     sz = 0U;
 1394              	 .loc 1 517 0
 1395 000c 13B9     	 cbnz r3,.L146
 1396              	.LBB409:
 1397              	.LBB410:
 1398              	 .loc 2 465 0
 1399              	
 1400 000e EFF31183 	 MRS r3,basepri
 1401              	
 1402              	.LVL144:
 1403              	 .thumb
 1404              	.LBE410:
 1405              	.LBE409:
 517:../CMSIS_RTOS_V2/cmsis_os2.c ****     sz = 0U;
 1406              	 .loc 1 517 0
 1407 0012 1BB1     	 cbz r3,.L147
 1408              	.LVL145:
 1409              	.L146:
 517:../CMSIS_RTOS_V2/cmsis_os2.c ****     sz = 0U;
 1410              	 .loc 1 517 0 is_stmt 0 discriminator 4
 1411 0014 064B     	 ldr r3,.L152
 1412 0016 1B68     	 ldr r3,[r3]
 1413 0018 022B     	 cmp r3,#2
 1414 001a 05D0     	 beq .L149
 1415              	.L147:
 517:../CMSIS_RTOS_V2/cmsis_os2.c ****     sz = 0U;
 1416              	 .loc 1 517 0 discriminator 6
 1417 001c 30B1     	 cbz r0,.L150
 520:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1418              	 .loc 1 520 0 is_stmt 1
 1419 001e FFF7FEFF 	 bl uxTaskGetStackHighWaterMark
 1420              	.LVL146:
 1421 0022 08BD     	 pop {r3,pc}
 1422              	.LVL147:
 1423              	.L148:
 518:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 1424              	 .loc 1 518 0
 1425 0024 0020     	 movs r0,#0
 1426              	.LVL148:
 1427 0026 08BD     	 pop {r3,pc}
 1428              	.LVL149:
 1429              	.L149:
 1430 0028 0020     	 movs r0,#0
 1431              	.LVL150:
 1432 002a 08BD     	 pop {r3,pc}
 1433              	.LVL151:
 1434              	.L150:
 1435 002c 0020     	 movs r0,#0
 1436              	.LVL152:
 524:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1437              	 .loc 1 524 0
 1438 002e 08BD     	 pop {r3,pc}
 1439              	.L153:
 1440              	 .align 2
 1441              	.L152:
 1442 0030 00000000 	 .word .LANCHOR0
 1443              	 .cfi_endproc
 1444              	.LFE123:
 1446              	 .section .text.osThreadSetPriority,"ax",%progbits
 1447              	 .align 2
 1448              	 .global osThreadSetPriority
 1449              	 .thumb
 1450              	 .thumb_func
 1452              	osThreadSetPriority:
 1453              	.LFB124:
 526:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 1454              	 .loc 1 526 0
 1455              	 .cfi_startproc
 1456              	 
 1457              	 
 1458              	.LVL153:
 1459 0000 08B5     	 push {r3,lr}
 1460              	.LCFI16:
 1461              	 .cfi_def_cfa_offset 8
 1462              	 .cfi_offset 3,-8
 1463              	 .cfi_offset 14,-4
 1464              	.LVL154:
 1465              	.LBB411:
 1466              	.LBB412:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1467              	 .loc 2 209 0
 1468              	
 1469 0002 EFF30583 	 MRS r3,ipsr
 1470              	
 1471              	.LVL155:
 1472              	 .thumb
 1473              	.LBE412:
 1474              	.LBE411:
 530:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1475              	 .loc 1 530 0
 1476 0006 8BB9     	 cbnz r3,.L158
 1477              	.LBB413:
 1478              	.LBB414:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1479              	 .loc 2 386 0
 1480              	
 1481 0008 EFF31083 	 MRS r3,primask
 1482              	
 1483              	.LVL156:
 1484              	 .thumb
 1485              	.LBE414:
 1486              	.LBE413:
 530:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1487              	 .loc 1 530 0
 1488 000c 13B9     	 cbnz r3,.L156
 1489              	.LBB415:
 1490              	.LBB416:
 1491              	 .loc 2 465 0
 1492              	
 1493 000e EFF31183 	 MRS r3,basepri
 1494              	
 1495              	.LVL157:
 1496              	 .thumb
 1497              	.LBE416:
 1498              	.LBE415:
 530:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1499              	 .loc 1 530 0
 1500 0012 1BB1     	 cbz r3,.L157
 1501              	.LVL158:
 1502              	.L156:
 530:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1503              	 .loc 1 530 0 is_stmt 0 discriminator 4
 1504 0014 0B4B     	 ldr r3,.L163
 1505 0016 1B68     	 ldr r3,[r3]
 1506 0018 022B     	 cmp r3,#2
 1507 001a 0AD0     	 beq .L159
 1508              	.L157:
 533:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 1509              	 .loc 1 533 0 is_stmt 1
 1510 001c 60B1     	 cbz r0,.L160
 533:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 1511              	 .loc 1 533 0 is_stmt 0 discriminator 1
 1512 001e 4B1E     	 subs r3,r1,#1
 1513 0020 372B     	 cmp r3,#55
 1514 0022 0CD8     	 bhi .L161
 1515              	.LVL159:
 538:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1516              	 .loc 1 538 0 is_stmt 1
 1517 0024 FFF7FEFF 	 bl vTaskPrioritySet
 1518              	.LVL160:
 537:../CMSIS_RTOS_V2/cmsis_os2.c ****     vTaskPrioritySet (hTask, (UBaseType_t)priority);
 1519              	 .loc 1 537 0
 1520 0028 0020     	 movs r0,#0
 1521 002a 08BD     	 pop {r3,pc}
 1522              	.LVL161:
 1523              	.L158:
 531:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1524              	 .loc 1 531 0
 1525 002c 6FF00500 	 mvn r0,#5
 1526              	.LVL162:
 1527 0030 08BD     	 pop {r3,pc}
 1528              	.LVL163:
 1529              	.L159:
 1530 0032 6FF00500 	 mvn r0,#5
 1531              	.LVL164:
 1532 0036 08BD     	 pop {r3,pc}
 1533              	.LVL165:
 1534              	.L160:
 534:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1535              	 .loc 1 534 0
 1536 0038 6FF00300 	 mvn r0,#3
 1537              	.LVL166:
 1538 003c 08BD     	 pop {r3,pc}
 1539              	.LVL167:
 1540              	.L161:
 1541 003e 6FF00300 	 mvn r0,#3
 1542              	.LVL168:
 542:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1543              	 .loc 1 542 0
 1544 0042 08BD     	 pop {r3,pc}
 1545              	.L164:
 1546              	 .align 2
 1547              	.L163:
 1548 0044 00000000 	 .word .LANCHOR0
 1549              	 .cfi_endproc
 1550              	.LFE124:
 1552              	 .section .text.osThreadGetPriority,"ax",%progbits
 1553              	 .align 2
 1554              	 .global osThreadGetPriority
 1555              	 .thumb
 1556              	 .thumb_func
 1558              	osThreadGetPriority:
 1559              	.LFB125:
 544:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 1560              	 .loc 1 544 0
 1561              	 .cfi_startproc
 1562              	 
 1563              	 
 1564              	.LVL169:
 1565 0000 08B5     	 push {r3,lr}
 1566              	.LCFI17:
 1567              	 .cfi_def_cfa_offset 8
 1568              	 .cfi_offset 3,-8
 1569              	 .cfi_offset 14,-4
 1570              	.LVL170:
 1571              	.LBB417:
 1572              	.LBB418:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1573              	 .loc 2 209 0
 1574              	
 1575 0002 EFF30583 	 MRS r3,ipsr
 1576              	
 1577              	.LVL171:
 1578              	 .thumb
 1579              	.LBE418:
 1580              	.LBE417:
 548:../CMSIS_RTOS_V2/cmsis_os2.c ****     prio = osPriorityError;
 1581              	 .loc 1 548 0
 1582 0006 6BB9     	 cbnz r3,.L169
 1583              	.LBB419:
 1584              	.LBB420:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1585              	 .loc 2 386 0
 1586              	
 1587 0008 EFF31083 	 MRS r3,primask
 1588              	
 1589              	.LVL172:
 1590              	 .thumb
 1591              	.LBE420:
 1592              	.LBE419:
 548:../CMSIS_RTOS_V2/cmsis_os2.c ****     prio = osPriorityError;
 1593              	 .loc 1 548 0
 1594 000c 13B9     	 cbnz r3,.L167
 1595              	.LBB421:
 1596              	.LBB422:
 1597              	 .loc 2 465 0
 1598              	
 1599 000e EFF31183 	 MRS r3,basepri
 1600              	
 1601              	.LVL173:
 1602              	 .thumb
 1603              	.LBE422:
 1604              	.LBE421:
 548:../CMSIS_RTOS_V2/cmsis_os2.c ****     prio = osPriorityError;
 1605              	 .loc 1 548 0
 1606 0012 1BB1     	 cbz r3,.L168
 1607              	.LVL174:
 1608              	.L167:
 548:../CMSIS_RTOS_V2/cmsis_os2.c ****     prio = osPriorityError;
 1609              	 .loc 1 548 0 is_stmt 0 discriminator 4
 1610 0014 084B     	 ldr r3,.L173
 1611 0016 1B68     	 ldr r3,[r3]
 1612 0018 022B     	 cmp r3,#2
 1613 001a 06D0     	 beq .L170
 1614              	.L168:
 548:../CMSIS_RTOS_V2/cmsis_os2.c ****     prio = osPriorityError;
 1615              	 .loc 1 548 0 discriminator 6
 1616 001c 40B1     	 cbz r0,.L171
 551:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1617              	 .loc 1 551 0 is_stmt 1
 1618 001e FFF7FEFF 	 bl uxTaskPriorityGet
 1619              	.LVL175:
 1620 0022 08BD     	 pop {r3,pc}
 1621              	.LVL176:
 1622              	.L169:
 549:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 1623              	 .loc 1 549 0
 1624 0024 4FF0FF30 	 mov r0,#-1
 1625              	.LVL177:
 1626 0028 08BD     	 pop {r3,pc}
 1627              	.LVL178:
 1628              	.L170:
 1629 002a 4FF0FF30 	 mov r0,#-1
 1630              	.LVL179:
 1631 002e 08BD     	 pop {r3,pc}
 1632              	.LVL180:
 1633              	.L171:
 1634 0030 4FF0FF30 	 mov r0,#-1
 1635              	.LVL181:
 555:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1636              	 .loc 1 555 0
 1637 0034 08BD     	 pop {r3,pc}
 1638              	.L174:
 1639 0036 00BF     	 .align 2
 1640              	.L173:
 1641 0038 00000000 	 .word .LANCHOR0
 1642              	 .cfi_endproc
 1643              	.LFE125:
 1645              	 .section .text.osThreadYield,"ax",%progbits
 1646              	 .align 2
 1647              	 .global osThreadYield
 1648              	 .thumb
 1649              	 .thumb_func
 1651              	osThreadYield:
 1652              	.LFB126:
 557:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 1653              	 .loc 1 557 0
 1654              	 .cfi_startproc
 1655              	 
 1656              	 
 1657              	 
 1658              	.LBB423:
 1659              	.LBB424:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1660              	 .loc 2 209 0
 1661              	
 1662 0000 EFF30583 	 MRS r3,ipsr
 1663              	
 1664              	.LVL182:
 1665              	 .thumb
 1666              	.LBE424:
 1667              	.LBE423:
 560:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1668              	 .loc 1 560 0
 1669 0004 9BB9     	 cbnz r3,.L179
 1670              	.LBB425:
 1671              	.LBB426:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1672              	 .loc 2 386 0
 1673              	
 1674 0006 EFF31083 	 MRS r3,primask
 1675              	
 1676              	.LVL183:
 1677              	 .thumb
 1678              	.LBE426:
 1679              	.LBE425:
 560:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1680              	 .loc 1 560 0
 1681 000a 13B9     	 cbnz r3,.L177
 1682              	.LBB427:
 1683              	.LBB428:
 1684              	 .loc 2 465 0
 1685              	
 1686 000c EFF31183 	 MRS r3,basepri
 1687              	
 1688              	.LVL184:
 1689              	 .thumb
 1690              	.LBE428:
 1691              	.LBE427:
 560:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1692              	 .loc 1 560 0
 1693 0010 1BB1     	 cbz r3,.L178
 1694              	.LVL185:
 1695              	.L177:
 560:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1696              	 .loc 1 560 0 is_stmt 0 discriminator 4
 1697 0012 0A4B     	 ldr r3,.L181
 1698 0014 1B68     	 ldr r3,[r3]
 1699 0016 022B     	 cmp r3,#2
 1700 0018 0CD0     	 beq .L180
 1701              	.L178:
 1702              	.LVL186:
 564:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1703              	 .loc 1 564 0 is_stmt 1
 1704 001a 4FF08052 	 mov r2,#268435456
 1705 001e 084B     	 ldr r3,.L181+4
 1706 0020 1A60     	 str r2,[r3]
 1707              	
 1708 0022 BFF34F8F 	 dsb
 1709              	
 1710              	
 1711 0026 BFF36F8F 	 isb
 1712              	
 563:../CMSIS_RTOS_V2/cmsis_os2.c ****     taskYIELD();
 1713              	 .loc 1 563 0
 1714              	 .thumb
 1715 002a 0020     	 movs r0,#0
 1716 002c 7047     	 bx lr
 1717              	.LVL187:
 1718              	.L179:
 561:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 1719              	 .loc 1 561 0
 1720 002e 6FF00500 	 mvn r0,#5
 1721 0032 7047     	 bx lr
 1722              	.LVL188:
 1723              	.L180:
 1724 0034 6FF00500 	 mvn r0,#5
 1725              	.LVL189:
 568:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1726              	 .loc 1 568 0
 1727 0038 7047     	 bx lr
 1728              	.L182:
 1729 003a 00BF     	 .align 2
 1730              	.L181:
 1731 003c 00000000 	 .word .LANCHOR0
 1732 0040 04ED00E0 	 .word -536810236
 1733              	 .cfi_endproc
 1734              	.LFE126:
 1736              	 .section .text.osThreadSuspend,"ax",%progbits
 1737              	 .align 2
 1738              	 .global osThreadSuspend
 1739              	 .thumb
 1740              	 .thumb_func
 1742              	osThreadSuspend:
 1743              	.LFB127:
 570:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 1744              	 .loc 1 570 0
 1745              	 .cfi_startproc
 1746              	 
 1747              	 
 1748              	.LVL190:
 1749 0000 08B5     	 push {r3,lr}
 1750              	.LCFI18:
 1751              	 .cfi_def_cfa_offset 8
 1752              	 .cfi_offset 3,-8
 1753              	 .cfi_offset 14,-4
 1754              	.LVL191:
 1755              	.LBB429:
 1756              	.LBB430:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1757              	 .loc 2 209 0
 1758              	
 1759 0002 EFF30583 	 MRS r3,ipsr
 1760              	
 1761              	.LVL192:
 1762              	 .thumb
 1763              	.LBE430:
 1764              	.LBE429:
 574:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1765              	 .loc 1 574 0
 1766 0006 73B9     	 cbnz r3,.L187
 1767              	.LBB431:
 1768              	.LBB432:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1769              	 .loc 2 386 0
 1770              	
 1771 0008 EFF31083 	 MRS r3,primask
 1772              	
 1773              	.LVL193:
 1774              	 .thumb
 1775              	.LBE432:
 1776              	.LBE431:
 574:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1777              	 .loc 1 574 0
 1778 000c 13B9     	 cbnz r3,.L185
 1779              	.LBB433:
 1780              	.LBB434:
 1781              	 .loc 2 465 0
 1782              	
 1783 000e EFF31183 	 MRS r3,basepri
 1784              	
 1785              	.LVL194:
 1786              	 .thumb
 1787              	.LBE434:
 1788              	.LBE433:
 574:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1789              	 .loc 1 574 0
 1790 0012 1BB1     	 cbz r3,.L186
 1791              	.LVL195:
 1792              	.L185:
 574:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1793              	 .loc 1 574 0 is_stmt 0 discriminator 4
 1794 0014 084B     	 ldr r3,.L191
 1795 0016 1B68     	 ldr r3,[r3]
 1796 0018 022B     	 cmp r3,#2
 1797 001a 07D0     	 beq .L188
 1798              	.L186:
 577:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 1799              	 .loc 1 577 0 is_stmt 1
 1800 001c 48B1     	 cbz r0,.L189
 1801              	.LVL196:
 582:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1802              	 .loc 1 582 0
 1803 001e FFF7FEFF 	 bl vTaskSuspend
 1804              	.LVL197:
 581:../CMSIS_RTOS_V2/cmsis_os2.c ****     vTaskSuspend (hTask);
 1805              	 .loc 1 581 0
 1806 0022 0020     	 movs r0,#0
 1807 0024 08BD     	 pop {r3,pc}
 1808              	.LVL198:
 1809              	.L187:
 575:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1810              	 .loc 1 575 0
 1811 0026 6FF00500 	 mvn r0,#5
 1812              	.LVL199:
 1813 002a 08BD     	 pop {r3,pc}
 1814              	.LVL200:
 1815              	.L188:
 1816 002c 6FF00500 	 mvn r0,#5
 1817              	.LVL201:
 1818 0030 08BD     	 pop {r3,pc}
 1819              	.LVL202:
 1820              	.L189:
 578:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1821              	 .loc 1 578 0
 1822 0032 6FF00300 	 mvn r0,#3
 1823              	.LVL203:
 586:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1824              	 .loc 1 586 0
 1825 0036 08BD     	 pop {r3,pc}
 1826              	.L192:
 1827              	 .align 2
 1828              	.L191:
 1829 0038 00000000 	 .word .LANCHOR0
 1830              	 .cfi_endproc
 1831              	.LFE127:
 1833              	 .section .text.osThreadResume,"ax",%progbits
 1834              	 .align 2
 1835              	 .global osThreadResume
 1836              	 .thumb
 1837              	 .thumb_func
 1839              	osThreadResume:
 1840              	.LFB128:
 588:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 1841              	 .loc 1 588 0
 1842              	 .cfi_startproc
 1843              	 
 1844              	 
 1845              	.LVL204:
 1846 0000 08B5     	 push {r3,lr}
 1847              	.LCFI19:
 1848              	 .cfi_def_cfa_offset 8
 1849              	 .cfi_offset 3,-8
 1850              	 .cfi_offset 14,-4
 1851              	.LVL205:
 1852              	.LBB435:
 1853              	.LBB436:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1854              	 .loc 2 209 0
 1855              	
 1856 0002 EFF30583 	 MRS r3,ipsr
 1857              	
 1858              	.LVL206:
 1859              	 .thumb
 1860              	.LBE436:
 1861              	.LBE435:
 592:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1862              	 .loc 1 592 0
 1863 0006 73B9     	 cbnz r3,.L197
 1864              	.LBB437:
 1865              	.LBB438:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1866              	 .loc 2 386 0
 1867              	
 1868 0008 EFF31083 	 MRS r3,primask
 1869              	
 1870              	.LVL207:
 1871              	 .thumb
 1872              	.LBE438:
 1873              	.LBE437:
 592:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1874              	 .loc 1 592 0
 1875 000c 13B9     	 cbnz r3,.L195
 1876              	.LBB439:
 1877              	.LBB440:
 1878              	 .loc 2 465 0
 1879              	
 1880 000e EFF31183 	 MRS r3,basepri
 1881              	
 1882              	.LVL208:
 1883              	 .thumb
 1884              	.LBE440:
 1885              	.LBE439:
 592:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1886              	 .loc 1 592 0
 1887 0012 1BB1     	 cbz r3,.L196
 1888              	.LVL209:
 1889              	.L195:
 592:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1890              	 .loc 1 592 0 is_stmt 0 discriminator 4
 1891 0014 084B     	 ldr r3,.L201
 1892 0016 1B68     	 ldr r3,[r3]
 1893 0018 022B     	 cmp r3,#2
 1894 001a 07D0     	 beq .L198
 1895              	.L196:
 595:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 1896              	 .loc 1 595 0 is_stmt 1
 1897 001c 48B1     	 cbz r0,.L199
 1898              	.LVL210:
 600:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1899              	 .loc 1 600 0
 1900 001e FFF7FEFF 	 bl vTaskResume
 1901              	.LVL211:
 599:../CMSIS_RTOS_V2/cmsis_os2.c ****     vTaskResume (hTask);
 1902              	 .loc 1 599 0
 1903 0022 0020     	 movs r0,#0
 1904 0024 08BD     	 pop {r3,pc}
 1905              	.LVL212:
 1906              	.L197:
 593:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1907              	 .loc 1 593 0
 1908 0026 6FF00500 	 mvn r0,#5
 1909              	.LVL213:
 1910 002a 08BD     	 pop {r3,pc}
 1911              	.LVL214:
 1912              	.L198:
 1913 002c 6FF00500 	 mvn r0,#5
 1914              	.LVL215:
 1915 0030 08BD     	 pop {r3,pc}
 1916              	.LVL216:
 1917              	.L199:
 596:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 1918              	 .loc 1 596 0
 1919 0032 6FF00300 	 mvn r0,#3
 1920              	.LVL217:
 604:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 1921              	 .loc 1 604 0
 1922 0036 08BD     	 pop {r3,pc}
 1923              	.L202:
 1924              	 .align 2
 1925              	.L201:
 1926 0038 00000000 	 .word .LANCHOR0
 1927              	 .cfi_endproc
 1928              	.LFE128:
 1930              	 .section .text.osThreadExit,"ax",%progbits
 1931              	 .align 2
 1932              	 .global osThreadExit
 1933              	 .thumb
 1934              	 .thumb_func
 1936              	osThreadExit:
 1937              	.LFB129:
 606:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef USE_FreeRTOS_HEAP_1
 1938              	 .loc 1 606 0
 1939              	 .cfi_startproc
 1940              	 
 1941              	 
 1942              	 
 1943 0000 08B5     	 push {r3,lr}
 1944              	.LCFI20:
 1945              	 .cfi_def_cfa_offset 8
 1946              	 .cfi_offset 3,-8
 1947              	 .cfi_offset 14,-4
 608:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
 1948              	 .loc 1 608 0
 1949 0002 0020     	 movs r0,#0
 1950 0004 FFF7FEFF 	 bl vTaskDelete
 1951              	.LVL218:
 1952              	.L204:
 610:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 1953              	 .loc 1 610 0 discriminator 1
 1954 0008 FEE7     	 b .L204
 1955              	 .cfi_endproc
 1956              	.LFE129:
 1958 000a 00BF     	 .section .text.osThreadTerminate,"ax",%progbits
 1959              	 .align 2
 1960              	 .global osThreadTerminate
 1961              	 .thumb
 1962              	 .thumb_func
 1964              	osThreadTerminate:
 1965              	.LFB130:
 613:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 1966              	 .loc 1 613 0
 1967              	 .cfi_startproc
 1968              	 
 1969              	 
 1970              	.LVL219:
 1971              	.LBB441:
 1972              	.LBB442:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1973              	 .loc 2 209 0
 1974              	
 1975 0000 EFF30583 	 MRS r3,ipsr
 1976              	
 1977              	.LVL220:
 1978              	 .thumb
 1979              	.LBE442:
 1980              	.LBE441:
 619:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1981              	 .loc 1 619 0
 1982 0004 ABB9     	 cbnz r3,.L210
 1983              	.LBB443:
 1984              	.LBB444:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 1985              	 .loc 2 386 0
 1986              	
 1987 0006 EFF31083 	 MRS r3,primask
 1988              	
 1989              	.LVL221:
 1990              	 .thumb
 1991              	.LBE444:
 1992              	.LBE443:
 619:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 1993              	 .loc 1 619 0
 1994 000a 13B9     	 cbnz r3,.L208
 1995              	.LBB445:
 1996              	.LBB446:
 1997              	 .loc 2 465 0
 1998              	
 1999 000c EFF31183 	 MRS r3,basepri
 2000              	
 2001              	.LVL222:
 2002              	 .thumb
 2003              	.LBE446:
 2004              	.LBE445:
 619:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 2005              	 .loc 1 619 0
 2006 0010 1BB1     	 cbz r3,.L209
 2007              	.LVL223:
 2008              	.L208:
 619:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 2009              	 .loc 1 619 0 is_stmt 0 discriminator 4
 2010 0012 0E4B     	 ldr r3,.L216
 2011 0014 1B68     	 ldr r3,[r3]
 2012 0016 022B     	 cmp r3,#2
 2013 0018 0ED0     	 beq .L211
 2014              	.L209:
 622:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 2015              	 .loc 1 622 0 is_stmt 1
 2016 001a 80B1     	 cbz r0,.L212
 613:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 2017              	 .loc 1 613 0
 2018 001c 10B5     	 push {r4,lr}
 2019              	.LCFI21:
 2020              	 .cfi_def_cfa_offset 8
 2021              	 .cfi_offset 4,-8
 2022              	 .cfi_offset 14,-4
 2023 001e 0446     	 mov r4,r0
 626:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2024              	 .loc 1 626 0
 2025 0020 FFF7FEFF 	 bl eTaskGetState
 2026              	.LVL224:
 628:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osOK;
 2027              	 .loc 1 628 0
 2028 0024 0428     	 cmp r0,#4
 2029 0026 0DD0     	 beq .L213
 2030              	.LVL225:
 630:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
 2031              	 .loc 1 630 0
 2032 0028 2046     	 mov r0,r4
 2033              	.LVL226:
 2034 002a FFF7FEFF 	 bl vTaskDelete
 2035              	.LVL227:
 629:../CMSIS_RTOS_V2/cmsis_os2.c ****       vTaskDelete (hTask);
 2036              	 .loc 1 629 0
 2037 002e 0020     	 movs r0,#0
 2038 0030 10BD     	 pop {r4,pc}
 2039              	.LVL228:
 2040              	.L210:
 2041              	.LCFI22:
 2042              	 .cfi_def_cfa_offset 0
 2043              	 .cfi_restore 4
 2044              	 .cfi_restore 14
 620:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2045              	 .loc 1 620 0
 2046 0032 6FF00500 	 mvn r0,#5
 2047              	.LVL229:
 640:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2048              	 .loc 1 640 0
 2049 0036 7047     	 bx lr
 2050              	.LVL230:
 2051              	.L211:
 620:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2052              	 .loc 1 620 0
 2053 0038 6FF00500 	 mvn r0,#5
 2054              	.LVL231:
 2055 003c 7047     	 bx lr
 2056              	.LVL232:
 2057              	.L212:
 623:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2058              	 .loc 1 623 0
 2059 003e 6FF00300 	 mvn r0,#3
 2060              	.LVL233:
 2061 0042 7047     	 bx lr
 2062              	.LVL234:
 2063              	.L213:
 2064              	.LCFI23:
 2065              	 .cfi_def_cfa_offset 8
 2066              	 .cfi_offset 4,-8
 2067              	 .cfi_offset 14,-4
 632:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 2068              	 .loc 1 632 0
 2069 0044 6FF00200 	 mvn r0,#2
 2070              	.LVL235:
 640:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2071              	 .loc 1 640 0
 2072 0048 10BD     	 pop {r4,pc}
 2073              	.LVL236:
 2074              	.L217:
 2075 004a 00BF     	 .align 2
 2076              	.L216:
 2077 004c 00000000 	 .word .LANCHOR0
 2078              	 .cfi_endproc
 2079              	.LFE130:
 2081              	 .section .text.osThreadGetCount,"ax",%progbits
 2082              	 .align 2
 2083              	 .global osThreadGetCount
 2084              	 .thumb
 2085              	 .thumb_func
 2087              	osThreadGetCount:
 2088              	.LFB131:
 642:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t count;
 2089              	 .loc 1 642 0
 2090              	 .cfi_startproc
 2091              	 
 2092              	 
 2093 0000 08B5     	 push {r3,lr}
 2094              	.LCFI24:
 2095              	 .cfi_def_cfa_offset 8
 2096              	 .cfi_offset 3,-8
 2097              	 .cfi_offset 14,-4
 2098              	.LBB447:
 2099              	.LBB448:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2100              	 .loc 2 209 0
 2101              	
 2102 0002 EFF30583 	 MRS r3,ipsr
 2103              	
 2104              	.LVL237:
 2105              	 .thumb
 2106              	.LBE448:
 2107              	.LBE447:
 645:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 2108              	 .loc 1 645 0
 2109 0006 63B9     	 cbnz r3,.L222
 2110              	.LBB449:
 2111              	.LBB450:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2112              	 .loc 2 386 0
 2113              	
 2114 0008 EFF31083 	 MRS r3,primask
 2115              	
 2116              	.LVL238:
 2117              	 .thumb
 2118              	.LBE450:
 2119              	.LBE449:
 645:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 2120              	 .loc 1 645 0
 2121 000c 13B9     	 cbnz r3,.L220
 2122              	.LBB451:
 2123              	.LBB452:
 2124              	 .loc 2 465 0
 2125              	
 2126 000e EFF31183 	 MRS r3,basepri
 2127              	
 2128              	.LVL239:
 2129              	 .thumb
 2130              	.LBE452:
 2131              	.LBE451:
 645:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 2132              	 .loc 1 645 0
 2133 0012 1BB1     	 cbz r3,.L221
 2134              	.LVL240:
 2135              	.L220:
 645:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 2136              	 .loc 1 645 0 is_stmt 0 discriminator 4
 2137 0014 054B     	 ldr r3,.L225
 2138 0016 1B68     	 ldr r3,[r3]
 2139 0018 022B     	 cmp r3,#2
 2140 001a 04D0     	 beq .L223
 2141              	.L221:
 648:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2142              	 .loc 1 648 0 is_stmt 1
 2143 001c FFF7FEFF 	 bl uxTaskGetNumberOfTasks
 2144              	.LVL241:
 2145 0020 08BD     	 pop {r3,pc}
 2146              	.LVL242:
 2147              	.L222:
 646:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 2148              	 .loc 1 646 0
 2149 0022 0020     	 movs r0,#0
 2150 0024 08BD     	 pop {r3,pc}
 2151              	.LVL243:
 2152              	.L223:
 2153 0026 0020     	 movs r0,#0
 2154              	.LVL244:
 652:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2155              	 .loc 1 652 0
 2156 0028 08BD     	 pop {r3,pc}
 2157              	.L226:
 2158 002a 00BF     	 .align 2
 2159              	.L225:
 2160 002c 00000000 	 .word .LANCHOR0
 2161              	 .cfi_endproc
 2162              	.LFE131:
 2164              	 .section .text.osThreadEnumerate,"ax",%progbits
 2165              	 .align 2
 2166              	 .global osThreadEnumerate
 2167              	 .thumb
 2168              	 .thumb_func
 2170              	osThreadEnumerate:
 2171              	.LFB132:
 654:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t i, count;
 2172              	 .loc 1 654 0
 2173              	 .cfi_startproc
 2174              	 
 2175              	 
 2176              	.LVL245:
 2177 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 2178              	.LCFI25:
 2179              	 .cfi_def_cfa_offset 24
 2180              	 .cfi_offset 3,-24
 2181              	 .cfi_offset 4,-20
 2182              	 .cfi_offset 5,-16
 2183              	 .cfi_offset 6,-12
 2184              	 .cfi_offset 7,-8
 2185              	 .cfi_offset 14,-4
 2186              	.LBB453:
 2187              	.LBB454:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2188              	 .loc 2 209 0
 2189              	
 2190 0002 EFF30583 	 MRS r3,ipsr
 2191              	
 2192              	.LVL246:
 2193              	 .thumb
 2194              	.LBE454:
 2195              	.LBE453:
 658:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 2196              	 .loc 1 658 0
 2197 0006 ABBB     	 cbnz r3,.L234
 2198 0008 0546     	 mov r5,r0
 2199 000a 0C46     	 mov r4,r1
 2200              	.LBB455:
 2201              	.LBB456:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2202              	 .loc 2 386 0
 2203              	
 2204 000c EFF31083 	 MRS r3,primask
 2205              	
 2206              	.LVL247:
 2207              	 .thumb
 2208              	.LBE456:
 2209              	.LBE455:
 658:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 2210              	 .loc 1 658 0
 2211 0010 13B9     	 cbnz r3,.L229
 2212              	.LBB457:
 2213              	.LBB458:
 2214              	 .loc 2 465 0
 2215              	
 2216 0012 EFF31183 	 MRS r3,basepri
 2217              	
 2218              	.LVL248:
 2219              	 .thumb
 2220              	.LBE458:
 2221              	.LBE457:
 658:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 2222              	 .loc 1 658 0
 2223 0016 1BB1     	 cbz r3,.L230
 2224              	.LVL249:
 2225              	.L229:
 658:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 2226              	 .loc 1 658 0 is_stmt 0 discriminator 4
 2227 0018 1A4B     	 ldr r3,.L241
 2228 001a 1B68     	 ldr r3,[r3]
 2229 001c 022B     	 cmp r3,#2
 2230 001e 2BD0     	 beq .L235
 2231              	.L230:
 658:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 2232              	 .loc 1 658 0 discriminator 6
 2233 0020 65B3     	 cbz r5,.L236
 658:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
 2234              	 .loc 1 658 0 discriminator 7
 2235 0022 64B3     	 cbz r4,.L228
 661:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2236              	 .loc 1 661 0 is_stmt 1
 2237 0024 FFF7FEFF 	 bl vTaskSuspendAll
 2238              	.LVL250:
 663:../CMSIS_RTOS_V2/cmsis_os2.c ****     task  = pvPortMalloc (count * sizeof(TaskStatus_t));
 2239              	 .loc 1 663 0
 2240 0028 FFF7FEFF 	 bl uxTaskGetNumberOfTasks
 2241              	.LVL251:
 2242 002c 0746     	 mov r7,r0
 2243              	.LVL252:
 664:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2244              	 .loc 1 664 0
 2245 002e 00EBC000 	 add r0,r0,r0,lsl#3
 2246              	.LVL253:
 2247 0032 8000     	 lsls r0,r0,#2
 2248 0034 FFF7FEFF 	 bl pvPortMalloc
 2249              	.LVL254:
 666:../CMSIS_RTOS_V2/cmsis_os2.c ****       count = uxTaskGetSystemState (task, count, NULL);
 2250              	 .loc 1 666 0
 2251 0038 0646     	 mov r6,r0
 2252 003a A0B1     	 cbz r0,.L237
 667:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2253              	 .loc 1 667 0
 2254 003c 3946     	 mov r1,r7
 2255 003e 0022     	 movs r2,#0
 2256 0040 FFF7FEFF 	 bl uxTaskGetSystemState
 2257              	.LVL255:
 669:../CMSIS_RTOS_V2/cmsis_os2.c ****         thread_array[i] = (osThreadId_t)task[i].xHandle;
 2258              	 .loc 1 669 0
 2259 0044 0746     	 mov r7,r0
 2260 0046 60B1     	 cbz r0,.L232
 2261 0048 281F     	 subs r0,r5,#4
 2262              	.LVL256:
 2263 004a 0022     	 movs r2,#0
 2264 004c 1346     	 mov r3,r2
 2265              	.LVL257:
 2266              	.L233:
 670:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 2267              	 .loc 1 670 0 discriminator 4
 2268 004e B158     	 ldr r1,[r6,r2]
 2269 0050 40F8041F 	 str r1,[r0,#4]!
 669:../CMSIS_RTOS_V2/cmsis_os2.c ****         thread_array[i] = (osThreadId_t)task[i].xHandle;
 2270              	 .loc 1 669 0 discriminator 4
 2271 0054 0133     	 adds r3,r3,#1
 2272              	.LVL258:
 2273 0056 BB42     	 cmp r3,r7
 2274 0058 03D0     	 beq .L232
 2275 005a 2432     	 adds r2,r2,#36
 669:../CMSIS_RTOS_V2/cmsis_os2.c ****         thread_array[i] = (osThreadId_t)task[i].xHandle;
 2276              	 .loc 1 669 0 is_stmt 0 discriminator 3
 2277 005c A342     	 cmp r3,r4
 2278 005e F6D1     	 bne .L233
 669:../CMSIS_RTOS_V2/cmsis_os2.c ****         thread_array[i] = (osThreadId_t)task[i].xHandle;
 2279              	 .loc 1 669 0
 2280 0060 2746     	 mov r7,r4
 2281              	.LVL259:
 2282              	.L232:
 672:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 2283              	 .loc 1 672 0 is_stmt 1
 2284 0062 3C46     	 mov r4,r7
 2285              	.LVL260:
 2286 0064 00E0     	 b .L231
 2287              	.LVL261:
 2288              	.L237:
 663:../CMSIS_RTOS_V2/cmsis_os2.c ****     task  = pvPortMalloc (count * sizeof(TaskStatus_t));
 2289              	 .loc 1 663 0
 2290 0066 3C46     	 mov r4,r7
 2291              	.LVL262:
 2292              	.L231:
 674:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2293              	 .loc 1 674 0
 2294 0068 FFF7FEFF 	 bl xTaskResumeAll
 2295              	.LVL263:
 676:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2296              	 .loc 1 676 0
 2297 006c 3046     	 mov r0,r6
 2298 006e FFF7FEFF 	 bl vPortFree
 2299              	.LVL264:
 2300 0072 04E0     	 b .L228
 2301              	.LVL265:
 2302              	.L234:
 659:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 2303              	 .loc 1 659 0
 2304 0074 0024     	 movs r4,#0
 2305 0076 02E0     	 b .L228
 2306              	.LVL266:
 2307              	.L235:
 2308 0078 0024     	 movs r4,#0
 2309 007a 00E0     	 b .L228
 2310              	.L236:
 2311 007c 0024     	 movs r4,#0
 2312              	.LVL267:
 2313              	.L228:
 680:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2314              	 .loc 1 680 0
 2315 007e 2046     	 mov r0,r4
 2316 0080 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 2317              	.LVL268:
 2318              	.L242:
 2319 0082 00BF     	 .align 2
 2320              	.L241:
 2321 0084 00000000 	 .word .LANCHOR0
 2322              	 .cfi_endproc
 2323              	.LFE132:
 2325              	 .section .text.osThreadFlagsSet,"ax",%progbits
 2326              	 .align 2
 2327              	 .global osThreadFlagsSet
 2328              	 .thumb
 2329              	 .thumb_func
 2331              	osThreadFlagsSet:
 2332              	.LFB133:
 682:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask = (TaskHandle_t)thread_id;
 2333              	 .loc 1 682 0
 2334              	 .cfi_startproc
 2335              	 
 2336              	 
 2337              	.LVL269:
 2338 0000 30B5     	 push {r4,r5,lr}
 2339              	.LCFI26:
 2340              	 .cfi_def_cfa_offset 12
 2341              	 .cfi_offset 4,-12
 2342              	 .cfi_offset 5,-8
 2343              	 .cfi_offset 14,-4
 2344 0002 85B0     	 sub sp,sp,#20
 2345              	.LCFI27:
 2346              	 .cfi_def_cfa_offset 32
 2347              	.LVL270:
 687:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorParameter;
 2348              	 .loc 1 687 0
 2349 0004 10B1     	 cbz r0,.L244
 2350 0006 0446     	 mov r4,r0
 687:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorParameter;
 2351              	 .loc 1 687 0 is_stmt 0 discriminator 1
 2352 0008 0029     	 cmp r1,#0
 2353 000a 03DA     	 bge .L245
 2354              	.L244:
 688:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2355              	 .loc 1 688 0 is_stmt 1
 2356 000c 6FF00303 	 mvn r3,#3
 2357 0010 0393     	 str r3,[sp,#12]
 2358 0012 3EE0     	 b .L246
 2359              	.L245:
 2360 0014 0A46     	 mov r2,r1
 691:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2361              	 .loc 1 691 0
 2362 0016 4FF0FF33 	 mov r3,#-1
 2363 001a 0393     	 str r3,[sp,#12]
 2364              	.LBB459:
 2365              	.LBB460:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2366              	 .loc 2 209 0
 2367              	
 2368 001c EFF30583 	 MRS r3,ipsr
 2369              	
 2370              	.LVL271:
 2371              	 .thumb
 2372              	.LBE460:
 2373              	.LBE459:
 693:../CMSIS_RTOS_V2/cmsis_os2.c ****       yield = pdFALSE;
 2374              	 .loc 1 693 0
 2375 0020 4BB9     	 cbnz r3,.L247
 2376              	.LBB461:
 2377              	.LBB462:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2378              	 .loc 2 386 0
 2379              	
 2380 0022 EFF31083 	 MRS r3,primask
 2381              	
 2382              	.LVL272:
 2383              	 .thumb
 2384              	.LBE462:
 2385              	.LBE461:
 693:../CMSIS_RTOS_V2/cmsis_os2.c ****       yield = pdFALSE;
 2386              	 .loc 1 693 0
 2387 0026 13B9     	 cbnz r3,.L248
 2388              	.LBB463:
 2389              	.LBB464:
 2390              	 .loc 2 465 0
 2391              	
 2392 0028 EFF31183 	 MRS r3,basepri
 2393              	
 2394              	.LVL273:
 2395              	 .thumb
 2396              	.LBE464:
 2397              	.LBE463:
 693:../CMSIS_RTOS_V2/cmsis_os2.c ****       yield = pdFALSE;
 2398              	 .loc 1 693 0
 2399 002c 13B3     	 cbz r3,.L249
 2400              	.LVL274:
 2401              	.L248:
 693:../CMSIS_RTOS_V2/cmsis_os2.c ****       yield = pdFALSE;
 2402              	 .loc 1 693 0 is_stmt 0 discriminator 4
 2403 002e 1A4B     	 ldr r3,.L251
 2404 0030 1B68     	 ldr r3,[r3]
 2405 0032 022B     	 cmp r3,#2
 2406 0034 1ED1     	 bne .L249
 2407              	.L247:
 694:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2408              	 .loc 1 694 0 is_stmt 1
 2409 0036 0025     	 movs r5,#0
 2410 0038 04AB     	 add r3,sp,#16
 2411 003a 43F8085D 	 str r5,[r3,#-8]!
 696:../CMSIS_RTOS_V2/cmsis_os2.c ****       (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 2412              	 .loc 1 696 0
 2413 003e 0095     	 str r5,[sp]
 2414 0040 0193     	 str r3,[sp,#4]
 2415 0042 2046     	 mov r0,r4
 2416              	.LVL275:
 2417 0044 2946     	 mov r1,r5
 2418              	.LVL276:
 2419 0046 0123     	 movs r3,#1
 2420 0048 FFF7FEFF 	 bl xTaskGenericNotifyFromISR
 2421              	.LVL277:
 697:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2422              	 .loc 1 697 0
 2423 004c 03AB     	 add r3,sp,#12
 2424 004e 0093     	 str r3,[sp]
 2425 0050 0195     	 str r5,[sp,#4]
 2426 0052 2046     	 mov r0,r4
 2427 0054 2946     	 mov r1,r5
 2428 0056 2A46     	 mov r2,r5
 2429 0058 2B46     	 mov r3,r5
 2430 005a FFF7FEFF 	 bl xTaskGenericNotifyFromISR
 2431              	.LVL278:
 699:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 2432              	 .loc 1 699 0
 2433 005e 029B     	 ldr r3,[sp,#8]
 2434 0060 BBB1     	 cbz r3,.L246
 699:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 2435              	 .loc 1 699 0 is_stmt 0 discriminator 1
 2436 0062 4FF08052 	 mov r2,#268435456
 2437 0066 0D4B     	 ldr r3,.L251+4
 2438 0068 1A60     	 str r2,[r3]
 2439              	
 2440 006a BFF34F8F 	 dsb
 2441              	
 2442              	
 2443 006e BFF36F8F 	 isb
 2444              	
 2445              	 .thumb
 2446 0072 0EE0     	 b .L246
 2447              	.LVL279:
 2448              	.L249:
 702:../CMSIS_RTOS_V2/cmsis_os2.c ****       (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 2449              	 .loc 1 702 0 is_stmt 1
 2450 0074 0025     	 movs r5,#0
 2451 0076 0095     	 str r5,[sp]
 2452 0078 2046     	 mov r0,r4
 2453              	.LVL280:
 2454 007a 2946     	 mov r1,r5
 2455              	.LVL281:
 2456 007c 0123     	 movs r3,#1
 2457 007e FFF7FEFF 	 bl xTaskGenericNotify
 2458              	.LVL282:
 703:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 2459              	 .loc 1 703 0
 2460 0082 03AB     	 add r3,sp,#12
 2461 0084 0093     	 str r3,[sp]
 2462 0086 2046     	 mov r0,r4
 2463 0088 2946     	 mov r1,r5
 2464 008a 2A46     	 mov r2,r5
 2465 008c 2B46     	 mov r3,r5
 2466 008e FFF7FEFF 	 bl xTaskGenericNotify
 2467              	.LVL283:
 2468              	.L246:
 708:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2469              	 .loc 1 708 0
 2470 0092 0398     	 ldr r0,[sp,#12]
 2471 0094 05B0     	 add sp,sp,#20
 2472              	.LCFI28:
 2473              	 .cfi_def_cfa_offset 12
 2474              	 
 2475 0096 30BD     	 pop {r4,r5,pc}
 2476              	.L252:
 2477              	 .align 2
 2478              	.L251:
 2479 0098 00000000 	 .word .LANCHOR0
 2480 009c 04ED00E0 	 .word -536810236
 2481              	 .cfi_endproc
 2482              	.LFE133:
 2484              	 .section .text.osThreadFlagsClear,"ax",%progbits
 2485              	 .align 2
 2486              	 .global osThreadFlagsClear
 2487              	 .thumb
 2488              	 .thumb_func
 2490              	osThreadFlagsClear:
 2491              	.LFB134:
 710:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask;
 2492              	 .loc 1 710 0
 2493              	 .cfi_startproc
 2494              	 
 2495              	 
 2496              	.LVL284:
 2497 0000 70B5     	 push {r4,r5,r6,lr}
 2498              	.LCFI29:
 2499              	 .cfi_def_cfa_offset 16
 2500              	 .cfi_offset 4,-16
 2501              	 .cfi_offset 5,-12
 2502              	 .cfi_offset 6,-8
 2503              	 .cfi_offset 14,-4
 2504 0002 84B0     	 sub sp,sp,#16
 2505              	.LCFI30:
 2506              	 .cfi_def_cfa_offset 32
 2507              	.LBB465:
 2508              	.LBB466:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2509              	 .loc 2 209 0
 2510              	
 2511 0004 EFF30583 	 MRS r3,ipsr
 2512              	
 2513              	.LVL285:
 2514              	 .thumb
 2515              	.LBE466:
 2516              	.LBE465:
 714:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2517              	 .loc 1 714 0
 2518 0008 53BB     	 cbnz r3,.L257
 2519              	.LBB467:
 2520              	.LBB468:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2521              	 .loc 2 386 0
 2522              	
 2523 000a EFF31083 	 MRS r3,primask
 2524              	
 2525              	.LVL286:
 2526              	 .thumb
 2527              	.LBE468:
 2528              	.LBE467:
 714:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2529              	 .loc 1 714 0
 2530 000e 13B9     	 cbnz r3,.L255
 2531              	.LBB469:
 2532              	.LBB470:
 2533              	 .loc 2 465 0
 2534              	
 2535 0010 EFF31183 	 MRS r3,basepri
 2536              	
 2537              	.LVL287:
 2538              	 .thumb
 2539              	.LBE470:
 2540              	.LBE469:
 714:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2541              	 .loc 1 714 0
 2542 0014 1BB1     	 cbz r3,.L256
 2543              	.LVL288:
 2544              	.L255:
 714:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2545              	 .loc 1 714 0 is_stmt 0 discriminator 4
 2546 0016 184B     	 ldr r3,.L262
 2547 0018 1B68     	 ldr r3,[r3]
 2548 001a 022B     	 cmp r3,#2
 2549 001c 23D0     	 beq .L258
 2550              	.L256:
 717:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorParameter;
 2551              	 .loc 1 717 0 is_stmt 1
 2552 001e 0028     	 cmp r0,#0
 2553 0020 24DB     	 blt .L259
 2554 0022 0546     	 mov r5,r0
 721:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2555              	 .loc 1 721 0
 2556 0024 FFF7FEFF 	 bl xTaskGetCurrentTaskHandle
 2557              	.LVL289:
 2558 0028 0646     	 mov r6,r0
 2559              	.LVL290:
 723:../CMSIS_RTOS_V2/cmsis_os2.c ****       rflags = cflags;
 2560              	 .loc 1 723 0
 2561 002a 03AB     	 add r3,sp,#12
 2562 002c 0093     	 str r3,[sp]
 2563 002e 0021     	 movs r1,#0
 2564 0030 0A46     	 mov r2,r1
 2565 0032 0B46     	 mov r3,r1
 2566 0034 FFF7FEFF 	 bl xTaskGenericNotify
 2567              	.LVL291:
 2568 0038 0128     	 cmp r0,#1
 732:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 2569              	 .loc 1 732 0
 2570 003a 18BF     	 it ne
 2571 003c 4FF0FF34 	 movne r4,#-1
 723:../CMSIS_RTOS_V2/cmsis_os2.c ****       rflags = cflags;
 2572              	 .loc 1 723 0
 2573 0040 17D1     	 bne .L254
 724:../CMSIS_RTOS_V2/cmsis_os2.c ****       cflags &= ~flags;
 2574              	 .loc 1 724 0
 2575 0042 039C     	 ldr r4,[sp,#12]
 2576              	.LVL292:
 725:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2577              	 .loc 1 725 0
 2578 0044 24EA0502 	 bic r2,r4,r5
 2579 0048 0392     	 str r2,[sp,#12]
 727:../CMSIS_RTOS_V2/cmsis_os2.c ****         rflags = (uint32_t)osError;
 2580              	 .loc 1 727 0
 2581 004a 0021     	 movs r1,#0
 2582 004c 0091     	 str r1,[sp]
 2583 004e 3046     	 mov r0,r6
 2584 0050 0323     	 movs r3,#3
 2585 0052 FFF7FEFF 	 bl xTaskGenericNotify
 2586              	.LVL293:
 728:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 2587              	 .loc 1 728 0
 2588 0056 0128     	 cmp r0,#1
 2589 0058 18BF     	 it ne
 2590 005a 4FF0FF34 	 movne r4,#-1
 2591              	.LVL294:
 2592 005e 08E0     	 b .L254
 2593              	.LVL295:
 2594              	.L257:
 715:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2595              	 .loc 1 715 0
 2596 0060 6FF00504 	 mvn r4,#5
 2597 0064 05E0     	 b .L254
 2598              	.LVL296:
 2599              	.L258:
 2600 0066 6FF00504 	 mvn r4,#5
 2601 006a 02E0     	 b .L254
 2602              	.L259:
 718:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2603              	 .loc 1 718 0
 2604 006c 6FF00304 	 mvn r4,#3
 2605 0070 FFE7     	 b .L254
 2606              	.LVL297:
 2607              	.L254:
 738:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2608              	 .loc 1 738 0
 2609 0072 2046     	 mov r0,r4
 2610 0074 04B0     	 add sp,sp,#16
 2611              	.LCFI31:
 2612              	 .cfi_def_cfa_offset 16
 2613              	 
 2614 0076 70BD     	 pop {r4,r5,r6,pc}
 2615              	.LVL298:
 2616              	.L263:
 2617              	 .align 2
 2618              	.L262:
 2619 0078 00000000 	 .word .LANCHOR0
 2620              	 .cfi_endproc
 2621              	.LFE134:
 2623              	 .section .text.osThreadFlagsGet,"ax",%progbits
 2624              	 .align 2
 2625              	 .global osThreadFlagsGet
 2626              	 .thumb
 2627              	 .thumb_func
 2629              	osThreadFlagsGet:
 2630              	.LFB135:
 740:../CMSIS_RTOS_V2/cmsis_os2.c ****   TaskHandle_t hTask;
 2631              	 .loc 1 740 0
 2632              	 .cfi_startproc
 2633              	 
 2634              	 
 2635 0000 00B5     	 push {lr}
 2636              	.LCFI32:
 2637              	 .cfi_def_cfa_offset 4
 2638              	 .cfi_offset 14,-4
 2639 0002 85B0     	 sub sp,sp,#20
 2640              	.LCFI33:
 2641              	 .cfi_def_cfa_offset 24
 2642              	.LBB471:
 2643              	.LBB472:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2644              	 .loc 2 209 0
 2645              	
 2646 0004 EFF30583 	 MRS r3,ipsr
 2647              	
 2648              	.LVL299:
 2649              	 .thumb
 2650              	.LBE472:
 2651              	.LBE471:
 744:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2652              	 .loc 1 744 0
 2653 0008 4BB9     	 cbnz r3,.L265
 2654              	.LBB473:
 2655              	.LBB474:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2656              	 .loc 2 386 0
 2657              	
 2658 000a EFF31083 	 MRS r3,primask
 2659              	
 2660              	.LVL300:
 2661              	 .thumb
 2662              	.LBE474:
 2663              	.LBE473:
 744:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2664              	 .loc 1 744 0
 2665 000e 13B9     	 cbnz r3,.L266
 2666              	.LBB475:
 2667              	.LBB476:
 2668              	 .loc 2 465 0
 2669              	
 2670 0010 EFF31183 	 MRS r3,basepri
 2671              	
 2672              	.LVL301:
 2673              	 .thumb
 2674              	.LBE476:
 2675              	.LBE475:
 744:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2676              	 .loc 1 744 0
 2677 0014 3BB1     	 cbz r3,.L267
 2678              	.LVL302:
 2679              	.L266:
 744:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2680              	 .loc 1 744 0 is_stmt 0 discriminator 4
 2681 0016 0D4B     	 ldr r3,.L270
 2682 0018 1B68     	 ldr r3,[r3]
 2683 001a 022B     	 cmp r3,#2
 2684 001c 03D1     	 bne .L267
 2685              	.L265:
 745:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2686              	 .loc 1 745 0 is_stmt 1
 2687 001e 6FF00503 	 mvn r3,#5
 2688 0022 0393     	 str r3,[sp,#12]
 2689 0024 0DE0     	 b .L268
 2690              	.L267:
 748:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2691              	 .loc 1 748 0
 2692 0026 FFF7FEFF 	 bl xTaskGetCurrentTaskHandle
 2693              	.LVL303:
 750:../CMSIS_RTOS_V2/cmsis_os2.c ****       rflags = (uint32_t)osError;
 2694              	 .loc 1 750 0
 2695 002a 03AB     	 add r3,sp,#12
 2696 002c 0093     	 str r3,[sp]
 2697 002e 0021     	 movs r1,#0
 2698 0030 0A46     	 mov r2,r1
 2699 0032 0B46     	 mov r3,r1
 2700 0034 FFF7FEFF 	 bl xTaskGenericNotify
 2701              	.LVL304:
 2702 0038 0128     	 cmp r0,#1
 751:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 2703              	 .loc 1 751 0
 2704 003a 1CBF     	 itt ne
 2705 003c 4FF0FF33 	 movne r3,#-1
 2706 0040 0393     	 strne r3,[sp,#12]
 2707              	.L268:
 756:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2708              	 .loc 1 756 0
 2709 0042 0398     	 ldr r0,[sp,#12]
 2710 0044 05B0     	 add sp,sp,#20
 2711              	.LCFI34:
 2712              	 .cfi_def_cfa_offset 4
 2713              	 
 2714 0046 5DF804FB 	 ldr pc,[sp],#4
 2715              	.L271:
 2716 004a 00BF     	 .align 2
 2717              	.L270:
 2718 004c 00000000 	 .word .LANCHOR0
 2719              	 .cfi_endproc
 2720              	.LFE135:
 2722              	 .section .text.osThreadFlagsWait,"ax",%progbits
 2723              	 .align 2
 2724              	 .global osThreadFlagsWait
 2725              	 .thumb
 2726              	 .thumb_func
 2728              	osThreadFlagsWait:
 2729              	.LFB136:
 758:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rflags, nval;
 2730              	 .loc 1 758 0
 2731              	 .cfi_startproc
 2732              	 
 2733              	 
 2734              	.LVL305:
 2735 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
 2736              	.LCFI35:
 2737              	 .cfi_def_cfa_offset 36
 2738              	 .cfi_offset 4,-36
 2739              	 .cfi_offset 5,-32
 2740              	 .cfi_offset 6,-28
 2741              	 .cfi_offset 7,-24
 2742              	 .cfi_offset 8,-20
 2743              	 .cfi_offset 9,-16
 2744              	 .cfi_offset 10,-12
 2745              	 .cfi_offset 11,-8
 2746              	 .cfi_offset 14,-4
 2747 0004 85B0     	 sub sp,sp,#20
 2748              	.LCFI36:
 2749              	 .cfi_def_cfa_offset 56
 2750              	.LBB477:
 2751              	.LBB478:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2752              	 .loc 2 209 0
 2753              	
 2754 0006 EFF30583 	 MRS r3,ipsr
 2755              	
 2756              	.LVL306:
 2757              	 .thumb
 2758              	.LBE478:
 2759              	.LBE477:
 764:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2760              	 .loc 1 764 0
 2761 000a 002B     	 cmp r3,#0
 2762 000c 48D1     	 bne .L284
 2763              	.LBB479:
 2764              	.LBB480:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2765              	 .loc 2 386 0
 2766              	
 2767 000e EFF31083 	 MRS r3,primask
 2768              	
 2769              	.LVL307:
 2770              	 .thumb
 2771              	.LBE480:
 2772              	.LBE479:
 764:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2773              	 .loc 1 764 0
 2774 0012 13B9     	 cbnz r3,.L274
 2775              	.LBB481:
 2776              	.LBB482:
 2777              	 .loc 2 465 0
 2778              	
 2779 0014 EFF31183 	 MRS r3,basepri
 2780              	
 2781              	.LVL308:
 2782              	 .thumb
 2783              	.LBE482:
 2784              	.LBE481:
 764:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2785              	 .loc 1 764 0
 2786 0018 1BB1     	 cbz r3,.L275
 2787              	.LVL309:
 2788              	.L274:
 764:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
 2789              	 .loc 1 764 0 is_stmt 0 discriminator 4
 2790 001a 2C4B     	 ldr r3,.L294
 2791 001c 1B68     	 ldr r3,[r3]
 2792 001e 022B     	 cmp r3,#2
 2793 0020 41D0     	 beq .L285
 2794              	.L275:
 767:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorParameter;
 2795              	 .loc 1 767 0 is_stmt 1
 2796 0022 0028     	 cmp r0,#0
 2797 0024 42DB     	 blt .L286
 2798 0026 1646     	 mov r6,r2
 2799 0028 8A46     	 mov r10,r1
 2800 002a 8046     	 mov r8,r0
 771:../CMSIS_RTOS_V2/cmsis_os2.c ****       clear = 0U;
 2801              	 .loc 1 771 0
 2802 002c 01F00203 	 and r3,r1,#2
 774:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 2803              	 .loc 1 774 0
 2804 0030 002B     	 cmp r3,#0
 2805 0032 0CBF     	 ite eq
 2806 0034 8146     	 moveq r9,r0
 2807 0036 4FF00009 	 movne r9,#0
 2808              	.LVL310:
 780:../CMSIS_RTOS_V2/cmsis_os2.c ****     do {
 2809              	 .loc 1 780 0
 2810 003a FFF7FEFF 	 bl xTaskGetTickCount
 2811              	.LVL311:
 2812 003e 8346     	 mov fp,r0
 2813              	.LVL312:
 778:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2814              	 .loc 1 778 0
 2815 0040 3546     	 mov r5,r6
 777:../CMSIS_RTOS_V2/cmsis_os2.c ****     tout   = timeout;
 2816              	 .loc 1 777 0
 2817 0042 0024     	 movs r4,#0
 782:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2818              	 .loc 1 782 0
 2819 0044 2746     	 mov r7,r4
 788:../CMSIS_RTOS_V2/cmsis_os2.c ****           if ((flags & rflags) == flags) {
 2820              	 .loc 1 788 0
 2821 0046 0AF0010A 	 and r10,r10,#1
 2822              	.LVL313:
 2823              	.L277:
 782:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2824              	 .loc 1 782 0
 2825 004a 0095     	 str r5,[sp]
 2826 004c 3846     	 mov r0,r7
 2827 004e 3946     	 mov r1,r7
 2828 0050 4A46     	 mov r2,r9
 2829 0052 03AB     	 add r3,sp,#12
 2830 0054 FFF7FEFF 	 bl xTaskGenericNotifyWait
 2831              	.LVL314:
 784:../CMSIS_RTOS_V2/cmsis_os2.c ****         rflags &= flags;
 2832              	 .loc 1 784 0
 2833 0058 0128     	 cmp r0,#1
 2834 005a 18D1     	 bne .L278
 785:../CMSIS_RTOS_V2/cmsis_os2.c ****         rflags |= nval;
 2835              	 .loc 1 785 0
 2836 005c 04EA0804 	 and r4,r4,r8
 2837              	.LVL315:
 786:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2838              	 .loc 1 786 0
 2839 0060 039B     	 ldr r3,[sp,#12]
 2840 0062 1C43     	 orrs r4,r4,r3
 2841              	.LVL316:
 788:../CMSIS_RTOS_V2/cmsis_os2.c ****           if ((flags & rflags) == flags) {
 2842              	 .loc 1 788 0
 2843 0064 BAF1000F 	 cmp r10,#0
 2844 0068 05D0     	 beq .L279
 789:../CMSIS_RTOS_V2/cmsis_os2.c ****             break;
 2845              	 .loc 1 789 0
 2846 006a 04EA0803 	 and r3,r4,r8
 2847 006e 4345     	 cmp r3,r8
 2848 0070 27D0     	 beq .L292
 792:../CMSIS_RTOS_V2/cmsis_os2.c ****               rflags = (uint32_t)osErrorResource;
 2849              	 .loc 1 792 0
 2850 0072 26B9     	 cbnz r6,.L280
 2851 0074 1DE0     	 b .L288
 2852              	.L279:
 799:../CMSIS_RTOS_V2/cmsis_os2.c ****             break;
 2853              	 .loc 1 799 0
 2854 0076 14EA080F 	 tst r4,r8
 2855 007a 22D1     	 bne .L292
 802:../CMSIS_RTOS_V2/cmsis_os2.c ****               rflags = (uint32_t)osErrorResource;
 2856              	 .loc 1 802 0
 2857 007c E6B1     	 cbz r6,.L289
 2858              	.L280:
 810:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2859              	 .loc 1 810 0
 2860 007e FFF7FEFF 	 bl xTaskGetTickCount
 2861              	.LVL317:
 2862 0082 CBEB0000 	 rsb r0,fp,r0
 2863              	.LVL318:
 812:../CMSIS_RTOS_V2/cmsis_os2.c ****           tout  = 0;
 2864              	 .loc 1 812 0
 2865 0086 8542     	 cmp r5,r0
 2866 0088 19D3     	 bcc .L290
 815:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 2867              	 .loc 1 815 0
 2868 008a 2D1A     	 subs r5,r5,r0
 2869              	.LVL319:
 2870 008c DDE7     	 b .L277
 2871              	.LVL320:
 2872              	.L278:
 822:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 2873              	 .loc 1 822 0
 2874 008e 002E     	 cmp r6,#0
 2875 0090 0CBF     	 ite eq
 2876 0092 6FF00204 	 mvneq r4,#2
 2877              	.LVL321:
 2878 0096 6FF00104 	 mvnne r4,#1
 2879              	.LVL322:
 826:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2880              	 .loc 1 826 0
 2881 009a 0028     	 cmp r0,#0
 2882 009c D5D1     	 bne .L277
 2883 009e 10E0     	 b .L292
 2884              	.LVL323:
 2885              	.L284:
 765:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2886              	 .loc 1 765 0
 2887 00a0 6FF00504 	 mvn r4,#5
 2888 00a4 0DE0     	 b .L292
 2889              	.LVL324:
 2890              	.L285:
 2891 00a6 6FF00504 	 mvn r4,#5
 2892 00aa 0AE0     	 b .L292
 2893              	.L286:
 768:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 2894              	 .loc 1 768 0
 2895 00ac 6FF00304 	 mvn r4,#3
 2896 00b0 07E0     	 b .L292
 2897              	.LVL325:
 2898              	.L288:
 793:../CMSIS_RTOS_V2/cmsis_os2.c ****               break;
 2899              	 .loc 1 793 0
 2900 00b2 6FF00204 	 mvn r4,#2
 2901              	.LVL326:
 2902 00b6 04E0     	 b .L292
 2903              	.LVL327:
 2904              	.L289:
 803:../CMSIS_RTOS_V2/cmsis_os2.c ****               break;
 2905              	 .loc 1 803 0
 2906 00b8 6FF00204 	 mvn r4,#2
 2907              	.LVL328:
 2908 00bc 01E0     	 b .L292
 2909              	.LVL329:
 2910              	.L290:
 813:../CMSIS_RTOS_V2/cmsis_os2.c ****         } else {
 2911              	 .loc 1 813 0
 2912 00be 3D46     	 mov r5,r7
 2913              	.LVL330:
 2914 00c0 C3E7     	 b .L277
 2915              	.LVL331:
 2916              	.L292:
 831:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2917              	 .loc 1 831 0
 2918 00c2 2046     	 mov r0,r4
 2919 00c4 05B0     	 add sp,sp,#20
 2920              	.LCFI37:
 2921              	 .cfi_def_cfa_offset 36
 2922              	 
 2923 00c6 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 2924              	.L295:
 2925 00ca 00BF     	 .align 2
 2926              	.L294:
 2927 00cc 00000000 	 .word .LANCHOR0
 2928              	 .cfi_endproc
 2929              	.LFE136:
 2931              	 .section .text.osDelay,"ax",%progbits
 2932              	 .align 2
 2933              	 .global osDelay
 2934              	 .thumb
 2935              	 .thumb_func
 2937              	osDelay:
 2938              	.LFB137:
 833:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 2939              	 .loc 1 833 0
 2940              	 .cfi_startproc
 2941              	 
 2942              	 
 2943              	.LVL332:
 2944 0000 08B5     	 push {r3,lr}
 2945              	.LCFI38:
 2946              	 .cfi_def_cfa_offset 8
 2947              	 .cfi_offset 3,-8
 2948              	 .cfi_offset 14,-4
 2949              	.LBB483:
 2950              	.LBB484:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2951              	 .loc 2 209 0
 2952              	
 2953 0002 EFF30583 	 MRS r3,ipsr
 2954              	
 2955              	.LVL333:
 2956              	 .thumb
 2957              	.LBE484:
 2958              	.LBE483:
 836:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 2959              	 .loc 1 836 0
 2960 0006 73B9     	 cbnz r3,.L300
 2961              	.LBB485:
 2962              	.LBB486:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 2963              	 .loc 2 386 0
 2964              	
 2965 0008 EFF31083 	 MRS r3,primask
 2966              	
 2967              	.LVL334:
 2968              	 .thumb
 2969              	.LBE486:
 2970              	.LBE485:
 836:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 2971              	 .loc 1 836 0
 2972 000c 13B9     	 cbnz r3,.L298
 2973              	.LBB487:
 2974              	.LBB488:
 2975              	 .loc 2 465 0
 2976              	
 2977 000e EFF31183 	 MRS r3,basepri
 2978              	
 2979              	.LVL335:
 2980              	 .thumb
 2981              	.LBE488:
 2982              	.LBE487:
 836:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 2983              	 .loc 1 836 0
 2984 0012 1BB1     	 cbz r3,.L299
 2985              	.LVL336:
 2986              	.L298:
 836:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 2987              	 .loc 1 836 0 is_stmt 0 discriminator 4
 2988 0014 084B     	 ldr r3,.L304
 2989 0016 1B68     	 ldr r3,[r3]
 2990 0018 022B     	 cmp r3,#2
 2991 001a 07D0     	 beq .L301
 2992              	.L299:
 2993              	.LVL337:
 842:../CMSIS_RTOS_V2/cmsis_os2.c ****       vTaskDelay(ticks);
 2994              	 .loc 1 842 0 is_stmt 1
 2995 001c 48B1     	 cbz r0,.L302
 843:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 2996              	 .loc 1 843 0
 2997 001e FFF7FEFF 	 bl vTaskDelay
 2998              	.LVL338:
 840:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 2999              	 .loc 1 840 0
 3000 0022 0020     	 movs r0,#0
 3001 0024 08BD     	 pop {r3,pc}
 3002              	.LVL339:
 3003              	.L300:
 837:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 3004              	 .loc 1 837 0
 3005 0026 6FF00500 	 mvn r0,#5
 3006              	.LVL340:
 3007 002a 08BD     	 pop {r3,pc}
 3008              	.LVL341:
 3009              	.L301:
 3010 002c 6FF00500 	 mvn r0,#5
 3011              	.LVL342:
 3012 0030 08BD     	 pop {r3,pc}
 3013              	.LVL343:
 3014              	.L302:
 840:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 3015              	 .loc 1 840 0
 3016 0032 0020     	 movs r0,#0
 3017              	.LVL344:
 848:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 3018              	 .loc 1 848 0
 3019 0034 08BD     	 pop {r3,pc}
 3020              	.L305:
 3021 0036 00BF     	 .align 2
 3022              	.L304:
 3023 0038 00000000 	 .word .LANCHOR0
 3024              	 .cfi_endproc
 3025              	.LFE137:
 3027              	 .section .text.osDelayUntil,"ax",%progbits
 3028              	 .align 2
 3029              	 .global osDelayUntil
 3030              	 .thumb
 3031              	 .thumb_func
 3033              	osDelayUntil:
 3034              	.LFB138:
 850:../CMSIS_RTOS_V2/cmsis_os2.c ****   TickType_t tcnt, delay;
 3035              	 .loc 1 850 0
 3036              	 .cfi_startproc
 3037              	 
 3038              	 
 3039              	.LVL345:
 3040 0000 10B5     	 push {r4,lr}
 3041              	.LCFI39:
 3042              	 .cfi_def_cfa_offset 8
 3043              	 .cfi_offset 4,-8
 3044              	 .cfi_offset 14,-4
 3045 0002 82B0     	 sub sp,sp,#8
 3046              	.LCFI40:
 3047              	 .cfi_def_cfa_offset 16
 3048              	.LBB489:
 3049              	.LBB490:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3050              	 .loc 2 209 0
 3051              	
 3052 0004 EFF30583 	 MRS r3,ipsr
 3053              	
 3054              	.LVL346:
 3055              	 .thumb
 3056              	.LBE490:
 3057              	.LBE489:
 854:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 3058              	 .loc 1 854 0
 3059 0008 ABB9     	 cbnz r3,.L310
 3060              	.LBB491:
 3061              	.LBB492:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3062              	 .loc 2 386 0
 3063              	
 3064 000a EFF31083 	 MRS r3,primask
 3065              	
 3066              	.LVL347:
 3067              	 .thumb
 3068              	.LBE492:
 3069              	.LBE491:
 854:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 3070              	 .loc 1 854 0
 3071 000e 13B9     	 cbnz r3,.L308
 3072              	.LBB493:
 3073              	.LBB494:
 3074              	 .loc 2 465 0
 3075              	
 3076 0010 EFF31183 	 MRS r3,basepri
 3077              	
 3078              	.LVL348:
 3079              	 .thumb
 3080              	.LBE494:
 3081              	.LBE493:
 854:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 3082              	 .loc 1 854 0
 3083 0014 1BB1     	 cbz r3,.L309
 3084              	.LVL349:
 3085              	.L308:
 854:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 3086              	 .loc 1 854 0 is_stmt 0 discriminator 4
 3087 0016 0D4B     	 ldr r3,.L314
 3088 0018 1B68     	 ldr r3,[r3]
 3089 001a 022B     	 cmp r3,#2
 3090 001c 0ED0     	 beq .L311
 3091              	.L309:
 3092 001e 0446     	 mov r4,r0
 3093              	.LVL350:
 859:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 3094              	 .loc 1 859 0 is_stmt 1
 3095 0020 FFF7FEFF 	 bl xTaskGetTickCount
 3096              	.LVL351:
 3097 0024 0190     	 str r0,[sp,#4]
 862:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 3098              	 .loc 1 862 0
 3099 0026 211A     	 subs r1,r4,r0
 3100              	.LVL352:
 865:../CMSIS_RTOS_V2/cmsis_os2.c ****       vTaskDelayUntil (&tcnt, delay);
 3101              	 .loc 1 865 0
 3102 0028 0029     	 cmp r1,#0
 3103 002a 0ADD     	 ble .L312
 866:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 3104              	 .loc 1 866 0
 3105 002c 01A8     	 add r0,sp,#4
 3106 002e FFF7FEFF 	 bl vTaskDelayUntil
 3107              	.LVL353:
 858:../CMSIS_RTOS_V2/cmsis_os2.c ****     tcnt = xTaskGetTickCount();
 3108              	 .loc 1 858 0
 3109 0032 0020     	 movs r0,#0
 3110 0034 07E0     	 b .L307
 3111              	.LVL354:
 3112              	.L310:
 855:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 3113              	 .loc 1 855 0
 3114 0036 6FF00500 	 mvn r0,#5
 3115              	.LVL355:
 3116 003a 04E0     	 b .L307
 3117              	.LVL356:
 3118              	.L311:
 3119 003c 6FF00500 	 mvn r0,#5
 3120              	.LVL357:
 3121 0040 01E0     	 b .L307
 3122              	.LVL358:
 3123              	.L312:
 871:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 3124              	 .loc 1 871 0
 3125 0042 6FF00300 	 mvn r0,#3
 3126              	.LVL359:
 3127              	.L307:
 876:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 3128              	 .loc 1 876 0
 3129 0046 02B0     	 add sp,sp,#8
 3130              	.LCFI41:
 3131              	 .cfi_def_cfa_offset 8
 3132              	 
 3133 0048 10BD     	 pop {r4,pc}
 3134              	.L315:
 3135 004a 00BF     	 .align 2
 3136              	.L314:
 3137 004c 00000000 	 .word .LANCHOR0
 3138              	 .cfi_endproc
 3139              	.LFE138:
 3141              	 .section .text.osTimerNew,"ax",%progbits
 3142              	 .align 2
 3143              	 .global osTimerNew
 3144              	 .thumb
 3145              	 .thumb_func
 3147              	osTimerNew:
 3148              	.LFB140:
 887:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 888:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 889:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 890:../CMSIS_RTOS_V2/cmsis_os2.c **** osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t
 3149              	 .loc 1 890 0
 3150              	 .cfi_startproc
 3151              	 
 3152              	 
 3153              	.LVL360:
 3154 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 3155              	.LCFI42:
 3156              	 .cfi_def_cfa_offset 20
 3157              	 .cfi_offset 4,-20
 3158              	 .cfi_offset 5,-16
 3159              	 .cfi_offset 6,-12
 3160              	 .cfi_offset 7,-8
 3161              	 .cfi_offset 14,-4
 3162 0002 83B0     	 sub sp,sp,#12
 3163              	.LCFI43:
 3164              	 .cfi_def_cfa_offset 32
 3165              	.LVL361:
 3166              	.LBB495:
 3167              	.LBB496:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3168              	 .loc 2 209 0
 3169              	
 3170 0004 EFF30585 	 MRS r5,ipsr
 3171              	
 3172              	.LVL362:
 3173              	 .thumb
 3174              	.LBE496:
 3175              	.LBE495:
 891:../CMSIS_RTOS_V2/cmsis_os2.c ****   const char *name;
 892:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerHandle_t hTimer;
 893:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerCallback_t *callb;
 894:../CMSIS_RTOS_V2/cmsis_os2.c ****   UBaseType_t reload;
 895:../CMSIS_RTOS_V2/cmsis_os2.c ****   int32_t mem;
 896:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 897:../CMSIS_RTOS_V2/cmsis_os2.c ****   hTimer = NULL;
 898:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 899:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (!IS_IRQ() && (func != NULL)) {
 3176              	 .loc 1 899 0
 3177 0008 002D     	 cmp r5,#0
 3178 000a 36D1     	 bne .L324
 3179              	.LBB497:
 3180              	.LBB498:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3181              	 .loc 2 386 0
 3182              	
 3183 000c EFF31084 	 MRS r4,primask
 3184              	
 3185              	.LVL363:
 3186              	 .thumb
 3187              	.LBE498:
 3188              	.LBE497:
 3189              	 .loc 1 899 0
 3190 0010 14B9     	 cbnz r4,.L318
 3191              	.LBB499:
 3192              	.LBB500:
 3193              	 .loc 2 465 0
 3194              	
 3195 0012 EFF31184 	 MRS r4,basepri
 3196              	
 3197              	.LVL364:
 3198              	 .thumb
 3199              	.LBE500:
 3200              	.LBE499:
 3201              	 .loc 1 899 0
 3202 0016 1CB1     	 cbz r4,.L319
 3203              	.LVL365:
 3204              	.L318:
 3205              	 .loc 1 899 0 is_stmt 0 discriminator 5
 3206 0018 1D4C     	 ldr r4,.L331
 3207 001a 2468     	 ldr r4,[r4]
 3208 001c 022C     	 cmp r4,#2
 3209 001e 2ED0     	 beq .L325
 3210              	.L319:
 3211              	 .loc 1 899 0 discriminator 6
 3212 0020 78B3     	 cbz r0,.L326
 3213 0022 1C46     	 mov r4,r3
 3214 0024 1746     	 mov r7,r2
 3215 0026 0D46     	 mov r5,r1
 3216              	.LVL366:
 3217 0028 0646     	 mov r6,r0
 900:../CMSIS_RTOS_V2/cmsis_os2.c ****     /* Allocate memory to store callback function and argument */
 901:../CMSIS_RTOS_V2/cmsis_os2.c ****     callb = pvPortMalloc (sizeof(TimerCallback_t));
 3218              	 .loc 1 901 0 is_stmt 1
 3219 002a 0820     	 movs r0,#8
 3220              	.LVL367:
 3221 002c FFF7FEFF 	 bl pvPortMalloc
 3222              	.LVL368:
 902:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 903:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (callb != NULL) {
 3223              	 .loc 1 903 0
 3224 0030 0346     	 mov r3,r0
 3225 0032 40B3     	 cbz r0,.L327
 904:../CMSIS_RTOS_V2/cmsis_os2.c ****       callb->func = func;
 3226              	 .loc 1 904 0
 3227 0034 0660     	 str r6,[r0]
 905:../CMSIS_RTOS_V2/cmsis_os2.c ****       callb->arg  = argument;
 3228              	 .loc 1 905 0
 3229 0036 4760     	 str r7,[r0,#4]
 906:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 907:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (type == osTimerOnce) {
 3230              	 .loc 1 907 0
 3231 0038 2A1C     	 adds r2,r5,#0
 3232 003a 18BF     	 it ne
 3233 003c 0122     	 movne r2,#1
 3234              	.LVL369:
 908:../CMSIS_RTOS_V2/cmsis_os2.c ****         reload = pdFALSE;
 909:../CMSIS_RTOS_V2/cmsis_os2.c ****       } else {
 910:../CMSIS_RTOS_V2/cmsis_os2.c ****         reload = pdTRUE;
 911:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 912:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 913:../CMSIS_RTOS_V2/cmsis_os2.c ****       mem  = -1;
 914:../CMSIS_RTOS_V2/cmsis_os2.c ****       name = NULL;
 915:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 916:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (attr != NULL) {
 3235              	 .loc 1 916 0
 3236 003e ACB1     	 cbz r4,.L328
 917:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (attr->name != NULL) {
 3237              	 .loc 1 917 0
 3238 0040 2068     	 ldr r0,[r4]
 3239              	.LVL370:
 918:../CMSIS_RTOS_V2/cmsis_os2.c ****           name = attr->name;
 919:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 920:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 921:../CMSIS_RTOS_V2/cmsis_os2.c ****         if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 3240              	 .loc 1 921 0
 3241 0042 A168     	 ldr r1,[r4,#8]
 3242 0044 21B1     	 cbz r1,.L321
 3243              	 .loc 1 921 0 is_stmt 0 discriminator 1
 3244 0046 E468     	 ldr r4,[r4,#12]
 3245              	.LVL371:
 3246 0048 2B2C     	 cmp r4,#43
 3247 004a 08D8     	 bhi .L322
 897:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 3248              	 .loc 1 897 0 is_stmt 1
 3249 004c 0020     	 movs r0,#0
 3250              	.LVL372:
 3251 004e 1DE0     	 b .L317
 3252              	.LVL373:
 3253              	.L321:
 922:../CMSIS_RTOS_V2/cmsis_os2.c ****           mem = 1;
 923:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 924:../CMSIS_RTOS_V2/cmsis_os2.c ****         else {
 925:../CMSIS_RTOS_V2/cmsis_os2.c ****           if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 3254              	 .loc 1 925 0 discriminator 1
 3255 0050 E168     	 ldr r1,[r4,#12]
 3256 0052 0031     	 adds r1,r1,#0
 3257 0054 18BF     	 it ne
 3258 0056 0121     	 movne r1,#1
 3259 0058 4942     	 negs r1,r1
 3260              	.LVL374:
 926:../CMSIS_RTOS_V2/cmsis_os2.c ****             mem = 0;
 927:../CMSIS_RTOS_V2/cmsis_os2.c ****           }
 928:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 929:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 930:../CMSIS_RTOS_V2/cmsis_os2.c ****       else {
 931:../CMSIS_RTOS_V2/cmsis_os2.c ****         mem = 0;
 932:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 933:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 934:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (mem == 1) {
 935:../CMSIS_RTOS_V2/cmsis_os2.c ****         hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->
 936:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 937:../CMSIS_RTOS_V2/cmsis_os2.c ****       else {
 938:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (mem == 0) {
 3261              	 .loc 1 938 0 discriminator 1
 3262 005a 41B1     	 cbz r1,.L320
 3263 005c 15E0     	 b .L329
 3264              	.LVL375:
 3265              	.L322:
 3266              	.LBB501:
 935:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 3267              	 .loc 1 935 0
 3268 005e 0D4C     	 ldr r4,.L331+4
 3269 0060 0094     	 str r4,[sp]
 3270 0062 0191     	 str r1,[sp,#4]
 3271 0064 0121     	 movs r1,#1
 3272 0066 FFF7FEFF 	 bl xTimerCreateStatic
 3273              	.LVL376:
 3274              	.LBE501:
 3275 006a 0FE0     	 b .L317
 3276              	.LVL377:
 3277              	.L328:
 914:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 3278              	 .loc 1 914 0
 3279 006c 0020     	 movs r0,#0
 3280              	.LVL378:
 3281              	.L320:
 939:../CMSIS_RTOS_V2/cmsis_os2.c ****           hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 3282              	 .loc 1 939 0
 3283 006e 0949     	 ldr r1,.L331+4
 3284 0070 0091     	 str r1,[sp]
 3285 0072 0121     	 movs r1,#1
 3286 0074 FFF7FEFF 	 bl xTimerCreate
 3287              	.LVL379:
 3288 0078 08E0     	 b .L317
 3289              	.LVL380:
 3290              	.L324:
 897:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 3291              	 .loc 1 897 0
 3292 007a 0020     	 movs r0,#0
 3293              	.LVL381:
 3294 007c 06E0     	 b .L317
 3295              	.LVL382:
 3296              	.L325:
 3297 007e 0020     	 movs r0,#0
 3298              	.LVL383:
 3299 0080 04E0     	 b .L317
 3300              	.LVL384:
 3301              	.L326:
 3302 0082 0020     	 movs r0,#0
 3303              	.LVL385:
 3304 0084 02E0     	 b .L317
 3305              	.LVL386:
 3306              	.L327:
 3307 0086 0020     	 movs r0,#0
 3308              	.LVL387:
 3309 0088 00E0     	 b .L317
 3310              	.LVL388:
 3311              	.L329:
 3312 008a 0020     	 movs r0,#0
 3313              	.LVL389:
 3314              	.L317:
 940:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 941:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 942:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 943:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 944:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 945:../CMSIS_RTOS_V2/cmsis_os2.c ****   return ((osTimerId_t)hTimer);
 946:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 3315              	 .loc 1 946 0
 3316 008c 03B0     	 add sp,sp,#12
 3317              	.LCFI44:
 3318              	 .cfi_def_cfa_offset 20
 3319              	 
 3320 008e F0BD     	 pop {r4,r5,r6,r7,pc}
 3321              	.L332:
 3322              	 .align 2
 3323              	.L331:
 3324 0090 00000000 	 .word .LANCHOR0
 3325 0094 00000000 	 .word TimerCallback
 3326              	 .cfi_endproc
 3327              	.LFE140:
 3329              	 .section .text.osTimerGetName,"ax",%progbits
 3330              	 .align 2
 3331              	 .global osTimerGetName
 3332              	 .thumb
 3333              	 .thumb_func
 3335              	osTimerGetName:
 3336              	.LFB141:
 947:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 948:../CMSIS_RTOS_V2/cmsis_os2.c **** const char *osTimerGetName (osTimerId_t timer_id) {
 3337              	 .loc 1 948 0
 3338              	 .cfi_startproc
 3339              	 
 3340              	 
 3341              	.LVL390:
 3342 0000 08B5     	 push {r3,lr}
 3343              	.LCFI45:
 3344              	 .cfi_def_cfa_offset 8
 3345              	 .cfi_offset 3,-8
 3346              	 .cfi_offset 14,-4
 3347              	.LVL391:
 3348              	.LBB502:
 3349              	.LBB503:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3350              	 .loc 2 209 0
 3351              	
 3352 0002 EFF30583 	 MRS r3,ipsr
 3353              	
 3354              	.LVL392:
 3355              	 .thumb
 3356              	.LBE503:
 3357              	.LBE502:
 949:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 950:../CMSIS_RTOS_V2/cmsis_os2.c ****   const char *p;
 951:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 952:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ() || (hTimer == NULL)) {
 3358              	 .loc 1 952 0
 3359 0006 6BB9     	 cbnz r3,.L337
 3360              	.LBB504:
 3361              	.LBB505:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3362              	 .loc 2 386 0
 3363              	
 3364 0008 EFF31083 	 MRS r3,primask
 3365              	
 3366              	.LVL393:
 3367              	 .thumb
 3368              	.LBE505:
 3369              	.LBE504:
 3370              	 .loc 1 952 0
 3371 000c 13B9     	 cbnz r3,.L335
 3372              	.LBB506:
 3373              	.LBB507:
 3374              	 .loc 2 465 0
 3375              	
 3376 000e EFF31183 	 MRS r3,basepri
 3377              	
 3378              	.LVL394:
 3379              	 .thumb
 3380              	.LBE507:
 3381              	.LBE506:
 3382              	 .loc 1 952 0
 3383 0012 1BB1     	 cbz r3,.L336
 3384              	.LVL395:
 3385              	.L335:
 3386              	 .loc 1 952 0 is_stmt 0 discriminator 4
 3387 0014 064B     	 ldr r3,.L341
 3388 0016 1B68     	 ldr r3,[r3]
 3389 0018 022B     	 cmp r3,#2
 3390 001a 05D0     	 beq .L338
 3391              	.L336:
 3392              	 .loc 1 952 0 discriminator 6
 3393 001c 30B1     	 cbz r0,.L339
 953:../CMSIS_RTOS_V2/cmsis_os2.c ****     p = NULL;
 954:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
 955:../CMSIS_RTOS_V2/cmsis_os2.c ****     p = pcTimerGetName (hTimer);
 3394              	 .loc 1 955 0 is_stmt 1
 3395 001e FFF7FEFF 	 bl pcTimerGetName
 3396              	.LVL396:
 3397 0022 08BD     	 pop {r3,pc}
 3398              	.LVL397:
 3399              	.L337:
 953:../CMSIS_RTOS_V2/cmsis_os2.c ****     p = NULL;
 3400              	 .loc 1 953 0
 3401 0024 0020     	 movs r0,#0
 3402              	.LVL398:
 3403 0026 08BD     	 pop {r3,pc}
 3404              	.LVL399:
 3405              	.L338:
 3406 0028 0020     	 movs r0,#0
 3407              	.LVL400:
 3408 002a 08BD     	 pop {r3,pc}
 3409              	.LVL401:
 3410              	.L339:
 3411 002c 0020     	 movs r0,#0
 3412              	.LVL402:
 956:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 957:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 958:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (p);
 959:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 3413              	 .loc 1 959 0
 3414 002e 08BD     	 pop {r3,pc}
 3415              	.L342:
 3416              	 .align 2
 3417              	.L341:
 3418 0030 00000000 	 .word .LANCHOR0
 3419              	 .cfi_endproc
 3420              	.LFE141:
 3422              	 .section .text.osTimerStart,"ax",%progbits
 3423              	 .align 2
 3424              	 .global osTimerStart
 3425              	 .thumb
 3426              	 .thumb_func
 3428              	osTimerStart:
 3429              	.LFB142:
 960:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 961:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 3430              	 .loc 1 961 0
 3431              	 .cfi_startproc
 3432              	 
 3433              	 
 3434              	.LVL403:
 3435              	.LBB508:
 3436              	.LBB509:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3437              	 .loc 2 209 0
 3438              	
 3439 0000 EFF30583 	 MRS r3,ipsr
 3440              	
 3441              	.LVL404:
 3442              	 .thumb
 3443              	.LBE509:
 3444              	.LBE508:
 962:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 963:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 964:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 965:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 3445              	 .loc 1 965 0
 3446 0004 C3B9     	 cbnz r3,.L347
 3447              	.LBB510:
 3448              	.LBB511:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3449              	 .loc 2 386 0
 3450              	
 3451 0006 EFF31083 	 MRS r3,primask
 3452              	
 3453              	.LVL405:
 3454              	 .thumb
 3455              	.LBE511:
 3456              	.LBE510:
 3457              	 .loc 1 965 0
 3458 000a 13B9     	 cbnz r3,.L345
 3459              	.LBB512:
 3460              	.LBB513:
 3461              	 .loc 2 465 0
 3462              	
 3463 000c EFF31183 	 MRS r3,basepri
 3464              	
 3465              	.LVL406:
 3466              	 .thumb
 3467              	.LBE513:
 3468              	.LBE512:
 3469              	 .loc 1 965 0
 3470 0010 1BB1     	 cbz r3,.L346
 3471              	.LVL407:
 3472              	.L345:
 3473              	 .loc 1 965 0 is_stmt 0 discriminator 4
 3474 0012 0F4B     	 ldr r3,.L353
 3475 0014 1B68     	 ldr r3,[r3]
 3476 0016 022B     	 cmp r3,#2
 3477 0018 11D0     	 beq .L348
 3478              	.L346:
 966:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 967:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 968:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hTimer == NULL) {
 3479              	 .loc 1 968 0 is_stmt 1
 3480 001a 98B1     	 cbz r0,.L349
 961:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 3481              	 .loc 1 961 0
 3482 001c 00B5     	 push {lr}
 3483              	.LCFI46:
 3484              	 .cfi_def_cfa_offset 4
 3485              	 .cfi_offset 14,-4
 3486 001e 83B0     	 sub sp,sp,#12
 3487              	.LCFI47:
 3488              	 .cfi_def_cfa_offset 16
 3489 0020 0A46     	 mov r2,r1
 969:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 970:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 971:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 972:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 3490              	 .loc 1 972 0
 3491 0022 0023     	 movs r3,#0
 3492 0024 0093     	 str r3,[sp]
 3493 0026 0421     	 movs r1,#4
 3494              	.LVL408:
 3495 0028 FFF7FEFF 	 bl xTimerGenericCommand
 3496              	.LVL409:
 973:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osOK;
 974:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
 975:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorResource;
 3497              	 .loc 1 975 0
 3498 002c 0128     	 cmp r0,#1
 3499 002e 0CBF     	 ite eq
 3500 0030 0020     	 moveq r0,#0
 3501 0032 6FF00200 	 mvnne r0,#2
 3502 0036 08E0     	 b .L344
 3503              	.LVL410:
 3504              	.L347:
 3505              	.LCFI48:
 3506              	 .cfi_def_cfa_offset 0
 3507              	 .cfi_restore 14
 966:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 3508              	 .loc 1 966 0
 3509 0038 6FF00500 	 mvn r0,#5
 3510              	.LVL411:
 976:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 977:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 978:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 979:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
 980:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 3511              	 .loc 1 980 0
 3512 003c 7047     	 bx lr
 3513              	.LVL412:
 3514              	.L348:
 966:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 3515              	 .loc 1 966 0
 3516 003e 6FF00500 	 mvn r0,#5
 3517              	.LVL413:
 3518 0042 7047     	 bx lr
 3519              	.LVL414:
 3520              	.L349:
 969:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 3521              	 .loc 1 969 0
 3522 0044 6FF00300 	 mvn r0,#3
 3523              	.LVL415:
 3524 0048 7047     	 bx lr
 3525              	.LVL416:
 3526              	.L344:
 3527              	.LCFI49:
 3528              	 .cfi_def_cfa_offset 16
 3529              	 .cfi_offset 14,-4
 3530              	 .loc 1 980 0
 3531 004a 03B0     	 add sp,sp,#12
 3532              	.LCFI50:
 3533              	 .cfi_def_cfa_offset 4
 3534              	 
 3535 004c 5DF804FB 	 ldr pc,[sp],#4
 3536              	.L354:
 3537              	 .align 2
 3538              	.L353:
 3539 0050 00000000 	 .word .LANCHOR0
 3540              	 .cfi_endproc
 3541              	.LFE142:
 3543              	 .section .text.osTimerStop,"ax",%progbits
 3544              	 .align 2
 3545              	 .global osTimerStop
 3546              	 .thumb
 3547              	 .thumb_func
 3549              	osTimerStop:
 3550              	.LFB143:
 981:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 982:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osTimerStop (osTimerId_t timer_id) {
 3551              	 .loc 1 982 0
 3552              	 .cfi_startproc
 3553              	 
 3554              	 
 3555              	.LVL417:
 3556              	.LBB514:
 3557              	.LBB515:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3558              	 .loc 2 209 0
 3559              	
 3560 0000 EFF30583 	 MRS r3,ipsr
 3561              	
 3562              	.LVL418:
 3563              	 .thumb
 3564              	.LBE515:
 3565              	.LBE514:
 983:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 984:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
 985:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 986:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 3566              	 .loc 1 986 0
 3567 0004 EBB9     	 cbnz r3,.L359
 3568              	.LBB516:
 3569              	.LBB517:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3570              	 .loc 2 386 0
 3571              	
 3572 0006 EFF31083 	 MRS r3,primask
 3573              	
 3574              	.LVL419:
 3575              	 .thumb
 3576              	.LBE517:
 3577              	.LBE516:
 3578              	 .loc 1 986 0
 3579 000a 13B9     	 cbnz r3,.L357
 3580              	.LBB518:
 3581              	.LBB519:
 3582              	 .loc 2 465 0
 3583              	
 3584 000c EFF31183 	 MRS r3,basepri
 3585              	
 3586              	.LVL420:
 3587              	 .thumb
 3588              	.LBE519:
 3589              	.LBE518:
 3590              	 .loc 1 986 0
 3591 0010 1BB1     	 cbz r3,.L358
 3592              	.LVL421:
 3593              	.L357:
 3594              	 .loc 1 986 0 is_stmt 0 discriminator 4
 3595 0012 124B     	 ldr r3,.L365
 3596 0014 1B68     	 ldr r3,[r3]
 3597 0016 022B     	 cmp r3,#2
 3598 0018 16D0     	 beq .L360
 3599              	.L358:
 987:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 988:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 989:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hTimer == NULL) {
 3600              	 .loc 1 989 0 is_stmt 1
 3601 001a C0B1     	 cbz r0,.L361
 982:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 3602              	 .loc 1 982 0
 3603 001c 10B5     	 push {r4,lr}
 3604              	.LCFI51:
 3605              	 .cfi_def_cfa_offset 8
 3606              	 .cfi_offset 4,-8
 3607              	 .cfi_offset 14,-4
 3608 001e 82B0     	 sub sp,sp,#8
 3609              	.LCFI52:
 3610              	 .cfi_def_cfa_offset 16
 3611 0020 0446     	 mov r4,r0
 990:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 991:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 992:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
 993:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 3612              	 .loc 1 993 0
 3613 0022 FFF7FEFF 	 bl xTimerIsTimerActive
 3614              	.LVL422:
 3615 0026 A8B1     	 cbz r0,.L362
 994:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorResource;
 995:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 996:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
 997:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (xTimerStop (hTimer, 0) == pdPASS) {
 3616              	 .loc 1 997 0
 3617 0028 0023     	 movs r3,#0
 3618 002a 0093     	 str r3,[sp]
 3619 002c 2046     	 mov r0,r4
 3620 002e 0321     	 movs r1,#3
 3621 0030 1A46     	 mov r2,r3
 3622 0032 FFF7FEFF 	 bl xTimerGenericCommand
 3623              	.LVL423:
 3624 0036 10F1FF30 	 adds r0,r0,#-1
 3625 003a 18BF     	 it ne
 3626 003c 4FF0FF30 	 movne r0,#-1
 3627 0040 0AE0     	 b .L356
 3628              	.LVL424:
 3629              	.L359:
 3630              	.LCFI53:
 3631              	 .cfi_def_cfa_offset 0
 3632              	 .cfi_restore 4
 3633              	 .cfi_restore 14
 987:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 3634              	 .loc 1 987 0
 3635 0042 6FF00500 	 mvn r0,#5
 3636              	.LVL425:
 998:../CMSIS_RTOS_V2/cmsis_os2.c ****         stat = osOK;
 999:../CMSIS_RTOS_V2/cmsis_os2.c ****       } else {
1000:../CMSIS_RTOS_V2/cmsis_os2.c ****         stat = osError;
1001:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1002:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1003:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1004:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1005:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1006:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 3637              	 .loc 1 1006 0
 3638 0046 7047     	 bx lr
 3639              	.LVL426:
 3640              	.L360:
 987:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 3641              	 .loc 1 987 0
 3642 0048 6FF00500 	 mvn r0,#5
 3643              	.LVL427:
 3644 004c 7047     	 bx lr
 3645              	.LVL428:
 3646              	.L361:
 990:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 3647              	 .loc 1 990 0
 3648 004e 6FF00300 	 mvn r0,#3
 3649              	.LVL429:
 3650 0052 7047     	 bx lr
 3651              	.LVL430:
 3652              	.L362:
 3653              	.LCFI54:
 3654              	 .cfi_def_cfa_offset 16
 3655              	 .cfi_offset 4,-8
 3656              	 .cfi_offset 14,-4
 994:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 3657              	 .loc 1 994 0
 3658 0054 6FF00200 	 mvn r0,#2
 3659              	.L356:
 3660              	.LVL431:
 3661              	 .loc 1 1006 0
 3662 0058 02B0     	 add sp,sp,#8
 3663              	.LCFI55:
 3664              	 .cfi_def_cfa_offset 8
 3665              	 
 3666 005a 10BD     	 pop {r4,pc}
 3667              	.LVL432:
 3668              	.L366:
 3669              	 .align 2
 3670              	.L365:
 3671 005c 00000000 	 .word .LANCHOR0
 3672              	 .cfi_endproc
 3673              	.LFE143:
 3675              	 .section .text.osTimerIsRunning,"ax",%progbits
 3676              	 .align 2
 3677              	 .global osTimerIsRunning
 3678              	 .thumb
 3679              	 .thumb_func
 3681              	osTimerIsRunning:
 3682              	.LFB144:
1007:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1008:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 3683              	 .loc 1 1008 0
 3684              	 .cfi_startproc
 3685              	 
 3686              	 
 3687              	.LVL433:
 3688 0000 08B5     	 push {r3,lr}
 3689              	.LCFI56:
 3690              	 .cfi_def_cfa_offset 8
 3691              	 .cfi_offset 3,-8
 3692              	 .cfi_offset 14,-4
 3693              	.LVL434:
 3694              	.LBB520:
 3695              	.LBB521:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3696              	 .loc 2 209 0
 3697              	
 3698 0002 EFF30583 	 MRS r3,ipsr
 3699              	
 3700              	.LVL435:
 3701              	 .thumb
 3702              	.LBE521:
 3703              	.LBE520:
1009:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerHandle_t hTimer = (TimerHandle_t)timer_id;
1010:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t running;
1011:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1012:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ() || (hTimer == NULL)) {
 3704              	 .loc 1 1012 0
 3705 0006 6BB9     	 cbnz r3,.L371
 3706              	.LBB522:
 3707              	.LBB523:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3708              	 .loc 2 386 0
 3709              	
 3710 0008 EFF31083 	 MRS r3,primask
 3711              	
 3712              	.LVL436:
 3713              	 .thumb
 3714              	.LBE523:
 3715              	.LBE522:
 3716              	 .loc 1 1012 0
 3717 000c 13B9     	 cbnz r3,.L369
 3718              	.LBB524:
 3719              	.LBB525:
 3720              	 .loc 2 465 0
 3721              	
 3722 000e EFF31183 	 MRS r3,basepri
 3723              	
 3724              	.LVL437:
 3725              	 .thumb
 3726              	.LBE525:
 3727              	.LBE524:
 3728              	 .loc 1 1012 0
 3729 0012 1BB1     	 cbz r3,.L370
 3730              	.LVL438:
 3731              	.L369:
 3732              	 .loc 1 1012 0 is_stmt 0 discriminator 4
 3733 0014 064B     	 ldr r3,.L375
 3734 0016 1B68     	 ldr r3,[r3]
 3735 0018 022B     	 cmp r3,#2
 3736 001a 05D0     	 beq .L372
 3737              	.L370:
 3738              	 .loc 1 1012 0 discriminator 6
 3739 001c 30B1     	 cbz r0,.L373
1013:../CMSIS_RTOS_V2/cmsis_os2.c ****     running = 0U;
1014:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
1015:../CMSIS_RTOS_V2/cmsis_os2.c ****     running = (uint32_t)xTimerIsTimerActive (hTimer);
 3740              	 .loc 1 1015 0 is_stmt 1
 3741 001e FFF7FEFF 	 bl xTimerIsTimerActive
 3742              	.LVL439:
 3743 0022 08BD     	 pop {r3,pc}
 3744              	.LVL440:
 3745              	.L371:
1013:../CMSIS_RTOS_V2/cmsis_os2.c ****     running = 0U;
 3746              	 .loc 1 1013 0
 3747 0024 0020     	 movs r0,#0
 3748              	.LVL441:
 3749 0026 08BD     	 pop {r3,pc}
 3750              	.LVL442:
 3751              	.L372:
 3752 0028 0020     	 movs r0,#0
 3753              	.LVL443:
 3754 002a 08BD     	 pop {r3,pc}
 3755              	.LVL444:
 3756              	.L373:
 3757 002c 0020     	 movs r0,#0
 3758              	.LVL445:
1016:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1017:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1018:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (running);
1019:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 3759              	 .loc 1 1019 0
 3760 002e 08BD     	 pop {r3,pc}
 3761              	.L376:
 3762              	 .align 2
 3763              	.L375:
 3764 0030 00000000 	 .word .LANCHOR0
 3765              	 .cfi_endproc
 3766              	.LFE144:
 3768              	 .section .text.osTimerDelete,"ax",%progbits
 3769              	 .align 2
 3770              	 .global osTimerDelete
 3771              	 .thumb
 3772              	 .thumb_func
 3774              	osTimerDelete:
 3775              	.LFB145:
1020:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1021:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osTimerDelete (osTimerId_t timer_id) {
 3776              	 .loc 1 1021 0
 3777              	 .cfi_startproc
 3778              	 
 3779              	 
 3780              	.LVL446:
 3781              	.LBB526:
 3782              	.LBB527:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3783              	 .loc 2 209 0
 3784              	
 3785 0000 EFF30583 	 MRS r3,ipsr
 3786              	
 3787              	.LVL447:
 3788              	 .thumb
 3789              	.LBE527:
 3790              	.LBE526:
1022:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerHandle_t hTimer = (TimerHandle_t)timer_id;
1023:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1024:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef USE_FreeRTOS_HEAP_1
1025:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerCallback_t *callb;
1026:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1027:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 3791              	 .loc 1 1027 0
 3792 0004 F3B9     	 cbnz r3,.L381
 3793              	.LBB528:
 3794              	.LBB529:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3795              	 .loc 2 386 0
 3796              	
 3797 0006 EFF31083 	 MRS r3,primask
 3798              	
 3799              	.LVL448:
 3800              	 .thumb
 3801              	.LBE529:
 3802              	.LBE528:
 3803              	 .loc 1 1027 0
 3804 000a 13B9     	 cbnz r3,.L379
 3805              	.LBB530:
 3806              	.LBB531:
 3807              	 .loc 2 465 0
 3808              	
 3809 000c EFF31183 	 MRS r3,basepri
 3810              	
 3811              	.LVL449:
 3812              	 .thumb
 3813              	.LBE531:
 3814              	.LBE530:
 3815              	 .loc 1 1027 0
 3816 0010 1BB1     	 cbz r3,.L380
 3817              	.LVL450:
 3818              	.L379:
 3819              	 .loc 1 1027 0 is_stmt 0 discriminator 4
 3820 0012 134B     	 ldr r3,.L387
 3821 0014 1B68     	 ldr r3,[r3]
 3822 0016 022B     	 cmp r3,#2
 3823 0018 17D0     	 beq .L382
 3824              	.L380:
1028:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
1029:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1030:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hTimer == NULL) {
 3825              	 .loc 1 1030 0 is_stmt 1
 3826 001a C8B1     	 cbz r0,.L383
1021:../CMSIS_RTOS_V2/cmsis_os2.c ****   TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 3827              	 .loc 1 1021 0
 3828 001c 30B5     	 push {r4,r5,lr}
 3829              	.LCFI57:
 3830              	 .cfi_def_cfa_offset 12
 3831              	 .cfi_offset 4,-12
 3832              	 .cfi_offset 5,-8
 3833              	 .cfi_offset 14,-4
 3834 001e 83B0     	 sub sp,sp,#12
 3835              	.LCFI58:
 3836              	 .cfi_def_cfa_offset 24
 3837 0020 0446     	 mov r4,r0
1031:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
1032:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1033:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1034:../CMSIS_RTOS_V2/cmsis_os2.c ****     callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 3838              	 .loc 1 1034 0
 3839 0022 FFF7FEFF 	 bl pvTimerGetTimerID
 3840              	.LVL451:
 3841 0026 0546     	 mov r5,r0
 3842              	.LVL452:
1035:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1036:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (xTimerDelete (hTimer, 0) == pdPASS) {
 3843              	 .loc 1 1036 0
 3844 0028 0023     	 movs r3,#0
 3845 002a 0093     	 str r3,[sp]
 3846 002c 2046     	 mov r0,r4
 3847              	.LVL453:
 3848 002e 0521     	 movs r1,#5
 3849 0030 1A46     	 mov r2,r3
 3850 0032 FFF7FEFF 	 bl xTimerGenericCommand
 3851              	.LVL454:
 3852 0036 0128     	 cmp r0,#1
 3853 0038 0DD1     	 bne .L384
1037:../CMSIS_RTOS_V2/cmsis_os2.c ****       vPortFree (callb);
 3854              	 .loc 1 1037 0
 3855 003a 2846     	 mov r0,r5
 3856 003c FFF7FEFF 	 bl vPortFree
 3857              	.LVL455:
1038:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osOK;
 3858              	 .loc 1 1038 0
 3859 0040 0020     	 movs r0,#0
 3860 0042 0AE0     	 b .L378
 3861              	.LVL456:
 3862              	.L381:
 3863              	.LCFI59:
 3864              	 .cfi_def_cfa_offset 0
 3865              	 .cfi_restore 4
 3866              	 .cfi_restore 5
 3867              	 .cfi_restore 14
1028:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 3868              	 .loc 1 1028 0
 3869 0044 6FF00500 	 mvn r0,#5
 3870              	.LVL457:
1039:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
1040:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorResource;
1041:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1042:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1043:../CMSIS_RTOS_V2/cmsis_os2.c **** #else
1044:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osError;
1045:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
1046:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1047:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1048:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 3871              	 .loc 1 1048 0
 3872 0048 7047     	 bx lr
 3873              	.LVL458:
 3874              	.L382:
1028:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 3875              	 .loc 1 1028 0
 3876 004a 6FF00500 	 mvn r0,#5
 3877              	.LVL459:
 3878 004e 7047     	 bx lr
 3879              	.LVL460:
 3880              	.L383:
1031:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 3881              	 .loc 1 1031 0
 3882 0050 6FF00300 	 mvn r0,#3
 3883              	.LVL461:
 3884 0054 7047     	 bx lr
 3885              	.LVL462:
 3886              	.L384:
 3887              	.LCFI60:
 3888              	 .cfi_def_cfa_offset 24
 3889              	 .cfi_offset 4,-12
 3890              	 .cfi_offset 5,-8
 3891              	 .cfi_offset 14,-4
1040:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 3892              	 .loc 1 1040 0
 3893 0056 6FF00200 	 mvn r0,#2
 3894              	.L378:
 3895              	.LVL463:
 3896              	 .loc 1 1048 0
 3897 005a 03B0     	 add sp,sp,#12
 3898              	.LCFI61:
 3899              	 .cfi_def_cfa_offset 12
 3900              	 
 3901 005c 30BD     	 pop {r4,r5,pc}
 3902              	.LVL464:
 3903              	.L388:
 3904 005e 00BF     	 .align 2
 3905              	.L387:
 3906 0060 00000000 	 .word .LANCHOR0
 3907              	 .cfi_endproc
 3908              	.LFE145:
 3910              	 .section .text.osEventFlagsNew,"ax",%progbits
 3911              	 .align 2
 3912              	 .global osEventFlagsNew
 3913              	 .thumb
 3914              	 .thumb_func
 3916              	osEventFlagsNew:
 3917              	.LFB146:
1049:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1050:../CMSIS_RTOS_V2/cmsis_os2.c **** /*---------------------------------------------------------------------------*/
1051:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1052:../CMSIS_RTOS_V2/cmsis_os2.c **** osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 3918              	 .loc 1 1052 0
 3919              	 .cfi_startproc
 3920              	 
 3921              	 
 3922              	.LVL465:
 3923 0000 08B5     	 push {r3,lr}
 3924              	.LCFI62:
 3925              	 .cfi_def_cfa_offset 8
 3926              	 .cfi_offset 3,-8
 3927              	 .cfi_offset 14,-4
 3928              	.LVL466:
 3929              	.LBB532:
 3930              	.LBB533:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3931              	 .loc 2 209 0
 3932              	
 3933 0002 EFF30583 	 MRS r3,ipsr
 3934              	
 3935              	.LVL467:
 3936              	 .thumb
 3937              	.LBE533:
 3938              	.LBE532:
1053:../CMSIS_RTOS_V2/cmsis_os2.c ****   EventGroupHandle_t hEventGroup;
1054:../CMSIS_RTOS_V2/cmsis_os2.c ****   int32_t mem;
1055:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1056:../CMSIS_RTOS_V2/cmsis_os2.c ****   hEventGroup = NULL;
1057:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1058:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (!IS_IRQ()) {
 3939              	 .loc 1 1058 0
 3940 0006 FBB9     	 cbnz r3,.L397
 3941              	.LBB534:
 3942              	.LBB535:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 3943              	 .loc 2 386 0
 3944              	
 3945 0008 EFF31083 	 MRS r3,primask
 3946              	
 3947              	.LVL468:
 3948              	 .thumb
 3949              	.LBE535:
 3950              	.LBE534:
 3951              	 .loc 1 1058 0
 3952 000c 13B9     	 cbnz r3,.L391
 3953              	.LBB536:
 3954              	.LBB537:
 3955              	 .loc 2 465 0
 3956              	
 3957 000e EFF31183 	 MRS r3,basepri
 3958              	
 3959              	.LVL469:
 3960              	 .thumb
 3961              	.LBE537:
 3962              	.LBE536:
 3963              	 .loc 1 1058 0
 3964 0012 1BB1     	 cbz r3,.L392
 3965              	.LVL470:
 3966              	.L391:
 3967              	 .loc 1 1058 0 is_stmt 0 discriminator 4
 3968 0014 0F4B     	 ldr r3,.L401
 3969 0016 1B68     	 ldr r3,[r3]
 3970 0018 022B     	 cmp r3,#2
 3971 001a 17D0     	 beq .L398
 3972              	.L392:
 3973              	.LVL471:
1059:../CMSIS_RTOS_V2/cmsis_os2.c ****     mem = -1;
1060:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1061:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (attr != NULL) {
 3974              	 .loc 1 1061 0 is_stmt 1
 3975 001c 88B1     	 cbz r0,.L393
1062:../CMSIS_RTOS_V2/cmsis_os2.c ****       if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 3976              	 .loc 1 1062 0
 3977 001e 8368     	 ldr r3,[r0,#8]
 3978 0020 23B1     	 cbz r3,.L394
 3979              	 .loc 1 1062 0 is_stmt 0 discriminator 1
 3980 0022 C268     	 ldr r2,[r0,#12]
 3981 0024 1B2A     	 cmp r2,#27
 3982 0026 08D8     	 bhi .L395
1056:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 3983              	 .loc 1 1056 0 is_stmt 1
 3984 0028 0020     	 movs r0,#0
 3985              	.LVL472:
 3986 002a 08BD     	 pop {r3,pc}
 3987              	.LVL473:
 3988              	.L394:
1063:../CMSIS_RTOS_V2/cmsis_os2.c ****         mem = 1;
1064:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1065:../CMSIS_RTOS_V2/cmsis_os2.c ****       else {
1066:../CMSIS_RTOS_V2/cmsis_os2.c ****         if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 3989              	 .loc 1 1066 0 discriminator 1
 3990 002c C368     	 ldr r3,[r0,#12]
 3991 002e 0033     	 adds r3,r3,#0
 3992 0030 18BF     	 it ne
 3993 0032 0123     	 movne r3,#1
 3994 0034 5B42     	 negs r3,r3
 3995              	.LVL474:
1067:../CMSIS_RTOS_V2/cmsis_os2.c ****           mem = 0;
1068:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1069:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1070:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1071:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1072:../CMSIS_RTOS_V2/cmsis_os2.c ****       mem = 0;
1073:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1074:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1075:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (mem == 1) {
1076:../CMSIS_RTOS_V2/cmsis_os2.c ****       hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
1077:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1078:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1079:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (mem == 0) {
 3996              	 .loc 1 1079 0 discriminator 1
 3997 0036 23B1     	 cbz r3,.L393
 3998 0038 0AE0     	 b .L399
 3999              	.LVL475:
 4000              	.L395:
 4001              	.LBB538:
1076:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 4002              	 .loc 1 1076 0
 4003 003a 1846     	 mov r0,r3
 4004              	.LVL476:
 4005 003c FFF7FEFF 	 bl xEventGroupCreateStatic
 4006              	.LVL477:
 4007              	.LBE538:
 4008 0040 08BD     	 pop {r3,pc}
 4009              	.LVL478:
 4010              	.L393:
1080:../CMSIS_RTOS_V2/cmsis_os2.c ****         hEventGroup = xEventGroupCreate();
 4011              	 .loc 1 1080 0
 4012 0042 FFF7FEFF 	 bl xEventGroupCreate
 4013              	.LVL479:
 4014 0046 08BD     	 pop {r3,pc}
 4015              	.LVL480:
 4016              	.L397:
1056:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 4017              	 .loc 1 1056 0
 4018 0048 0020     	 movs r0,#0
 4019              	.LVL481:
 4020 004a 08BD     	 pop {r3,pc}
 4021              	.LVL482:
 4022              	.L398:
 4023 004c 0020     	 movs r0,#0
 4024              	.LVL483:
 4025 004e 08BD     	 pop {r3,pc}
 4026              	.LVL484:
 4027              	.L399:
 4028 0050 0020     	 movs r0,#0
 4029              	.LVL485:
1081:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1082:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1083:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1084:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1085:../CMSIS_RTOS_V2/cmsis_os2.c ****   return ((osEventFlagsId_t)hEventGroup);
1086:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 4030              	 .loc 1 1086 0
 4031 0052 08BD     	 pop {r3,pc}
 4032              	.LVL486:
 4033              	.L402:
 4034              	 .align 2
 4035              	.L401:
 4036 0054 00000000 	 .word .LANCHOR0
 4037              	 .cfi_endproc
 4038              	.LFE146:
 4040              	 .section .text.osEventFlagsSet,"ax",%progbits
 4041              	 .align 2
 4042              	 .global osEventFlagsSet
 4043              	 .thumb
 4044              	 .thumb_func
 4046              	osEventFlagsSet:
 4047              	.LFB147:
1087:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1088:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 4048              	 .loc 1 1088 0
 4049              	 .cfi_startproc
 4050              	 
 4051              	 
 4052              	.LVL487:
 4053 0000 10B5     	 push {r4,lr}
 4054              	.LCFI63:
 4055              	 .cfi_def_cfa_offset 8
 4056              	 .cfi_offset 4,-8
 4057              	 .cfi_offset 14,-4
 4058 0002 82B0     	 sub sp,sp,#8
 4059              	.LCFI64:
 4060              	 .cfi_def_cfa_offset 16
 4061              	.LVL488:
1089:../CMSIS_RTOS_V2/cmsis_os2.c ****   EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
1090:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rflags;
1091:../CMSIS_RTOS_V2/cmsis_os2.c ****   BaseType_t yield;
1092:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1093:../CMSIS_RTOS_V2/cmsis_os2.c ****   if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 4062              	 .loc 1 1093 0
 4063 0004 58B3     	 cbz r0,.L408
 4064 0006 0C46     	 mov r4,r1
 4065 0008 0346     	 mov r3,r0
 4066              	 .loc 1 1093 0 is_stmt 0 discriminator 1
 4067 000a 11F07F4F 	 tst r1,#-16777216
 4068 000e 29D1     	 bne .L409
 4069              	.LBB539:
 4070              	.LBB540:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4071              	 .loc 2 209 0 is_stmt 1
 4072              	
 4073 0010 EFF30582 	 MRS r2,ipsr
 4074              	
 4075              	.LVL489:
 4076              	 .thumb
 4077              	.LBE540:
 4078              	.LBE539:
1094:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorParameter;
1095:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1096:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (IS_IRQ()) {
 4079              	 .loc 1 1096 0
 4080 0014 4AB9     	 cbnz r2,.L405
 4081              	.LBB541:
 4082              	.LBB542:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4083              	 .loc 2 386 0
 4084              	
 4085 0016 EFF31082 	 MRS r2,primask
 4086              	
 4087              	.LVL490:
 4088              	 .thumb
 4089              	.LBE542:
 4090              	.LBE541:
 4091              	 .loc 1 1096 0
 4092 001a 12B9     	 cbnz r2,.L406
 4093              	.LBB543:
 4094              	.LBB544:
 4095              	 .loc 2 465 0
 4096              	
 4097 001c EFF31182 	 MRS r2,basepri
 4098              	
 4099              	.LVL491:
 4100              	 .thumb
 4101              	.LBE544:
 4102              	.LBE543:
 4103              	 .loc 1 1096 0
 4104 0020 BAB1     	 cbz r2,.L407
 4105              	.LVL492:
 4106              	.L406:
 4107              	 .loc 1 1096 0 is_stmt 0 discriminator 4
 4108 0022 144A     	 ldr r2,.L412
 4109 0024 1268     	 ldr r2,[r2]
 4110 0026 022A     	 cmp r2,#2
 4111 0028 13D1     	 bne .L407
 4112              	.L405:
1097:../CMSIS_RTOS_V2/cmsis_os2.c ****     yield = pdFALSE;
 4113              	 .loc 1 1097 0 is_stmt 1
 4114 002a 02AA     	 add r2,sp,#8
 4115 002c 0021     	 movs r1,#0
 4116              	.LVL493:
 4117 002e 42F8041D 	 str r1,[r2,#-4]!
1098:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1099:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 4118              	 .loc 1 1099 0
 4119 0032 1846     	 mov r0,r3
 4120              	.LVL494:
 4121 0034 2146     	 mov r1,r4
 4122 0036 FFF7FEFF 	 bl xEventGroupSetBitsFromISR
 4123              	.LVL495:
 4124 003a B0B1     	 cbz r0,.L410
 4125              	.LVL496:
1100:../CMSIS_RTOS_V2/cmsis_os2.c ****       rflags = (uint32_t)osErrorResource;
1101:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
1102:../CMSIS_RTOS_V2/cmsis_os2.c ****       rflags = flags;
1103:../CMSIS_RTOS_V2/cmsis_os2.c ****       portYIELD_FROM_ISR (yield);
 4126              	 .loc 1 1103 0
 4127 003c 019B     	 ldr r3,[sp,#4]
 4128 003e B3B1     	 cbz r3,.L404
 4129              	 .loc 1 1103 0 is_stmt 0 discriminator 1
 4130 0040 4FF08052 	 mov r2,#268435456
 4131 0044 0C4B     	 ldr r3,.L412+4
 4132 0046 1A60     	 str r2,[r3]
 4133              	
 4134 0048 BFF34F8F 	 dsb
 4135              	
 4136              	
 4137 004c BFF36F8F 	 isb
 4138              	
 4139              	 .thumb
 4140 0050 0DE0     	 b .L404
 4141              	.LVL497:
 4142              	.L407:
1104:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1105:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1106:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1107:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 4143              	 .loc 1 1107 0 is_stmt 1
 4144 0052 1846     	 mov r0,r3
 4145              	.LVL498:
 4146 0054 2146     	 mov r1,r4
 4147              	.LVL499:
 4148 0056 FFF7FEFF 	 bl xEventGroupSetBits
 4149              	.LVL500:
 4150 005a 0446     	 mov r4,r0
 4151              	.LVL501:
 4152 005c 07E0     	 b .L404
 4153              	.LVL502:
 4154              	.L408:
1094:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 4155              	 .loc 1 1094 0
 4156 005e 6FF00304 	 mvn r4,#3
 4157 0062 04E0     	 b .L404
 4158              	.L409:
 4159 0064 6FF00304 	 mvn r4,#3
 4160 0068 01E0     	 b .L404
 4161              	.LVL503:
 4162              	.L410:
1100:../CMSIS_RTOS_V2/cmsis_os2.c ****       rflags = (uint32_t)osErrorResource;
 4163              	 .loc 1 1100 0
 4164 006a 6FF00204 	 mvn r4,#2
 4165              	.LVL504:
 4166              	.L404:
1108:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1109:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1110:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (rflags);
1111:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 4167              	 .loc 1 1111 0
 4168 006e 2046     	 mov r0,r4
 4169 0070 02B0     	 add sp,sp,#8
 4170              	.LCFI65:
 4171              	 .cfi_def_cfa_offset 8
 4172              	 
 4173 0072 10BD     	 pop {r4,pc}
 4174              	.LVL505:
 4175              	.L413:
 4176              	 .align 2
 4177              	.L412:
 4178 0074 00000000 	 .word .LANCHOR0
 4179 0078 04ED00E0 	 .word -536810236
 4180              	 .cfi_endproc
 4181              	.LFE147:
 4183              	 .section .text.osEventFlagsClear,"ax",%progbits
 4184              	 .align 2
 4185              	 .global osEventFlagsClear
 4186              	 .thumb
 4187              	 .thumb_func
 4189              	osEventFlagsClear:
 4190              	.LFB148:
1112:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1113:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 4191              	 .loc 1 1113 0
 4192              	 .cfi_startproc
 4193              	 
 4194              	 
 4195              	.LVL506:
 4196 0000 70B5     	 push {r4,r5,r6,lr}
 4197              	.LCFI66:
 4198              	 .cfi_def_cfa_offset 16
 4199              	 .cfi_offset 4,-16
 4200              	 .cfi_offset 5,-12
 4201              	 .cfi_offset 6,-8
 4202              	 .cfi_offset 14,-4
 4203              	.LVL507:
1114:../CMSIS_RTOS_V2/cmsis_os2.c ****   EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
1115:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rflags;
1116:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1117:../CMSIS_RTOS_V2/cmsis_os2.c ****   if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 4204              	 .loc 1 1117 0
 4205 0002 20B3     	 cbz r0,.L419
 4206              	 .loc 1 1117 0 is_stmt 0 discriminator 1
 4207 0004 11F07F4F 	 tst r1,#-16777216
 4208 0008 24D1     	 bne .L420
 4209 000a 0646     	 mov r6,r0
 4210 000c 0C46     	 mov r4,r1
 4211              	.LBB545:
 4212              	.LBB546:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4213              	 .loc 2 209 0 is_stmt 1
 4214              	
 4215 000e EFF30583 	 MRS r3,ipsr
 4216              	
 4217              	.LVL508:
 4218              	 .thumb
 4219              	.LBE546:
 4220              	.LBE545:
1118:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorParameter;
1119:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1120:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (IS_IRQ()) {
 4221              	 .loc 1 1120 0
 4222 0012 4BB9     	 cbnz r3,.L416
 4223              	.LBB547:
 4224              	.LBB548:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4225              	 .loc 2 386 0
 4226              	
 4227 0014 EFF31083 	 MRS r3,primask
 4228              	
 4229              	.LVL509:
 4230              	 .thumb
 4231              	.LBE548:
 4232              	.LBE547:
 4233              	 .loc 1 1120 0
 4234 0018 13B9     	 cbnz r3,.L417
 4235              	.LBB549:
 4236              	.LBB550:
 4237              	 .loc 2 465 0
 4238              	
 4239 001a EFF31183 	 MRS r3,basepri
 4240              	
 4241              	.LVL510:
 4242              	 .thumb
 4243              	.LBE550:
 4244              	.LBE549:
 4245              	 .loc 1 1120 0
 4246 001e 83B1     	 cbz r3,.L418
 4247              	.LVL511:
 4248              	.L417:
 4249              	 .loc 1 1120 0 is_stmt 0 discriminator 4
 4250 0020 0E4B     	 ldr r3,.L422
 4251 0022 1B68     	 ldr r3,[r3]
 4252 0024 022B     	 cmp r3,#2
 4253 0026 0CD1     	 bne .L418
 4254              	.L416:
1121:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = xEventGroupGetBitsFromISR (hEventGroup);
 4255              	 .loc 1 1121 0 is_stmt 1
 4256 0028 3046     	 mov r0,r6
 4257              	.LVL512:
 4258 002a FFF7FEFF 	 bl xEventGroupGetBitsFromISR
 4259              	.LVL513:
 4260 002e 0546     	 mov r5,r0
 4261              	.LVL514:
1122:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1123:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 4262              	 .loc 1 1123 0
 4263 0030 3046     	 mov r0,r6
 4264              	.LVL515:
 4265 0032 2146     	 mov r1,r4
 4266 0034 FFF7FEFF 	 bl xEventGroupClearBitsFromISR
 4267              	.LVL516:
 4268 0038 0028     	 cmp r0,#0
1124:../CMSIS_RTOS_V2/cmsis_os2.c ****       rflags = (uint32_t)osErrorResource;
 4269              	 .loc 1 1124 0
 4270 003a 08BF     	 it eq
 4271 003c 6FF00205 	 mvneq r5,#2
 4272              	.LVL517:
 4273 0040 0AE0     	 b .L415
 4274              	.LVL518:
 4275              	.L418:
1125:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1126:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1127:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1128:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 4276              	 .loc 1 1128 0
 4277 0042 3046     	 mov r0,r6
 4278              	.LVL519:
 4279 0044 2146     	 mov r1,r4
 4280              	.LVL520:
 4281 0046 FFF7FEFF 	 bl xEventGroupClearBits
 4282              	.LVL521:
 4283 004a 0546     	 mov r5,r0
 4284              	.LVL522:
 4285 004c 04E0     	 b .L415
 4286              	.LVL523:
 4287              	.L419:
1118:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 4288              	 .loc 1 1118 0
 4289 004e 6FF00305 	 mvn r5,#3
 4290 0052 01E0     	 b .L415
 4291              	.L420:
 4292 0054 6FF00305 	 mvn r5,#3
 4293              	.LVL524:
 4294              	.L415:
1129:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1130:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1131:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (rflags);
1132:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 4295              	 .loc 1 1132 0
 4296 0058 2846     	 mov r0,r5
 4297 005a 70BD     	 pop {r4,r5,r6,pc}
 4298              	.LVL525:
 4299              	.L423:
 4300              	 .align 2
 4301              	.L422:
 4302 005c 00000000 	 .word .LANCHOR0
 4303              	 .cfi_endproc
 4304              	.LFE148:
 4306              	 .section .text.osEventFlagsGet,"ax",%progbits
 4307              	 .align 2
 4308              	 .global osEventFlagsGet
 4309              	 .thumb
 4310              	 .thumb_func
 4312              	osEventFlagsGet:
 4313              	.LFB149:
1133:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1134:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 4314              	 .loc 1 1134 0
 4315              	 .cfi_startproc
 4316              	 
 4317              	 
 4318              	.LVL526:
1135:../CMSIS_RTOS_V2/cmsis_os2.c ****   EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
1136:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rflags;
1137:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1138:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (ef_id == NULL) {
 4319              	 .loc 1 1138 0
 4320 0000 A0B1     	 cbz r0,.L429
1134:../CMSIS_RTOS_V2/cmsis_os2.c ****   EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 4321              	 .loc 1 1134 0
 4322 0002 08B5     	 push {r3,lr}
 4323              	.LCFI67:
 4324              	 .cfi_def_cfa_offset 8
 4325              	 .cfi_offset 3,-8
 4326              	 .cfi_offset 14,-4
 4327              	.LBB551:
 4328              	.LBB552:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4329              	 .loc 2 209 0
 4330              	
 4331 0004 EFF30583 	 MRS r3,ipsr
 4332              	
 4333              	.LVL527:
 4334              	 .thumb
 4335              	.LBE552:
 4336              	.LBE551:
1139:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = 0U;
1140:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1141:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (IS_IRQ()) {
 4337              	 .loc 1 1141 0
 4338 0008 4BB9     	 cbnz r3,.L426
 4339              	.LBB553:
 4340              	.LBB554:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4341              	 .loc 2 386 0
 4342              	
 4343 000a EFF31083 	 MRS r3,primask
 4344              	
 4345              	.LVL528:
 4346              	 .thumb
 4347              	.LBE554:
 4348              	.LBE553:
 4349              	 .loc 1 1141 0
 4350 000e 13B9     	 cbnz r3,.L427
 4351              	.LBB555:
 4352              	.LBB556:
 4353              	 .loc 2 465 0
 4354              	
 4355 0010 EFF31183 	 MRS r3,basepri
 4356              	
 4357              	.LVL529:
 4358              	 .thumb
 4359              	.LBE556:
 4360              	.LBE555:
 4361              	 .loc 1 1141 0
 4362 0014 33B1     	 cbz r3,.L428
 4363              	.LVL530:
 4364              	.L427:
 4365              	 .loc 1 1141 0 is_stmt 0 discriminator 4
 4366 0016 064B     	 ldr r3,.L432
 4367 0018 1B68     	 ldr r3,[r3]
 4368 001a 022B     	 cmp r3,#2
 4369 001c 02D1     	 bne .L428
 4370              	.L426:
1142:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = xEventGroupGetBitsFromISR (hEventGroup);
 4371              	 .loc 1 1142 0 is_stmt 1
 4372 001e FFF7FEFF 	 bl xEventGroupGetBitsFromISR
 4373              	.LVL531:
 4374 0022 08BD     	 pop {r3,pc}
 4375              	.LVL532:
 4376              	.L428:
1143:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1144:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1145:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = xEventGroupGetBits (hEventGroup);
 4377              	 .loc 1 1145 0
 4378 0024 0021     	 movs r1,#0
 4379 0026 FFF7FEFF 	 bl xEventGroupClearBits
 4380              	.LVL533:
 4381 002a 08BD     	 pop {r3,pc}
 4382              	.LVL534:
 4383              	.L429:
 4384              	.LCFI68:
 4385              	 .cfi_def_cfa_offset 0
 4386              	 .cfi_restore 3
 4387              	 .cfi_restore 14
1139:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 4388              	 .loc 1 1139 0
 4389 002c 0020     	 movs r0,#0
 4390              	.LVL535:
 4391 002e 7047     	 bx lr
 4392              	.L433:
 4393              	 .align 2
 4394              	.L432:
 4395 0030 00000000 	 .word .LANCHOR0
 4396              	 .cfi_endproc
 4397              	.LFE149:
 4399              	 .section .text.osEventFlagsWait,"ax",%progbits
 4400              	 .align 2
 4401              	 .global osEventFlagsWait
 4402              	 .thumb
 4403              	 .thumb_func
 4405              	osEventFlagsWait:
 4406              	.LFB150:
1146:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1147:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1148:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (rflags);
1149:../CMSIS_RTOS_V2/cmsis_os2.c **** }
1150:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1151:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeo
 4407              	 .loc 1 1151 0
 4408              	 .cfi_startproc
 4409              	 
 4410              	 
 4411              	.LVL536:
1152:../CMSIS_RTOS_V2/cmsis_os2.c ****   EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
1153:../CMSIS_RTOS_V2/cmsis_os2.c ****   BaseType_t wait_all;
1154:../CMSIS_RTOS_V2/cmsis_os2.c ****   BaseType_t exit_clr;
1155:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rflags;
1156:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1157:../CMSIS_RTOS_V2/cmsis_os2.c ****   if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 4412              	 .loc 1 1157 0
 4413 0000 90B3     	 cbz r0,.L439
1151:../CMSIS_RTOS_V2/cmsis_os2.c ****   EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 4414              	 .loc 1 1151 0 discriminator 1
 4415 0002 70B5     	 push {r4,r5,r6,lr}
 4416              	.LCFI69:
 4417              	 .cfi_def_cfa_offset 16
 4418              	 .cfi_offset 4,-16
 4419              	 .cfi_offset 5,-12
 4420              	 .cfi_offset 6,-8
 4421              	 .cfi_offset 14,-4
 4422 0004 82B0     	 sub sp,sp,#8
 4423              	.LCFI70:
 4424              	 .cfi_def_cfa_offset 24
 4425 0006 0446     	 mov r4,r0
 4426              	 .loc 1 1157 0 discriminator 1
 4427 0008 11F07F4F 	 tst r1,#-16777216
 4428 000c 2FD1     	 bne .L440
 4429              	.LBB557:
 4430              	.LBB558:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4431              	 .loc 2 209 0
 4432              	
 4433 000e EFF30580 	 MRS r0,ipsr
 4434              	
 4435              	.LVL537:
 4436              	 .thumb
 4437              	.LBE558:
 4438              	.LBE557:
1158:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorParameter;
1159:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1160:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (IS_IRQ()) {
 4439              	 .loc 1 1160 0
 4440 0012 78BB     	 cbnz r0,.L441
 4441              	.LBB559:
 4442              	.LBB560:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4443              	 .loc 2 386 0
 4444              	
 4445 0014 EFF31080 	 MRS r0,primask
 4446              	
 4447              	.LVL538:
 4448              	 .thumb
 4449              	.LBE560:
 4450              	.LBE559:
 4451              	 .loc 1 1160 0
 4452 0018 10B9     	 cbnz r0,.L436
 4453              	.LBB561:
 4454              	.LBB562:
 4455              	 .loc 2 465 0
 4456              	
 4457 001a EFF31180 	 MRS r0,basepri
 4458              	
 4459              	.LVL539:
 4460              	 .thumb
 4461              	.LBE562:
 4462              	.LBE561:
 4463              	 .loc 1 1160 0
 4464 001e 18B1     	 cbz r0,.L437
 4465              	.LVL540:
 4466              	.L436:
 4467              	 .loc 1 1160 0 is_stmt 0 discriminator 4
 4468 0020 1848     	 ldr r0,.L446
 4469 0022 0068     	 ldr r0,[r0]
 4470 0024 0228     	 cmp r0,#2
 4471 0026 28D0     	 beq .L442
 4472              	.L437:
 4473 0028 2046     	 mov r0,r4
 4474 002a 1D46     	 mov r5,r3
 4475 002c 0C46     	 mov r4,r1
 4476              	.LVL541:
1161:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = (uint32_t)osErrorISR;
1162:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1163:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1164:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (options & osFlagsWaitAll) {
 4477              	 .loc 1 1164 0 is_stmt 1
 4478 002e 02F00106 	 and r6,r2,#1
 4479              	.LVL542:
1165:../CMSIS_RTOS_V2/cmsis_os2.c ****       wait_all = pdTRUE;
1166:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
1167:../CMSIS_RTOS_V2/cmsis_os2.c ****       wait_all = pdFAIL;
1168:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1169:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1170:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (options & osFlagsNoClear) {
 4480              	 .loc 1 1170 0
 4481 0032 82F00202 	 eor r2,r2,#2
 4482              	.LVL543:
1171:../CMSIS_RTOS_V2/cmsis_os2.c ****       exit_clr = pdFAIL;
1172:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
1173:../CMSIS_RTOS_V2/cmsis_os2.c ****       exit_clr = pdTRUE;
1174:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1175:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1176:../CMSIS_RTOS_V2/cmsis_os2.c ****     rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)
 4483              	 .loc 1 1176 0
 4484 0036 0093     	 str r3,[sp]
 4485 0038 C2F34002 	 ubfx r2,r2,#1,#1
 4486              	.LVL544:
 4487 003c 3346     	 mov r3,r6
 4488              	.LVL545:
 4489 003e FFF7FEFF 	 bl xEventGroupWaitBits
 4490              	.LVL546:
1177:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1178:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (options & osFlagsWaitAll) {
 4491              	 .loc 1 1178 0
 4492 0042 46B1     	 cbz r6,.L438
1179:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (flags != rflags) {
 4493              	 .loc 1 1179 0
 4494 0044 8442     	 cmp r4,r0
 4495 0046 1AD0     	 beq .L435
1180:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (timeout > 0U) {
1181:../CMSIS_RTOS_V2/cmsis_os2.c ****           rflags = (uint32_t)osErrorTimeout;
1182:../CMSIS_RTOS_V2/cmsis_os2.c ****         } else {
1183:../CMSIS_RTOS_V2/cmsis_os2.c ****           rflags = (uint32_t)osErrorResource;
 4496              	 .loc 1 1183 0
 4497 0048 002D     	 cmp r5,#0
 4498 004a 14BF     	 ite ne
 4499 004c 6FF00100 	 mvnne r0,#1
 4500              	.LVL547:
 4501 0050 6FF00200 	 mvneq r0,#2
 4502 0054 13E0     	 b .L435
 4503              	.LVL548:
 4504              	.L438:
1184:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1185:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1186:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1187:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1188:../CMSIS_RTOS_V2/cmsis_os2.c ****       if ((flags & rflags) == 0U) {
 4505              	 .loc 1 1188 0
 4506 0056 2042     	 tst r0,r4
 4507 0058 11D1     	 bne .L435
1189:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (timeout > 0U) {
1190:../CMSIS_RTOS_V2/cmsis_os2.c ****           rflags = (uint32_t)osErrorTimeout;
1191:../CMSIS_RTOS_V2/cmsis_os2.c ****         } else {
1192:../CMSIS_RTOS_V2/cmsis_os2.c ****           rflags = (uint32_t)osErrorResource;
 4508              	 .loc 1 1192 0
 4509 005a 002D     	 cmp r5,#0
 4510 005c 14BF     	 ite ne
 4511 005e 6FF00100 	 mvnne r0,#1
 4512              	.LVL549:
 4513 0062 6FF00200 	 mvneq r0,#2
 4514 0066 0AE0     	 b .L435
 4515              	.LVL550:
 4516              	.L439:
 4517              	.LCFI71:
 4518              	 .cfi_def_cfa_offset 0
 4519              	 .cfi_restore 4
 4520              	 .cfi_restore 5
 4521              	 .cfi_restore 6
 4522              	 .cfi_restore 14
1158:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 4523              	 .loc 1 1158 0
 4524 0068 6FF00300 	 mvn r0,#3
 4525              	.LVL551:
1193:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1194:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1195:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1196:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1197:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1198:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (rflags);
1199:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 4526              	 .loc 1 1199 0
 4527 006c 7047     	 bx lr
 4528              	.LVL552:
 4529              	.L440:
 4530              	.LCFI72:
 4531              	 .cfi_def_cfa_offset 24
 4532              	 .cfi_offset 4,-16
 4533              	 .cfi_offset 5,-12
 4534              	 .cfi_offset 6,-8
 4535              	 .cfi_offset 14,-4
1158:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 4536              	 .loc 1 1158 0
 4537 006e 6FF00300 	 mvn r0,#3
 4538              	.LVL553:
 4539 0072 04E0     	 b .L435
 4540              	.LVL554:
 4541              	.L441:
1161:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 4542              	 .loc 1 1161 0
 4543 0074 6FF00500 	 mvn r0,#5
 4544              	.LVL555:
 4545 0078 01E0     	 b .L435
 4546              	.L442:
 4547 007a 6FF00500 	 mvn r0,#5
 4548              	.LVL556:
 4549              	.L435:
 4550              	 .loc 1 1199 0
 4551 007e 02B0     	 add sp,sp,#8
 4552              	.LCFI73:
 4553              	 .cfi_def_cfa_offset 16
 4554              	 
 4555 0080 70BD     	 pop {r4,r5,r6,pc}
 4556              	.L447:
 4557 0082 00BF     	 .align 2
 4558              	.L446:
 4559 0084 00000000 	 .word .LANCHOR0
 4560              	 .cfi_endproc
 4561              	.LFE150:
 4563              	 .section .text.osEventFlagsDelete,"ax",%progbits
 4564              	 .align 2
 4565              	 .global osEventFlagsDelete
 4566              	 .thumb
 4567              	 .thumb_func
 4569              	osEventFlagsDelete:
 4570              	.LFB151:
1200:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1201:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id) {
 4571              	 .loc 1 1201 0
 4572              	 .cfi_startproc
 4573              	 
 4574              	 
 4575              	.LVL557:
 4576 0000 08B5     	 push {r3,lr}
 4577              	.LCFI74:
 4578              	 .cfi_def_cfa_offset 8
 4579              	 .cfi_offset 3,-8
 4580              	 .cfi_offset 14,-4
 4581              	.LVL558:
 4582              	.LBB563:
 4583              	.LBB564:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4584              	 .loc 2 209 0
 4585              	
 4586 0002 EFF30583 	 MRS r3,ipsr
 4587              	
 4588              	.LVL559:
 4589              	 .thumb
 4590              	.LBE564:
 4591              	.LBE563:
1202:../CMSIS_RTOS_V2/cmsis_os2.c ****   EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
1203:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1204:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1205:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef USE_FreeRTOS_HEAP_1
1206:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 4592              	 .loc 1 1206 0
 4593 0006 73B9     	 cbnz r3,.L452
 4594              	.LBB565:
 4595              	.LBB566:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4596              	 .loc 2 386 0
 4597              	
 4598 0008 EFF31083 	 MRS r3,primask
 4599              	
 4600              	.LVL560:
 4601              	 .thumb
 4602              	.LBE566:
 4603              	.LBE565:
 4604              	 .loc 1 1206 0
 4605 000c 13B9     	 cbnz r3,.L450
 4606              	.LBB567:
 4607              	.LBB568:
 4608              	 .loc 2 465 0
 4609              	
 4610 000e EFF31183 	 MRS r3,basepri
 4611              	
 4612              	.LVL561:
 4613              	 .thumb
 4614              	.LBE568:
 4615              	.LBE567:
 4616              	 .loc 1 1206 0
 4617 0012 1BB1     	 cbz r3,.L451
 4618              	.LVL562:
 4619              	.L450:
 4620              	 .loc 1 1206 0 is_stmt 0 discriminator 4
 4621 0014 084B     	 ldr r3,.L456
 4622 0016 1B68     	 ldr r3,[r3]
 4623 0018 022B     	 cmp r3,#2
 4624 001a 07D0     	 beq .L453
 4625              	.L451:
1207:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
1208:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1209:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hEventGroup == NULL) {
 4626              	 .loc 1 1209 0 is_stmt 1
 4627 001c 48B1     	 cbz r0,.L454
 4628              	.LVL563:
1210:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
1211:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1212:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1213:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osOK;
1214:../CMSIS_RTOS_V2/cmsis_os2.c ****     vEventGroupDelete (hEventGroup);
 4629              	 .loc 1 1214 0
 4630 001e FFF7FEFF 	 bl vEventGroupDelete
 4631              	.LVL564:
1213:../CMSIS_RTOS_V2/cmsis_os2.c ****     vEventGroupDelete (hEventGroup);
 4632              	 .loc 1 1213 0
 4633 0022 0020     	 movs r0,#0
 4634 0024 08BD     	 pop {r3,pc}
 4635              	.LVL565:
 4636              	.L452:
1207:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 4637              	 .loc 1 1207 0
 4638 0026 6FF00500 	 mvn r0,#5
 4639              	.LVL566:
 4640 002a 08BD     	 pop {r3,pc}
 4641              	.LVL567:
 4642              	.L453:
 4643 002c 6FF00500 	 mvn r0,#5
 4644              	.LVL568:
 4645 0030 08BD     	 pop {r3,pc}
 4646              	.LVL569:
 4647              	.L454:
1210:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 4648              	 .loc 1 1210 0
 4649 0032 6FF00300 	 mvn r0,#3
 4650              	.LVL570:
1215:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1216:../CMSIS_RTOS_V2/cmsis_os2.c **** #else
1217:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osError;
1218:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
1219:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1220:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1221:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 4651              	 .loc 1 1221 0
 4652 0036 08BD     	 pop {r3,pc}
 4653              	.L457:
 4654              	 .align 2
 4655              	.L456:
 4656 0038 00000000 	 .word .LANCHOR0
 4657              	 .cfi_endproc
 4658              	.LFE151:
 4660              	 .section .text.osMutexNew,"ax",%progbits
 4661              	 .align 2
 4662              	 .global osMutexNew
 4663              	 .thumb
 4664              	 .thumb_func
 4666              	osMutexNew:
 4667              	.LFB152:
1222:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1223:../CMSIS_RTOS_V2/cmsis_os2.c **** /*---------------------------------------------------------------------------*/
1224:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1225:../CMSIS_RTOS_V2/cmsis_os2.c **** osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 4668              	 .loc 1 1225 0
 4669              	 .cfi_startproc
 4670              	 
 4671              	 
 4672              	.LVL571:
 4673 0000 70B5     	 push {r4,r5,r6,lr}
 4674              	.LCFI75:
 4675              	 .cfi_def_cfa_offset 16
 4676              	 .cfi_offset 4,-16
 4677              	 .cfi_offset 5,-12
 4678              	 .cfi_offset 6,-8
 4679              	 .cfi_offset 14,-4
 4680              	.LVL572:
 4681              	.LBB569:
 4682              	.LBB570:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4683              	 .loc 2 209 0
 4684              	
 4685 0002 EFF30583 	 MRS r3,ipsr
 4686              	
 4687              	.LVL573:
 4688              	 .thumb
 4689              	.LBE570:
 4690              	.LBE569:
1226:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hMutex;
1227:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t type;
1228:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rmtx;
1229:../CMSIS_RTOS_V2/cmsis_os2.c ****   int32_t  mem;
1230:../CMSIS_RTOS_V2/cmsis_os2.c ****   #if (configQUEUE_REGISTRY_SIZE > 0)
1231:../CMSIS_RTOS_V2/cmsis_os2.c ****   const char *name;
1232:../CMSIS_RTOS_V2/cmsis_os2.c ****   #endif
1233:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1234:../CMSIS_RTOS_V2/cmsis_os2.c ****   hMutex = NULL;
1235:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1236:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (!IS_IRQ()) {
 4691              	 .loc 1 1236 0
 4692 0006 002B     	 cmp r3,#0
 4693 0008 41D1     	 bne .L469
 4694              	.LBB571:
 4695              	.LBB572:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4696              	 .loc 2 386 0
 4697              	
 4698 000a EFF31083 	 MRS r3,primask
 4699              	
 4700              	.LVL574:
 4701              	 .thumb
 4702              	.LBE572:
 4703              	.LBE571:
 4704              	 .loc 1 1236 0
 4705 000e 13B9     	 cbnz r3,.L460
 4706              	.LBB573:
 4707              	.LBB574:
 4708              	 .loc 2 465 0
 4709              	
 4710 0010 EFF31183 	 MRS r3,basepri
 4711              	
 4712              	.LVL575:
 4713              	 .thumb
 4714              	.LBE574:
 4715              	.LBE573:
 4716              	 .loc 1 1236 0
 4717 0014 1BB1     	 cbz r3,.L461
 4718              	.LVL576:
 4719              	.L460:
 4720              	 .loc 1 1236 0 is_stmt 0 discriminator 4
 4721 0016 224B     	 ldr r3,.L476
 4722 0018 1B68     	 ldr r3,[r3]
 4723 001a 022B     	 cmp r3,#2
 4724 001c 39D0     	 beq .L470
 4725              	.L461:
 4726 001e 0446     	 mov r4,r0
1237:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (attr != NULL) {
 4727              	 .loc 1 1237 0 is_stmt 1
 4728 0020 20B3     	 cbz r0,.L462
1238:../CMSIS_RTOS_V2/cmsis_os2.c ****       type = attr->attr_bits;
 4729              	 .loc 1 1238 0
 4730 0022 4368     	 ldr r3,[r0,#4]
 4731              	.LVL577:
1239:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
1240:../CMSIS_RTOS_V2/cmsis_os2.c ****       type = 0U;
1241:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1242:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1243:../CMSIS_RTOS_V2/cmsis_os2.c ****     if ((type & osMutexRecursive) == osMutexRecursive) {
 4732              	 .loc 1 1243 0
 4733 0024 03F00106 	 and r6,r3,#1
 4734              	.LVL578:
1244:../CMSIS_RTOS_V2/cmsis_os2.c ****       rmtx = 1U;
1245:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
1246:../CMSIS_RTOS_V2/cmsis_os2.c ****       rmtx = 0U;
1247:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1248:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1249:../CMSIS_RTOS_V2/cmsis_os2.c ****     if ((type & osMutexRobust) != osMutexRobust) {
 4735              	 .loc 1 1249 0
 4736 0028 13F0080F 	 tst r3,#8
 4737 002c 33D1     	 bne .L471
 4738              	.LVL579:
1250:../CMSIS_RTOS_V2/cmsis_os2.c ****       mem = -1;
1251:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1252:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (attr != NULL) {
1253:../CMSIS_RTOS_V2/cmsis_os2.c ****         if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 4739              	 .loc 1 1253 0
 4740 002e 8368     	 ldr r3,[r0,#8]
 4741              	.LVL580:
 4742 0030 23B1     	 cbz r3,.L463
 4743              	 .loc 1 1253 0 is_stmt 0 discriminator 1
 4744 0032 C368     	 ldr r3,[r0,#12]
 4745 0034 4F2B     	 cmp r3,#79
 4746 0036 08D8     	 bhi .L464
 4747 0038 0025     	 movs r5,#0
 4748 003a 2FE0     	 b .L459
 4749              	.L463:
1254:../CMSIS_RTOS_V2/cmsis_os2.c ****           mem = 1;
1255:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1256:../CMSIS_RTOS_V2/cmsis_os2.c ****         else {
1257:../CMSIS_RTOS_V2/cmsis_os2.c ****           if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 4750              	 .loc 1 1257 0 is_stmt 1 discriminator 1
 4751 003c C368     	 ldr r3,[r0,#12]
 4752 003e 0033     	 adds r3,r3,#0
 4753 0040 18BF     	 it ne
 4754 0042 0123     	 movne r3,#1
 4755 0044 5B42     	 negs r3,r3
 4756              	.LVL581:
1258:../CMSIS_RTOS_V2/cmsis_os2.c ****             mem = 0;
1259:../CMSIS_RTOS_V2/cmsis_os2.c ****           }
1260:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1261:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1262:../CMSIS_RTOS_V2/cmsis_os2.c ****       else {
1263:../CMSIS_RTOS_V2/cmsis_os2.c ****         mem = 0;
1264:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1265:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1266:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (mem == 1) {
1267:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (rmtx != 0U) {
1268:../CMSIS_RTOS_V2/cmsis_os2.c ****           hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
1269:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1270:../CMSIS_RTOS_V2/cmsis_os2.c ****         else {
1271:../CMSIS_RTOS_V2/cmsis_os2.c ****           hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
1272:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1273:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1274:../CMSIS_RTOS_V2/cmsis_os2.c ****       else {
1275:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (mem == 0) {
 4757              	 .loc 1 1275 0 discriminator 1
 4758 0046 43BB     	 cbnz r3,.L472
 4759 0048 0AE0     	 b .L474
 4760              	.LVL582:
 4761              	.L464:
1267:../CMSIS_RTOS_V2/cmsis_os2.c ****           hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 4762              	 .loc 1 1267 0
 4763 004a 26B1     	 cbz r6,.L466
 4764              	.LBB575:
1268:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 4765              	 .loc 1 1268 0
 4766 004c 8068     	 ldr r0,[r0,#8]
 4767              	.LVL583:
 4768 004e FFF7FEFF 	 bl xSemaphoreCreateRecursiveMutexStatic
 4769              	.LVL584:
 4770 0052 0546     	 mov r5,r0
 4771              	.LVL585:
 4772              	.LBE575:
 4773 0054 0FE0     	 b .L467
 4774              	.LVL586:
 4775              	.L466:
 4776              	.LBB576:
1271:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
 4777              	 .loc 1 1271 0
 4778 0056 8068     	 ldr r0,[r0,#8]
 4779              	.LVL587:
 4780 0058 FFF7FEFF 	 bl xSemaphoreCreateMutexStatic
 4781              	.LVL588:
 4782 005c 0546     	 mov r5,r0
 4783              	.LVL589:
 4784 005e 0AE0     	 b .L467
 4785              	.LVL590:
 4786              	.L474:
 4787              	.LBE576:
1276:../CMSIS_RTOS_V2/cmsis_os2.c ****           if (rmtx != 0U) {
 4788              	 .loc 1 1276 0
 4789 0060 26B1     	 cbz r6,.L462
1277:../CMSIS_RTOS_V2/cmsis_os2.c ****             hMutex = xSemaphoreCreateRecursiveMutex ();
 4790              	 .loc 1 1277 0
 4791 0062 0420     	 movs r0,#4
 4792              	.LVL591:
 4793 0064 FFF7FEFF 	 bl xQueueCreateMutex
 4794              	.LVL592:
 4795 0068 0546     	 mov r5,r0
 4796              	.LVL593:
 4797 006a 04E0     	 b .L467
 4798              	.LVL594:
 4799              	.L462:
1278:../CMSIS_RTOS_V2/cmsis_os2.c ****           } else {
1279:../CMSIS_RTOS_V2/cmsis_os2.c ****             hMutex = xSemaphoreCreateMutex ();
 4800              	 .loc 1 1279 0
 4801 006c 0120     	 movs r0,#1
 4802              	.LVL595:
 4803 006e FFF7FEFF 	 bl xQueueCreateMutex
 4804              	.LVL596:
 4805 0072 0546     	 mov r5,r0
 4806              	.LVL597:
 4807 0074 0026     	 movs r6,#0
 4808              	.LVL598:
 4809              	.L467:
1280:../CMSIS_RTOS_V2/cmsis_os2.c ****           }
1281:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1282:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1283:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1284:../CMSIS_RTOS_V2/cmsis_os2.c ****       #if (configQUEUE_REGISTRY_SIZE > 0)
1285:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (hMutex != NULL) {
 4810              	 .loc 1 1285 0
 4811 0076 8DB1     	 cbz r5,.L459
1286:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (attr != NULL) {
 4812              	 .loc 1 1286 0
 4813 0078 0CB1     	 cbz r4,.L473
1287:../CMSIS_RTOS_V2/cmsis_os2.c ****           name = attr->name;
 4814              	 .loc 1 1287 0
 4815 007a 2168     	 ldr r1,[r4]
 4816              	.LVL599:
 4817 007c 00E0     	 b .L468
 4818              	.LVL600:
 4819              	.L473:
1288:../CMSIS_RTOS_V2/cmsis_os2.c ****         } else {
1289:../CMSIS_RTOS_V2/cmsis_os2.c ****           name = NULL;
 4820              	 .loc 1 1289 0
 4821 007e 0021     	 movs r1,#0
 4822              	.L468:
 4823              	.LVL601:
1290:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1291:../CMSIS_RTOS_V2/cmsis_os2.c ****         vQueueAddToRegistry (hMutex, name);
 4824              	 .loc 1 1291 0
 4825 0080 2846     	 mov r0,r5
 4826              	.LVL602:
 4827 0082 FFF7FEFF 	 bl vQueueAddToRegistry
 4828              	.LVL603:
1292:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1293:../CMSIS_RTOS_V2/cmsis_os2.c ****       #endif
1294:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1295:../CMSIS_RTOS_V2/cmsis_os2.c ****       if ((hMutex != NULL) && (rmtx != 0U)) {
 4829              	 .loc 1 1295 0
 4830 0086 4EB1     	 cbz r6,.L459
1296:../CMSIS_RTOS_V2/cmsis_os2.c ****         hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 4831              	 .loc 1 1296 0
 4832 0088 45F00105 	 orr r5,r5,#1
 4833              	.LVL604:
 4834 008c 06E0     	 b .L459
 4835              	.LVL605:
 4836              	.L469:
1234:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 4837              	 .loc 1 1234 0
 4838 008e 0025     	 movs r5,#0
 4839 0090 04E0     	 b .L459
 4840              	.LVL606:
 4841              	.L470:
 4842 0092 0025     	 movs r5,#0
 4843 0094 02E0     	 b .L459
 4844              	.LVL607:
 4845              	.L471:
 4846 0096 0025     	 movs r5,#0
 4847 0098 00E0     	 b .L459
 4848              	.LVL608:
 4849              	.L472:
 4850 009a 0025     	 movs r5,#0
 4851              	.LVL609:
 4852              	.L459:
1297:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1298:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1299:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1300:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1301:../CMSIS_RTOS_V2/cmsis_os2.c ****   return ((osMutexId_t)hMutex);
1302:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 4853              	 .loc 1 1302 0
 4854 009c 2846     	 mov r0,r5
 4855 009e 70BD     	 pop {r4,r5,r6,pc}
 4856              	.LVL610:
 4857              	.L477:
 4858              	 .align 2
 4859              	.L476:
 4860 00a0 00000000 	 .word .LANCHOR0
 4861              	 .cfi_endproc
 4862              	.LFE152:
 4864              	 .section .text.osMutexAcquire,"ax",%progbits
 4865              	 .align 2
 4866              	 .global osMutexAcquire
 4867              	 .thumb
 4868              	 .thumb_func
 4870              	osMutexAcquire:
 4871              	.LFB153:
1303:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1304:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 4872              	 .loc 1 1304 0
 4873              	 .cfi_startproc
 4874              	 
 4875              	 
 4876              	.LVL611:
1305:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hMutex;
1306:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1307:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rmtx;
1308:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1309:../CMSIS_RTOS_V2/cmsis_os2.c ****   hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 4877              	 .loc 1 1309 0
 4878 0000 20F00102 	 bic r2,r0,#1
 4879              	.LVL612:
1310:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1311:../CMSIS_RTOS_V2/cmsis_os2.c ****   rmtx = (uint32_t)mutex_id & 1U;
 4880              	 .loc 1 1311 0
 4881 0004 00F00103 	 and r3,r0,#1
 4882              	.LVL613:
 4883              	.LBB577:
 4884              	.LBB578:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4885              	 .loc 2 209 0
 4886              	
 4887 0008 EFF30580 	 MRS r0,ipsr
 4888              	
 4889              	.LVL614:
 4890              	 .thumb
 4891              	.LBE578:
 4892              	.LBE577:
1312:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1313:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osOK;
1314:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1315:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 4893              	 .loc 1 1315 0
 4894 000c 28BB     	 cbnz r0,.L483
 4895              	.LBB579:
 4896              	.LBB580:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 4897              	 .loc 2 386 0
 4898              	
 4899 000e EFF31080 	 MRS r0,primask
 4900              	
 4901              	.LVL615:
 4902              	 .thumb
 4903              	.LBE580:
 4904              	.LBE579:
 4905              	 .loc 1 1315 0
 4906 0012 10B9     	 cbnz r0,.L480
 4907              	.LBB581:
 4908              	.LBB582:
 4909              	 .loc 2 465 0
 4910              	
 4911 0014 EFF31180 	 MRS r0,basepri
 4912              	
 4913              	.LVL616:
 4914              	 .thumb
 4915              	.LBE582:
 4916              	.LBE581:
 4917              	 .loc 1 1315 0
 4918 0018 18B1     	 cbz r0,.L481
 4919              	.LVL617:
 4920              	.L480:
 4921              	 .loc 1 1315 0 is_stmt 0 discriminator 4
 4922 001a 1648     	 ldr r0,.L492
 4923 001c 0068     	 ldr r0,[r0]
 4924 001e 0228     	 cmp r0,#2
 4925 0020 1ED0     	 beq .L484
 4926              	.L481:
1316:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
1317:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1318:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hMutex == NULL) {
 4927              	 .loc 1 1318 0 is_stmt 1
 4928 0022 02B3     	 cbz r2,.L485
1304:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hMutex;
 4929              	 .loc 1 1304 0
 4930 0024 10B5     	 push {r4,lr}
 4931              	.LCFI76:
 4932              	 .cfi_def_cfa_offset 8
 4933              	 .cfi_offset 4,-8
 4934              	 .cfi_offset 14,-4
 4935 0026 0C46     	 mov r4,r1
1319:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
1320:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1321:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1322:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (rmtx != 0U) {
 4936              	 .loc 1 1322 0
 4937 0028 5BB1     	 cbz r3,.L482
1323:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 4938              	 .loc 1 1323 0
 4939 002a 1046     	 mov r0,r2
 4940 002c FFF7FEFF 	 bl xQueueTakeMutexRecursive
 4941              	.LVL618:
 4942 0030 0128     	 cmp r0,#1
 4943 0032 1BD0     	 beq .L486
1324:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (timeout != 0U) {
1325:../CMSIS_RTOS_V2/cmsis_os2.c ****           stat = osErrorTimeout;
1326:../CMSIS_RTOS_V2/cmsis_os2.c ****         } else {
1327:../CMSIS_RTOS_V2/cmsis_os2.c ****           stat = osErrorResource;
 4944              	 .loc 1 1327 0
 4945 0034 002C     	 cmp r4,#0
 4946 0036 14BF     	 ite ne
 4947 0038 6FF00100 	 mvnne r0,#1
 4948 003c 6FF00200 	 mvneq r0,#2
 4949 0040 10BD     	 pop {r4,pc}
 4950              	.LVL619:
 4951              	.L482:
1328:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1329:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1330:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1331:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1332:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 4952              	 .loc 1 1332 0
 4953 0042 1046     	 mov r0,r2
 4954 0044 FFF7FEFF 	 bl xQueueSemaphoreTake
 4955              	.LVL620:
 4956 0048 0128     	 cmp r0,#1
 4957 004a 11D0     	 beq .L488
1333:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (timeout != 0U) {
1334:../CMSIS_RTOS_V2/cmsis_os2.c ****           stat = osErrorTimeout;
1335:../CMSIS_RTOS_V2/cmsis_os2.c ****         } else {
1336:../CMSIS_RTOS_V2/cmsis_os2.c ****           stat = osErrorResource;
 4958              	 .loc 1 1336 0
 4959 004c 002C     	 cmp r4,#0
 4960 004e 14BF     	 ite ne
 4961 0050 6FF00100 	 mvnne r0,#1
 4962 0054 6FF00200 	 mvneq r0,#2
 4963 0058 10BD     	 pop {r4,pc}
 4964              	.LVL621:
 4965              	.L483:
 4966              	.LCFI77:
 4967              	 .cfi_def_cfa_offset 0
 4968              	 .cfi_restore 4
 4969              	 .cfi_restore 14
1316:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 4970              	 .loc 1 1316 0
 4971 005a 6FF00500 	 mvn r0,#5
 4972              	.LVL622:
1337:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1338:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1339:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1340:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1341:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1342:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1343:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 4973              	 .loc 1 1343 0
 4974 005e 7047     	 bx lr
 4975              	.LVL623:
 4976              	.L484:
1316:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 4977              	 .loc 1 1316 0
 4978 0060 6FF00500 	 mvn r0,#5
 4979 0064 7047     	 bx lr
 4980              	.L485:
1319:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 4981              	 .loc 1 1319 0
 4982 0066 6FF00300 	 mvn r0,#3
 4983 006a 7047     	 bx lr
 4984              	.LVL624:
 4985              	.L486:
 4986              	.LCFI78:
 4987              	 .cfi_def_cfa_offset 8
 4988              	 .cfi_offset 4,-8
 4989              	 .cfi_offset 14,-4
1313:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 4990              	 .loc 1 1313 0
 4991 006c 0020     	 movs r0,#0
 4992 006e 10BD     	 pop {r4,pc}
 4993              	.LVL625:
 4994              	.L488:
 4995 0070 0020     	 movs r0,#0
 4996              	.LVL626:
 4997              	 .loc 1 1343 0
 4998 0072 10BD     	 pop {r4,pc}
 4999              	.LVL627:
 5000              	.L493:
 5001              	 .align 2
 5002              	.L492:
 5003 0074 00000000 	 .word .LANCHOR0
 5004              	 .cfi_endproc
 5005              	.LFE153:
 5007              	 .section .text.osMutexRelease,"ax",%progbits
 5008              	 .align 2
 5009              	 .global osMutexRelease
 5010              	 .thumb
 5011              	 .thumb_func
 5013              	osMutexRelease:
 5014              	.LFB154:
1344:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1345:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 5015              	 .loc 1 1345 0
 5016              	 .cfi_startproc
 5017              	 
 5018              	 
 5019              	.LVL628:
 5020 0000 08B5     	 push {r3,lr}
 5021              	.LCFI79:
 5022              	 .cfi_def_cfa_offset 8
 5023              	 .cfi_offset 3,-8
 5024              	 .cfi_offset 14,-4
1346:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hMutex;
1347:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1348:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t rmtx;
1349:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1350:../CMSIS_RTOS_V2/cmsis_os2.c ****   hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 5025              	 .loc 1 1350 0
 5026 0002 20F00102 	 bic r2,r0,#1
 5027              	.LVL629:
1351:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1352:../CMSIS_RTOS_V2/cmsis_os2.c ****   rmtx = (uint32_t)mutex_id & 1U;
 5028              	 .loc 1 1352 0
 5029 0006 00F00103 	 and r3,r0,#1
 5030              	.LVL630:
 5031              	.LBB583:
 5032              	.LBB584:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5033              	 .loc 2 209 0
 5034              	
 5035 000a EFF30581 	 MRS r1,ipsr
 5036              	
 5037              	.LVL631:
 5038              	 .thumb
 5039              	.LBE584:
 5040              	.LBE583:
1353:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1354:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osOK;
1355:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1356:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 5041              	 .loc 1 1356 0
 5042 000e 01BB     	 cbnz r1,.L499
 5043              	.LBB585:
 5044              	.LBB586:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5045              	 .loc 2 386 0
 5046              	
 5047 0010 EFF31081 	 MRS r1,primask
 5048              	
 5049              	.LVL632:
 5050              	 .thumb
 5051              	.LBE586:
 5052              	.LBE585:
 5053              	 .loc 1 1356 0
 5054 0014 11B9     	 cbnz r1,.L496
 5055              	.LBB587:
 5056              	.LBB588:
 5057              	 .loc 2 465 0
 5058              	
 5059 0016 EFF31181 	 MRS r1,basepri
 5060              	
 5061              	.LVL633:
 5062              	 .thumb
 5063              	.LBE588:
 5064              	.LBE587:
 5065              	 .loc 1 1356 0
 5066 001a 19B1     	 cbz r1,.L497
 5067              	.LVL634:
 5068              	.L496:
 5069              	 .loc 1 1356 0 is_stmt 0 discriminator 4
 5070 001c 1149     	 ldr r1,.L505
 5071 001e 0968     	 ldr r1,[r1]
 5072 0020 0229     	 cmp r1,#2
 5073 0022 19D0     	 beq .L500
 5074              	.L497:
1357:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
1358:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1359:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hMutex == NULL) {
 5075              	 .loc 1 1359 0 is_stmt 1
 5076 0024 DAB1     	 cbz r2,.L501
1360:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
1361:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1362:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1363:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (rmtx != 0U) {
 5077              	 .loc 1 1363 0
 5078 0026 43B1     	 cbz r3,.L498
1364:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 5079              	 .loc 1 1364 0
 5080 0028 1046     	 mov r0,r2
 5081              	.LVL635:
 5082 002a FFF7FEFF 	 bl xQueueGiveMutexRecursive
 5083              	.LVL636:
1365:../CMSIS_RTOS_V2/cmsis_os2.c ****         stat = osErrorResource;
 5084              	 .loc 1 1365 0
 5085 002e 0128     	 cmp r0,#1
 5086 0030 0CBF     	 ite eq
 5087 0032 0020     	 moveq r0,#0
 5088 0034 6FF00200 	 mvnne r0,#2
 5089 0038 08BD     	 pop {r3,pc}
 5090              	.LVL637:
 5091              	.L498:
1366:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1367:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1368:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1369:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (xSemaphoreGive (hMutex) != pdPASS) {
 5092              	 .loc 1 1369 0
 5093 003a 1046     	 mov r0,r2
 5094              	.LVL638:
 5095 003c 0021     	 movs r1,#0
 5096 003e 0A46     	 mov r2,r1
 5097              	.LVL639:
 5098 0040 0B46     	 mov r3,r1
 5099              	.LVL640:
 5100 0042 FFF7FEFF 	 bl xQueueGenericSend
 5101              	.LVL641:
1370:../CMSIS_RTOS_V2/cmsis_os2.c ****         stat = osErrorResource;
 5102              	 .loc 1 1370 0
 5103 0046 0128     	 cmp r0,#1
 5104 0048 0CBF     	 ite eq
 5105 004a 0020     	 moveq r0,#0
 5106 004c 6FF00200 	 mvnne r0,#2
 5107 0050 08BD     	 pop {r3,pc}
 5108              	.LVL642:
 5109              	.L499:
1357:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 5110              	 .loc 1 1357 0
 5111 0052 6FF00500 	 mvn r0,#5
 5112              	.LVL643:
 5113 0056 08BD     	 pop {r3,pc}
 5114              	.LVL644:
 5115              	.L500:
 5116 0058 6FF00500 	 mvn r0,#5
 5117              	.LVL645:
 5118 005c 08BD     	 pop {r3,pc}
 5119              	.LVL646:
 5120              	.L501:
1360:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 5121              	 .loc 1 1360 0
 5122 005e 6FF00300 	 mvn r0,#3
 5123              	.LVL647:
1371:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1372:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1373:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1374:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1375:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1376:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 5124              	 .loc 1 1376 0
 5125 0062 08BD     	 pop {r3,pc}
 5126              	.LVL648:
 5127              	.L506:
 5128              	 .align 2
 5129              	.L505:
 5130 0064 00000000 	 .word .LANCHOR0
 5131              	 .cfi_endproc
 5132              	.LFE154:
 5134              	 .section .text.osMutexGetOwner,"ax",%progbits
 5135              	 .align 2
 5136              	 .global osMutexGetOwner
 5137              	 .thumb
 5138              	 .thumb_func
 5140              	osMutexGetOwner:
 5141              	.LFB155:
1377:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1378:../CMSIS_RTOS_V2/cmsis_os2.c **** osThreadId_t osMutexGetOwner (osMutexId_t mutex_id) {
 5142              	 .loc 1 1378 0
 5143              	 .cfi_startproc
 5144              	 
 5145              	 
 5146              	.LVL649:
 5147 0000 08B5     	 push {r3,lr}
 5148              	.LCFI80:
 5149              	 .cfi_def_cfa_offset 8
 5150              	 .cfi_offset 3,-8
 5151              	 .cfi_offset 14,-4
1379:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hMutex;
1380:../CMSIS_RTOS_V2/cmsis_os2.c ****   osThreadId_t owner;
1381:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1382:../CMSIS_RTOS_V2/cmsis_os2.c ****   hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 5152              	 .loc 1 1382 0
 5153 0002 20F00100 	 bic r0,r0,#1
 5154              	.LVL650:
 5155              	.LBB589:
 5156              	.LBB590:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5157              	 .loc 2 209 0
 5158              	
 5159 0006 EFF30583 	 MRS r3,ipsr
 5160              	
 5161              	.LVL651:
 5162              	 .thumb
 5163              	.LBE590:
 5164              	.LBE589:
1383:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1384:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ() || (hMutex == NULL)) {
 5165              	 .loc 1 1384 0
 5166 000a 6BB9     	 cbnz r3,.L511
 5167              	.LBB591:
 5168              	.LBB592:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5169              	 .loc 2 386 0
 5170              	
 5171 000c EFF31083 	 MRS r3,primask
 5172              	
 5173              	.LVL652:
 5174              	 .thumb
 5175              	.LBE592:
 5176              	.LBE591:
 5177              	 .loc 1 1384 0
 5178 0010 13B9     	 cbnz r3,.L509
 5179              	.LBB593:
 5180              	.LBB594:
 5181              	 .loc 2 465 0
 5182              	
 5183 0012 EFF31183 	 MRS r3,basepri
 5184              	
 5185              	.LVL653:
 5186              	 .thumb
 5187              	.LBE594:
 5188              	.LBE593:
 5189              	 .loc 1 1384 0
 5190 0016 1BB1     	 cbz r3,.L510
 5191              	.LVL654:
 5192              	.L509:
 5193              	 .loc 1 1384 0 is_stmt 0 discriminator 4
 5194 0018 064B     	 ldr r3,.L515
 5195 001a 1B68     	 ldr r3,[r3]
 5196 001c 022B     	 cmp r3,#2
 5197 001e 05D0     	 beq .L512
 5198              	.L510:
 5199              	 .loc 1 1384 0 discriminator 6
 5200 0020 30B1     	 cbz r0,.L513
1385:../CMSIS_RTOS_V2/cmsis_os2.c ****     owner = NULL;
1386:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
1387:../CMSIS_RTOS_V2/cmsis_os2.c ****     owner = (osThreadId_t)xSemaphoreGetMutexHolder (hMutex);
 5201              	 .loc 1 1387 0 is_stmt 1
 5202 0022 FFF7FEFF 	 bl xQueueGetMutexHolder
 5203              	.LVL655:
 5204 0026 08BD     	 pop {r3,pc}
 5205              	.LVL656:
 5206              	.L511:
1385:../CMSIS_RTOS_V2/cmsis_os2.c ****     owner = NULL;
 5207              	 .loc 1 1385 0
 5208 0028 0020     	 movs r0,#0
 5209              	.LVL657:
 5210 002a 08BD     	 pop {r3,pc}
 5211              	.LVL658:
 5212              	.L512:
 5213 002c 0020     	 movs r0,#0
 5214              	.LVL659:
 5215 002e 08BD     	 pop {r3,pc}
 5216              	.LVL660:
 5217              	.L513:
 5218 0030 0020     	 movs r0,#0
 5219              	.LVL661:
1388:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1389:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1390:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (owner);
1391:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 5220              	 .loc 1 1391 0
 5221 0032 08BD     	 pop {r3,pc}
 5222              	.L516:
 5223              	 .align 2
 5224              	.L515:
 5225 0034 00000000 	 .word .LANCHOR0
 5226              	 .cfi_endproc
 5227              	.LFE155:
 5229              	 .section .text.osMutexDelete,"ax",%progbits
 5230              	 .align 2
 5231              	 .global osMutexDelete
 5232              	 .thumb
 5233              	 .thumb_func
 5235              	osMutexDelete:
 5236              	.LFB156:
1392:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1393:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 5237              	 .loc 1 1393 0
 5238              	 .cfi_startproc
 5239              	 
 5240              	 
 5241              	.LVL662:
 5242 0000 10B5     	 push {r4,lr}
 5243              	.LCFI81:
 5244              	 .cfi_def_cfa_offset 8
 5245              	 .cfi_offset 4,-8
 5246              	 .cfi_offset 14,-4
1394:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1395:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef USE_FreeRTOS_HEAP_1
1396:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hMutex;
1397:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1398:../CMSIS_RTOS_V2/cmsis_os2.c ****   hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 5247              	 .loc 1 1398 0
 5248 0002 20F00104 	 bic r4,r0,#1
 5249              	.LVL663:
 5250              	.LBB595:
 5251              	.LBB596:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5252              	 .loc 2 209 0
 5253              	
 5254 0006 EFF30583 	 MRS r3,ipsr
 5255              	
 5256              	.LVL664:
 5257              	 .thumb
 5258              	.LBE596:
 5259              	.LBE595:
1399:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1400:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 5260              	 .loc 1 1400 0
 5261 000a 93B9     	 cbnz r3,.L521
 5262              	.LBB597:
 5263              	.LBB598:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5264              	 .loc 2 386 0
 5265              	
 5266 000c EFF31083 	 MRS r3,primask
 5267              	
 5268              	.LVL665:
 5269              	 .thumb
 5270              	.LBE598:
 5271              	.LBE597:
 5272              	 .loc 1 1400 0
 5273 0010 13B9     	 cbnz r3,.L519
 5274              	.LBB599:
 5275              	.LBB600:
 5276              	 .loc 2 465 0
 5277              	
 5278 0012 EFF31183 	 MRS r3,basepri
 5279              	
 5280              	.LVL666:
 5281              	 .thumb
 5282              	.LBE600:
 5283              	.LBE599:
 5284              	 .loc 1 1400 0
 5285 0016 1BB1     	 cbz r3,.L520
 5286              	.LVL667:
 5287              	.L519:
 5288              	 .loc 1 1400 0 is_stmt 0 discriminator 4
 5289 0018 0A4B     	 ldr r3,.L525
 5290 001a 1B68     	 ldr r3,[r3]
 5291 001c 022B     	 cmp r3,#2
 5292 001e 0BD0     	 beq .L522
 5293              	.L520:
1401:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
1402:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1403:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hMutex == NULL) {
 5294              	 .loc 1 1403 0 is_stmt 1
 5295 0020 6CB1     	 cbz r4,.L523
1404:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
1405:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1406:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1407:../CMSIS_RTOS_V2/cmsis_os2.c ****     #if (configQUEUE_REGISTRY_SIZE > 0)
1408:../CMSIS_RTOS_V2/cmsis_os2.c ****     vQueueUnregisterQueue (hMutex);
 5296              	 .loc 1 1408 0
 5297 0022 2046     	 mov r0,r4
 5298              	.LVL668:
 5299 0024 FFF7FEFF 	 bl vQueueUnregisterQueue
 5300              	.LVL669:
1409:../CMSIS_RTOS_V2/cmsis_os2.c ****     #endif
1410:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osOK;
1411:../CMSIS_RTOS_V2/cmsis_os2.c ****     vSemaphoreDelete (hMutex);
 5301              	 .loc 1 1411 0
 5302 0028 2046     	 mov r0,r4
 5303 002a FFF7FEFF 	 bl vQueueDelete
 5304              	.LVL670:
1410:../CMSIS_RTOS_V2/cmsis_os2.c ****     vSemaphoreDelete (hMutex);
 5305              	 .loc 1 1410 0
 5306 002e 0020     	 movs r0,#0
 5307 0030 10BD     	 pop {r4,pc}
 5308              	.LVL671:
 5309              	.L521:
1401:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 5310              	 .loc 1 1401 0
 5311 0032 6FF00500 	 mvn r0,#5
 5312              	.LVL672:
 5313 0036 10BD     	 pop {r4,pc}
 5314              	.LVL673:
 5315              	.L522:
 5316 0038 6FF00500 	 mvn r0,#5
 5317              	.LVL674:
 5318 003c 10BD     	 pop {r4,pc}
 5319              	.LVL675:
 5320              	.L523:
1404:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 5321              	 .loc 1 1404 0
 5322 003e 6FF00300 	 mvn r0,#3
 5323              	.LVL676:
1412:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1413:../CMSIS_RTOS_V2/cmsis_os2.c **** #else
1414:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osError;
1415:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
1416:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1417:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1418:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 5324              	 .loc 1 1418 0
 5325 0042 10BD     	 pop {r4,pc}
 5326              	.LVL677:
 5327              	.L526:
 5328              	 .align 2
 5329              	.L525:
 5330 0044 00000000 	 .word .LANCHOR0
 5331              	 .cfi_endproc
 5332              	.LFE156:
 5334              	 .section .text.osSemaphoreNew,"ax",%progbits
 5335              	 .align 2
 5336              	 .global osSemaphoreNew
 5337              	 .thumb
 5338              	 .thumb_func
 5340              	osSemaphoreNew:
 5341              	.LFB157:
1419:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1420:../CMSIS_RTOS_V2/cmsis_os2.c **** /*---------------------------------------------------------------------------*/
1421:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1422:../CMSIS_RTOS_V2/cmsis_os2.c **** osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t
 5342              	 .loc 1 1422 0
 5343              	 .cfi_startproc
 5344              	 
 5345              	 
 5346              	.LVL678:
 5347 0000 70B5     	 push {r4,r5,r6,lr}
 5348              	.LCFI82:
 5349              	 .cfi_def_cfa_offset 16
 5350              	 .cfi_offset 4,-16
 5351              	 .cfi_offset 5,-12
 5352              	 .cfi_offset 6,-8
 5353              	 .cfi_offset 14,-4
 5354              	.LVL679:
 5355              	.LBB601:
 5356              	.LBB602:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5357              	 .loc 2 209 0
 5358              	
 5359 0002 EFF30583 	 MRS r3,ipsr
 5360              	
 5361              	.LVL680:
 5362              	 .thumb
 5363              	.LBE602:
 5364              	.LBE601:
1423:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hSemaphore;
1424:../CMSIS_RTOS_V2/cmsis_os2.c ****   int32_t mem;
1425:../CMSIS_RTOS_V2/cmsis_os2.c ****   #if (configQUEUE_REGISTRY_SIZE > 0)
1426:../CMSIS_RTOS_V2/cmsis_os2.c ****   const char *name;
1427:../CMSIS_RTOS_V2/cmsis_os2.c ****   #endif
1428:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1429:../CMSIS_RTOS_V2/cmsis_os2.c ****   hSemaphore = NULL;
1430:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1431:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 5365              	 .loc 1 1431 0
 5366 0006 002B     	 cmp r3,#0
 5367 0008 4ED1     	 bne .L543
 5368              	.LBB603:
 5369              	.LBB604:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5370              	 .loc 2 386 0
 5371              	
 5372 000a EFF31083 	 MRS r3,primask
 5373              	
 5374              	.LVL681:
 5375              	 .thumb
 5376              	.LBE604:
 5377              	.LBE603:
 5378              	 .loc 1 1431 0
 5379 000e 13B9     	 cbnz r3,.L529
 5380              	.LBB605:
 5381              	.LBB606:
 5382              	 .loc 2 465 0
 5383              	
 5384 0010 EFF31183 	 MRS r3,basepri
 5385              	
 5386              	.LVL682:
 5387              	 .thumb
 5388              	.LBE606:
 5389              	.LBE605:
 5390              	 .loc 1 1431 0
 5391 0014 1BB1     	 cbz r3,.L530
 5392              	.LVL683:
 5393              	.L529:
 5394              	 .loc 1 1431 0 is_stmt 0 discriminator 5
 5395 0016 2D4B     	 ldr r3,.L553
 5396 0018 1B68     	 ldr r3,[r3]
 5397 001a 022B     	 cmp r3,#2
 5398 001c 46D0     	 beq .L544
 5399              	.L530:
 5400              	 .loc 1 1431 0 discriminator 6
 5401 001e 0028     	 cmp r0,#0
 5402 0020 46D0     	 beq .L545
 5403              	 .loc 1 1431 0 discriminator 7
 5404 0022 8842     	 cmp r0,r1
 5405 0024 46D3     	 bcc .L546
 5406              	.LVL684:
1432:../CMSIS_RTOS_V2/cmsis_os2.c ****     mem = -1;
1433:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1434:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (attr != NULL) {
 5407              	 .loc 1 1434 0 is_stmt 1
 5408 0026 002A     	 cmp r2,#0
 5409 0028 48D0     	 beq .L547
1435:../CMSIS_RTOS_V2/cmsis_os2.c ****       if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 5410              	 .loc 1 1435 0
 5411 002a 9368     	 ldr r3,[r2,#8]
 5412 002c 23B1     	 cbz r3,.L532
 5413              	 .loc 1 1435 0 is_stmt 0 discriminator 1
 5414 002e D368     	 ldr r3,[r2,#12]
 5415 0030 4F2B     	 cmp r3,#79
 5416 0032 45D8     	 bhi .L548
1429:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 5417              	 .loc 1 1429 0 is_stmt 1
 5418 0034 0026     	 movs r6,#0
 5419 0036 46E0     	 b .L551
 5420              	.L532:
1436:../CMSIS_RTOS_V2/cmsis_os2.c ****         mem = 1;
1437:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1438:../CMSIS_RTOS_V2/cmsis_os2.c ****       else {
1439:../CMSIS_RTOS_V2/cmsis_os2.c ****         if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 5421              	 .loc 1 1439 0 discriminator 1
 5422 0038 D468     	 ldr r4,[r2,#12]
 5423 003a 231C     	 adds r3,r4,#0
 5424 003c 18BF     	 it ne
 5425 003e 4FF0FF33 	 movne r3,#-1
 5426              	.LVL685:
1440:../CMSIS_RTOS_V2/cmsis_os2.c ****           mem = 0;
1441:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1442:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1443:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1444:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1445:../CMSIS_RTOS_V2/cmsis_os2.c ****       mem = 0;
1446:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1447:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1448:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (mem != -1) {
 5427              	 .loc 1 1448 0 discriminator 1
 5428 0042 CCBB     	 cbnz r4,.L549
 5429              	.LVL686:
 5430              	.L541:
 5431 0044 1446     	 mov r4,r2
 5432 0046 0D46     	 mov r5,r1
 5433              	.LVL687:
1449:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (max_count == 1U) {
 5434              	 .loc 1 1449 0
 5435 0048 0128     	 cmp r0,#1
 5436 004a 1AD1     	 bne .L533
1450:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (mem == 1) {
 5437              	 .loc 1 1450 0
 5438 004c 012B     	 cmp r3,#1
 5439 004e 04D1     	 bne .L534
 5440              	.LBB607:
1451:../CMSIS_RTOS_V2/cmsis_os2.c ****           hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 5441              	 .loc 1 1451 0
 5442 0050 9068     	 ldr r0,[r2,#8]
 5443              	.LVL688:
 5444 0052 FFF7FEFF 	 bl xSemaphoreCreateBinaryStatic
 5445              	.LVL689:
 5446 0056 0646     	 mov r6,r0
 5447              	.LVL690:
 5448              	.LBE607:
 5449 0058 05E0     	 b .L535
 5450              	.LVL691:
 5451              	.L534:
1452:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1453:../CMSIS_RTOS_V2/cmsis_os2.c ****         else {
1454:../CMSIS_RTOS_V2/cmsis_os2.c ****           hSemaphore = xSemaphoreCreateBinary();
 5452              	 .loc 1 1454 0
 5453 005a 0120     	 movs r0,#1
 5454              	.LVL692:
 5455 005c 0021     	 movs r1,#0
 5456              	.LVL693:
 5457 005e 0322     	 movs r2,#3
 5458              	.LVL694:
 5459 0060 FFF7FEFF 	 bl xQueueGenericCreate
 5460              	.LVL695:
 5461 0064 0646     	 mov r6,r0
 5462              	.LVL696:
 5463              	.L535:
1455:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1456:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1457:../CMSIS_RTOS_V2/cmsis_os2.c ****         if ((hSemaphore != NULL) && (initial_count != 0U)) {
 5464              	 .loc 1 1457 0
 5465 0066 6EB3     	 cbz r6,.L536
 5466              	 .loc 1 1457 0 is_stmt 0 discriminator 1
 5467 0068 B5B1     	 cbz r5,.L542
1458:../CMSIS_RTOS_V2/cmsis_os2.c ****           if (xSemaphoreGive (hSemaphore) != pdPASS) {
 5468              	 .loc 1 1458 0 is_stmt 1
 5469 006a 3046     	 mov r0,r6
 5470 006c 0021     	 movs r1,#0
 5471 006e 0A46     	 mov r2,r1
 5472 0070 0B46     	 mov r3,r1
 5473 0072 FFF7FEFF 	 bl xQueueGenericSend
 5474              	.LVL697:
 5475 0076 0128     	 cmp r0,#1
 5476 0078 0ED0     	 beq .L542
1459:../CMSIS_RTOS_V2/cmsis_os2.c ****             vSemaphoreDelete (hSemaphore);
 5477              	 .loc 1 1459 0
 5478 007a 3046     	 mov r0,r6
 5479 007c FFF7FEFF 	 bl vQueueDelete
 5480              	.LVL698:
 5481 0080 20E0     	 b .L536
 5482              	.LVL699:
 5483              	.L533:
1460:../CMSIS_RTOS_V2/cmsis_os2.c ****             hSemaphore = NULL;
1461:../CMSIS_RTOS_V2/cmsis_os2.c ****           }
1462:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1463:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1464:../CMSIS_RTOS_V2/cmsis_os2.c ****       else {
1465:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (mem == 1) {
 5484              	 .loc 1 1465 0
 5485 0082 012B     	 cmp r3,#1
 5486 0084 04D1     	 bne .L538
 5487              	.LBB608:
1466:../CMSIS_RTOS_V2/cmsis_os2.c ****           hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t
 5488              	 .loc 1 1466 0
 5489 0086 9268     	 ldr r2,[r2,#8]
 5490              	.LVL700:
 5491 0088 FFF7FEFF 	 bl xSemaphoreCreateCountingStatic
 5492              	.LVL701:
 5493 008c 0646     	 mov r6,r0
 5494              	.LVL702:
 5495              	.LBE608:
 5496 008e 02E0     	 b .L539
 5497              	.LVL703:
 5498              	.L538:
1467:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1468:../CMSIS_RTOS_V2/cmsis_os2.c ****         else {
1469:../CMSIS_RTOS_V2/cmsis_os2.c ****           hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 5499              	 .loc 1 1469 0
 5500 0090 FFF7FEFF 	 bl xQueueCreateCountingSemaphore
 5501              	.LVL704:
 5502 0094 0646     	 mov r6,r0
 5503              	.LVL705:
 5504              	.L539:
1470:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1471:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1472:../CMSIS_RTOS_V2/cmsis_os2.c ****       
1473:../CMSIS_RTOS_V2/cmsis_os2.c ****       #if (configQUEUE_REGISTRY_SIZE > 0)
1474:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (hSemaphore != NULL) {
 5505              	 .loc 1 1474 0
 5506 0096 B6B1     	 cbz r6,.L551
 5507              	.LVL706:
 5508              	.L542:
1475:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (attr != NULL) {
 5509              	 .loc 1 1475 0
 5510 0098 0CB1     	 cbz r4,.L550
1476:../CMSIS_RTOS_V2/cmsis_os2.c ****           name = attr->name;
 5511              	 .loc 1 1476 0
 5512 009a 2168     	 ldr r1,[r4]
 5513              	.LVL707:
 5514 009c 00E0     	 b .L540
 5515              	.LVL708:
 5516              	.L550:
1477:../CMSIS_RTOS_V2/cmsis_os2.c ****         } else {
1478:../CMSIS_RTOS_V2/cmsis_os2.c ****           name = NULL;
 5517              	 .loc 1 1478 0
 5518 009e 0021     	 movs r1,#0
 5519              	.L540:
 5520              	.LVL709:
1479:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1480:../CMSIS_RTOS_V2/cmsis_os2.c ****         vQueueAddToRegistry (hSemaphore, name);
 5521              	 .loc 1 1480 0
 5522 00a0 3046     	 mov r0,r6
 5523 00a2 FFF7FEFF 	 bl vQueueAddToRegistry
 5524              	.LVL710:
 5525 00a6 0EE0     	 b .L551
 5526              	.LVL711:
 5527              	.L543:
1429:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 5528              	 .loc 1 1429 0
 5529 00a8 0026     	 movs r6,#0
 5530 00aa 0CE0     	 b .L551
 5531              	.LVL712:
 5532              	.L544:
 5533 00ac 0026     	 movs r6,#0
 5534 00ae 0AE0     	 b .L551
 5535              	.L545:
 5536 00b0 0026     	 movs r6,#0
 5537 00b2 08E0     	 b .L551
 5538              	.L546:
 5539 00b4 0026     	 movs r6,#0
 5540 00b6 06E0     	 b .L551
 5541              	.LVL713:
 5542              	.L549:
 5543 00b8 0026     	 movs r6,#0
 5544 00ba 04E0     	 b .L551
 5545              	.LVL714:
 5546              	.L547:
1445:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 5547              	 .loc 1 1445 0
 5548 00bc 0023     	 movs r3,#0
 5549 00be C1E7     	 b .L541
 5550              	.L548:
1436:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
 5551              	 .loc 1 1436 0
 5552 00c0 0123     	 movs r3,#1
 5553              	.LVL715:
 5554 00c2 BFE7     	 b .L541
 5555              	.LVL716:
 5556              	.L536:
1429:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 5557              	 .loc 1 1429 0
 5558 00c4 0026     	 movs r6,#0
 5559              	.LVL717:
 5560              	.L551:
1481:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1482:../CMSIS_RTOS_V2/cmsis_os2.c ****       #endif
1483:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1484:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1485:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1486:../CMSIS_RTOS_V2/cmsis_os2.c ****   return ((osSemaphoreId_t)hSemaphore);
1487:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 5561              	 .loc 1 1487 0
 5562 00c6 3046     	 mov r0,r6
 5563 00c8 70BD     	 pop {r4,r5,r6,pc}
 5564              	.L554:
 5565 00ca 00BF     	 .align 2
 5566              	.L553:
 5567 00cc 00000000 	 .word .LANCHOR0
 5568              	 .cfi_endproc
 5569              	.LFE157:
 5571              	 .section .text.osSemaphoreAcquire,"ax",%progbits
 5572              	 .align 2
 5573              	 .global osSemaphoreAcquire
 5574              	 .thumb
 5575              	 .thumb_func
 5577              	osSemaphoreAcquire:
 5578              	.LFB158:
1488:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1489:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 5579              	 .loc 1 1489 0
 5580              	 .cfi_startproc
 5581              	 
 5582              	 
 5583              	.LVL718:
1490:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
1491:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1492:../CMSIS_RTOS_V2/cmsis_os2.c ****   BaseType_t yield;
1493:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1494:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osOK;
1495:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1496:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (hSemaphore == NULL) {
 5584              	 .loc 1 1496 0
 5585 0000 80B3     	 cbz r0,.L560
1489:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 5586              	 .loc 1 1489 0
 5587 0002 10B5     	 push {r4,lr}
 5588              	.LCFI83:
 5589              	 .cfi_def_cfa_offset 8
 5590              	 .cfi_offset 4,-8
 5591              	 .cfi_offset 14,-4
 5592 0004 82B0     	 sub sp,sp,#8
 5593              	.LCFI84:
 5594              	 .cfi_def_cfa_offset 16
 5595 0006 0C46     	 mov r4,r1
 5596              	.LBB609:
 5597              	.LBB610:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5598              	 .loc 2 209 0
 5599              	
 5600 0008 EFF30583 	 MRS r3,ipsr
 5601              	
 5602              	.LVL719:
 5603              	 .thumb
 5604              	.LBE610:
 5605              	.LBE609:
1497:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
1498:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1499:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (IS_IRQ()) {
 5606              	 .loc 1 1499 0
 5607 000c 4BB9     	 cbnz r3,.L557
 5608              	.LBB611:
 5609              	.LBB612:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5610              	 .loc 2 386 0
 5611              	
 5612 000e EFF31083 	 MRS r3,primask
 5613              	
 5614              	.LVL720:
 5615              	 .thumb
 5616              	.LBE612:
 5617              	.LBE611:
 5618              	 .loc 1 1499 0
 5619 0012 13B9     	 cbnz r3,.L558
 5620              	.LBB613:
 5621              	.LBB614:
 5622              	 .loc 2 465 0
 5623              	
 5624 0014 EFF31183 	 MRS r3,basepri
 5625              	
 5626              	.LVL721:
 5627              	 .thumb
 5628              	.LBE614:
 5629              	.LBE613:
 5630              	 .loc 1 1499 0
 5631 0018 C3B1     	 cbz r3,.L559
 5632              	.LVL722:
 5633              	.L558:
 5634              	 .loc 1 1499 0 is_stmt 0 discriminator 4
 5635 001a 194B     	 ldr r3,.L567
 5636 001c 1B68     	 ldr r3,[r3]
 5637 001e 022B     	 cmp r3,#2
 5638 0020 14D1     	 bne .L559
 5639              	.L557:
1500:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (timeout != 0U) {
 5640              	 .loc 1 1500 0 is_stmt 1
 5641 0022 14BB     	 cbnz r4,.L561
1501:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorParameter;
1502:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1503:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1504:../CMSIS_RTOS_V2/cmsis_os2.c ****       yield = pdFALSE;
 5642              	 .loc 1 1504 0
 5643 0024 0021     	 movs r1,#0
 5644              	.LVL723:
 5645 0026 02AA     	 add r2,sp,#8
 5646 0028 42F8041D 	 str r1,[r2,#-4]!
1505:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1506:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 5647              	 .loc 1 1506 0
 5648 002c FFF7FEFF 	 bl xQueueReceiveFromISR
 5649              	.LVL724:
 5650 0030 0128     	 cmp r0,#1
 5651 0032 1DD1     	 bne .L562
1507:../CMSIS_RTOS_V2/cmsis_os2.c ****         stat = osErrorResource;
1508:../CMSIS_RTOS_V2/cmsis_os2.c ****       } else {
1509:../CMSIS_RTOS_V2/cmsis_os2.c ****         portYIELD_FROM_ISR (yield);
 5652              	 .loc 1 1509 0
 5653 0034 019B     	 ldr r3,[sp,#4]
 5654 0036 F3B1     	 cbz r3,.L563
 5655              	 .loc 1 1509 0 is_stmt 0 discriminator 1
 5656 0038 4FF08052 	 mov r2,#268435456
 5657 003c 114B     	 ldr r3,.L567+4
 5658 003e 1A60     	 str r2,[r3]
 5659              	
 5660 0040 BFF34F8F 	 dsb
 5661              	
 5662              	
 5663 0044 BFF36F8F 	 isb
 5664              	
1494:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 5665              	 .loc 1 1494 0 is_stmt 1 discriminator 1
 5666              	 .thumb
 5667 0048 0020     	 movs r0,#0
 5668 004a 17E0     	 b .L556
 5669              	.LVL725:
 5670              	.L559:
1510:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1511:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1512:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1513:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1514:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 5671              	 .loc 1 1514 0
 5672 004c 2146     	 mov r1,r4
 5673              	.LVL726:
 5674 004e FFF7FEFF 	 bl xQueueSemaphoreTake
 5675              	.LVL727:
 5676 0052 0128     	 cmp r0,#1
 5677 0054 11D0     	 beq .L564
1515:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (timeout != 0U) {
1516:../CMSIS_RTOS_V2/cmsis_os2.c ****         stat = osErrorTimeout;
1517:../CMSIS_RTOS_V2/cmsis_os2.c ****       } else {
1518:../CMSIS_RTOS_V2/cmsis_os2.c ****         stat = osErrorResource;
 5678              	 .loc 1 1518 0
 5679 0056 002C     	 cmp r4,#0
 5680 0058 14BF     	 ite ne
 5681 005a 6FF00100 	 mvnne r0,#1
 5682 005e 6FF00200 	 mvneq r0,#2
 5683 0062 0BE0     	 b .L556
 5684              	.LVL728:
 5685              	.L560:
 5686              	.LCFI85:
 5687              	 .cfi_def_cfa_offset 0
 5688              	 .cfi_restore 4
 5689              	 .cfi_restore 14
1497:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 5690              	 .loc 1 1497 0
 5691 0064 6FF00300 	 mvn r0,#3
 5692              	.LVL729:
1519:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1520:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1521:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1522:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1523:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1524:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 5693              	 .loc 1 1524 0
 5694 0068 7047     	 bx lr
 5695              	.LVL730:
 5696              	.L561:
 5697              	.LCFI86:
 5698              	 .cfi_def_cfa_offset 16
 5699              	 .cfi_offset 4,-8
 5700              	 .cfi_offset 14,-4
1501:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 5701              	 .loc 1 1501 0
 5702 006a 6FF00300 	 mvn r0,#3
 5703              	.LVL731:
 5704 006e 05E0     	 b .L556
 5705              	.LVL732:
 5706              	.L562:
1507:../CMSIS_RTOS_V2/cmsis_os2.c ****       } else {
 5707              	 .loc 1 1507 0
 5708 0070 6FF00200 	 mvn r0,#2
 5709 0074 02E0     	 b .L556
 5710              	.L563:
1494:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 5711              	 .loc 1 1494 0
 5712 0076 0020     	 movs r0,#0
 5713 0078 00E0     	 b .L556
 5714              	.L564:
 5715 007a 0020     	 movs r0,#0
 5716              	.L556:
 5717              	.LVL733:
 5718              	 .loc 1 1524 0
 5719 007c 02B0     	 add sp,sp,#8
 5720              	.LCFI87:
 5721              	 .cfi_def_cfa_offset 8
 5722              	 
 5723 007e 10BD     	 pop {r4,pc}
 5724              	.LVL734:
 5725              	.L568:
 5726              	 .align 2
 5727              	.L567:
 5728 0080 00000000 	 .word .LANCHOR0
 5729 0084 04ED00E0 	 .word -536810236
 5730              	 .cfi_endproc
 5731              	.LFE158:
 5733              	 .section .text.osSemaphoreRelease,"ax",%progbits
 5734              	 .align 2
 5735              	 .global osSemaphoreRelease
 5736              	 .thumb
 5737              	 .thumb_func
 5739              	osSemaphoreRelease:
 5740              	.LFB159:
1525:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1526:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 5741              	 .loc 1 1526 0
 5742              	 .cfi_startproc
 5743              	 
 5744              	 
 5745              	.LVL735:
1527:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
1528:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1529:../CMSIS_RTOS_V2/cmsis_os2.c ****   BaseType_t yield;
1530:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1531:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osOK;
1532:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1533:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (hSemaphore == NULL) {
 5746              	 .loc 1 1533 0
 5747 0000 68B3     	 cbz r0,.L574
1526:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 5748              	 .loc 1 1526 0
 5749 0002 00B5     	 push {lr}
 5750              	.LCFI88:
 5751              	 .cfi_def_cfa_offset 4
 5752              	 .cfi_offset 14,-4
 5753 0004 83B0     	 sub sp,sp,#12
 5754              	.LCFI89:
 5755              	 .cfi_def_cfa_offset 16
 5756              	.LBB615:
 5757              	.LBB616:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5758              	 .loc 2 209 0
 5759              	
 5760 0006 EFF30583 	 MRS r3,ipsr
 5761              	
 5762              	.LVL736:
 5763              	 .thumb
 5764              	.LBE616:
 5765              	.LBE615:
1534:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
1535:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1536:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (IS_IRQ()) {
 5766              	 .loc 1 1536 0
 5767 000a 4BB9     	 cbnz r3,.L571
 5768              	.LBB617:
 5769              	.LBB618:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5770              	 .loc 2 386 0
 5771              	
 5772 000c EFF31083 	 MRS r3,primask
 5773              	
 5774              	.LVL737:
 5775              	 .thumb
 5776              	.LBE618:
 5777              	.LBE617:
 5778              	 .loc 1 1536 0
 5779 0010 13B9     	 cbnz r3,.L572
 5780              	.LBB619:
 5781              	.LBB620:
 5782              	 .loc 2 465 0
 5783              	
 5784 0012 EFF31183 	 MRS r3,basepri
 5785              	
 5786              	.LVL738:
 5787              	 .thumb
 5788              	.LBE620:
 5789              	.LBE619:
 5790              	 .loc 1 1536 0
 5791 0016 BBB1     	 cbz r3,.L573
 5792              	.LVL739:
 5793              	.L572:
 5794              	 .loc 1 1536 0 is_stmt 0 discriminator 4
 5795 0018 164B     	 ldr r3,.L579
 5796 001a 1B68     	 ldr r3,[r3]
 5797 001c 022B     	 cmp r3,#2
 5798 001e 13D1     	 bne .L573
 5799              	.L571:
1537:../CMSIS_RTOS_V2/cmsis_os2.c ****     yield = pdFALSE;
 5800              	 .loc 1 1537 0 is_stmt 1
 5801 0020 02A9     	 add r1,sp,#8
 5802 0022 0023     	 movs r3,#0
 5803 0024 41F8043D 	 str r3,[r1,#-4]!
1538:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1539:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 5804              	 .loc 1 1539 0
 5805 0028 FFF7FEFF 	 bl xQueueGiveFromISR
 5806              	.LVL740:
 5807 002c 0128     	 cmp r0,#1
 5808 002e 19D1     	 bne .L575
1540:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorResource;
1541:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
1542:../CMSIS_RTOS_V2/cmsis_os2.c ****       portYIELD_FROM_ISR (yield);
 5809              	 .loc 1 1542 0
 5810 0030 019B     	 ldr r3,[sp,#4]
 5811 0032 D3B1     	 cbz r3,.L576
 5812              	 .loc 1 1542 0 is_stmt 0 discriminator 1
 5813 0034 4FF08052 	 mov r2,#268435456
 5814 0038 0F4B     	 ldr r3,.L579+4
 5815 003a 1A60     	 str r2,[r3]
 5816              	
 5817 003c BFF34F8F 	 dsb
 5818              	
 5819              	
 5820 0040 BFF36F8F 	 isb
 5821              	
1531:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 5822              	 .loc 1 1531 0 is_stmt 1 discriminator 1
 5823              	 .thumb
 5824 0044 0020     	 movs r0,#0
 5825 0046 11E0     	 b .L570
 5826              	.LVL741:
 5827              	.L573:
1543:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1544:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1545:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1546:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (xSemaphoreGive (hSemaphore) != pdPASS) {
 5828              	 .loc 1 1546 0
 5829 0048 0021     	 movs r1,#0
 5830 004a 0A46     	 mov r2,r1
 5831 004c 0B46     	 mov r3,r1
 5832 004e FFF7FEFF 	 bl xQueueGenericSend
 5833              	.LVL742:
1547:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorResource;
 5834              	 .loc 1 1547 0
 5835 0052 0128     	 cmp r0,#1
 5836 0054 0CBF     	 ite eq
 5837 0056 0020     	 moveq r0,#0
 5838 0058 6FF00200 	 mvnne r0,#2
 5839 005c 06E0     	 b .L570
 5840              	.LVL743:
 5841              	.L574:
 5842              	.LCFI90:
 5843              	 .cfi_def_cfa_offset 0
 5844              	 .cfi_restore 14
1534:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 5845              	 .loc 1 1534 0
 5846 005e 6FF00300 	 mvn r0,#3
 5847              	.LVL744:
1548:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1549:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1550:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1551:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1552:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 5848              	 .loc 1 1552 0
 5849 0062 7047     	 bx lr
 5850              	.LVL745:
 5851              	.L575:
 5852              	.LCFI91:
 5853              	 .cfi_def_cfa_offset 16
 5854              	 .cfi_offset 14,-4
1540:../CMSIS_RTOS_V2/cmsis_os2.c ****     } else {
 5855              	 .loc 1 1540 0
 5856 0064 6FF00200 	 mvn r0,#2
 5857 0068 00E0     	 b .L570
 5858              	.L576:
1531:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 5859              	 .loc 1 1531 0
 5860 006a 0020     	 movs r0,#0
 5861              	.L570:
 5862              	.LVL746:
 5863              	 .loc 1 1552 0
 5864 006c 03B0     	 add sp,sp,#12
 5865              	.LCFI92:
 5866              	 .cfi_def_cfa_offset 4
 5867              	 
 5868 006e 5DF804FB 	 ldr pc,[sp],#4
 5869              	.L580:
 5870 0072 00BF     	 .align 2
 5871              	.L579:
 5872 0074 00000000 	 .word .LANCHOR0
 5873 0078 04ED00E0 	 .word -536810236
 5874              	 .cfi_endproc
 5875              	.LFE159:
 5877              	 .section .text.osSemaphoreGetCount,"ax",%progbits
 5878              	 .align 2
 5879              	 .global osSemaphoreGetCount
 5880              	 .thumb
 5881              	 .thumb_func
 5883              	osSemaphoreGetCount:
 5884              	.LFB160:
1553:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1554:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 5885              	 .loc 1 1554 0
 5886              	 .cfi_startproc
 5887              	 
 5888              	 
 5889              	.LVL747:
1555:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
1556:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t count;
1557:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1558:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (hSemaphore == NULL) {
 5890              	 .loc 1 1558 0
 5891 0000 98B1     	 cbz r0,.L586
1554:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 5892              	 .loc 1 1554 0
 5893 0002 08B5     	 push {r3,lr}
 5894              	.LCFI93:
 5895              	 .cfi_def_cfa_offset 8
 5896              	 .cfi_offset 3,-8
 5897              	 .cfi_offset 14,-4
 5898              	.LBB621:
 5899              	.LBB622:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5900              	 .loc 2 209 0
 5901              	
 5902 0004 EFF30583 	 MRS r3,ipsr
 5903              	
 5904              	.LVL748:
 5905              	 .thumb
 5906              	.LBE622:
 5907              	.LBE621:
1559:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
1560:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1561:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (IS_IRQ()) {
 5908              	 .loc 1 1561 0
 5909 0008 4BB9     	 cbnz r3,.L583
 5910              	.LBB623:
 5911              	.LBB624:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5912              	 .loc 2 386 0
 5913              	
 5914 000a EFF31083 	 MRS r3,primask
 5915              	
 5916              	.LVL749:
 5917              	 .thumb
 5918              	.LBE624:
 5919              	.LBE623:
 5920              	 .loc 1 1561 0
 5921 000e 13B9     	 cbnz r3,.L584
 5922              	.LBB625:
 5923              	.LBB626:
 5924              	 .loc 2 465 0
 5925              	
 5926 0010 EFF31183 	 MRS r3,basepri
 5927              	
 5928              	.LVL750:
 5929              	 .thumb
 5930              	.LBE626:
 5931              	.LBE625:
 5932              	 .loc 1 1561 0
 5933 0014 33B1     	 cbz r3,.L585
 5934              	.LVL751:
 5935              	.L584:
 5936              	 .loc 1 1561 0 is_stmt 0 discriminator 4
 5937 0016 064B     	 ldr r3,.L589
 5938 0018 1B68     	 ldr r3,[r3]
 5939 001a 022B     	 cmp r3,#2
 5940 001c 02D1     	 bne .L585
 5941              	.L583:
1562:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = uxQueueMessagesWaitingFromISR (hSemaphore);
 5942              	 .loc 1 1562 0 is_stmt 1
 5943 001e FFF7FEFF 	 bl uxQueueMessagesWaitingFromISR
 5944              	.LVL752:
 5945 0022 08BD     	 pop {r3,pc}
 5946              	.LVL753:
 5947              	.L585:
1563:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
1564:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 5948              	 .loc 1 1564 0
 5949 0024 FFF7FEFF 	 bl uxQueueMessagesWaiting
 5950              	.LVL754:
 5951 0028 08BD     	 pop {r3,pc}
 5952              	.LVL755:
 5953              	.L586:
 5954              	.LCFI94:
 5955              	 .cfi_def_cfa_offset 0
 5956              	 .cfi_restore 3
 5957              	 .cfi_restore 14
1559:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 5958              	 .loc 1 1559 0
 5959 002a 0020     	 movs r0,#0
 5960              	.LVL756:
 5961 002c 7047     	 bx lr
 5962              	.L590:
 5963 002e 00BF     	 .align 2
 5964              	.L589:
 5965 0030 00000000 	 .word .LANCHOR0
 5966              	 .cfi_endproc
 5967              	.LFE160:
 5969              	 .section .text.osSemaphoreDelete,"ax",%progbits
 5970              	 .align 2
 5971              	 .global osSemaphoreDelete
 5972              	 .thumb
 5973              	 .thumb_func
 5975              	osSemaphoreDelete:
 5976              	.LFB161:
1565:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1566:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1567:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (count);
1568:../CMSIS_RTOS_V2/cmsis_os2.c **** }
1569:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1570:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 5977              	 .loc 1 1570 0
 5978              	 .cfi_startproc
 5979              	 
 5980              	 
 5981              	.LVL757:
 5982              	.LBB627:
 5983              	.LBB628:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5984              	 .loc 2 209 0
 5985              	
 5986 0000 EFF30583 	 MRS r3,ipsr
 5987              	
 5988              	.LVL758:
 5989              	 .thumb
 5990              	.LBE628:
 5991              	.LBE627:
1571:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
1572:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1573:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1574:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef USE_FreeRTOS_HEAP_1
1575:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 5992              	 .loc 1 1575 0
 5993 0004 9BB9     	 cbnz r3,.L595
 5994              	.LBB629:
 5995              	.LBB630:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 5996              	 .loc 2 386 0
 5997              	
 5998 0006 EFF31083 	 MRS r3,primask
 5999              	
 6000              	.LVL759:
 6001              	 .thumb
 6002              	.LBE630:
 6003              	.LBE629:
 6004              	 .loc 1 1575 0
 6005 000a 13B9     	 cbnz r3,.L593
 6006              	.LBB631:
 6007              	.LBB632:
 6008              	 .loc 2 465 0
 6009              	
 6010 000c EFF31183 	 MRS r3,basepri
 6011              	
 6012              	.LVL760:
 6013              	 .thumb
 6014              	.LBE632:
 6015              	.LBE631:
 6016              	 .loc 1 1575 0
 6017 0010 1BB1     	 cbz r3,.L594
 6018              	.LVL761:
 6019              	.L593:
 6020              	 .loc 1 1575 0 is_stmt 0 discriminator 4
 6021 0012 0B4B     	 ldr r3,.L600
 6022 0014 1B68     	 ldr r3,[r3]
 6023 0016 022B     	 cmp r3,#2
 6024 0018 0CD0     	 beq .L596
 6025              	.L594:
1576:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
1577:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1578:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hSemaphore == NULL) {
 6026              	 .loc 1 1578 0 is_stmt 1
 6027 001a 70B1     	 cbz r0,.L597
1570:../CMSIS_RTOS_V2/cmsis_os2.c ****   SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 6028              	 .loc 1 1570 0
 6029 001c 10B5     	 push {r4,lr}
 6030              	.LCFI95:
 6031              	 .cfi_def_cfa_offset 8
 6032              	 .cfi_offset 4,-8
 6033              	 .cfi_offset 14,-4
 6034 001e 0446     	 mov r4,r0
1579:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
1580:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1581:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1582:../CMSIS_RTOS_V2/cmsis_os2.c ****     #if (configQUEUE_REGISTRY_SIZE > 0)
1583:../CMSIS_RTOS_V2/cmsis_os2.c ****     vQueueUnregisterQueue (hSemaphore);
 6035              	 .loc 1 1583 0
 6036 0020 FFF7FEFF 	 bl vQueueUnregisterQueue
 6037              	.LVL762:
1584:../CMSIS_RTOS_V2/cmsis_os2.c ****     #endif
1585:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1586:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osOK;
1587:../CMSIS_RTOS_V2/cmsis_os2.c ****     vSemaphoreDelete (hSemaphore);
 6038              	 .loc 1 1587 0
 6039 0024 2046     	 mov r0,r4
 6040 0026 FFF7FEFF 	 bl vQueueDelete
 6041              	.LVL763:
1586:../CMSIS_RTOS_V2/cmsis_os2.c ****     vSemaphoreDelete (hSemaphore);
 6042              	 .loc 1 1586 0
 6043 002a 0020     	 movs r0,#0
 6044 002c 10BD     	 pop {r4,pc}
 6045              	.LVL764:
 6046              	.L595:
 6047              	.LCFI96:
 6048              	 .cfi_def_cfa_offset 0
 6049              	 .cfi_restore 4
 6050              	 .cfi_restore 14
1576:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 6051              	 .loc 1 1576 0
 6052 002e 6FF00500 	 mvn r0,#5
 6053              	.LVL765:
 6054 0032 7047     	 bx lr
 6055              	.LVL766:
 6056              	.L596:
 6057 0034 6FF00500 	 mvn r0,#5
 6058              	.LVL767:
 6059 0038 7047     	 bx lr
 6060              	.LVL768:
 6061              	.L597:
1579:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 6062              	 .loc 1 1579 0
 6063 003a 6FF00300 	 mvn r0,#3
 6064              	.LVL769:
 6065 003e 7047     	 bx lr
 6066              	.L601:
 6067              	 .align 2
 6068              	.L600:
 6069 0040 00000000 	 .word .LANCHOR0
 6070              	 .cfi_endproc
 6071              	.LFE161:
 6073              	 .section .text.osMessageQueueNew,"ax",%progbits
 6074              	 .align 2
 6075              	 .global osMessageQueueNew
 6076              	 .thumb
 6077              	 .thumb_func
 6079              	osMessageQueueNew:
 6080              	.LFB162:
1588:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1589:../CMSIS_RTOS_V2/cmsis_os2.c **** #else
1590:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osError;
1591:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
1592:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1593:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1594:../CMSIS_RTOS_V2/cmsis_os2.c **** }
1595:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1596:../CMSIS_RTOS_V2/cmsis_os2.c **** /*---------------------------------------------------------------------------*/
1597:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1598:../CMSIS_RTOS_V2/cmsis_os2.c **** osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAt
 6081              	 .loc 1 1598 0
 6082              	 .cfi_startproc
 6083              	 
 6084              	 
 6085              	.LVL770:
 6086 0000 38B5     	 push {r3,r4,r5,lr}
 6087              	.LCFI97:
 6088              	 .cfi_def_cfa_offset 16
 6089              	 .cfi_offset 3,-16
 6090              	 .cfi_offset 4,-12
 6091              	 .cfi_offset 5,-8
 6092              	 .cfi_offset 14,-4
 6093              	.LVL771:
 6094              	.LBB633:
 6095              	.LBB634:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6096              	 .loc 2 209 0
 6097              	
 6098 0002 EFF30583 	 MRS r3,ipsr
 6099              	
 6100              	.LVL772:
 6101              	 .thumb
 6102              	.LBE634:
 6103              	.LBE633:
1599:../CMSIS_RTOS_V2/cmsis_os2.c ****   QueueHandle_t hQueue;
1600:../CMSIS_RTOS_V2/cmsis_os2.c ****   int32_t mem;
1601:../CMSIS_RTOS_V2/cmsis_os2.c ****   #if (configQUEUE_REGISTRY_SIZE > 0)
1602:../CMSIS_RTOS_V2/cmsis_os2.c ****   const char *name;
1603:../CMSIS_RTOS_V2/cmsis_os2.c ****   #endif
1604:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1605:../CMSIS_RTOS_V2/cmsis_os2.c ****   hQueue = NULL;
1606:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1607:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 6104              	 .loc 1 1607 0
 6105 0006 002B     	 cmp r3,#0
 6106 0008 39D1     	 bne .L612
 6107              	.LBB635:
 6108              	.LBB636:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6109              	 .loc 2 386 0
 6110              	
 6111 000a EFF31083 	 MRS r3,primask
 6112              	
 6113              	.LVL773:
 6114              	 .thumb
 6115              	.LBE636:
 6116              	.LBE635:
 6117              	 .loc 1 1607 0
 6118 000e 13B9     	 cbnz r3,.L604
 6119              	.LBB637:
 6120              	.LBB638:
 6121              	 .loc 2 465 0
 6122              	
 6123 0010 EFF31183 	 MRS r3,basepri
 6124              	
 6125              	.LVL774:
 6126              	 .thumb
 6127              	.LBE638:
 6128              	.LBE637:
 6129              	 .loc 1 1607 0
 6130 0014 1BB1     	 cbz r3,.L605
 6131              	.LVL775:
 6132              	.L604:
 6133              	 .loc 1 1607 0 is_stmt 0 discriminator 5
 6134 0016 234B     	 ldr r3,.L623
 6135 0018 1B68     	 ldr r3,[r3]
 6136 001a 022B     	 cmp r3,#2
 6137 001c 31D0     	 beq .L613
 6138              	.L605:
 6139              	 .loc 1 1607 0 discriminator 6
 6140 001e 90B3     	 cbz r0,.L614
 6141              	 .loc 1 1607 0 discriminator 7
 6142 0020 99B3     	 cbz r1,.L615
 6143 0022 1446     	 mov r4,r2
 6144              	.LVL776:
1608:../CMSIS_RTOS_V2/cmsis_os2.c ****     mem = -1;
1609:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1610:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (attr != NULL) {
 6145              	 .loc 1 1610 0 is_stmt 1
 6146 0024 F2B1     	 cbz r2,.L606
1611:../CMSIS_RTOS_V2/cmsis_os2.c ****       if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 6147              	 .loc 1 1611 0
 6148 0026 9368     	 ldr r3,[r2,#8]
 6149 0028 5BB1     	 cbz r3,.L607
 6150              	 .loc 1 1611 0 is_stmt 0 discriminator 1
 6151 002a D268     	 ldr r2,[r2,#12]
 6152              	.LVL777:
 6153 002c 4F2A     	 cmp r2,#79
 6154 002e 2ED9     	 bls .L616
 6155              	 .loc 1 1611 0 discriminator 2
 6156 0030 2269     	 ldr r2,[r4,#16]
 6157 0032 72B3     	 cbz r2,.L617
1612:../CMSIS_RTOS_V2/cmsis_os2.c ****           (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 6158              	 .loc 1 1612 0 is_stmt 1
 6159 0034 01FB00F2 	 mul r2,r1,r0
 6160 0038 6569     	 ldr r5,[r4,#20]
 6161 003a 9542     	 cmp r5,r2
 6162 003c 0CD2     	 bcs .L608
 6163 003e 0025     	 movs r5,#0
 6164 0040 2EE0     	 b .L603
 6165              	.LVL778:
 6166              	.L607:
1613:../CMSIS_RTOS_V2/cmsis_os2.c ****         mem = 1;
1614:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1615:../CMSIS_RTOS_V2/cmsis_os2.c ****       else {
1616:../CMSIS_RTOS_V2/cmsis_os2.c ****         if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 6167              	 .loc 1 1616 0 discriminator 1
 6168 0042 D368     	 ldr r3,[r2,#12]
 6169 0044 3BBB     	 cbnz r3,.L618
 6170              	 .loc 1 1616 0 is_stmt 0 discriminator 2
 6171 0046 1369     	 ldr r3,[r2,#16]
 6172 0048 3BBB     	 cbnz r3,.L619
1617:../CMSIS_RTOS_V2/cmsis_os2.c ****             (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 6173              	 .loc 1 1617 0 is_stmt 1
 6174 004a 5369     	 ldr r3,[r2,#20]
 6175 004c 0033     	 adds r3,r3,#0
 6176 004e 18BF     	 it ne
 6177 0050 0123     	 movne r3,#1
 6178 0052 5B42     	 negs r3,r3
 6179              	.LVL779:
1618:../CMSIS_RTOS_V2/cmsis_os2.c ****           mem = 0;
1619:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1620:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1621:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1622:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1623:../CMSIS_RTOS_V2/cmsis_os2.c ****       mem = 0;
1624:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1625:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1626:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (mem == 1) {
1627:../CMSIS_RTOS_V2/cmsis_os2.c ****       hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
1628:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1629:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1630:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (mem == 0) {
 6180              	 .loc 1 1630 0
 6181 0054 1BBB     	 cbnz r3,.L620
 6182 0056 05E0     	 b .L606
 6183              	.LVL780:
 6184              	.L608:
 6185              	.LBB639:
1627:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 6186              	 .loc 1 1627 0
 6187 0058 2269     	 ldr r2,[r4,#16]
 6188 005a FFF7FEFF 	 bl xQueueCreateStatic
 6189              	.LVL781:
 6190              	.LBE639:
1631:../CMSIS_RTOS_V2/cmsis_os2.c ****         hQueue = xQueueCreate (msg_count, msg_size);
1632:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1633:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1634:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1635:../CMSIS_RTOS_V2/cmsis_os2.c ****     #if (configQUEUE_REGISTRY_SIZE > 0)
1636:../CMSIS_RTOS_V2/cmsis_os2.c ****     if (hQueue != NULL) {
 6191              	 .loc 1 1636 0
 6192 005e 0546     	 mov r5,r0
 6193 0060 30B9     	 cbnz r0,.L610
 6194 0062 1DE0     	 b .L603
 6195              	.LVL782:
 6196              	.L606:
1631:../CMSIS_RTOS_V2/cmsis_os2.c ****         hQueue = xQueueCreate (msg_count, msg_size);
 6197              	 .loc 1 1631 0
 6198 0064 0022     	 movs r2,#0
 6199              	.LVL783:
 6200 0066 FFF7FEFF 	 bl xQueueGenericCreate
 6201              	.LVL784:
 6202              	 .loc 1 1636 0
 6203 006a 0546     	 mov r5,r0
 6204 006c C0B1     	 cbz r0,.L603
1637:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (attr != NULL) {
 6205              	 .loc 1 1637 0
 6206 006e 0CB1     	 cbz r4,.L621
 6207              	.L610:
1638:../CMSIS_RTOS_V2/cmsis_os2.c ****         name = attr->name;
 6208              	 .loc 1 1638 0
 6209 0070 2168     	 ldr r1,[r4]
 6210              	.LVL785:
 6211 0072 00E0     	 b .L611
 6212              	.LVL786:
 6213              	.L621:
1639:../CMSIS_RTOS_V2/cmsis_os2.c ****       } else {
1640:../CMSIS_RTOS_V2/cmsis_os2.c ****         name = NULL;
 6214              	 .loc 1 1640 0
 6215 0074 0021     	 movs r1,#0
 6216              	.L611:
 6217              	.LVL787:
1641:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1642:../CMSIS_RTOS_V2/cmsis_os2.c ****       vQueueAddToRegistry (hQueue, name);
 6218              	 .loc 1 1642 0
 6219 0076 2846     	 mov r0,r5
 6220              	.LVL788:
 6221 0078 FFF7FEFF 	 bl vQueueAddToRegistry
 6222              	.LVL789:
 6223 007c 10E0     	 b .L603
 6224              	.LVL790:
 6225              	.L612:
1605:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 6226              	 .loc 1 1605 0
 6227 007e 0025     	 movs r5,#0
 6228 0080 0EE0     	 b .L603
 6229              	.LVL791:
 6230              	.L613:
 6231 0082 0025     	 movs r5,#0
 6232 0084 0CE0     	 b .L603
 6233              	.L614:
 6234 0086 0025     	 movs r5,#0
 6235 0088 0AE0     	 b .L603
 6236              	.L615:
 6237 008a 0025     	 movs r5,#0
 6238 008c 08E0     	 b .L603
 6239              	.LVL792:
 6240              	.L616:
 6241 008e 0025     	 movs r5,#0
 6242 0090 06E0     	 b .L603
 6243              	.L617:
 6244 0092 0025     	 movs r5,#0
 6245 0094 04E0     	 b .L603
 6246              	.LVL793:
 6247              	.L618:
 6248 0096 0025     	 movs r5,#0
 6249 0098 02E0     	 b .L603
 6250              	.L619:
 6251 009a 0025     	 movs r5,#0
 6252 009c 00E0     	 b .L603
 6253              	.LVL794:
 6254              	.L620:
 6255 009e 0025     	 movs r5,#0
 6256              	.LVL795:
 6257              	.L603:
1643:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1644:../CMSIS_RTOS_V2/cmsis_os2.c ****     #endif
1645:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1646:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1647:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1648:../CMSIS_RTOS_V2/cmsis_os2.c ****   return ((osMessageQueueId_t)hQueue);
1649:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 6258              	 .loc 1 1649 0
 6259 00a0 2846     	 mov r0,r5
 6260 00a2 38BD     	 pop {r3,r4,r5,pc}
 6261              	.LVL796:
 6262              	.L624:
 6263              	 .align 2
 6264              	.L623:
 6265 00a4 00000000 	 .word .LANCHOR0
 6266              	 .cfi_endproc
 6267              	.LFE162:
 6269              	 .section .text.osMessageQueuePut,"ax",%progbits
 6270              	 .align 2
 6271              	 .global osMessageQueuePut
 6272              	 .thumb
 6273              	 .thumb_func
 6275              	osMessageQueuePut:
 6276              	.LFB163:
1650:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1651:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint
 6277              	 .loc 1 1651 0
 6278              	 .cfi_startproc
 6279              	 
 6280              	 
 6281              	.LVL797:
 6282 0000 10B5     	 push {r4,lr}
 6283              	.LCFI98:
 6284              	 .cfi_def_cfa_offset 8
 6285              	 .cfi_offset 4,-8
 6286              	 .cfi_offset 14,-4
 6287 0002 82B0     	 sub sp,sp,#8
 6288              	.LCFI99:
 6289              	 .cfi_def_cfa_offset 16
 6290 0004 1C46     	 mov r4,r3
 6291              	.LVL798:
 6292              	.LBB640:
 6293              	.LBB641:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6294              	 .loc 2 209 0
 6295              	
 6296 0006 EFF30583 	 MRS r3,ipsr
 6297              	
 6298              	.LVL799:
 6299              	 .thumb
 6300              	.LBE641:
 6301              	.LBE640:
1652:../CMSIS_RTOS_V2/cmsis_os2.c ****   QueueHandle_t hQueue = (QueueHandle_t)mq_id;
1653:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1654:../CMSIS_RTOS_V2/cmsis_os2.c ****   BaseType_t yield;
1655:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1656:../CMSIS_RTOS_V2/cmsis_os2.c ****   (void)msg_prio; /* Message priority is ignored */
1657:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1658:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osOK;
1659:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1660:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 6302              	 .loc 1 1660 0
 6303 000a 4BB9     	 cbnz r3,.L626
 6304              	.LBB642:
 6305              	.LBB643:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6306              	 .loc 2 386 0
 6307              	
 6308 000c EFF31083 	 MRS r3,primask
 6309              	
 6310              	.LVL800:
 6311              	 .thumb
 6312              	.LBE643:
 6313              	.LBE642:
 6314              	 .loc 1 1660 0
 6315 0010 13B9     	 cbnz r3,.L627
 6316              	.LBB644:
 6317              	.LBB645:
 6318              	 .loc 2 465 0
 6319              	
 6320 0012 EFF31183 	 MRS r3,basepri
 6321              	
 6322              	.LVL801:
 6323              	 .thumb
 6324              	.LBE645:
 6325              	.LBE644:
 6326              	 .loc 1 1660 0
 6327 0016 D3B1     	 cbz r3,.L628
 6328              	.LVL802:
 6329              	.L627:
 6330              	 .loc 1 1660 0 is_stmt 0 discriminator 4
 6331 0018 204B     	 ldr r3,.L640
 6332 001a 1B68     	 ldr r3,[r3]
 6333 001c 022B     	 cmp r3,#2
 6334 001e 16D1     	 bne .L628
 6335              	.L626:
1661:../CMSIS_RTOS_V2/cmsis_os2.c ****     if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 6336              	 .loc 1 1661 0 is_stmt 1
 6337 0020 20B3     	 cbz r0,.L630
 6338              	 .loc 1 1661 0 is_stmt 0 discriminator 1
 6339 0022 31B3     	 cbz r1,.L631
 6340              	 .loc 1 1661 0 discriminator 2
 6341 0024 44BB     	 cbnz r4,.L632
1662:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorParameter;
1663:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1664:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1665:../CMSIS_RTOS_V2/cmsis_os2.c ****       yield = pdFALSE;
 6342              	 .loc 1 1665 0 is_stmt 1
 6343 0026 0023     	 movs r3,#0
 6344 0028 02AA     	 add r2,sp,#8
 6345              	.LVL803:
 6346 002a 42F8043D 	 str r3,[r2,#-4]!
1666:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1667:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 6347              	 .loc 1 1667 0
 6348 002e FFF7FEFF 	 bl xQueueGenericSendFromISR
 6349              	.LVL804:
 6350 0032 0128     	 cmp r0,#1
 6351 0034 23D1     	 bne .L633
1668:../CMSIS_RTOS_V2/cmsis_os2.c ****         stat = osErrorResource;
1669:../CMSIS_RTOS_V2/cmsis_os2.c ****       } else {
1670:../CMSIS_RTOS_V2/cmsis_os2.c ****         portYIELD_FROM_ISR (yield);
 6352              	 .loc 1 1670 0
 6353 0036 019B     	 ldr r3,[sp,#4]
 6354 0038 23B3     	 cbz r3,.L634
 6355              	 .loc 1 1670 0 is_stmt 0 discriminator 1
 6356 003a 4FF08052 	 mov r2,#268435456
 6357 003e 184B     	 ldr r3,.L640+4
 6358 0040 1A60     	 str r2,[r3]
 6359              	
 6360 0042 BFF34F8F 	 dsb
 6361              	
 6362              	
 6363 0046 BFF36F8F 	 isb
 6364              	
1658:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 6365              	 .loc 1 1658 0 is_stmt 1 discriminator 1
 6366              	 .thumb
 6367 004a 0020     	 movs r0,#0
 6368 004c 23E0     	 b .L629
 6369              	.LVL805:
 6370              	.L628:
1671:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1672:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1673:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1674:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1675:../CMSIS_RTOS_V2/cmsis_os2.c ****     if ((hQueue == NULL) || (msg_ptr == NULL)) {
 6371              	 .loc 1 1675 0
 6372 004e D8B1     	 cbz r0,.L635
 6373              	 .loc 1 1675 0 is_stmt 0 discriminator 1
 6374 0050 E9B1     	 cbz r1,.L636
1676:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorParameter;
1677:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1678:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1679:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 6375              	 .loc 1 1679 0 is_stmt 1
 6376 0052 2246     	 mov r2,r4
 6377              	.LVL806:
 6378 0054 0023     	 movs r3,#0
 6379 0056 FFF7FEFF 	 bl xQueueGenericSend
 6380              	.LVL807:
 6381 005a 0128     	 cmp r0,#1
 6382 005c 1AD0     	 beq .L637
1680:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (timeout != 0U) {
1681:../CMSIS_RTOS_V2/cmsis_os2.c ****           stat = osErrorTimeout;
1682:../CMSIS_RTOS_V2/cmsis_os2.c ****         } else {
1683:../CMSIS_RTOS_V2/cmsis_os2.c ****           stat = osErrorResource;
 6383              	 .loc 1 1683 0
 6384 005e 002C     	 cmp r4,#0
 6385 0060 14BF     	 ite ne
 6386 0062 6FF00100 	 mvnne r0,#1
 6387 0066 6FF00200 	 mvneq r0,#2
 6388 006a 14E0     	 b .L629
 6389              	.LVL808:
 6390              	.L630:
1662:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 6391              	 .loc 1 1662 0
 6392 006c 6FF00300 	 mvn r0,#3
 6393              	.LVL809:
 6394 0070 11E0     	 b .L629
 6395              	.LVL810:
 6396              	.L631:
 6397 0072 6FF00300 	 mvn r0,#3
 6398              	.LVL811:
 6399 0076 0EE0     	 b .L629
 6400              	.LVL812:
 6401              	.L632:
 6402 0078 6FF00300 	 mvn r0,#3
 6403              	.LVL813:
 6404 007c 0BE0     	 b .L629
 6405              	.LVL814:
 6406              	.L633:
1668:../CMSIS_RTOS_V2/cmsis_os2.c ****       } else {
 6407              	 .loc 1 1668 0
 6408 007e 6FF00200 	 mvn r0,#2
 6409 0082 08E0     	 b .L629
 6410              	.L634:
1658:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 6411              	 .loc 1 1658 0
 6412 0084 0020     	 movs r0,#0
 6413 0086 06E0     	 b .L629
 6414              	.LVL815:
 6415              	.L635:
1676:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 6416              	 .loc 1 1676 0
 6417 0088 6FF00300 	 mvn r0,#3
 6418              	.LVL816:
 6419 008c 03E0     	 b .L629
 6420              	.LVL817:
 6421              	.L636:
 6422 008e 6FF00300 	 mvn r0,#3
 6423              	.LVL818:
 6424 0092 00E0     	 b .L629
 6425              	.LVL819:
 6426              	.L637:
1658:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 6427              	 .loc 1 1658 0
 6428 0094 0020     	 movs r0,#0
 6429              	.L629:
 6430              	.LVL820:
1684:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1685:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1686:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1687:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1688:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1689:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1690:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 6431              	 .loc 1 1690 0
 6432 0096 02B0     	 add sp,sp,#8
 6433              	.LCFI100:
 6434              	 .cfi_def_cfa_offset 8
 6435              	 
 6436 0098 10BD     	 pop {r4,pc}
 6437              	.LVL821:
 6438              	.L641:
 6439 009a 00BF     	 .align 2
 6440              	.L640:
 6441 009c 00000000 	 .word .LANCHOR0
 6442 00a0 04ED00E0 	 .word -536810236
 6443              	 .cfi_endproc
 6444              	.LFE163:
 6446              	 .section .text.osMessageQueueGet,"ax",%progbits
 6447              	 .align 2
 6448              	 .global osMessageQueueGet
 6449              	 .thumb
 6450              	 .thumb_func
 6452              	osMessageQueueGet:
 6453              	.LFB164:
1691:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1692:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t 
 6454              	 .loc 1 1692 0
 6455              	 .cfi_startproc
 6456              	 
 6457              	 
 6458              	.LVL822:
 6459 0000 10B5     	 push {r4,lr}
 6460              	.LCFI101:
 6461              	 .cfi_def_cfa_offset 8
 6462              	 .cfi_offset 4,-8
 6463              	 .cfi_offset 14,-4
 6464 0002 82B0     	 sub sp,sp,#8
 6465              	.LCFI102:
 6466              	 .cfi_def_cfa_offset 16
 6467 0004 1C46     	 mov r4,r3
 6468              	.LVL823:
 6469              	.LBB646:
 6470              	.LBB647:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6471              	 .loc 2 209 0
 6472              	
 6473 0006 EFF30583 	 MRS r3,ipsr
 6474              	
 6475              	.LVL824:
 6476              	 .thumb
 6477              	.LBE647:
 6478              	.LBE646:
1693:../CMSIS_RTOS_V2/cmsis_os2.c ****   QueueHandle_t hQueue = (QueueHandle_t)mq_id;
1694:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1695:../CMSIS_RTOS_V2/cmsis_os2.c ****   BaseType_t yield;
1696:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1697:../CMSIS_RTOS_V2/cmsis_os2.c ****   (void)msg_prio; /* Message priority is ignored */
1698:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1699:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osOK;
1700:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1701:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 6479              	 .loc 1 1701 0
 6480 000a 4BB9     	 cbnz r3,.L643
 6481              	.LBB648:
 6482              	.LBB649:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6483              	 .loc 2 386 0
 6484              	
 6485 000c EFF31083 	 MRS r3,primask
 6486              	
 6487              	.LVL825:
 6488              	 .thumb
 6489              	.LBE649:
 6490              	.LBE648:
 6491              	 .loc 1 1701 0
 6492 0010 13B9     	 cbnz r3,.L644
 6493              	.LBB650:
 6494              	.LBB651:
 6495              	 .loc 2 465 0
 6496              	
 6497 0012 EFF31183 	 MRS r3,basepri
 6498              	
 6499              	.LVL826:
 6500              	 .thumb
 6501              	.LBE651:
 6502              	.LBE650:
 6503              	 .loc 1 1701 0
 6504 0016 D3B1     	 cbz r3,.L645
 6505              	.LVL827:
 6506              	.L644:
 6507              	 .loc 1 1701 0 is_stmt 0 discriminator 4
 6508 0018 1F4B     	 ldr r3,.L657
 6509 001a 1B68     	 ldr r3,[r3]
 6510 001c 022B     	 cmp r3,#2
 6511 001e 16D1     	 bne .L645
 6512              	.L643:
1702:../CMSIS_RTOS_V2/cmsis_os2.c ****     if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 6513              	 .loc 1 1702 0 is_stmt 1
 6514 0020 18B3     	 cbz r0,.L647
 6515              	 .loc 1 1702 0 is_stmt 0 discriminator 1
 6516 0022 29B3     	 cbz r1,.L648
 6517              	 .loc 1 1702 0 discriminator 2
 6518 0024 3CBB     	 cbnz r4,.L649
1703:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorParameter;
1704:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1705:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1706:../CMSIS_RTOS_V2/cmsis_os2.c ****       yield = pdFALSE;
 6519              	 .loc 1 1706 0 is_stmt 1
 6520 0026 02AA     	 add r2,sp,#8
 6521              	.LVL828:
 6522 0028 0023     	 movs r3,#0
 6523 002a 42F8043D 	 str r3,[r2,#-4]!
1707:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1708:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 6524              	 .loc 1 1708 0
 6525 002e FFF7FEFF 	 bl xQueueReceiveFromISR
 6526              	.LVL829:
 6527 0032 0128     	 cmp r0,#1
 6528 0034 22D1     	 bne .L650
1709:../CMSIS_RTOS_V2/cmsis_os2.c ****         stat = osErrorResource;
1710:../CMSIS_RTOS_V2/cmsis_os2.c ****       } else {
1711:../CMSIS_RTOS_V2/cmsis_os2.c ****         portYIELD_FROM_ISR (yield);
 6529              	 .loc 1 1711 0
 6530 0036 019B     	 ldr r3,[sp,#4]
 6531 0038 1BB3     	 cbz r3,.L651
 6532              	 .loc 1 1711 0 is_stmt 0 discriminator 1
 6533 003a 4FF08052 	 mov r2,#268435456
 6534 003e 174B     	 ldr r3,.L657+4
 6535 0040 1A60     	 str r2,[r3]
 6536              	
 6537 0042 BFF34F8F 	 dsb
 6538              	
 6539              	
 6540 0046 BFF36F8F 	 isb
 6541              	
1699:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 6542              	 .loc 1 1699 0 is_stmt 1 discriminator 1
 6543              	 .thumb
 6544 004a 0020     	 movs r0,#0
 6545 004c 22E0     	 b .L646
 6546              	.LVL830:
 6547              	.L645:
1712:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1713:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1714:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1715:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1716:../CMSIS_RTOS_V2/cmsis_os2.c ****     if ((hQueue == NULL) || (msg_ptr == NULL)) {
 6548              	 .loc 1 1716 0
 6549 004e D0B1     	 cbz r0,.L652
 6550              	 .loc 1 1716 0 is_stmt 0 discriminator 1
 6551 0050 E1B1     	 cbz r1,.L653
1717:../CMSIS_RTOS_V2/cmsis_os2.c ****       stat = osErrorParameter;
1718:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1719:../CMSIS_RTOS_V2/cmsis_os2.c ****     else {
1720:../CMSIS_RTOS_V2/cmsis_os2.c ****       if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 6552              	 .loc 1 1720 0 is_stmt 1
 6553 0052 2246     	 mov r2,r4
 6554              	.LVL831:
 6555 0054 FFF7FEFF 	 bl xQueueReceive
 6556              	.LVL832:
 6557 0058 0128     	 cmp r0,#1
 6558 005a 1AD0     	 beq .L654
1721:../CMSIS_RTOS_V2/cmsis_os2.c ****         if (timeout != 0U) {
1722:../CMSIS_RTOS_V2/cmsis_os2.c ****           stat = osErrorTimeout;
1723:../CMSIS_RTOS_V2/cmsis_os2.c ****         } else {
1724:../CMSIS_RTOS_V2/cmsis_os2.c ****           stat = osErrorResource;
 6559              	 .loc 1 1724 0
 6560 005c 002C     	 cmp r4,#0
 6561 005e 14BF     	 ite ne
 6562 0060 6FF00100 	 mvnne r0,#1
 6563 0064 6FF00200 	 mvneq r0,#2
 6564 0068 14E0     	 b .L646
 6565              	.LVL833:
 6566              	.L647:
1703:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 6567              	 .loc 1 1703 0
 6568 006a 6FF00300 	 mvn r0,#3
 6569              	.LVL834:
 6570 006e 11E0     	 b .L646
 6571              	.LVL835:
 6572              	.L648:
 6573 0070 6FF00300 	 mvn r0,#3
 6574              	.LVL836:
 6575 0074 0EE0     	 b .L646
 6576              	.LVL837:
 6577              	.L649:
 6578 0076 6FF00300 	 mvn r0,#3
 6579              	.LVL838:
 6580 007a 0BE0     	 b .L646
 6581              	.LVL839:
 6582              	.L650:
1709:../CMSIS_RTOS_V2/cmsis_os2.c ****       } else {
 6583              	 .loc 1 1709 0
 6584 007c 6FF00200 	 mvn r0,#2
 6585 0080 08E0     	 b .L646
 6586              	.L651:
1699:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 6587              	 .loc 1 1699 0
 6588 0082 0020     	 movs r0,#0
 6589 0084 06E0     	 b .L646
 6590              	.LVL840:
 6591              	.L652:
1717:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
 6592              	 .loc 1 1717 0
 6593 0086 6FF00300 	 mvn r0,#3
 6594              	.LVL841:
 6595 008a 03E0     	 b .L646
 6596              	.LVL842:
 6597              	.L653:
 6598 008c 6FF00300 	 mvn r0,#3
 6599              	.LVL843:
 6600 0090 00E0     	 b .L646
 6601              	.LVL844:
 6602              	.L654:
1699:../CMSIS_RTOS_V2/cmsis_os2.c **** 
 6603              	 .loc 1 1699 0
 6604 0092 0020     	 movs r0,#0
 6605              	.L646:
 6606              	.LVL845:
1725:../CMSIS_RTOS_V2/cmsis_os2.c ****         }
1726:../CMSIS_RTOS_V2/cmsis_os2.c ****       }
1727:../CMSIS_RTOS_V2/cmsis_os2.c ****     }
1728:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1729:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1730:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1731:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 6607              	 .loc 1 1731 0
 6608 0094 02B0     	 add sp,sp,#8
 6609              	.LCFI103:
 6610              	 .cfi_def_cfa_offset 8
 6611              	 
 6612 0096 10BD     	 pop {r4,pc}
 6613              	.LVL846:
 6614              	.L658:
 6615              	 .align 2
 6616              	.L657:
 6617 0098 00000000 	 .word .LANCHOR0
 6618 009c 04ED00E0 	 .word -536810236
 6619              	 .cfi_endproc
 6620              	.LFE164:
 6622              	 .section .text.osMessageQueueGetCapacity,"ax",%progbits
 6623              	 .align 2
 6624              	 .global osMessageQueueGetCapacity
 6625              	 .thumb
 6626              	 .thumb_func
 6628              	osMessageQueueGetCapacity:
 6629              	.LFB165:
1732:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1733:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osMessageQueueGetCapacity (osMessageQueueId_t mq_id) {
 6630              	 .loc 1 1733 0
 6631              	 .cfi_startproc
 6632              	 
 6633              	 
 6634              	 
 6635              	.LVL847:
1734:../CMSIS_RTOS_V2/cmsis_os2.c ****   StaticQueue_t *mq = (StaticQueue_t *)mq_id;
1735:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t capacity;
1736:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1737:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (mq == NULL) {
 6636              	 .loc 1 1737 0
 6637 0000 08B1     	 cbz r0,.L661
1738:../CMSIS_RTOS_V2/cmsis_os2.c ****     capacity = 0U;
1739:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
1740:../CMSIS_RTOS_V2/cmsis_os2.c ****     /* capacity = pxQueue->uxLength */
1741:../CMSIS_RTOS_V2/cmsis_os2.c ****     capacity = mq->uxDummy4[1];
 6638              	 .loc 1 1741 0
 6639 0002 C06B     	 ldr r0,[r0,#60]
 6640              	.LVL848:
 6641 0004 7047     	 bx lr
 6642              	.LVL849:
 6643              	.L661:
1738:../CMSIS_RTOS_V2/cmsis_os2.c ****     capacity = 0U;
 6644              	 .loc 1 1738 0
 6645 0006 0020     	 movs r0,#0
 6646              	.LVL850:
1742:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1743:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1744:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (capacity);
1745:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 6647              	 .loc 1 1745 0
 6648 0008 7047     	 bx lr
 6649              	 .cfi_endproc
 6650              	.LFE165:
 6652 000a 00BF     	 .section .text.osMessageQueueGetMsgSize,"ax",%progbits
 6653              	 .align 2
 6654              	 .global osMessageQueueGetMsgSize
 6655              	 .thumb
 6656              	 .thumb_func
 6658              	osMessageQueueGetMsgSize:
 6659              	.LFB166:
1746:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1747:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id) {
 6660              	 .loc 1 1747 0
 6661              	 .cfi_startproc
 6662              	 
 6663              	 
 6664              	 
 6665              	.LVL851:
1748:../CMSIS_RTOS_V2/cmsis_os2.c ****   StaticQueue_t *mq = (StaticQueue_t *)mq_id;
1749:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t size;
1750:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1751:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (mq == NULL) {
 6666              	 .loc 1 1751 0
 6667 0000 08B1     	 cbz r0,.L664
1752:../CMSIS_RTOS_V2/cmsis_os2.c ****     size = 0U;
1753:../CMSIS_RTOS_V2/cmsis_os2.c ****   } else {
1754:../CMSIS_RTOS_V2/cmsis_os2.c ****     /* size = pxQueue->uxItemSize */
1755:../CMSIS_RTOS_V2/cmsis_os2.c ****     size = mq->uxDummy4[2];
 6668              	 .loc 1 1755 0
 6669 0002 006C     	 ldr r0,[r0,#64]
 6670              	.LVL852:
 6671 0004 7047     	 bx lr
 6672              	.LVL853:
 6673              	.L664:
1752:../CMSIS_RTOS_V2/cmsis_os2.c ****     size = 0U;
 6674              	 .loc 1 1752 0
 6675 0006 0020     	 movs r0,#0
 6676              	.LVL854:
1756:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1757:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1758:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (size);
1759:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 6677              	 .loc 1 1759 0
 6678 0008 7047     	 bx lr
 6679              	 .cfi_endproc
 6680              	.LFE166:
 6682 000a 00BF     	 .section .text.osMessageQueueGetCount,"ax",%progbits
 6683              	 .align 2
 6684              	 .global osMessageQueueGetCount
 6685              	 .thumb
 6686              	 .thumb_func
 6688              	osMessageQueueGetCount:
 6689              	.LFB167:
1760:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1761:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 6690              	 .loc 1 1761 0
 6691              	 .cfi_startproc
 6692              	 
 6693              	 
 6694              	.LVL855:
1762:../CMSIS_RTOS_V2/cmsis_os2.c ****   QueueHandle_t hQueue = (QueueHandle_t)mq_id;
1763:../CMSIS_RTOS_V2/cmsis_os2.c ****   UBaseType_t count;
1764:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1765:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (hQueue == NULL) {
 6695              	 .loc 1 1765 0
 6696 0000 98B1     	 cbz r0,.L670
1761:../CMSIS_RTOS_V2/cmsis_os2.c ****   QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 6697              	 .loc 1 1761 0
 6698 0002 08B5     	 push {r3,lr}
 6699              	.LCFI104:
 6700              	 .cfi_def_cfa_offset 8
 6701              	 .cfi_offset 3,-8
 6702              	 .cfi_offset 14,-4
 6703              	.LBB652:
 6704              	.LBB653:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6705              	 .loc 2 209 0
 6706              	
 6707 0004 EFF30583 	 MRS r3,ipsr
 6708              	
 6709              	.LVL856:
 6710              	 .thumb
 6711              	.LBE653:
 6712              	.LBE652:
1766:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = 0U;
1767:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1768:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (IS_IRQ()) {
 6713              	 .loc 1 1768 0
 6714 0008 4BB9     	 cbnz r3,.L667
 6715              	.LBB654:
 6716              	.LBB655:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6717              	 .loc 2 386 0
 6718              	
 6719 000a EFF31083 	 MRS r3,primask
 6720              	
 6721              	.LVL857:
 6722              	 .thumb
 6723              	.LBE655:
 6724              	.LBE654:
 6725              	 .loc 1 1768 0
 6726 000e 13B9     	 cbnz r3,.L668
 6727              	.LBB656:
 6728              	.LBB657:
 6729              	 .loc 2 465 0
 6730              	
 6731 0010 EFF31183 	 MRS r3,basepri
 6732              	
 6733              	.LVL858:
 6734              	 .thumb
 6735              	.LBE657:
 6736              	.LBE656:
 6737              	 .loc 1 1768 0
 6738 0014 33B1     	 cbz r3,.L669
 6739              	.LVL859:
 6740              	.L668:
 6741              	 .loc 1 1768 0 is_stmt 0 discriminator 4
 6742 0016 064B     	 ldr r3,.L673
 6743 0018 1B68     	 ldr r3,[r3]
 6744 001a 022B     	 cmp r3,#2
 6745 001c 02D1     	 bne .L669
 6746              	.L667:
1769:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = uxQueueMessagesWaitingFromISR (hQueue);
 6747              	 .loc 1 1769 0 is_stmt 1
 6748 001e FFF7FEFF 	 bl uxQueueMessagesWaitingFromISR
 6749              	.LVL860:
 6750 0022 08BD     	 pop {r3,pc}
 6751              	.LVL861:
 6752              	.L669:
1770:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1771:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1772:../CMSIS_RTOS_V2/cmsis_os2.c ****     count = uxQueueMessagesWaiting (hQueue);
 6753              	 .loc 1 1772 0
 6754 0024 FFF7FEFF 	 bl uxQueueMessagesWaiting
 6755              	.LVL862:
 6756 0028 08BD     	 pop {r3,pc}
 6757              	.LVL863:
 6758              	.L670:
 6759              	.LCFI105:
 6760              	 .cfi_def_cfa_offset 0
 6761              	 .cfi_restore 3
 6762              	 .cfi_restore 14
1766:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 6763              	 .loc 1 1766 0
 6764 002a 0020     	 movs r0,#0
 6765              	.LVL864:
 6766 002c 7047     	 bx lr
 6767              	.L674:
 6768 002e 00BF     	 .align 2
 6769              	.L673:
 6770 0030 00000000 	 .word .LANCHOR0
 6771              	 .cfi_endproc
 6772              	.LFE167:
 6774              	 .section .text.osMessageQueueGetSpace,"ax",%progbits
 6775              	 .align 2
 6776              	 .global osMessageQueueGetSpace
 6777              	 .thumb
 6778              	 .thumb_func
 6780              	osMessageQueueGetSpace:
 6781              	.LFB168:
1773:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1774:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1775:../CMSIS_RTOS_V2/cmsis_os2.c ****   return ((uint32_t)count);
1776:../CMSIS_RTOS_V2/cmsis_os2.c **** }
1777:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1778:../CMSIS_RTOS_V2/cmsis_os2.c **** uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 6782              	 .loc 1 1778 0
 6783              	 .cfi_startproc
 6784              	 
 6785              	 
 6786              	.LVL865:
1779:../CMSIS_RTOS_V2/cmsis_os2.c ****   StaticQueue_t *mq = (StaticQueue_t *)mq_id;
1780:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t space;
1781:../CMSIS_RTOS_V2/cmsis_os2.c ****   uint32_t isrm;
1782:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1783:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (mq == NULL) {
 6787              	 .loc 1 1783 0
 6788 0000 10B3     	 cbz r0,.L680
1778:../CMSIS_RTOS_V2/cmsis_os2.c ****   StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 6789              	 .loc 1 1778 0
 6790 0002 08B5     	 push {r3,lr}
 6791              	.LCFI106:
 6792              	 .cfi_def_cfa_offset 8
 6793              	 .cfi_offset 3,-8
 6794              	 .cfi_offset 14,-4
 6795 0004 0346     	 mov r3,r0
 6796              	.LBB658:
 6797              	.LBB659:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6798              	 .loc 2 209 0
 6799              	
 6800 0006 EFF30582 	 MRS r2,ipsr
 6801              	
 6802              	.LVL866:
 6803              	 .thumb
 6804              	.LBE659:
 6805              	.LBE658:
1784:../CMSIS_RTOS_V2/cmsis_os2.c ****     space = 0U;
1785:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1786:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (IS_IRQ()) {
 6806              	 .loc 1 1786 0
 6807 000a 4AB9     	 cbnz r2,.L677
 6808              	.LBB660:
 6809              	.LBB661:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6810              	 .loc 2 386 0
 6811              	
 6812 000c EFF31082 	 MRS r2,primask
 6813              	
 6814              	.LVL867:
 6815              	 .thumb
 6816              	.LBE661:
 6817              	.LBE660:
 6818              	 .loc 1 1786 0
 6819 0010 12B9     	 cbnz r2,.L678
 6820              	.LBB662:
 6821              	.LBB663:
 6822              	 .loc 2 465 0
 6823              	
 6824 0012 EFF31182 	 MRS r2,basepri
 6825              	
 6826              	.LVL868:
 6827              	 .thumb
 6828              	.LBE663:
 6829              	.LBE662:
 6830              	 .loc 1 1786 0
 6831 0016 9AB1     	 cbz r2,.L679
 6832              	.LVL869:
 6833              	.L678:
 6834              	 .loc 1 1786 0 is_stmt 0 discriminator 4
 6835 0018 0C4A     	 ldr r2,.L683
 6836 001a 1268     	 ldr r2,[r2]
 6837 001c 022A     	 cmp r2,#2
 6838 001e 0FD1     	 bne .L679
 6839              	.L677:
 6840              	.LBB664:
 6841              	.LBB665:
 6842              	 .file 3 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * FreeRTOS Kernel V10.4.1
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * subject to the following conditions:
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * copies or substantial portions of the Software.
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * https://www.FreeRTOS.org
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * https://github.com/FreeRTOS
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * 1 tab == 4 spaces!
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef PORTMACRO_H
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define PORTMACRO_H
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifdef __cplusplus
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         extern "C" {
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Port specific definitions.
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * given hardware and compiler.
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * These settings should not be altered.
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *-----------------------------------------------------------
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Type definitions. */
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portCHAR          char
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portFLOAT         float
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDOUBLE        double
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portLONG          long
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSHORT         short
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portBASE_TYPE     long
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef long             BaseType_t;
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         typedef uint16_t     TickType_t;
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #else
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         typedef uint32_t     TickType_t;
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * not need to be guarded with a critical section. */
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specifics. */
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Scheduler utilities. */
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portYIELD()                                 \
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {                                                   \
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****                                                         \
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Critical section management. */
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     extern void vPortEnterCritical( void );
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     extern void vPortExitCritical( void );
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * (which build with all the ports) will build. */
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Tickless idle/low power functionality. */
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specific optimisations. */
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Generic helper function. */
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             uint8_t ucReturn;
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             return ucReturn;
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Check the configuration. */
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #endif
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifdef configASSERT
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* portNOP() is not required by this port. */
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portNOP()
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #define portINLINE              __inline
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #ifndef portFORCE_INLINE
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     #endif
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         BaseType_t xReturn;
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             xReturn = pdFALSE;
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         else
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         {
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             xReturn = pdTRUE;
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         }
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         return xReturn;
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulNewBASEPRI;
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         (
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	mov %0, %1												\n"\
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	msr basepri, %0											\n"\
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	isb														\n"\
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	dsb														\n"\
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         );
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile
 6843              	 .loc 3 213 0 is_stmt 1
 6844              	
 6845 0020 EFF31181 	 mrs r1,basepri
 6846 0024 4FF01402 	 mov r2,#20
 6847 0028 82F31188 	 msr basepri,r2
 6848 002c BFF36F8F 	 isb 
 6849 0030 BFF34F8F 	 dsb 
 6850              	
 6851              	
 6852              	.LVL870:
 6853              	 .thumb
 6854              	.LBE665:
 6855              	.LBE664:
1787:../CMSIS_RTOS_V2/cmsis_os2.c ****     isrm = taskENTER_CRITICAL_FROM_ISR();
1788:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1789:../CMSIS_RTOS_V2/cmsis_os2.c ****     /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
1790:../CMSIS_RTOS_V2/cmsis_os2.c ****     space = mq->uxDummy4[1] - mq->uxDummy4[0];
 6856              	 .loc 1 1790 0
 6857 0034 DA6B     	 ldr r2,[r3,#60]
 6858 0036 986B     	 ldr r0,[r3,#56]
 6859              	.LVL871:
 6860 0038 101A     	 subs r0,r2,r0
 6861              	.LVL872:
 6862              	.LBB666:
 6863              	.LBB667:
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         (
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	mrs %0, basepri											\n"\
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	mov %1, %2												\n"\
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	msr basepri, %1											\n"\
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	isb														\n"\
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             "	dsb														\n"\
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         );
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****          * warnings. */
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         return ulOriginalBASEPRI;
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     }
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     {
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****         __asm volatile
 6864              	 .loc 3 231 0
 6865              	
 6866 003a 81F31188 	 msr basepri,r1
 6867              	
 6868              	 .thumb
 6869 003e 08BD     	 pop {r3,pc}
 6870              	.LVL873:
 6871              	.L679:
 6872 0040 1846     	 mov r0,r3
 6873              	.LVL874:
 6874              	.LBE667:
 6875              	.LBE666:
1791:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1792:../CMSIS_RTOS_V2/cmsis_os2.c ****     taskEXIT_CRITICAL_FROM_ISR(isrm);
1793:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1794:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1795:../CMSIS_RTOS_V2/cmsis_os2.c ****     space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 6876              	 .loc 1 1795 0
 6877 0042 FFF7FEFF 	 bl uxQueueSpacesAvailable
 6878              	.LVL875:
 6879 0046 08BD     	 pop {r3,pc}
 6880              	.LVL876:
 6881              	.L680:
 6882              	.LCFI107:
 6883              	 .cfi_def_cfa_offset 0
 6884              	 .cfi_restore 3
 6885              	 .cfi_restore 14
1784:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 6886              	 .loc 1 1784 0
 6887 0048 0020     	 movs r0,#0
 6888              	.LVL877:
 6889 004a 7047     	 bx lr
 6890              	.L684:
 6891              	 .align 2
 6892              	.L683:
 6893 004c 00000000 	 .word .LANCHOR0
 6894              	 .cfi_endproc
 6895              	.LFE168:
 6897              	 .section .text.osMessageQueueReset,"ax",%progbits
 6898              	 .align 2
 6899              	 .global osMessageQueueReset
 6900              	 .thumb
 6901              	 .thumb_func
 6903              	osMessageQueueReset:
 6904              	.LFB169:
1796:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1797:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1798:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (space);
1799:../CMSIS_RTOS_V2/cmsis_os2.c **** }
1800:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1801:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 6905              	 .loc 1 1801 0
 6906              	 .cfi_startproc
 6907              	 
 6908              	 
 6909              	.LVL878:
 6910 0000 08B5     	 push {r3,lr}
 6911              	.LCFI108:
 6912              	 .cfi_def_cfa_offset 8
 6913              	 .cfi_offset 3,-8
 6914              	 .cfi_offset 14,-4
 6915              	.LVL879:
 6916              	.LBB668:
 6917              	.LBB669:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6918              	 .loc 2 209 0
 6919              	
 6920 0002 EFF30583 	 MRS r3,ipsr
 6921              	
 6922              	.LVL880:
 6923              	 .thumb
 6924              	.LBE669:
 6925              	.LBE668:
1802:../CMSIS_RTOS_V2/cmsis_os2.c ****   QueueHandle_t hQueue = (QueueHandle_t)mq_id;
1803:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1804:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1805:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 6926              	 .loc 1 1805 0
 6927 0006 7BB9     	 cbnz r3,.L689
 6928              	.LBB670:
 6929              	.LBB671:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 6930              	 .loc 2 386 0
 6931              	
 6932 0008 EFF31083 	 MRS r3,primask
 6933              	
 6934              	.LVL881:
 6935              	 .thumb
 6936              	.LBE671:
 6937              	.LBE670:
 6938              	 .loc 1 1805 0
 6939 000c 13B9     	 cbnz r3,.L687
 6940              	.LBB672:
 6941              	.LBB673:
 6942              	 .loc 2 465 0
 6943              	
 6944 000e EFF31183 	 MRS r3,basepri
 6945              	
 6946              	.LVL882:
 6947              	 .thumb
 6948              	.LBE673:
 6949              	.LBE672:
 6950              	 .loc 1 1805 0
 6951 0012 1BB1     	 cbz r3,.L688
 6952              	.LVL883:
 6953              	.L687:
 6954              	 .loc 1 1805 0 is_stmt 0 discriminator 4
 6955 0014 094B     	 ldr r3,.L693
 6956 0016 1B68     	 ldr r3,[r3]
 6957 0018 022B     	 cmp r3,#2
 6958 001a 08D0     	 beq .L690
 6959              	.L688:
1806:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
1807:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1808:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hQueue == NULL) {
 6960              	 .loc 1 1808 0 is_stmt 1
 6961 001c 50B1     	 cbz r0,.L691
 6962              	.LVL884:
1809:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
1810:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1811:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1812:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osOK;
1813:../CMSIS_RTOS_V2/cmsis_os2.c ****     (void)xQueueReset (hQueue);
 6963              	 .loc 1 1813 0
 6964 001e 0021     	 movs r1,#0
 6965 0020 FFF7FEFF 	 bl xQueueGenericReset
 6966              	.LVL885:
1812:../CMSIS_RTOS_V2/cmsis_os2.c ****     (void)xQueueReset (hQueue);
 6967              	 .loc 1 1812 0
 6968 0024 0020     	 movs r0,#0
 6969 0026 08BD     	 pop {r3,pc}
 6970              	.LVL886:
 6971              	.L689:
1806:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
 6972              	 .loc 1 1806 0
 6973 0028 6FF00500 	 mvn r0,#5
 6974              	.LVL887:
 6975 002c 08BD     	 pop {r3,pc}
 6976              	.LVL888:
 6977              	.L690:
 6978 002e 6FF00500 	 mvn r0,#5
 6979              	.LVL889:
 6980 0032 08BD     	 pop {r3,pc}
 6981              	.LVL890:
 6982              	.L691:
1809:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
 6983              	 .loc 1 1809 0
 6984 0034 6FF00300 	 mvn r0,#3
 6985              	.LVL891:
1814:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1815:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1816:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1817:../CMSIS_RTOS_V2/cmsis_os2.c **** }
 6986              	 .loc 1 1817 0
 6987 0038 08BD     	 pop {r3,pc}
 6988              	.L694:
 6989 003a 00BF     	 .align 2
 6990              	.L693:
 6991 003c 00000000 	 .word .LANCHOR0
 6992              	 .cfi_endproc
 6993              	.LFE169:
 6995              	 .section .text.osMessageQueueDelete,"ax",%progbits
 6996              	 .align 2
 6997              	 .global osMessageQueueDelete
 6998              	 .thumb
 6999              	 .thumb_func
 7001              	osMessageQueueDelete:
 7002              	.LFB170:
1818:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1819:../CMSIS_RTOS_V2/cmsis_os2.c **** osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 7003              	 .loc 1 1819 0
 7004              	 .cfi_startproc
 7005              	 
 7006              	 
 7007              	.LVL892:
 7008              	.LBB674:
 7009              	.LBB675:
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 7010              	 .loc 2 209 0
 7011              	
 7012 0000 EFF30583 	 MRS r3,ipsr
 7013              	
 7014              	.LVL893:
 7015              	 .thumb
 7016              	.LBE675:
 7017              	.LBE674:
1820:../CMSIS_RTOS_V2/cmsis_os2.c ****   QueueHandle_t hQueue = (QueueHandle_t)mq_id;
1821:../CMSIS_RTOS_V2/cmsis_os2.c ****   osStatus_t stat;
1822:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1823:../CMSIS_RTOS_V2/cmsis_os2.c **** #ifndef USE_FreeRTOS_HEAP_1
1824:../CMSIS_RTOS_V2/cmsis_os2.c ****   if (IS_IRQ()) {
 7018              	 .loc 1 1824 0
 7019 0004 9BB9     	 cbnz r3,.L699
 7020              	.LBB676:
 7021              	.LBB677:
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 7022              	 .loc 2 386 0
 7023              	
 7024 0006 EFF31083 	 MRS r3,primask
 7025              	
 7026              	.LVL894:
 7027              	 .thumb
 7028              	.LBE677:
 7029              	.LBE676:
 7030              	 .loc 1 1824 0
 7031 000a 13B9     	 cbnz r3,.L697
 7032              	.LBB678:
 7033              	.LBB679:
 7034              	 .loc 2 465 0
 7035              	
 7036 000c EFF31183 	 MRS r3,basepri
 7037              	
 7038              	.LVL895:
 7039              	 .thumb
 7040              	.LBE679:
 7041              	.LBE678:
 7042              	 .loc 1 1824 0
 7043 0010 1BB1     	 cbz r3,.L698
 7044              	.LVL896:
 7045              	.L697:
 7046              	 .loc 1 1824 0 is_stmt 0 discriminator 4
 7047 0012 0B4B     	 ldr r3,.L704
 7048 0014 1B68     	 ldr r3,[r3]
 7049 0016 022B     	 cmp r3,#2
 7050 0018 0CD0     	 beq .L700
 7051              	.L698:
1825:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorISR;
1826:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1827:../CMSIS_RTOS_V2/cmsis_os2.c ****   else if (hQueue == NULL) {
 7052              	 .loc 1 1827 0 is_stmt 1
 7053 001a 70B1     	 cbz r0,.L701
1819:../CMSIS_RTOS_V2/cmsis_os2.c ****   QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 7054              	 .loc 1 1819 0
 7055 001c 10B5     	 push {r4,lr}
 7056              	.LCFI109:
 7057              	 .cfi_def_cfa_offset 8
 7058              	 .cfi_offset 4,-8
 7059              	 .cfi_offset 14,-4
 7060 001e 0446     	 mov r4,r0
1828:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osErrorParameter;
1829:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1830:../CMSIS_RTOS_V2/cmsis_os2.c ****   else {
1831:../CMSIS_RTOS_V2/cmsis_os2.c ****     #if (configQUEUE_REGISTRY_SIZE > 0)
1832:../CMSIS_RTOS_V2/cmsis_os2.c ****     vQueueUnregisterQueue (hQueue);
 7061              	 .loc 1 1832 0
 7062 0020 FFF7FEFF 	 bl vQueueUnregisterQueue
 7063              	.LVL897:
1833:../CMSIS_RTOS_V2/cmsis_os2.c ****     #endif
1834:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1835:../CMSIS_RTOS_V2/cmsis_os2.c ****     stat = osOK;
1836:../CMSIS_RTOS_V2/cmsis_os2.c ****     vQueueDelete (hQueue);
 7064              	 .loc 1 1836 0
 7065 0024 2046     	 mov r0,r4
 7066 0026 FFF7FEFF 	 bl vQueueDelete
 7067              	.LVL898:
1835:../CMSIS_RTOS_V2/cmsis_os2.c ****     vQueueDelete (hQueue);
 7068              	 .loc 1 1835 0
 7069 002a 0020     	 movs r0,#0
 7070 002c 10BD     	 pop {r4,pc}
 7071              	.LVL899:
 7072              	.L699:
 7073              	.LCFI110:
 7074              	 .cfi_def_cfa_offset 0
 7075              	 .cfi_restore 4
 7076              	 .cfi_restore 14
1825:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 7077              	 .loc 1 1825 0
 7078 002e 6FF00500 	 mvn r0,#5
 7079              	.LVL900:
 7080 0032 7047     	 bx lr
 7081              	.LVL901:
 7082              	.L700:
 7083 0034 6FF00500 	 mvn r0,#5
 7084              	.LVL902:
 7085 0038 7047     	 bx lr
 7086              	.LVL903:
 7087              	.L701:
1828:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
 7088              	 .loc 1 1828 0
 7089 003a 6FF00300 	 mvn r0,#3
 7090              	.LVL904:
 7091 003e 7047     	 bx lr
 7092              	.L705:
 7093              	 .align 2
 7094              	.L704:
 7095 0040 00000000 	 .word .LANCHOR0
 7096              	 .cfi_endproc
 7097              	.LFE170:
 7099              	 .section .text.vApplicationIdleHook,"ax",%progbits
 7100              	 .align 2
 7101              	 .weak vApplicationIdleHook
 7102              	 .thumb
 7103              	 .thumb_func
 7105              	vApplicationIdleHook:
 7106              	.LFB171:
1837:../CMSIS_RTOS_V2/cmsis_os2.c ****   }
1838:../CMSIS_RTOS_V2/cmsis_os2.c **** #else
1839:../CMSIS_RTOS_V2/cmsis_os2.c ****   stat = osError;
1840:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
1841:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1842:../CMSIS_RTOS_V2/cmsis_os2.c ****   return (stat);
1843:../CMSIS_RTOS_V2/cmsis_os2.c **** }
1844:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1845:../CMSIS_RTOS_V2/cmsis_os2.c **** /*---------------------------------------------------------------------------*/
1846:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1847:../CMSIS_RTOS_V2/cmsis_os2.c **** /* Callback function prototypes */
1848:../CMSIS_RTOS_V2/cmsis_os2.c **** extern void vApplicationIdleHook (void);
1849:../CMSIS_RTOS_V2/cmsis_os2.c **** extern void vApplicationTickHook (void);
1850:../CMSIS_RTOS_V2/cmsis_os2.c **** extern void vApplicationMallocFailedHook (void);
1851:../CMSIS_RTOS_V2/cmsis_os2.c **** extern void vApplicationDaemonTaskStartupHook (void);
1852:../CMSIS_RTOS_V2/cmsis_os2.c **** extern void vApplicationStackOverflowHook (TaskHandle_t xTask, char *pcTaskName);
1853:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1854:../CMSIS_RTOS_V2/cmsis_os2.c **** /**
1855:../CMSIS_RTOS_V2/cmsis_os2.c ****   Dummy implementation of the callback function vApplicationIdleHook().
1856:../CMSIS_RTOS_V2/cmsis_os2.c **** */
1857:../CMSIS_RTOS_V2/cmsis_os2.c **** #if (configUSE_IDLE_HOOK == 1)
1858:../CMSIS_RTOS_V2/cmsis_os2.c **** __WEAK void vApplicationIdleHook (void){}
 7107              	 .loc 1 1858 0
 7108              	 .cfi_startproc
 7109              	 
 7110              	 
 7111              	 
 7112 0000 7047     	 bx lr
 7113              	 .cfi_endproc
 7114              	.LFE171:
 7116 0002 00BF     	 .section .text.vApplicationMallocFailedHook,"ax",%progbits
 7117              	 .align 2
 7118              	 .weak vApplicationMallocFailedHook
 7119              	 .thumb
 7120              	 .thumb_func
 7122              	vApplicationMallocFailedHook:
 7123              	.LFB172:
1859:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
1860:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1861:../CMSIS_RTOS_V2/cmsis_os2.c **** /**
1862:../CMSIS_RTOS_V2/cmsis_os2.c ****   Dummy implementation of the callback function vApplicationTickHook().
1863:../CMSIS_RTOS_V2/cmsis_os2.c **** */
1864:../CMSIS_RTOS_V2/cmsis_os2.c **** #if (configUSE_TICK_HOOK == 1)
1865:../CMSIS_RTOS_V2/cmsis_os2.c ****  __WEAK void vApplicationTickHook (void){}
1866:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
1867:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1868:../CMSIS_RTOS_V2/cmsis_os2.c **** /**
1869:../CMSIS_RTOS_V2/cmsis_os2.c ****   Dummy implementation of the callback function vApplicationMallocFailedHook().
1870:../CMSIS_RTOS_V2/cmsis_os2.c **** */
1871:../CMSIS_RTOS_V2/cmsis_os2.c **** #if (configUSE_MALLOC_FAILED_HOOK == 1)
1872:../CMSIS_RTOS_V2/cmsis_os2.c **** __WEAK void vApplicationMallocFailedHook (void){}
 7124              	 .loc 1 1872 0
 7125              	 .cfi_startproc
 7126              	 
 7127              	 
 7128              	 
 7129 0000 7047     	 bx lr
 7130              	 .cfi_endproc
 7131              	.LFE172:
 7133 0002 00BF     	 .section .text.vApplicationStackOverflowHook,"ax",%progbits
 7134              	 .align 2
 7135              	 .weak vApplicationStackOverflowHook
 7136              	 .thumb
 7137              	 .thumb_func
 7139              	vApplicationStackOverflowHook:
 7140              	.LFB173:
1873:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
1874:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1875:../CMSIS_RTOS_V2/cmsis_os2.c **** /**
1876:../CMSIS_RTOS_V2/cmsis_os2.c ****   Dummy implementation of the callback function vApplicationDaemonTaskStartupHook().
1877:../CMSIS_RTOS_V2/cmsis_os2.c **** */
1878:../CMSIS_RTOS_V2/cmsis_os2.c **** #if (configUSE_DAEMON_TASK_STARTUP_HOOK == 1)
1879:../CMSIS_RTOS_V2/cmsis_os2.c **** __WEAK void vApplicationDaemonTaskStartupHook (void){}
1880:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
1881:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1882:../CMSIS_RTOS_V2/cmsis_os2.c **** /**
1883:../CMSIS_RTOS_V2/cmsis_os2.c ****   Dummy implementation of the callback function vApplicationStackOverflowHook().
1884:../CMSIS_RTOS_V2/cmsis_os2.c **** */
1885:../CMSIS_RTOS_V2/cmsis_os2.c **** #if (configCHECK_FOR_STACK_OVERFLOW > 0)
1886:../CMSIS_RTOS_V2/cmsis_os2.c **** __WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, char *pcTaskName) {
 7141              	 .loc 1 1886 0
 7142              	 .cfi_startproc
 7143              	 
 7144              	 
 7145              	 
 7146              	.LVL905:
 7147 0000 7047     	 bx lr
 7148              	 .cfi_endproc
 7149              	.LFE173:
 7151 0002 00BF     	 .section .text.vApplicationGetIdleTaskMemory,"ax",%progbits
 7152              	 .align 2
 7153              	 .global vApplicationGetIdleTaskMemory
 7154              	 .thumb
 7155              	 .thumb_func
 7157              	vApplicationGetIdleTaskMemory:
 7158              	.LFB174:
1887:../CMSIS_RTOS_V2/cmsis_os2.c ****   (void)xTask;
1888:../CMSIS_RTOS_V2/cmsis_os2.c ****   (void)pcTaskName;
1889:../CMSIS_RTOS_V2/cmsis_os2.c **** }
1890:../CMSIS_RTOS_V2/cmsis_os2.c **** #endif
1891:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1892:../CMSIS_RTOS_V2/cmsis_os2.c **** /*---------------------------------------------------------------------------*/
1893:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1894:../CMSIS_RTOS_V2/cmsis_os2.c **** /* External Idle and Timer task static memory allocation functions */
1895:../CMSIS_RTOS_V2/cmsis_os2.c **** extern void vApplicationGetIdleTaskMemory  (StaticTask_t **ppxIdleTaskTCBBuffer,  StackType_t **ppx
1896:../CMSIS_RTOS_V2/cmsis_os2.c **** extern void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppx
1897:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1898:../CMSIS_RTOS_V2/cmsis_os2.c **** /* Idle task control block and stack */
1899:../CMSIS_RTOS_V2/cmsis_os2.c **** static StaticTask_t Idle_TCB;
1900:../CMSIS_RTOS_V2/cmsis_os2.c **** static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];
1901:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1902:../CMSIS_RTOS_V2/cmsis_os2.c **** /* Timer task control block and stack */
1903:../CMSIS_RTOS_V2/cmsis_os2.c **** static StaticTask_t Timer_TCB;
1904:../CMSIS_RTOS_V2/cmsis_os2.c **** static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];
1905:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1906:../CMSIS_RTOS_V2/cmsis_os2.c **** /*
1907:../CMSIS_RTOS_V2/cmsis_os2.c ****   vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
1908:../CMSIS_RTOS_V2/cmsis_os2.c ****   equals to 1 and is required for static memory allocation support.
1909:../CMSIS_RTOS_V2/cmsis_os2.c **** */
1910:../CMSIS_RTOS_V2/cmsis_os2.c **** void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
 7159              	 .loc 1 1910 0
 7160              	 .cfi_startproc
 7161              	 
 7162              	 
 7163              	 
 7164              	.LVL906:
1911:../CMSIS_RTOS_V2/cmsis_os2.c ****   *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 7165              	 .loc 1 1911 0
 7166 0000 034B     	 ldr r3,.L710
 7167 0002 0360     	 str r3,[r0]
1912:../CMSIS_RTOS_V2/cmsis_os2.c ****   *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 7168              	 .loc 1 1912 0
 7169 0004 034B     	 ldr r3,.L710+4
 7170 0006 0B60     	 str r3,[r1]
1913:../CMSIS_RTOS_V2/cmsis_os2.c ****   *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 7171              	 .loc 1 1913 0
 7172 0008 7823     	 movs r3,#120
 7173 000a 1360     	 str r3,[r2]
 7174 000c 7047     	 bx lr
 7175              	.L711:
 7176 000e 00BF     	 .align 2
 7177              	.L710:
 7178 0010 00000000 	 .word .LANCHOR1
 7179 0014 00000000 	 .word .LANCHOR2
 7180              	 .cfi_endproc
 7181              	.LFE174:
 7183              	 .section .text.vApplicationGetTimerTaskMemory,"ax",%progbits
 7184              	 .align 2
 7185              	 .global vApplicationGetTimerTaskMemory
 7186              	 .thumb
 7187              	 .thumb_func
 7189              	vApplicationGetTimerTaskMemory:
 7190              	.LFB175:
1914:../CMSIS_RTOS_V2/cmsis_os2.c **** }
1915:../CMSIS_RTOS_V2/cmsis_os2.c **** 
1916:../CMSIS_RTOS_V2/cmsis_os2.c **** /*
1917:../CMSIS_RTOS_V2/cmsis_os2.c ****   vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
1918:../CMSIS_RTOS_V2/cmsis_os2.c ****   equals to 1 and is required for static memory allocation support.
1919:../CMSIS_RTOS_V2/cmsis_os2.c **** */
1920:../CMSIS_RTOS_V2/cmsis_os2.c **** void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTa
 7191              	 .loc 1 1920 0
 7192              	 .cfi_startproc
 7193              	 
 7194              	 
 7195              	 
 7196              	.LVL907:
1921:../CMSIS_RTOS_V2/cmsis_os2.c ****   *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 7197              	 .loc 1 1921 0
 7198 0000 034B     	 ldr r3,.L713
 7199 0002 0360     	 str r3,[r0]
1922:../CMSIS_RTOS_V2/cmsis_os2.c ****   *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 7200              	 .loc 1 1922 0
 7201 0004 034B     	 ldr r3,.L713+4
 7202 0006 0B60     	 str r3,[r1]
1923:../CMSIS_RTOS_V2/cmsis_os2.c ****   *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 7203              	 .loc 1 1923 0
 7204 0008 F023     	 movs r3,#240
 7205 000a 1360     	 str r3,[r2]
 7206 000c 7047     	 bx lr
 7207              	.L714:
 7208 000e 00BF     	 .align 2
 7209              	.L713:
 7210 0010 00000000 	 .word .LANCHOR3
 7211 0014 00000000 	 .word .LANCHOR4
 7212              	 .cfi_endproc
 7213              	.LFE175:
 7215              	 .section .bss.Idle_Stack,"aw",%nobits
 7216              	 .align 2
 7217              	 .set .LANCHOR2,.+0
 7220              	Idle_Stack:
 7221 0000 00000000 	 .space 480
 7221      00000000 
 7221      00000000 
 7221      00000000 
 7221      00000000 
 7222              	 .section .bss.Idle_TCB,"aw",%nobits
 7223              	 .align 2
 7224              	 .set .LANCHOR1,.+0
 7227              	Idle_TCB:
 7228 0000 00000000 	 .space 96
 7228      00000000 
 7228      00000000 
 7228      00000000 
 7228      00000000 
 7229              	 .section .rodata.str1.4,"aMS",%progbits,1
 7230              	 .align 2
 7231              	.LC0:
 7232 0000 46726565 	 .ascii "FreeRTOS V10.4.1\000"
 7232      52544F53 
 7232      20563130 
 7232      2E342E31 
 7232      00
 7233 0011 000000   	 .section .bss.Timer_Stack,"aw",%nobits
 7234              	 .align 2
 7235              	 .set .LANCHOR4,.+0
 7238              	Timer_Stack:
 7239 0000 00000000 	 .space 960
 7239      00000000 
 7239      00000000 
 7239      00000000 
 7239      00000000 
 7240              	 .section .bss.KernelState,"aw",%nobits
 7241              	 .align 2
 7242              	 .set .LANCHOR0,.+0
 7245              	KernelState:
 7246 0000 00000000 	 .space 4
 7247              	 .section .bss.Timer_TCB,"aw",%nobits
 7248              	 .align 2
 7249              	 .set .LANCHOR3,.+0
 7252              	Timer_TCB:
 7253 0000 00000000 	 .space 96
 7253      00000000 
 7253      00000000 
 7253      00000000 
 7253      00000000 
 7254              	 .text
 7255              	.Letext0:
 7256              	 .file 4 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 7257              	 .file 5 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 7258              	 .file 6 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 7259              	 .file 7 "../CMSIS_RTOS_V2/cmsis_os2.h"
 7260              	 .file 8 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/projdefs.h"
 7261              	 .file 9 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/FreeRTOS.h"
 7262              	 .file 10 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/task.h"
 7263              	 .file 11 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/timers.h"
 7264              	 .file 12 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/event_groups.h"
 7265              	 .file 13 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/queue.h"
 7266              	 .file 14 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/semphr.h"
 7267              	 .file 15 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/Source/include/portable.h"
 7268              	 .file 16 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/FreeRTOS/config/FreeRTOSConfig.h"
DEFINED SYMBOLS
                            *ABS*:00000000 cmsis_os2.c
    {standard input}:19     .text.TimerCallback:00000000 $t
    {standard input}:23     .text.TimerCallback:00000000 TimerCallback
    {standard input}:53     .text.osKernelInitialize:00000000 $t
    {standard input}:58     .text.osKernelInitialize:00000000 osKernelInitialize
    {standard input}:140    .text.osKernelInitialize:0000003c $d
    {standard input}:145    .text.osKernelGetInfo:00000000 $t
    {standard input}:150    .text.osKernelGetInfo:00000000 osKernelGetInfo
    {standard input}:195    .text.osKernelGetInfo:00000024 $d
    {standard input}:201    .text.osKernelGetState:00000000 $t
    {standard input}:206    .text.osKernelGetState:00000000 osKernelGetState
    {standard input}:246    .text.osKernelGetState:00000024 $d
    {standard input}:251    .text.osKernelStart:00000000 $t
    {standard input}:256    .text.osKernelStart:00000000 osKernelStart
    {standard input}:344    .text.osKernelStart:00000044 $d
    {standard input}:349    .text.osKernelLock:00000000 $t
    {standard input}:354    .text.osKernelLock:00000000 osKernelLock
    {standard input}:444    .text.osKernelLock:00000044 $d
    {standard input}:449    .text.osKernelUnlock:00000000 $t
    {standard input}:454    .text.osKernelUnlock:00000000 osKernelUnlock
    {standard input}:554    .text.osKernelUnlock:00000058 $d
    {standard input}:559    .text.osKernelRestoreLock:00000000 $t
    {standard input}:564    .text.osKernelRestoreLock:00000000 osKernelRestoreLock
    {standard input}:679    .text.osKernelRestoreLock:00000064 $d
    {standard input}:684    .text.osKernelGetTickCount:00000000 $t
    {standard input}:689    .text.osKernelGetTickCount:00000000 osKernelGetTickCount
    {standard input}:758    .text.osKernelGetTickCount:00000028 $d
    {standard input}:763    .text.osKernelGetTickFreq:00000000 $t
    {standard input}:768    .text.osKernelGetTickFreq:00000000 osKernelGetTickFreq
    {standard input}:782    .text.osKernelGetSysTimerCount:00000000 $t
    {standard input}:787    .text.osKernelGetSysTimerCount:00000000 osKernelGetSysTimerCount
    {standard input}:868    .text.osKernelGetSysTimerCount:00000034 $d
    {standard input}:874    .text.osKernelGetSysTimerFreq:00000000 $t
    {standard input}:879    .text.osKernelGetSysTimerFreq:00000000 osKernelGetSysTimerFreq
    {standard input}:893    .text.osKernelGetSysTimerFreq:00000008 $d
    {standard input}:898    .text.osThreadNew:00000000 $t
    {standard input}:903    .text.osThreadNew:00000000 osThreadNew
    {standard input}:1105   .text.osThreadNew:000000b8 $d
    {standard input}:1110   .text.osThreadGetName:00000000 $t
    {standard input}:1115   .text.osThreadGetName:00000000 osThreadGetName
    {standard input}:1198   .text.osThreadGetName:00000030 $d
    {standard input}:1203   .text.osThreadGetId:00000000 $t
    {standard input}:1208   .text.osThreadGetId:00000000 osThreadGetId
    {standard input}:1228   .text.osThreadGetState:00000000 $t
    {standard input}:1233   .text.osThreadGetState:00000000 osThreadGetState
    {standard input}:1299   .text.osThreadGetState:0000002a $d
    {standard input}:1349   .text.osThreadGetState:00000058 $d
    {standard input}:1354   .text.osThreadGetStackSpace:00000000 $t
    {standard input}:1359   .text.osThreadGetStackSpace:00000000 osThreadGetStackSpace
    {standard input}:1442   .text.osThreadGetStackSpace:00000030 $d
    {standard input}:1447   .text.osThreadSetPriority:00000000 $t
    {standard input}:1452   .text.osThreadSetPriority:00000000 osThreadSetPriority
    {standard input}:1548   .text.osThreadSetPriority:00000044 $d
    {standard input}:1553   .text.osThreadGetPriority:00000000 $t
    {standard input}:1558   .text.osThreadGetPriority:00000000 osThreadGetPriority
    {standard input}:1641   .text.osThreadGetPriority:00000038 $d
    {standard input}:1646   .text.osThreadYield:00000000 $t
    {standard input}:1651   .text.osThreadYield:00000000 osThreadYield
    {standard input}:1731   .text.osThreadYield:0000003c $d
    {standard input}:1737   .text.osThreadSuspend:00000000 $t
    {standard input}:1742   .text.osThreadSuspend:00000000 osThreadSuspend
    {standard input}:1829   .text.osThreadSuspend:00000038 $d
    {standard input}:1834   .text.osThreadResume:00000000 $t
    {standard input}:1839   .text.osThreadResume:00000000 osThreadResume
    {standard input}:1926   .text.osThreadResume:00000038 $d
    {standard input}:1931   .text.osThreadExit:00000000 $t
    {standard input}:1936   .text.osThreadExit:00000000 osThreadExit
    {standard input}:1959   .text.osThreadTerminate:00000000 $t
    {standard input}:1964   .text.osThreadTerminate:00000000 osThreadTerminate
    {standard input}:2077   .text.osThreadTerminate:0000004c $d
    {standard input}:2082   .text.osThreadGetCount:00000000 $t
    {standard input}:2087   .text.osThreadGetCount:00000000 osThreadGetCount
    {standard input}:2160   .text.osThreadGetCount:0000002c $d
    {standard input}:2165   .text.osThreadEnumerate:00000000 $t
    {standard input}:2170   .text.osThreadEnumerate:00000000 osThreadEnumerate
    {standard input}:2321   .text.osThreadEnumerate:00000084 $d
    {standard input}:2326   .text.osThreadFlagsSet:00000000 $t
    {standard input}:2331   .text.osThreadFlagsSet:00000000 osThreadFlagsSet
    {standard input}:2479   .text.osThreadFlagsSet:00000098 $d
    {standard input}:2485   .text.osThreadFlagsClear:00000000 $t
    {standard input}:2490   .text.osThreadFlagsClear:00000000 osThreadFlagsClear
    {standard input}:2619   .text.osThreadFlagsClear:00000078 $d
    {standard input}:2624   .text.osThreadFlagsGet:00000000 $t
    {standard input}:2629   .text.osThreadFlagsGet:00000000 osThreadFlagsGet
    {standard input}:2718   .text.osThreadFlagsGet:0000004c $d
    {standard input}:2723   .text.osThreadFlagsWait:00000000 $t
    {standard input}:2728   .text.osThreadFlagsWait:00000000 osThreadFlagsWait
    {standard input}:2927   .text.osThreadFlagsWait:000000cc $d
    {standard input}:2932   .text.osDelay:00000000 $t
    {standard input}:2937   .text.osDelay:00000000 osDelay
    {standard input}:3023   .text.osDelay:00000038 $d
    {standard input}:3028   .text.osDelayUntil:00000000 $t
    {standard input}:3033   .text.osDelayUntil:00000000 osDelayUntil
    {standard input}:3137   .text.osDelayUntil:0000004c $d
    {standard input}:3142   .text.osTimerNew:00000000 $t
    {standard input}:3147   .text.osTimerNew:00000000 osTimerNew
    {standard input}:3324   .text.osTimerNew:00000090 $d
    {standard input}:3330   .text.osTimerGetName:00000000 $t
    {standard input}:3335   .text.osTimerGetName:00000000 osTimerGetName
    {standard input}:3418   .text.osTimerGetName:00000030 $d
    {standard input}:3423   .text.osTimerStart:00000000 $t
    {standard input}:3428   .text.osTimerStart:00000000 osTimerStart
    {standard input}:3539   .text.osTimerStart:00000050 $d
    {standard input}:3544   .text.osTimerStop:00000000 $t
    {standard input}:3549   .text.osTimerStop:00000000 osTimerStop
    {standard input}:3671   .text.osTimerStop:0000005c $d
    {standard input}:3676   .text.osTimerIsRunning:00000000 $t
    {standard input}:3681   .text.osTimerIsRunning:00000000 osTimerIsRunning
    {standard input}:3764   .text.osTimerIsRunning:00000030 $d
    {standard input}:3769   .text.osTimerDelete:00000000 $t
    {standard input}:3774   .text.osTimerDelete:00000000 osTimerDelete
    {standard input}:3906   .text.osTimerDelete:00000060 $d
    {standard input}:3911   .text.osEventFlagsNew:00000000 $t
    {standard input}:3916   .text.osEventFlagsNew:00000000 osEventFlagsNew
    {standard input}:4036   .text.osEventFlagsNew:00000054 $d
    {standard input}:4041   .text.osEventFlagsSet:00000000 $t
    {standard input}:4046   .text.osEventFlagsSet:00000000 osEventFlagsSet
    {standard input}:4178   .text.osEventFlagsSet:00000074 $d
    {standard input}:4184   .text.osEventFlagsClear:00000000 $t
    {standard input}:4189   .text.osEventFlagsClear:00000000 osEventFlagsClear
    {standard input}:4302   .text.osEventFlagsClear:0000005c $d
    {standard input}:4307   .text.osEventFlagsGet:00000000 $t
    {standard input}:4312   .text.osEventFlagsGet:00000000 osEventFlagsGet
    {standard input}:4395   .text.osEventFlagsGet:00000030 $d
    {standard input}:4400   .text.osEventFlagsWait:00000000 $t
    {standard input}:4405   .text.osEventFlagsWait:00000000 osEventFlagsWait
    {standard input}:4559   .text.osEventFlagsWait:00000084 $d
    {standard input}:4564   .text.osEventFlagsDelete:00000000 $t
    {standard input}:4569   .text.osEventFlagsDelete:00000000 osEventFlagsDelete
    {standard input}:4656   .text.osEventFlagsDelete:00000038 $d
    {standard input}:4661   .text.osMutexNew:00000000 $t
    {standard input}:4666   .text.osMutexNew:00000000 osMutexNew
    {standard input}:4860   .text.osMutexNew:000000a0 $d
    {standard input}:4865   .text.osMutexAcquire:00000000 $t
    {standard input}:4870   .text.osMutexAcquire:00000000 osMutexAcquire
    {standard input}:5003   .text.osMutexAcquire:00000074 $d
    {standard input}:5008   .text.osMutexRelease:00000000 $t
    {standard input}:5013   .text.osMutexRelease:00000000 osMutexRelease
    {standard input}:5130   .text.osMutexRelease:00000064 $d
    {standard input}:5135   .text.osMutexGetOwner:00000000 $t
    {standard input}:5140   .text.osMutexGetOwner:00000000 osMutexGetOwner
    {standard input}:5225   .text.osMutexGetOwner:00000034 $d
    {standard input}:5230   .text.osMutexDelete:00000000 $t
    {standard input}:5235   .text.osMutexDelete:00000000 osMutexDelete
    {standard input}:5330   .text.osMutexDelete:00000044 $d
    {standard input}:5335   .text.osSemaphoreNew:00000000 $t
    {standard input}:5340   .text.osSemaphoreNew:00000000 osSemaphoreNew
    {standard input}:5567   .text.osSemaphoreNew:000000cc $d
    {standard input}:5572   .text.osSemaphoreAcquire:00000000 $t
    {standard input}:5577   .text.osSemaphoreAcquire:00000000 osSemaphoreAcquire
    {standard input}:5728   .text.osSemaphoreAcquire:00000080 $d
    {standard input}:5734   .text.osSemaphoreRelease:00000000 $t
    {standard input}:5739   .text.osSemaphoreRelease:00000000 osSemaphoreRelease
    {standard input}:5872   .text.osSemaphoreRelease:00000074 $d
    {standard input}:5878   .text.osSemaphoreGetCount:00000000 $t
    {standard input}:5883   .text.osSemaphoreGetCount:00000000 osSemaphoreGetCount
    {standard input}:5965   .text.osSemaphoreGetCount:00000030 $d
    {standard input}:5970   .text.osSemaphoreDelete:00000000 $t
    {standard input}:5975   .text.osSemaphoreDelete:00000000 osSemaphoreDelete
    {standard input}:6069   .text.osSemaphoreDelete:00000040 $d
    {standard input}:6074   .text.osMessageQueueNew:00000000 $t
    {standard input}:6079   .text.osMessageQueueNew:00000000 osMessageQueueNew
    {standard input}:6265   .text.osMessageQueueNew:000000a4 $d
    {standard input}:6270   .text.osMessageQueuePut:00000000 $t
    {standard input}:6275   .text.osMessageQueuePut:00000000 osMessageQueuePut
    {standard input}:6441   .text.osMessageQueuePut:0000009c $d
    {standard input}:6447   .text.osMessageQueueGet:00000000 $t
    {standard input}:6452   .text.osMessageQueueGet:00000000 osMessageQueueGet
    {standard input}:6617   .text.osMessageQueueGet:00000098 $d
    {standard input}:6623   .text.osMessageQueueGetCapacity:00000000 $t
    {standard input}:6628   .text.osMessageQueueGetCapacity:00000000 osMessageQueueGetCapacity
    {standard input}:6653   .text.osMessageQueueGetMsgSize:00000000 $t
    {standard input}:6658   .text.osMessageQueueGetMsgSize:00000000 osMessageQueueGetMsgSize
    {standard input}:6683   .text.osMessageQueueGetCount:00000000 $t
    {standard input}:6688   .text.osMessageQueueGetCount:00000000 osMessageQueueGetCount
    {standard input}:6770   .text.osMessageQueueGetCount:00000030 $d
    {standard input}:6775   .text.osMessageQueueGetSpace:00000000 $t
    {standard input}:6780   .text.osMessageQueueGetSpace:00000000 osMessageQueueGetSpace
    {standard input}:6893   .text.osMessageQueueGetSpace:0000004c $d
    {standard input}:6898   .text.osMessageQueueReset:00000000 $t
    {standard input}:6903   .text.osMessageQueueReset:00000000 osMessageQueueReset
    {standard input}:6991   .text.osMessageQueueReset:0000003c $d
    {standard input}:6996   .text.osMessageQueueDelete:00000000 $t
    {standard input}:7001   .text.osMessageQueueDelete:00000000 osMessageQueueDelete
    {standard input}:7095   .text.osMessageQueueDelete:00000040 $d
    {standard input}:7100   .text.vApplicationIdleHook:00000000 $t
    {standard input}:7105   .text.vApplicationIdleHook:00000000 vApplicationIdleHook
    {standard input}:7117   .text.vApplicationMallocFailedHook:00000000 $t
    {standard input}:7122   .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
    {standard input}:7134   .text.vApplicationStackOverflowHook:00000000 $t
    {standard input}:7139   .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
    {standard input}:7152   .text.vApplicationGetIdleTaskMemory:00000000 $t
    {standard input}:7157   .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
    {standard input}:7178   .text.vApplicationGetIdleTaskMemory:00000010 $d
    {standard input}:7184   .text.vApplicationGetTimerTaskMemory:00000000 $t
    {standard input}:7189   .text.vApplicationGetTimerTaskMemory:00000000 vApplicationGetTimerTaskMemory
    {standard input}:7210   .text.vApplicationGetTimerTaskMemory:00000010 $d
    {standard input}:7216   .bss.Idle_Stack:00000000 $d
    {standard input}:7220   .bss.Idle_Stack:00000000 Idle_Stack
    {standard input}:7223   .bss.Idle_TCB:00000000 $d
    {standard input}:7227   .bss.Idle_TCB:00000000 Idle_TCB
    {standard input}:7230   .rodata.str1.4:00000000 $d
    {standard input}:7234   .bss.Timer_Stack:00000000 $d
    {standard input}:7238   .bss.Timer_Stack:00000000 Timer_Stack
    {standard input}:7241   .bss.KernelState:00000000 $d
    {standard input}:7245   .bss.KernelState:00000000 KernelState
    {standard input}:7248   .bss.Timer_TCB:00000000 $d
    {standard input}:7252   .bss.Timer_TCB:00000000 Timer_TCB
                     .debug_frame:00000010 $d
    {standard input}:1304   .text.osThreadGetState:0000002f $d
    {standard input}:1304   .text.osThreadGetState:00000030 $t
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4002528de975c0fcce6c551c15d87b8c
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.cmsis_os2.h.26.bfdd852fbdfd57da4063d8c5a1fd5730
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.cmsis_os2.h.151.57db232dfe421e4f781dd02c42ee4360
                           .group:00000000 wm4.cmsis_gcc.h.26.ff740c08c75d3384f0503e1417eec189
                           .group:00000000 wm4.FreeRTOSConfig.h.30.aa43eb1cb33228d5c7e359a94d48589b
                           .group:00000000 wm4.projdefs.h.28.d6a7c9061b707820f2fcf4c2ff5d9f24
                           .group:00000000 wm4.portmacro.h.30.2ddc2eaf2e032c76c597fb78c4365041
                           .group:00000000 wm4.portable.h.63.e9cc508c3850f44ce542149380c67812
                           .group:00000000 wm4.mpu_wrappers.h.28.163fb40577cf8d1578015ea3f2ff4cdb
                           .group:00000000 wm4.FreeRTOS.h.67.9945f39eea4ddeb224c0782392206292
                           .group:00000000 wm4.list.h.57.02ec67e07eacffe5ca7cfb7326896236
                           .group:00000000 wm4.task.h.47.2d3fe49a094b8ec1e3e6aac441e8db21
                           .group:00000000 wm4.timers.h.55.5dc360ab39e4b575b2753deeda01a480
                           .group:00000000 wm4.queue.h.29.00d24a7c91ec95dd2ba2931e7e83fbc4
                           .group:00000000 wm4.semphr.h.38.96f44691bfa19eb833944d3a35b81e54

UNDEFINED SYMBOLS
pvTimerGetTimerID
memcpy
xTaskGetSchedulerState
vTaskStartScheduler
vTaskSuspendAll
xTaskResumeAll
xTaskGetTickCountFromISR
xTaskGetTickCount
SystemCoreClock
xTaskCreateStatic
xTaskCreate
pcTaskGetName
xTaskGetCurrentTaskHandle
eTaskGetState
uxTaskGetStackHighWaterMark
vTaskPrioritySet
uxTaskPriorityGet
vTaskSuspend
vTaskResume
vTaskDelete
uxTaskGetNumberOfTasks
pvPortMalloc
uxTaskGetSystemState
vPortFree
xTaskGenericNotifyFromISR
xTaskGenericNotify
xTaskGenericNotifyWait
vTaskDelay
vTaskDelayUntil
xTimerCreateStatic
xTimerCreate
pcTimerGetName
xTimerGenericCommand
xTimerIsTimerActive
xEventGroupCreateStatic
xEventGroupCreate
xEventGroupSetBitsFromISR
xEventGroupSetBits
xEventGroupGetBitsFromISR
xEventGroupClearBitsFromISR
xEventGroupClearBits
xEventGroupWaitBits
vEventGroupDelete
xSemaphoreCreateRecursiveMutexStatic
xSemaphoreCreateMutexStatic
xQueueCreateMutex
vQueueAddToRegistry
xQueueTakeMutexRecursive
xQueueSemaphoreTake
xQueueGiveMutexRecursive
xQueueGenericSend
xQueueGetMutexHolder
vQueueUnregisterQueue
vQueueDelete
xSemaphoreCreateBinaryStatic
xQueueGenericCreate
xSemaphoreCreateCountingStatic
xQueueCreateCountingSemaphore
xQueueReceiveFromISR
xQueueGiveFromISR
uxQueueMessagesWaitingFromISR
uxQueueMessagesWaiting
xQueueCreateStatic
xQueueGenericSendFromISR
xQueueReceive
uxQueueSpacesAvailable
xQueueGenericReset
