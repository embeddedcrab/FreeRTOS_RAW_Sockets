   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .eabi_attribute 28,1
   5              	 .fpu fpv4-sp-d16
   6              	 .eabi_attribute 23,1
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "dri_can_conf.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.CAN_ISR_Handler_Entry,"ax",%progbits
  19              	 .align 2
  20              	 .global CAN_ISR_Handler_Entry
  21              	 .thumb
  22              	 .thumb_func
  24              	CAN_ISR_Handler_Entry:
  25              	.LFB239:
  26              	 .file 1 "../Driver/CAN/cfg/src/dri_can_conf.c"
   1:../Driver/CAN/cfg/src/dri_can_conf.c **** /*****************************************************************************
   2:../Driver/CAN/cfg/src/dri_can_conf.c **** * Copyright (c) 2019 - Hemant Sharma - All Rights Reserved
   3:../Driver/CAN/cfg/src/dri_can_conf.c **** *
   4:../Driver/CAN/cfg/src/dri_can_conf.c **** * Feel free to use this Code at your own risk for your own purposes.
   5:../Driver/CAN/cfg/src/dri_can_conf.c **** *
   6:../Driver/CAN/cfg/src/dri_can_conf.c **** *******************************************************************************/
   7:../Driver/CAN/cfg/src/dri_can_conf.c **** /******************************************************************************
   8:../Driver/CAN/cfg/src/dri_can_conf.c **** * Title:		CAN Configuration Source
   9:../Driver/CAN/cfg/src/dri_can_conf.c **** * Filename:		dri_can_conf.c
  10:../Driver/CAN/cfg/src/dri_can_conf.c **** * Author:		HS
  11:../Driver/CAN/cfg/src/dri_can_conf.c **** * Origin Date:	02/23/2020
  12:../Driver/CAN/cfg/src/dri_can_conf.c **** * Version:		1.0.0
  13:../Driver/CAN/cfg/src/dri_can_conf.c **** * Notes:
  14:../Driver/CAN/cfg/src/dri_can_conf.c **** *
  15:../Driver/CAN/cfg/src/dri_can_conf.c **** * Change History
  16:../Driver/CAN/cfg/src/dri_can_conf.c **** * --------------
  17:../Driver/CAN/cfg/src/dri_can_conf.c **** *
  18:../Driver/CAN/cfg/src/dri_can_conf.c **** *******************************************************************************/
  19:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  20:../Driver/CAN/cfg/src/dri_can_conf.c **** /** @file:	dri_can_conf.c
  21:../Driver/CAN/cfg/src/dri_can_conf.c ****  *  @brief:	This source file contains configuration function definitions for CAN
  22:../Driver/CAN/cfg/src/dri_can_conf.c ****  */
  23:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  24:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  25:../Driver/CAN/cfg/src/dri_can_conf.c **** /******************************************************************************
  26:../Driver/CAN/cfg/src/dri_can_conf.c **** * Includes
  27:../Driver/CAN/cfg/src/dri_can_conf.c **** *******************************************************************************/
  28:../Driver/CAN/cfg/src/dri_can_conf.c **** #include <dri_can.h>
  29:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  30:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  31:../Driver/CAN/cfg/src/dri_can_conf.c **** /******************************************************************************
  32:../Driver/CAN/cfg/src/dri_can_conf.c **** * Preprocessor Constants
  33:../Driver/CAN/cfg/src/dri_can_conf.c **** *******************************************************************************/
  34:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  35:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  36:../Driver/CAN/cfg/src/dri_can_conf.c **** /******************************************************************************
  37:../Driver/CAN/cfg/src/dri_can_conf.c **** * Configuration Constants
  38:../Driver/CAN/cfg/src/dri_can_conf.c **** *******************************************************************************/
  39:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  40:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  41:../Driver/CAN/cfg/src/dri_can_conf.c **** /******************************************************************************
  42:../Driver/CAN/cfg/src/dri_can_conf.c **** * Macros
  43:../Driver/CAN/cfg/src/dri_can_conf.c **** *******************************************************************************/
  44:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  45:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  46:../Driver/CAN/cfg/src/dri_can_conf.c **** /******************************************************************************
  47:../Driver/CAN/cfg/src/dri_can_conf.c **** * Typedefs
  48:../Driver/CAN/cfg/src/dri_can_conf.c **** *******************************************************************************/
  49:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  50:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  51:../Driver/CAN/cfg/src/dri_can_conf.c **** /******************************************************************************
  52:../Driver/CAN/cfg/src/dri_can_conf.c **** * Private Function Declarations
  53:../Driver/CAN/cfg/src/dri_can_conf.c **** *******************************************************************************/
  54:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  55:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN_USING_INTERRUPT == 1U)
  56:../Driver/CAN/cfg/src/dri_can_conf.c **** void CAN_ISR_Handler_Entry( void * p_node, const eCAN_EventType event_type, const eCAN_Event event 
  57:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif
  58:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  59:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  60:../Driver/CAN/cfg/src/dri_can_conf.c **** /******************************************************************************
  61:../Driver/CAN/cfg/src/dri_can_conf.c **** * Variables
  62:../Driver/CAN/cfg/src/dri_can_conf.c **** *******************************************************************************/
  63:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  64:../Driver/CAN/cfg/src/dri_can_conf.c **** /*
  65:../Driver/CAN/cfg/src/dri_can_conf.c ****  * @brief	CAN API functions
  66:../Driver/CAN/cfg/src/dri_can_conf.c ****  *
  67:../Driver/CAN/cfg/src/dri_can_conf.c ****  * \par<b>Description:</b><br>
  68:../Driver/CAN/cfg/src/dri_can_conf.c ****  * 			This is data structure for CAN API functions to be used by Application
  69:../Driver/CAN/cfg/src/dri_can_conf.c ****  */
  70:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  71:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  72:../Driver/CAN/cfg/src/dri_can_conf.c **** /*****************************************************************************/
  73:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  74:../Driver/CAN/cfg/src/dri_can_conf.c **** /* Callback handler for user */
  75:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN_CALLBACK_HANDLER_USED == 1U)
  76:../Driver/CAN/cfg/src/dri_can_conf.c **** extern void CAN_callback_handler( void * p_channel, const eCAN_EventType event_type, const eCAN_Eve
  77:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif
  78:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  79:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  80:../Driver/CAN/cfg/src/dri_can_conf.c **** /** CAN Global Module Configuration **/
  81:../Driver/CAN/cfg/src/dri_can_conf.c **** static tStCAN_GlobalModuleConfiguartion CAN_GlobalConfiguration =
  82:../Driver/CAN/cfg/src/dri_can_conf.c **** {
  83:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_module_context = CAN,
  84:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.frequency = FCAN,
  85:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.clock_source = XMC_CAN_CANCLKSRC_FPERI
  86:../Driver/CAN/cfg/src/dri_can_conf.c **** };
  87:../Driver/CAN/cfg/src/dri_can_conf.c **** static tStCAN_Control CAN_GlobalControl;
  88:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  89:../Driver/CAN/cfg/src/dri_can_conf.c **** 
  90:../Driver/CAN/cfg/src/dri_can_conf.c **** /* CAN Node 0 Configurations */
  91:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN0_CHANNEL_USED == 1U)
  92:../Driver/CAN/cfg/src/dri_can_conf.c **** static XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t CAN0_BitConfiguration =
  93:../Driver/CAN/cfg/src/dri_can_conf.c **** {
  94:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_frequency = FCAN,
  95:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.baudrate = (500 * 1000),
  96:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sample_point = (80 * 100),
  97:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sjw = 2
  98:../Driver/CAN/cfg/src/dri_can_conf.c **** };
  99:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 100:../Driver/CAN/cfg/src/dri_can_conf.c **** static XMC_CAN_MO_t CAN0_MessageObject_Transmitter =
 101:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 102:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_ptr = CAN_MO0,
 103:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 104:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_ar */
 105:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_identifier = 0x1111,
 106:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS,
 107:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_priority = XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1,
 108:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 109:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_amr */
 110:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mask = 0x7FF,
 111:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_ide_mask = 1U,
 112:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 113:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data_length = 8,
 114:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[0] = 0,
 115:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[1] = 0,
 116:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 117:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_type = XMC_CAN_MO_TYPE_TRANSMSGOBJ
 118:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 119:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 120:../Driver/CAN/cfg/src/dri_can_conf.c **** static XMC_CAN_MO_t CAN0_MessageObject_Receiver =
 121:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 122:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_ptr = CAN_MO1,
 123:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 124:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_ar */
 125:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_identifier = 0x1111,
 126:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS,
 127:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_priority = XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1,
 128:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 129:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_amr */
 130:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mask = 0x7FF,
 131:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_ide_mask = 1U,
 132:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 133:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data_length = 8,
 134:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[0] = 0,
 135:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[1] = 0,
 136:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 137:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ
 138:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 139:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 140:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN_USING_INTERRUPT == 1U)
 141:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_InterruptConfiguartion CAN0_Interrupt_Configuration =
 142:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 143:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.irq = { .irq_num = CAN0_0_IRQn, .irq_priority = 0 },
 144:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sr = 0
 145:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 146:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_InterruptConfiguartion CAN0_MO_Interrupt_Configuration =
 147:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 148:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.irq = { .irq_num = CAN0_1_IRQn, .irq_priority = 0 },
 149:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sr = 1
 150:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 151:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN0_EVENTS_USED == 1U)
 152:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_InterruptConfiguartion CAN0_Event_Interrupt_Configuration =
 153:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 154:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.irq = { .irq_num = CAN0_4_IRQn, .irq_priority = 0 },
 155:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sr = 4
 156:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 157:../Driver/CAN/cfg/src/dri_can_conf.c **** XMC_CAN_NODE_EVENT_t CAN0_Events[CAN0_EVENTS] =
 158:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 159:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_TX_INT,
 160:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_ALERT,
 161:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_LEC,
 162:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_CFCIE
 163:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 164:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN0_EVENTS_USED */
 165:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN_USING_INTERRUPT */
 166:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 167:../Driver/CAN/cfg/src/dri_can_conf.c **** /* CAN Node 0 Configuration Structure */
 168:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_NodeConfiguartion CAN0_Node_Configuration =
 169:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 170:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_channel_context = CAN_NODE0,
 171:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_bit_time_config = &CAN0_BitConfiguration,
 172:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_message_tx = &CAN0_MessageObject_Transmitter,
 173:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_message_rx = &CAN0_MessageObject_Receiver,
 174:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.message_tx_number = 0,
 175:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.message_rx_number = 1
 176:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#if (CAN_USING_INTERRUPT == 1U)
 177:../Driver/CAN/cfg/src/dri_can_conf.c **** 	,.isr_config = &CAN0_Interrupt_Configuration,
 178:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.isr_mo_conifg = &CAN0_MO_Interrupt_Configuration
 179:../Driver/CAN/cfg/src/dri_can_conf.c **** 		#if (CAN0_EVENTS_USED == 1U)
 180:../Driver/CAN/cfg/src/dri_can_conf.c **** 		,.isr_event_conifg = &CAN0_Event_Interrupt_Configuration,
 181:../Driver/CAN/cfg/src/dri_can_conf.c **** 		.p_events = CAN0_Events,
 182:../Driver/CAN/cfg/src/dri_can_conf.c **** 		.events = 4
 183:../Driver/CAN/cfg/src/dri_can_conf.c **** 		#endif
 184:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#endif
 185:../Driver/CAN/cfg/src/dri_can_conf.c **** 	,.loopback = XMC_CAN_LOOKBACKMODE_DISABLED,
 186:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.rx_input_pin = 0
 187:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 188:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 189:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_Control CAN0_Node_Control;
 190:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 191:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN_CALLBACK_HANDLER_USED == 1U)
 192:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_Callbacks CAN0_Node_Callback =
 193:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 194:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.fp_callback = &CAN_callback_handler
 195:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 196:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif
 197:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN0_CHANNEL_USED */
 198:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 199:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 200:../Driver/CAN/cfg/src/dri_can_conf.c **** /* CAN Node 1 Configurations */
 201:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN1_CHANNEL_USED == 1U)
 202:../Driver/CAN/cfg/src/dri_can_conf.c **** static XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t CAN1_BitConfiguration =
 203:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 204:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_frequency = FCAN,
 205:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.baudrate = (500 * 1000),
 206:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sample_point = (80 * 100),
 207:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sjw = 2
 208:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 209:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 210:../Driver/CAN/cfg/src/dri_can_conf.c **** static XMC_CAN_MO_t CAN1_MessageObject_Transmitter =
 211:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 212:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_ptr = CAN_MO2,
 213:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 214:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_ar */
 215:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_identifier = 0x1111,
 216:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS,
 217:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_priority = XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1,
 218:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 219:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_amr */
 220:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mask = 0x7FF,
 221:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_ide_mask = 1U,
 222:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 223:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data_length = 8,
 224:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[0] = 0,
 225:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[1] = 0,
 226:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 227:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_type = XMC_CAN_MO_TYPE_TRANSMSGOBJ
 228:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 229:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 230:../Driver/CAN/cfg/src/dri_can_conf.c **** static XMC_CAN_MO_t CAN1_MessageObject_Receiver =
 231:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 232:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_ptr = CAN_MO3,
 233:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 234:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_ar */
 235:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_identifier = 0x2222,
 236:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS,
 237:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_priority = XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1,
 238:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 239:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_amr */
 240:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mask = 0x7FF,
 241:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_ide_mask = 1U,
 242:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 243:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data_length = 8,
 244:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[0] = 0,
 245:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[1] = 0,
 246:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 247:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ
 248:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 249:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 250:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN_USING_INTERRUPT == 1U)
 251:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_InterruptConfiguartion CAN1_Interrupt_Configuration =
 252:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 253:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.irq = { .irq_num = CAN0_2_IRQn, .irq_priority = 49 },
 254:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sr = 2
 255:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 256:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_InterruptConfiguartion CAN1_MO_Interrupt_Configuration =
 257:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 258:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.irq = { .irq_num = CAN0_3_IRQn, .irq_priority = 49 },
 259:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sr = 3
 260:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 261:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN1_EVENTS_USED == 1U)
 262:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_InterruptConfiguartion CAN1_Event_Interrupt_Configuration =
 263:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 264:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.irq = { .irq_num = CAN0_4_IRQn, .irq_priority = 49 },
 265:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sr = 4
 266:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 267:../Driver/CAN/cfg/src/dri_can_conf.c **** XMC_CAN_NODE_EVENT_t CAN1_Events[CAN1_EVENTS] =
 268:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 269:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_TX_INT,
 270:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_ALERT,
 271:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_LEC,
 272:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_CFCIE
 273:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 274:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN1_EVENTS_USED */
 275:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN_USING_INTERRUPT */
 276:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 277:../Driver/CAN/cfg/src/dri_can_conf.c **** /* CAN Node 1 Configuration Structure */
 278:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_NodeConfiguartion CAN1_Node_Configuration =
 279:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 280:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_channel_context = CAN_NODE1,
 281:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_bit_time_config = &CAN1_BitConfiguration,
 282:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_message_tx = &CAN1_MessageObject_Transmitter,
 283:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_message_rx = &CAN1_MessageObject_Receiver,
 284:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.message_tx_number = 2,
 285:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.message_rx_number = 3
 286:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#if (CAN_USING_INTERRUPT == 1U)
 287:../Driver/CAN/cfg/src/dri_can_conf.c **** 	,.isr_config = &CAN1_Interrupt_Configuration,
 288:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.isr_mo_conifg = &CAN1_MO_Interrupt_Configuration
 289:../Driver/CAN/cfg/src/dri_can_conf.c **** 		#if (CAN1_EVENTS_USED == 1U)
 290:../Driver/CAN/cfg/src/dri_can_conf.c **** 		,.isr_event_conifg = &CAN1_Event_Interrupt_Configuration,
 291:../Driver/CAN/cfg/src/dri_can_conf.c **** 		.p_events = CAN1_Events,
 292:../Driver/CAN/cfg/src/dri_can_conf.c **** 		.events = 4
 293:../Driver/CAN/cfg/src/dri_can_conf.c **** 		#endif
 294:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#endif
 295:../Driver/CAN/cfg/src/dri_can_conf.c **** 	,.loopback = XMC_CAN_LOOKBACKMODE_ENABLED,
 296:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.rx_input_pin = XMC_CAN_NODE_RECEIVE_INPUT_RXDCC
 297:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 298:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 299:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_Control CAN1_Node_Control;
 300:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 301:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN_CALLBACK_HANDLER_USED == 1U)
 302:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_Callbacks CAN1_Node_Callback =
 303:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 304:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.fp_callback = &CAN_callback_handler
 305:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 306:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif
 307:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN1_CHANNEL_USED */
 308:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 309:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 310:../Driver/CAN/cfg/src/dri_can_conf.c **** /* CAN Node 2 Configurations */
 311:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN2_CHANNEL_USED == 1U)
 312:../Driver/CAN/cfg/src/dri_can_conf.c **** static XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t CAN2_BitConfiguration =
 313:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 314:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_frequency = FCAN,
 315:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.baudrate = (500 * 1000),
 316:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sample_point = (80 * 100),
 317:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sjw = 2
 318:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 319:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 320:../Driver/CAN/cfg/src/dri_can_conf.c **** static XMC_CAN_MO_t CAN2_MessageObject_Transmitter =
 321:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 322:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_ptr = CAN_MO4,
 323:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 324:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_ar */
 325:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_identifier = 0x2222,
 326:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS,
 327:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_priority = XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1,
 328:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 329:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_amr */
 330:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mask = 0x7FF,
 331:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_ide_mask = 1U,
 332:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 333:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data_length = 8,
 334:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[0] = 0,
 335:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[1] = 0,
 336:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 337:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_type = XMC_CAN_MO_TYPE_TRANSMSGOBJ
 338:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 339:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 340:../Driver/CAN/cfg/src/dri_can_conf.c **** static XMC_CAN_MO_t CAN2_MessageObject_Receiver =
 341:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 342:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_ptr = CAN_MO5,
 343:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 344:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_ar */
 345:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_identifier = 0x1111,
 346:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS,
 347:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_priority = XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1,
 348:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 349:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/**< mo_amr */
 350:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_id_mask = 0x7FF,
 351:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_ide_mask = 1U,
 352:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 353:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data_length = 8,
 354:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[0] = 0,
 355:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_data[1] = 0,
 356:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 357:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ
 358:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 359:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 360:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN_USING_INTERRUPT == 1U)
 361:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_InterruptConfiguartion CAN2_Interrupt_Configuration =
 362:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 363:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.irq = { .irq_num = CAN0_5_IRQn, .irq_priority = 48 },
 364:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sr = 5
 365:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 366:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_InterruptConfiguartion CAN2_MO_Interrupt_Configuration =
 367:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 368:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.irq = { .irq_num = CAN0_6_IRQn, .irq_priority = 48 },
 369:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sr = 6
 370:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 371:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN2_EVENTS_USED == 1U)
 372:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_InterruptConfiguartion CAN2_Event_Interrupt_Configuration =
 373:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 374:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.irq = { .irq_num = CAN0_7_IRQn, .irq_priority = 48 },
 375:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.sr = 7
 376:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 377:../Driver/CAN/cfg/src/dri_can_conf.c **** XMC_CAN_NODE_EVENT_t CAN2_Events[CAN2_EVENTS] =
 378:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 379:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_TX_INT,
 380:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_ALERT,
 381:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_LEC,
 382:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_EVENT_CFCIE
 383:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 384:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN2_EVENTS_USED */
 385:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN_USING_INTERRUPT */
 386:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 387:../Driver/CAN/cfg/src/dri_can_conf.c **** /* CAN Node 2 Configuration Structure */
 388:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_NodeConfiguartion CAN2_Node_Configuration =
 389:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 390:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_channel_context = CAN_NODE2,
 391:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_bit_time_config = &CAN2_BitConfiguration,
 392:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_message_tx = &CAN2_MessageObject_Transmitter,
 393:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_message_rx = &CAN2_MessageObject_Receiver,
 394:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.message_tx_number = 4,
 395:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.message_rx_number = 5
 396:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#if (CAN_USING_INTERRUPT == 1U)
 397:../Driver/CAN/cfg/src/dri_can_conf.c **** 	,.isr_config = &CAN2_Interrupt_Configuration,
 398:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.isr_mo_conifg = &CAN2_MO_Interrupt_Configuration
 399:../Driver/CAN/cfg/src/dri_can_conf.c **** 		#if (CAN2_EVENTS_USED == 1U)
 400:../Driver/CAN/cfg/src/dri_can_conf.c **** 		,.isr_event_conifg = &CAN2_Event_Interrupt_Configuration,
 401:../Driver/CAN/cfg/src/dri_can_conf.c **** 		.p_events = CAN2_Events,
 402:../Driver/CAN/cfg/src/dri_can_conf.c **** 		.events = 4
 403:../Driver/CAN/cfg/src/dri_can_conf.c **** 		#endif
 404:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#endif
 405:../Driver/CAN/cfg/src/dri_can_conf.c **** 	,.loopback = XMC_CAN_LOOKBACKMODE_ENABLED,
 406:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.rx_input_pin = XMC_CAN_NODE_RECEIVE_INPUT_RXDCA
 407:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 408:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 409:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_Control CAN2_Node_Control;
 410:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 411:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN_CALLBACK_HANDLER_USED == 1U)
 412:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_Callbacks CAN2_Node_Callback =
 413:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 414:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.fp_callback = &CAN_callback_handler
 415:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 416:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif
 417:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN2_CHANNEL_USED */
 418:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 419:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 420:../Driver/CAN/cfg/src/dri_can_conf.c **** /*****************************************************************************/
 421:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 422:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 423:../Driver/CAN/cfg/src/dri_can_conf.c **** /** CAN Global Handle **/
 424:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_GlobalModule CAN_Global =
 425:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 426:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_module_config =  &CAN_GlobalConfiguration,
 427:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_control = &CAN_GlobalControl
 428:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 429:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 430:../Driver/CAN/cfg/src/dri_can_conf.c **** /** CAN Node Handles **/
 431:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 432:../Driver/CAN/cfg/src/dri_can_conf.c **** /** CAN Node Handles **/
 433:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN0_CHANNEL_USED == 1U)
 434:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_Node CAN0 =
 435:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 436:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_config = &CAN0_Node_Configuration,
 437:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_control = &CAN0_Node_Control
 438:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#if (CAN_CALLBACK_HANDLER_USED == 1U)
 439:../Driver/CAN/cfg/src/dri_can_conf.c **** 	,.p_callback = &CAN0_Node_Callback
 440:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#endif
 441:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 442:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif
 443:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN1_CHANNEL_USED == 1U)
 444:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_Node CAN1 =
 445:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 446:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_config = &CAN1_Node_Configuration,
 447:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_control = &CAN1_Node_Control
 448:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#if (CAN_CALLBACK_HANDLER_USED == 1U)
 449:../Driver/CAN/cfg/src/dri_can_conf.c **** 	,.p_callback = &CAN1_Node_Callback
 450:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#endif
 451:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 452:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif
 453:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN2_CHANNEL_USED == 1U)
 454:../Driver/CAN/cfg/src/dri_can_conf.c **** tStCAN_Node CAN2 =
 455:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 456:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_config = &CAN2_Node_Configuration,
 457:../Driver/CAN/cfg/src/dri_can_conf.c **** 	.p_control = &CAN2_Node_Control
 458:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#if (CAN_CALLBACK_HANDLER_USED == 1U)
 459:../Driver/CAN/cfg/src/dri_can_conf.c **** 	,.p_callback = &CAN2_Node_Callback
 460:../Driver/CAN/cfg/src/dri_can_conf.c **** 	#endif
 461:../Driver/CAN/cfg/src/dri_can_conf.c **** };
 462:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif
 463:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 464:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 465:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 466:../Driver/CAN/cfg/src/dri_can_conf.c **** /******************************************************************************
 467:../Driver/CAN/cfg/src/dri_can_conf.c **** * Function Definitions
 468:../Driver/CAN/cfg/src/dri_can_conf.c **** *******************************************************************************/
 469:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 470:../Driver/CAN/cfg/src/dri_can_conf.c **** /******* ISR Handlers for CAN nodes *******/
 471:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 472:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN0_CHANNEL_USED == 1U)
 473:../Driver/CAN/cfg/src/dri_can_conf.c **** void CAN0_Node_Transfer_Handler( void )
 474:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 475:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_NODE_GetStatus( (XMC_CAN_NODE_t *const)CAN0.p_config->p_channel_c
 476:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_TXOK_Msk )
 477:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 478:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN0, CAN_EVENT_TYPE_NODE_TRANSFER, CAN_EVENT_NODE_TRANSFER_TRANSMIT );
 479:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 480:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 481:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_RXOK_Msk )
 482:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 483:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN0, CAN_EVENT_TYPE_NODE_TRANSFER, CAN_EVENT_NODE_TRANSFER_RECEIVE );
 484:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 485:../Driver/CAN/cfg/src/dri_can_conf.c **** }
 486:../Driver/CAN/cfg/src/dri_can_conf.c **** void CAN0_MessageObject_Handler( void )
 487:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 488:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Check transmit or receive event for CAN Node MO's */
 489:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_MO_GetStatus( CAN0.p_config->p_message_rx );
 490:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & (CAN_MO_MOSTAT_RXPND_Msk|CAN_MO_MOSTAT_MSGVAL_Msk) )/* Message Validity and recepti
 491:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 492:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN0, CAN_EVENT_TYPE_MO_TRANSFER, CAN_EVENT_MESSAGE_RECEIVE );
 493:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 494:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 495:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Transmitter check */
 496:../Driver/CAN/cfg/src/dri_can_conf.c **** 	status_l = XMC_CAN_MO_GetStatus( CAN0.p_config->p_message_tx );
 497:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & (CAN_MO_MOSTAT_TXPND_Msk|CAN_MO_MOSTAT_MSGVAL_Msk) )/* Message Validity and transmi
 498:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 499:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN0, CAN_EVENT_TYPE_MO_TRANSFER, CAN_EVENT_MESSAGE_TRANSMIT );
 500:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 501:../Driver/CAN/cfg/src/dri_can_conf.c **** }
 502:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN0_EVENTS_USED == 1U)
 503:../Driver/CAN/cfg/src/dri_can_conf.c **** void CAN0_Event_Handler( void )
 504:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 505:../Driver/CAN/cfg/src/dri_can_conf.c **** }
 506:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN0_EVENTS_USED */
 507:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN0_CHANNEL_USED */
 508:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 509:../Driver/CAN/cfg/src/dri_can_conf.c **** /*****************************************************************************/
 510:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 511:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN1_CHANNEL_USED == 1U)
 512:../Driver/CAN/cfg/src/dri_can_conf.c **** void CAN1_Node_Transfer_Handler( void )
 513:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 514:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_NODE_GetStatus( (XMC_CAN_NODE_t *const)CAN1.p_config->p_channel_c
 515:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_TXOK_Msk )
 516:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 517:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN1, CAN_EVENT_TYPE_NODE_TRANSFER, CAN_EVENT_NODE_TRANSFER_TRANSMIT );
 518:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 519:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 520:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_RXOK_Msk )
 521:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 522:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN1, CAN_EVENT_TYPE_NODE_TRANSFER, CAN_EVENT_NODE_TRANSFER_RECEIVE );
 523:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 524:../Driver/CAN/cfg/src/dri_can_conf.c **** }
 525:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 526:../Driver/CAN/cfg/src/dri_can_conf.c **** void CAN1_MessageObject_Handler( void )
 527:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 528:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Check transmit or receive event for CAN Node MO's */
 529:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_MO_GetStatus( CAN1.p_config->p_message_rx );
 530:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & (CAN_MO_MOSTAT_RXPND_Msk|CAN_MO_MOSTAT_MSGVAL_Msk) )/* Message Validity and recepti
 531:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 532:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN1, CAN_EVENT_TYPE_MO_TRANSFER, CAN_EVENT_MESSAGE_RECEIVE );
 533:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 534:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 535:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Transmitter check */
 536:../Driver/CAN/cfg/src/dri_can_conf.c **** 	status_l = XMC_CAN_MO_GetStatus( CAN1.p_config->p_message_tx );
 537:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & (CAN_MO_MOSTAT_TXPND_Msk|CAN_MO_MOSTAT_MSGVAL_Msk) )/* Message Validity and transmi
 538:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 539:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN1, CAN_EVENT_TYPE_MO_TRANSFER, CAN_EVENT_MESSAGE_TRANSMIT );
 540:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 541:../Driver/CAN/cfg/src/dri_can_conf.c **** }
 542:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 543:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN1_EVENTS_USED == 1U)
 544:../Driver/CAN/cfg/src/dri_can_conf.c **** void CAN1_Event_Handler( void )
 545:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 546:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_NODE_GetStatus( (XMC_CAN_NODE_t *const)CAN1.p_config->p_channel_c
 547:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Check status */
 548:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_ALERT_Msk )
 549:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 550:../Driver/CAN/cfg/src/dri_can_conf.c **** 		/* Need to check the Alert levels */
 551:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN1, CAN_EVENT_TYPE_MO_TRANSFER, CAN_EVENT_NODE_ALERT );
 552:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 553:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 554:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_LEC_Msk )
 555:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 556:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN1, CAN_EVENT_TYPE_MO_TRANSFER, CAN_EVENT_NODE_LEC );
 557:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 558:../Driver/CAN/cfg/src/dri_can_conf.c **** }
 559:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN1_EVENTS_USED */
 560:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN1_CHANNEL_USED */
 561:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 562:../Driver/CAN/cfg/src/dri_can_conf.c **** /*****************************************************************************/
 563:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 564:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN2_CHANNEL_USED == 1U)
 565:../Driver/CAN/cfg/src/dri_can_conf.c **** void CAN2_Node_Transfer_Handler( void )
 566:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 567:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_NODE_GetStatus( (XMC_CAN_NODE_t *const)CAN2.p_config->p_channel_c
 568:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_TXOK_Msk )
 569:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 570:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN2, CAN_EVENT_TYPE_NODE_TRANSFER, CAN_EVENT_NODE_TRANSFER_TRANSMIT );
 571:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 572:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 573:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_RXOK_Msk )
 574:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 575:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN2, CAN_EVENT_TYPE_NODE_TRANSFER, CAN_EVENT_NODE_TRANSFER_RECEIVE );
 576:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 577:../Driver/CAN/cfg/src/dri_can_conf.c **** }
 578:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 579:../Driver/CAN/cfg/src/dri_can_conf.c **** void CAN2_MessageObject_Handler( void )
 580:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 581:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Check transmit or receive event for CAN Node MO's */
 582:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_MO_GetStatus( CAN2.p_config->p_message_rx );
 583:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & (CAN_MO_MOSTAT_RXPND_Msk|CAN_MO_MOSTAT_MSGVAL_Msk) )/* Message Validity and recepti
 584:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 585:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN2, CAN_EVENT_TYPE_MO_TRANSFER, CAN_EVENT_MESSAGE_RECEIVE );
 586:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 587:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 588:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Transmitter check */
 589:../Driver/CAN/cfg/src/dri_can_conf.c **** 	status_l = XMC_CAN_MO_GetStatus( CAN2.p_config->p_message_tx );
 590:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & (CAN_MO_MOSTAT_TXPND_Msk|CAN_MO_MOSTAT_MSGVAL_Msk) )/* Message Validity and transmi
 591:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 592:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN2, CAN_EVENT_TYPE_MO_TRANSFER, CAN_EVENT_MESSAGE_TRANSMIT );
 593:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 594:../Driver/CAN/cfg/src/dri_can_conf.c **** }
 595:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN2_EVENTS_USED == 1U)
 596:../Driver/CAN/cfg/src/dri_can_conf.c **** void CAN2_Event_Handler( void )
 597:../Driver/CAN/cfg/src/dri_can_conf.c **** {
 598:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_NODE_GetStatus( (XMC_CAN_NODE_t *const)CAN2.p_config->p_channel_c
 599:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Check status */
 600:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_ALERT_Msk )
 601:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 602:../Driver/CAN/cfg/src/dri_can_conf.c **** 		/* Need to check the Alert levels */
 603:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN2, CAN_EVENT_TYPE_MO_TRANSFER, CAN_EVENT_NODE_ALERT );
 604:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 605:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 606:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_LEC_Msk )
 607:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 608:../Driver/CAN/cfg/src/dri_can_conf.c **** 		CAN_ISR_Handler_Entry( &CAN2, CAN_EVENT_TYPE_MO_TRANSFER, CAN_EVENT_NODE_LEC );
 609:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 610:../Driver/CAN/cfg/src/dri_can_conf.c **** }
 611:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN2_EVENTS_USED */
 612:../Driver/CAN/cfg/src/dri_can_conf.c **** #endif	/* CAN2_CHANNEL_USED */
 613:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 614:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 615:../Driver/CAN/cfg/src/dri_can_conf.c **** /*****************************************************************************/
 616:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 617:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 618:../Driver/CAN/cfg/src/dri_can_conf.c **** #if (CAN_USING_INTERRUPT == 1U)
 619:../Driver/CAN/cfg/src/dri_can_conf.c **** /** Channels ISR Entries **/
 620:../Driver/CAN/cfg/src/dri_can_conf.c **** void CAN_ISR_Handler_Entry( void * p_channel, const eCAN_EventType event_type, const eCAN_Event eve
 621:../Driver/CAN/cfg/src/dri_can_conf.c **** {
  27              	 .loc 1 621 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	.LVL0:
 622:../Driver/CAN/cfg/src/dri_can_conf.c **** 	DRIVER_ASSERT_NRET( NULL == p_channel );
  32              	 .loc 1 622 0
  33 0000 00B9     	 cbnz r0,.L2
  34              	.L14:
  35              	 .loc 1 622 0 is_stmt 0 discriminator 1
  36 0002 FEE7     	 b .L14
  37              	.L2:
 621:../Driver/CAN/cfg/src/dri_can_conf.c **** 	DRIVER_ASSERT_NRET( NULL == p_channel );
  38              	 .loc 1 621 0 is_stmt 1
  39 0004 10B5     	 push {r4,lr}
  40              	.LCFI0:
  41              	 .cfi_def_cfa_offset 8
  42              	 .cfi_offset 4,-8
  43              	 .cfi_offset 14,-4
  44 0006 0346     	 mov r3,r0
 623:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Local Variables */
 624:../Driver/CAN/cfg/src/dri_can_conf.c **** 	XMC_CAN_NODE_t * const p_node_l = (XMC_CAN_NODE_t *) ((tStCAN_Node *)p_channel)->p_config->p_chann
  45              	 .loc 1 624 0
  46 0008 0068     	 ldr r0,[r0]
  47              	.LVL1:
  48 000a 0468     	 ldr r4,[r0]
  49              	.LVL2:
 625:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 626:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Check Event Type */
 627:../Driver/CAN/cfg/src/dri_can_conf.c **** 	switch( event_type )
  50              	 .loc 1 627 0
  51 000c 0129     	 cmp r1,#1
  52 000e 17D0     	 beq .L5
  53 0010 0229     	 cmp r1,#2
  54 0012 2AD0     	 beq .L1
  55 0014 1846     	 mov r0,r3
 628:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 629:../Driver/CAN/cfg/src/dri_can_conf.c **** 	default:
 630:../Driver/CAN/cfg/src/dri_can_conf.c **** 		case CAN_EVENT_TYPE_NODE_TRANSFER:
 631:../Driver/CAN/cfg/src/dri_can_conf.c **** 		/* Check Node Transfer event */
 632:../Driver/CAN/cfg/src/dri_can_conf.c **** 		switch( event )
  56              	 .loc 1 632 0
  57 0016 012A     	 cmp r2,#1
  58 0018 08D0     	 beq .L8
  59              	.LVL3:
 633:../Driver/CAN/cfg/src/dri_can_conf.c **** 		{
 634:../Driver/CAN/cfg/src/dri_can_conf.c **** 		default:
 635:../Driver/CAN/cfg/src/dri_can_conf.c **** 			case CAN_EVENT_NODE_TRANSFER_TRANSMIT:
 636:../Driver/CAN/cfg/src/dri_can_conf.c **** 			#if (CAN_CALLBACK_HANDLER_USED == 1U)
 637:../Driver/CAN/cfg/src/dri_can_conf.c **** 				if( ((tStCAN_Node *)p_channel)->p_callback->fp_callback != NULL )
  60              	 .loc 1 637 0
  61 001a 9B68     	 ldr r3,[r3,#8]
  62 001c 1B68     	 ldr r3,[r3]
  63 001e 03B1     	 cbz r3,.L9
 638:../Driver/CAN/cfg/src/dri_can_conf.c **** 				{
 639:../Driver/CAN/cfg/src/dri_can_conf.c **** 					((tStCAN_Node *)p_channel)->p_callback->fp_callback( p_channel, event_type, event );
  64              	 .loc 1 639 0
  65 0020 9847     	 blx r3
  66              	.LVL4:
  67              	.L9:
  68              	.LBB30:
  69              	.LBB31:
  70              	 .file 2 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc/xmc_can.h"
   1:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2017-11-09
   4:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *                                             
  12:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
  18:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
  21:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  37:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  38:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  39:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  43:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *      
  52:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  55:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  58:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  61:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
  64:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  68:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  69:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  70:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  71:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  72:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  73:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  74:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  75:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  76:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  77:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  78:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  79:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  80:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  81:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  82:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  83:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  84:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  85:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  86:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  87:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  88:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  89:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  90:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  91:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  92:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  93:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
  94:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
  95:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
  96:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
  97:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
  98:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
  99:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between 
 126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
 129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
 135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {  
 453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #else
 457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #else
 461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   #pragma push
 520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   union{
 534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     };
 540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   };
 543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** */
 548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   union{
 557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     };
 562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   };
 564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   union{
 565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     };
 569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   };
 571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   union{
 574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****       };
 581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   #pragma pop
 588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 616:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 617:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 618:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 619:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 620:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 621:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 622:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 623:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 624:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 625:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 626:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 627:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 628:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 629:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 630:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 631:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 632:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 633:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 634:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 635:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 636:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 637:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 638:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 639:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 640:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 641:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 642:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 643:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 644:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 645:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 646:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 647:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 648:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 649:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 650:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 651:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 652:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 653:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 654:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 655:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 656:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 657:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 658:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 659:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 660:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 661:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 662:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 663:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 664:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 665:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 666:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 667:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 668:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 669:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 670:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 671:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 672:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 673:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 674:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 675:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 676:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 677:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 678:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 679:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 680:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 681:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 682:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 683:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 684:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 685:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 686:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 687:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 688:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 689:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 690:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 691:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 692:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 693:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 694:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 695:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 696:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 697:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 698:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 699:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 700:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 701:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 702:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 703:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 704:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 705:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 706:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 707:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 708:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 709:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 710:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 711:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 712:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 713:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 714:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 715:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 716:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 717:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 718:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 719:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 720:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 721:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 722:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 723:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 724:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 725:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 726:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 727:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 728:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 729:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 730:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 731:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 732:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 733:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 734:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 735:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 736:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 737:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 738:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 739:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 740:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 741:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 742:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 743:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 744:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 745:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 746:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 747:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 748:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 749:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 750:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 751:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 752:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 753:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 754:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 755:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 756:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 757:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 758:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 759:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 760:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 761:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 762:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 763:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 764:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 765:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 766:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 767:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 768:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 769:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 770:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 771:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 772:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 773:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 774:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 775:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 776:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 777:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 778:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 779:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 780:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 781:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * 
 782:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 783:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 784:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 785:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 786:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 787:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 788:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 789:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 790:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 791:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 792:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 793:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 794:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 795:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 796:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 797:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 798:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 799:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 800:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 801:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 802:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 803:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 804:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 805:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 806:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 807:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 808:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 809:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 810:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 811:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 812:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 813:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 814:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 815:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 816:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 817:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 818:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 819:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 820:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 821:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 822:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 823:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 824:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 825:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 826:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 827:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 828:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #else
 829:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 830:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
 831:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 832:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 833:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 834:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 835:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 836:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 837:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 838:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 839:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 840:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 841:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 842:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
 844:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 846:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 847:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 848:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 849:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 850:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 851:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 852:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 853:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 854:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 855:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 856:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 857:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 858:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 859:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 860:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 861:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
 863:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 864:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 865:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 866:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 867:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 868:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 869:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 870:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 871:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 872:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 873:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 874:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 875:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 876:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 877:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 878:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 879:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 880:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 881:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 882:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 883:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 884:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 885:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 886:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
 887:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 888:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 889:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 890:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 891:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 892:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 893:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 894:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 895:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 896:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 897:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 898:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 899:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 900:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 901:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 902:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 903:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 905:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 906:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 907:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 908:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 909:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 910:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 911:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 912:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 913:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 914:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 915:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 916:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 917:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 918:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 919:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 920:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 921:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 922:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 923:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 924:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 925:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 926:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 927:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
 928:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 929:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 930:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 931:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 932:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 933:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 934:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 935:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 936:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 937:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 938:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 939:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 940:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 941:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 942:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 943:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 944:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 945:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 946:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 947:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 948:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 949:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 950:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 951:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 952:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 953:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 954:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 955:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 956:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 957:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 958:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 959:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 960:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 961:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 962:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 963:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 964:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 965:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 966:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 967:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 968:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 969:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 970:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 971:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 972:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 973:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 974:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 975:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 976:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 977:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 978:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 979:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 980:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 981:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 982:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 983:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 984:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 985:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
 986:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 987:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 988:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
 989:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 990:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 991:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 992:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
 993:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
 994:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 995:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 996:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 997:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
 998:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
 999:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1000:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1001:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1002:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1003:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1004:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1005:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1006:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1007:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1008:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1009:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1010:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1011:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1012:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1013:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1018:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1019:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1020:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1022:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1023:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1025:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1026:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1027:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1028:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1030:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1031:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1032:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1034:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1035:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1036:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1037:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1038:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1039:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1040:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1041:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1042:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1043:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1044:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1045:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1046:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1047:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1048:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1049:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1050:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1051:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1052:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1053:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1054:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1055:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1056:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1057:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1058:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1059:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1060:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1061:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1062:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1063:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1064:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1065:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1066:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1067:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1068:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1069:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1070:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1071:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1072:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1073:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1074:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1075:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1076:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1077:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1078:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1079:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1080:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1081:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1082:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1083:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1084:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1085:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1086:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1087:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1088:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1089:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1090:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1091:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1092:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1093:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1094:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1095:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1096:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1097:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1098:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1099:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1100:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1101:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1102:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1103:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1104:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1105:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1106:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1107:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1108:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1109:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1110:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1111:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1112:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1113:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1114:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1115:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1116:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1117:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1118:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1119:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1120:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1121:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1122:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1123:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1124:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1125:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1126:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1127:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1128:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1129:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1130:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1131:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1132:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1133:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1134:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1135:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1136:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1137:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1138:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1139:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1140:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1141:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1142:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1143:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1144:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1145:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1146:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1147:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1148:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1149:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1150:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1151:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1152:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1153:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1154:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1155:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1156:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1157:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1158:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1159:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1160:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1161:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1162:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1163:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1164:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1165:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1166:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1167:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1168:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1169:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1170:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1171:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1172:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1173:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1174:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1175:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1176:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1177:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1178:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1179:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1180:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1181:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1182:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1183:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1184:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1185:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1186:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1187:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1188:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1189:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1190:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1191:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1192:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1193:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1194:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1195:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1196:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1197:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1198:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1199:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1200:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1201:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1202:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1203:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1204:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1205:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1206:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1207:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1208:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1209:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1210:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1211:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1212:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1213:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1214:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1215:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1216:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1217:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1218:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1219:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1220:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1221:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1222:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1223:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1224:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1225:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1226:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1227:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1228:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1229:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1230:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1231:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1232:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1234:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1235:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1236:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1237:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1238:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1240:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1241:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1242:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1243:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1244:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1245:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1246:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1247:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1248:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1249:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1250:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1251:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1252:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1253:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
  71              	 .loc 2 1253 0
  72 0022 6368     	 ldr r3,[r4,#4]
  73 0024 23F00803 	 bic r3,r3,#8
  74 0028 6360     	 str r3,[r4,#4]
  75 002a 10BD     	 pop {r4,pc}
  76              	.LVL5:
  77              	.L8:
  78              	.LBE31:
  79              	.LBE30:
 640:../Driver/CAN/cfg/src/dri_can_conf.c **** 				}
 641:../Driver/CAN/cfg/src/dri_can_conf.c **** 			#endif
 642:../Driver/CAN/cfg/src/dri_can_conf.c **** 				/* Clear TX status */
 643:../Driver/CAN/cfg/src/dri_can_conf.c **** 				XMC_CAN_NODE_ClearStatus( p_node_l, XMC_CAN_NODE_STATUS_TX_OK );
 644:../Driver/CAN/cfg/src/dri_can_conf.c **** 			break;
 645:../Driver/CAN/cfg/src/dri_can_conf.c **** 			case CAN_EVENT_NODE_TRANSFER_RECEIVE:
 646:../Driver/CAN/cfg/src/dri_can_conf.c **** 			#if (CAN_CALLBACK_HANDLER_USED == 1U)
 647:../Driver/CAN/cfg/src/dri_can_conf.c **** 				if( ((tStCAN_Node *)p_channel)->p_callback->fp_callback != NULL )
  80              	 .loc 1 647 0
  81 002c 9B68     	 ldr r3,[r3,#8]
  82 002e 1B68     	 ldr r3,[r3]
  83 0030 0BB1     	 cbz r3,.L10
 648:../Driver/CAN/cfg/src/dri_can_conf.c **** 				{
 649:../Driver/CAN/cfg/src/dri_can_conf.c **** 					((tStCAN_Node *)p_channel)->p_callback->fp_callback( p_channel, event_type, event );
  84              	 .loc 1 649 0
  85 0032 0122     	 movs r2,#1
  86              	.LVL6:
  87 0034 9847     	 blx r3
  88              	.LVL7:
  89              	.L10:
  90              	.LBB32:
  91              	.LBB33:
  92              	 .loc 2 1253 0
  93 0036 6368     	 ldr r3,[r4,#4]
  94 0038 23F01003 	 bic r3,r3,#16
  95 003c 6360     	 str r3,[r4,#4]
  96 003e 10BD     	 pop {r4,pc}
  97              	.LVL8:
  98              	.L5:
  99              	.LBE33:
 100              	.LBE32:
 650:../Driver/CAN/cfg/src/dri_can_conf.c **** 				}
 651:../Driver/CAN/cfg/src/dri_can_conf.c **** 			#endif
 652:../Driver/CAN/cfg/src/dri_can_conf.c **** 				/* Clear RX status */
 653:../Driver/CAN/cfg/src/dri_can_conf.c **** 				XMC_CAN_NODE_ClearStatus( p_node_l, XMC_CAN_NODE_STATUS_RX_OK );
 654:../Driver/CAN/cfg/src/dri_can_conf.c **** 			break;
 655:../Driver/CAN/cfg/src/dri_can_conf.c **** 		}
 656:../Driver/CAN/cfg/src/dri_can_conf.c **** 		break;	/* CAN_EVENT_NODE_TRANSFER_TRANSMIT */
 657:../Driver/CAN/cfg/src/dri_can_conf.c **** 
 658:../Driver/CAN/cfg/src/dri_can_conf.c **** 		case CAN_EVENT_TYPE_NODE_ERROR:
 659:../Driver/CAN/cfg/src/dri_can_conf.c **** 			/* Check Node Error Event */
 660:../Driver/CAN/cfg/src/dri_can_conf.c **** 			switch( event )
 101              	 .loc 1 660 0
 102 0040 032A     	 cmp r2,#3
 103 0042 0ED0     	 beq .L12
 104 0044 042A     	 cmp r2,#4
 105 0046 10D0     	 beq .L1
 106              	.LVL9:
 107              	.LBB34:
 108              	.LBB35:
1233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 109              	 .loc 2 1233 0
 110 0048 6368     	 ldr r3,[r4,#4]
 111              	.LVL10:
 112              	.LBE35:
 113              	.LBE34:
 661:../Driver/CAN/cfg/src/dri_can_conf.c **** 			{
 662:../Driver/CAN/cfg/src/dri_can_conf.c **** 			default:
 663:../Driver/CAN/cfg/src/dri_can_conf.c **** 				case CAN_EVENT_NODE_ALERT:
 664:../Driver/CAN/cfg/src/dri_can_conf.c **** 					/* Check Bus-Off */
 665:../Driver/CAN/cfg/src/dri_can_conf.c **** 					if( XMC_CAN_NODE_GetStatus( p_node_l ) & CAN_NODE_NSR_BOFF_Msk )
 114              	 .loc 1 665 0
 115 004a 13F0800F 	 tst r3,#128
 116 004e 03D0     	 beq .L13
 117              	.LVL11:
 118              	.LBB36:
 119              	.LBB37:
 120              	 .loc 2 1253 0
 121 0050 6368     	 ldr r3,[r4,#4]
 122 0052 23F08003 	 bic r3,r3,#128
 123 0056 6360     	 str r3,[r4,#4]
 124              	.LVL12:
 125              	.L13:
 126              	.LBE37:
 127              	.LBE36:
 128              	.LBB38:
 129              	.LBB39:
 130 0058 6368     	 ldr r3,[r4,#4]
 131 005a 23F02003 	 bic r3,r3,#32
 132 005e 6360     	 str r3,[r4,#4]
 133 0060 10BD     	 pop {r4,pc}
 134              	.LVL13:
 135              	.L12:
 136              	.LBE39:
 137              	.LBE38:
 138              	.LBB40:
 139              	.LBB41:
 140 0062 6368     	 ldr r3,[r4,#4]
 141              	.LVL14:
 142 0064 23F00703 	 bic r3,r3,#7
 143 0068 6360     	 str r3,[r4,#4]
 144              	.LVL15:
 145              	.L1:
 146 006a 10BD     	 pop {r4,pc}
 147              	.LBE41:
 148              	.LBE40:
 149              	 .cfi_endproc
 150              	.LFE239:
 152              	 .section .text.CAN0_2_IRQHandler,"ax",%progbits
 153              	 .align 2
 154              	 .global CAN0_2_IRQHandler
 155              	 .thumb
 156              	 .thumb_func
 158              	CAN0_2_IRQHandler:
 159              	.LFB233:
 513:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_NODE_GetStatus( (XMC_CAN_NODE_t *const)CAN1.p_config->p_channel_c
 160              	 .loc 1 513 0
 161              	 .cfi_startproc
 162              	 
 163              	 
 164 0000 10B5     	 push {r4,lr}
 165              	.LCFI1:
 166              	 .cfi_def_cfa_offset 8
 167              	 .cfi_offset 4,-8
 168              	 .cfi_offset 14,-4
 514:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_TXOK_Msk )
 169              	 .loc 1 514 0
 170 0002 0A4B     	 ldr r3,.L20
 171 0004 1B68     	 ldr r3,[r3]
 172 0006 1B68     	 ldr r3,[r3]
 173              	.LVL16:
 174              	.LBB42:
 175              	.LBB43:
1233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 176              	 .loc 2 1233 0
 177 0008 5C68     	 ldr r4,[r3,#4]
 178              	.LBE43:
 179              	.LBE42:
 515:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 180              	 .loc 1 515 0
 181 000a 14F0080F 	 tst r4,#8
 182 000e 04D0     	 beq .L17
 517:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 183              	 .loc 1 517 0
 184 0010 0648     	 ldr r0,.L20
 185 0012 0021     	 movs r1,#0
 186 0014 0A46     	 mov r2,r1
 187 0016 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 188              	.LVL17:
 189              	.L17:
 520:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 190              	 .loc 1 520 0
 191 001a 14F0100F 	 tst r4,#16
 192 001e 04D0     	 beq .L16
 522:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 193              	 .loc 1 522 0
 194 0020 0248     	 ldr r0,.L20
 195 0022 0021     	 movs r1,#0
 196 0024 0122     	 movs r2,#1
 197 0026 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 198              	.LVL18:
 199              	.L16:
 200 002a 10BD     	 pop {r4,pc}
 201              	.L21:
 202              	 .align 2
 203              	.L20:
 204 002c 00000000 	 .word .LANCHOR0
 205              	 .cfi_endproc
 206              	.LFE233:
 208              	 .section .text.CAN0_3_IRQHandler,"ax",%progbits
 209              	 .align 2
 210              	 .global CAN0_3_IRQHandler
 211              	 .thumb
 212              	 .thumb_func
 214              	CAN0_3_IRQHandler:
 215              	.LFB234:
 527:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Check transmit or receive event for CAN Node MO's */
 216              	 .loc 1 527 0
 217              	 .cfi_startproc
 218              	 
 219              	 
 220 0000 08B5     	 push {r3,lr}
 221              	.LCFI2:
 222              	 .cfi_def_cfa_offset 8
 223              	 .cfi_offset 3,-8
 224              	 .cfi_offset 14,-4
 225              	.LVL19:
 529:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & (CAN_MO_MOSTAT_RXPND_Msk|CAN_MO_MOSTAT_MSGVAL_Msk) )/* Message Validity and recepti
 226              	 .loc 1 529 0
 227 0002 0D4B     	 ldr r3,.L26
 228 0004 1B68     	 ldr r3,[r3]
 229              	.LBB44:
 230              	.LBB45:
1254:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1255:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1256:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1257:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1258:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1259:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1260:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1261:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1262:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1263:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1264:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1265:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1266:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1267:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1268:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1269:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1270:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1271:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1272:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1273:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1274:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
1275:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1276:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1277:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1278:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1279:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1280:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1281:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1282:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1283:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1284:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1285:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1286:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1287:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1288:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1289:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1290:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1291:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1292:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1293:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1294:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
1295:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1296:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1297:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1298:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1299:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1300:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1301:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1302:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1303:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1304:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1305:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1306:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Disable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node e
1307:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1308:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1309:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1310:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit()
1311:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1312:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1313:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1314:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
1315:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1316:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
1317:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1318:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1319:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1320:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1321:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1322:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1323:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1324:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1325:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1326:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Enable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node en
1327:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1328:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1329:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1330:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit()
1331:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1332:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1333:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
1334:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1335:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
1336:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1337:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1338:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1339:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1340:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1341:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1342:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1343:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1344:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1345:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Enable the CAN node, starts the participation in CAN traffic. It configures NCR.CANDIS and the N
1346:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1347:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1348:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
1349:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1350:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1351:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_Enable(XMC_CAN_NODE_t *const can_node)
1352:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1353:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CANDIS_Msk;
1354:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_ResetInitBit(can_node);
1355:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1356:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1357:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1358:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1359:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1360:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1361:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1362:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1363:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1364:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Disable the CAN node, terminates participation in CAN traffic. It configures NCR.CANDIS bit.
1365:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1366:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1367:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
1368:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1369:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1370:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_Disable(XMC_CAN_NODE_t *const can_node)
1371:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1372:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CANDIS_Msk;
1373:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1374:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1375:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1376:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1377:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1378:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1379:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1380:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1381:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configure CAN node in Analyzer Mode. This means that messages may be received, but not transmitt
1382:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * is sent on the CAN bus upon frame reception. Active-error flags are sent recessive instead of do
1383:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * The transmit line is continuously held at recessive (1) level. XMC_CAN_NODE_SetInitBit() should 
1384:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * set / reset AnalyzerMode. It configures NCR.CALM bit.
1385:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1386:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1387:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ReSetAnalyzerMode()
1388:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1389:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1390:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1391:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1392:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
1393:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1394:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CALM_Msk;
1395:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1396:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1397:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1398:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1399:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1400:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1401:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1402:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1403:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1404:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Reset the Analyzer mode. CAN node is no more in Analyzer Mode. Please refer XMC_CAN_NODE_SetAnal
1405:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NCR.CALM bit. XMC_CAN_NODE_SetInitBit() should be called before set / reset Analyz
1406:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1407:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1408:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetAnalyzerMode()
1409:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1410:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1411:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1412:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
1413:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1414:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
1415:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1416:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1417:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
1418:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1419:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1420:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1421:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1422:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1423:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1424:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Trigger the suspension of the CAN node. An OCDS(on chip debug support) suspend trigger disables 
1425:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * soon as the CAN node becomes bus-idle or bus-off, bit INIT is internally forced to 1 to disable 
1426:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * The actual value of bit INIT remains unchanged. It configures NCR.SUSEN bit
1427:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1428:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1429:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
1430:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1431:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Note:</b><br>
1432:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Bit SUSEN is reset via OCDS(on chip debug support) Reset.
1433:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1434:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1435:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1436:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableSuspend(XMC_CAN_NODE_t *const can_node)
1437:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1438:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_SUSEN_Msk;
1439:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1440:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #else
1441:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1442:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1443:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1444:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1445:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1446:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1447:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Disables the transmission on CAN node x as soon as bus-idle is reached.
1448:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1449:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1450:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
1451:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1452:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @note Only available for XMC1400,XMC4800 and XMC4700 series
1453:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1454:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1455:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableTransmit(XMC_CAN_NODE_t *const can_node)
1456:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1457:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_TXDIS_Msk;
1458:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1459:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** #endif
1460:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1461:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1462:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1463:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1464:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1465:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_init frame counter mode selection. Refer @ref XMC_CAN_NODE_FRAME_COUNTER_t for v
1466:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1467:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1468:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1469:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1470:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures frame counter functions. Each CAN \a can_node is equipped with a frame counter that c
1471:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * CAN frames or obtains information about the time when a frame has been started to transmit or be
1472:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * node. It configures NFCR register.
1473:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1474:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1475:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
1476:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1477:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1478:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1479:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_FrameCounterConfigure(XMC_CAN_NODE_t *const can_node,
1480:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                         const XMC_CAN_NODE_FRAME_COUNTER_t *const can_node_init)
1481:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1482:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NFCR = (can_node->NFCR & ~(uint32_t)(CAN_NODE_NFCR_CFMOD_Msk |
1483:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                        CAN_NODE_NFCR_CFSEL_Msk)) |
1484:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                     can_node_init->nfcr;
1485:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1486:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1487:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1488:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1489:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1490:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1491:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1492:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint16_t current value of the CAN frame counter. Range :0-65535
1493:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1494:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1495:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns the frame counter value \a can_node of the CAN node. In Frame Count Mode (CFMOD = 00B),
1496:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  count value. In Time Stamp Mode (CFMOD = 01B), this API returns the captured bit time count val
1497:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  the start of a new frame. In all Bit Timing Analysis Modes (CFMOD = 10B), this API always retur
1498:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  fCLC clock cycles (measurement result) minus 1.
1499:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1500:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1501:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
1502:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1503:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1504:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1505:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint16_t XMC_CAN_NODE_GetCANFrameCounter(XMC_CAN_NODE_t *const can_node)
1506:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1507:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return (uint16_t)(((uint32_t)(can_node->NFCR & CAN_NODE_NFCR_CFC_Msk) >> CAN_NODE_NFCR_CFC_Pos));
1508:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1509:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1510:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                      /*MO APIs*/
1511:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1512:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1513:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1514:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1515:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1516:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1517:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1518:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1519:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1520:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1521:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Data to be transmitted and data length code.
1522:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1523:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1524:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_Config()\n\n\n
1525:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1526:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1527:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1528:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1529:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo);
1530:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1531:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1532:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1533:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1534:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1535:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1536:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1537:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1538:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures transmit request for sending data frame. It configures MOCTR register. Data shall be
1539:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  using XMC_CAN_MO_UpdateData() before calling this API.
1540:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1541:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1542:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_UpdateData()\n\n\n
1543:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1544:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1545:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1546:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo);
1547:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1548:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1549:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1550:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1551:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1552:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1553:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1554:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1555:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Reads the Message Object data bytes, into message pointer passed as input parameter \a can_mo.
1556:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  can_data[0] of can_mo holds lower 4 bytes, can_data[1] of can_mo holds higher 4 bytes.
1557:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1558:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1559:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
1560:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1561:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1562:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1563:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive(XMC_CAN_MO_t *can_mo);
1564:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1565:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1566:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1567:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1568:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1569:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1570:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1571:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1572:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Reads the Message Object data bytes, into message pointer passed as input parameter \a can_mo.
1573:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  can_data[0] of can_mo holds lower 4 bytes, can_data[1] of can_mo holds higher 4 bytes.
1574:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1575:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1576:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
1577:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1578:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1579:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo);
1580:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1581:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo       Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure 
1582:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo_ptr_int   Message Object event node pointer selection. Refer @ref XMC_CAN_MO_POINT
1583:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *                for valid values.
1584:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request interrupt output line of multiCAN module.
1585:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1586:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1587:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1588:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1589:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Message Object event node pointer with \a service_request number. It configures MOIPR
1590:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1591:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1592:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
1593:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1594:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1595:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1596:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
1597:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                                 const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
1598:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                                                 const uint32_t service_request)
1599:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1600:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Ms
1601:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****                           (service_request << (uint32_t)can_mo_ptr_int);
1602:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
1603:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1604:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** /**
1605:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1606:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1607:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current Message Object status.
1608:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1609:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1610:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Message Object status, that indicates message object transfer status and message object
1611:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  information such as the number of the current message object predecessor and successor message 
1612:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *  the list number to which the message object is assigned.
1613:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1614:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1615:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  * None
1616:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  *
1617:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****  */
1618:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** 
1619:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
1620:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** {
1621:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_mo->can_mo_ptr->MOSTAT));
 231              	 .loc 2 1621 0
 232 0006 DB68     	 ldr r3,[r3,#12]
 233 0008 1B68     	 ldr r3,[r3]
 234 000a DB69     	 ldr r3,[r3,#28]
 235              	.LBE45:
 236              	.LBE44:
 530:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 237              	 .loc 1 530 0
 238 000c 13F0210F 	 tst r3,#33
 239 0010 04D0     	 beq .L23
 532:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 240              	 .loc 1 532 0
 241 0012 0948     	 ldr r0,.L26
 242 0014 0221     	 movs r1,#2
 243 0016 0622     	 movs r2,#6
 244 0018 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 245              	.LVL20:
 246              	.L23:
 536:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & (CAN_MO_MOSTAT_TXPND_Msk|CAN_MO_MOSTAT_MSGVAL_Msk) )/* Message Validity and transmi
 247              	 .loc 1 536 0
 248 001c 064B     	 ldr r3,.L26
 249 001e 1B68     	 ldr r3,[r3]
 250              	.LBB46:
 251              	.LBB47:
 252              	 .loc 2 1621 0
 253 0020 9B68     	 ldr r3,[r3,#8]
 254 0022 1B68     	 ldr r3,[r3]
 255 0024 DB69     	 ldr r3,[r3,#28]
 256              	.LBE47:
 257              	.LBE46:
 537:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 258              	 .loc 1 537 0
 259 0026 13F0220F 	 tst r3,#34
 260 002a 04D0     	 beq .L22
 539:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 261              	 .loc 1 539 0
 262 002c 0248     	 ldr r0,.L26
 263 002e 0221     	 movs r1,#2
 264 0030 0522     	 movs r2,#5
 265 0032 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 266              	.LVL21:
 267              	.L22:
 268 0036 08BD     	 pop {r3,pc}
 269              	.L27:
 270              	 .align 2
 271              	.L26:
 272 0038 00000000 	 .word .LANCHOR0
 273              	 .cfi_endproc
 274              	.LFE234:
 276              	 .section .text.CAN0_4_IRQHandler,"ax",%progbits
 277              	 .align 2
 278              	 .global CAN0_4_IRQHandler
 279              	 .thumb
 280              	 .thumb_func
 282              	CAN0_4_IRQHandler:
 283              	.LFB235:
 545:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_NODE_GetStatus( (XMC_CAN_NODE_t *const)CAN1.p_config->p_channel_c
 284              	 .loc 1 545 0
 285              	 .cfi_startproc
 286              	 
 287              	 
 288 0000 10B5     	 push {r4,lr}
 289              	.LCFI3:
 290              	 .cfi_def_cfa_offset 8
 291              	 .cfi_offset 4,-8
 292              	 .cfi_offset 14,-4
 546:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Check status */
 293              	 .loc 1 546 0
 294 0002 0A4B     	 ldr r3,.L32
 295 0004 1B68     	 ldr r3,[r3]
 296 0006 1B68     	 ldr r3,[r3]
 297              	.LVL22:
 298              	.LBB48:
 299              	.LBB49:
1233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 300              	 .loc 2 1233 0
 301 0008 5C68     	 ldr r4,[r3,#4]
 302              	.LBE49:
 303              	.LBE48:
 548:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 304              	 .loc 1 548 0
 305 000a 14F0200F 	 tst r4,#32
 306 000e 04D0     	 beq .L29
 551:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 307              	 .loc 1 551 0
 308 0010 0648     	 ldr r0,.L32
 309 0012 0221     	 movs r1,#2
 310 0014 0A46     	 mov r2,r1
 311 0016 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 312              	.LVL23:
 313              	.L29:
 554:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 314              	 .loc 1 554 0
 315 001a 14F0070F 	 tst r4,#7
 316 001e 04D0     	 beq .L28
 556:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 317              	 .loc 1 556 0
 318 0020 0248     	 ldr r0,.L32
 319 0022 0221     	 movs r1,#2
 320 0024 0322     	 movs r2,#3
 321 0026 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 322              	.LVL24:
 323              	.L28:
 324 002a 10BD     	 pop {r4,pc}
 325              	.L33:
 326              	 .align 2
 327              	.L32:
 328 002c 00000000 	 .word .LANCHOR0
 329              	 .cfi_endproc
 330              	.LFE235:
 332              	 .section .text.CAN0_5_IRQHandler,"ax",%progbits
 333              	 .align 2
 334              	 .global CAN0_5_IRQHandler
 335              	 .thumb
 336              	 .thumb_func
 338              	CAN0_5_IRQHandler:
 339              	.LFB236:
 566:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_NODE_GetStatus( (XMC_CAN_NODE_t *const)CAN2.p_config->p_channel_c
 340              	 .loc 1 566 0
 341              	 .cfi_startproc
 342              	 
 343              	 
 344 0000 10B5     	 push {r4,lr}
 345              	.LCFI4:
 346              	 .cfi_def_cfa_offset 8
 347              	 .cfi_offset 4,-8
 348              	 .cfi_offset 14,-4
 567:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & CAN_NODE_NSR_TXOK_Msk )
 349              	 .loc 1 567 0
 350 0002 0A4B     	 ldr r3,.L38
 351 0004 1B68     	 ldr r3,[r3]
 352 0006 1B68     	 ldr r3,[r3]
 353              	.LVL25:
 354              	.LBB50:
 355              	.LBB51:
1233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 356              	 .loc 2 1233 0
 357 0008 5C68     	 ldr r4,[r3,#4]
 358              	.LBE51:
 359              	.LBE50:
 568:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 360              	 .loc 1 568 0
 361 000a 14F0080F 	 tst r4,#8
 362 000e 04D0     	 beq .L35
 570:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 363              	 .loc 1 570 0
 364 0010 0648     	 ldr r0,.L38
 365 0012 0021     	 movs r1,#0
 366 0014 0A46     	 mov r2,r1
 367 0016 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 368              	.LVL26:
 369              	.L35:
 573:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 370              	 .loc 1 573 0
 371 001a 14F0100F 	 tst r4,#16
 372 001e 04D0     	 beq .L34
 575:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 373              	 .loc 1 575 0
 374 0020 0248     	 ldr r0,.L38
 375 0022 0021     	 movs r1,#0
 376 0024 0122     	 movs r2,#1
 377 0026 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 378              	.LVL27:
 379              	.L34:
 380 002a 10BD     	 pop {r4,pc}
 381              	.L39:
 382              	 .align 2
 383              	.L38:
 384 002c 00000000 	 .word .LANCHOR1
 385              	 .cfi_endproc
 386              	.LFE236:
 388              	 .section .text.CAN0_6_IRQHandler,"ax",%progbits
 389              	 .align 2
 390              	 .global CAN0_6_IRQHandler
 391              	 .thumb
 392              	 .thumb_func
 394              	CAN0_6_IRQHandler:
 395              	.LFB237:
 580:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Check transmit or receive event for CAN Node MO's */
 396              	 .loc 1 580 0
 397              	 .cfi_startproc
 398              	 
 399              	 
 400 0000 08B5     	 push {r3,lr}
 401              	.LCFI5:
 402              	 .cfi_def_cfa_offset 8
 403              	 .cfi_offset 3,-8
 404              	 .cfi_offset 14,-4
 405              	.LVL28:
 582:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & (CAN_MO_MOSTAT_RXPND_Msk|CAN_MO_MOSTAT_MSGVAL_Msk) )/* Message Validity and recepti
 406              	 .loc 1 582 0
 407 0002 0D4B     	 ldr r3,.L44
 408 0004 1B68     	 ldr r3,[r3]
 409              	.LBB52:
 410              	.LBB53:
 411              	 .loc 2 1621 0
 412 0006 DB68     	 ldr r3,[r3,#12]
 413 0008 1B68     	 ldr r3,[r3]
 414 000a DB69     	 ldr r3,[r3,#28]
 415              	.LBE53:
 416              	.LBE52:
 583:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 417              	 .loc 1 583 0
 418 000c 13F0210F 	 tst r3,#33
 419 0010 04D0     	 beq .L41
 585:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 420              	 .loc 1 585 0
 421 0012 0948     	 ldr r0,.L44
 422 0014 0221     	 movs r1,#2
 423 0016 0622     	 movs r2,#6
 424 0018 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 425              	.LVL29:
 426              	.L41:
 589:../Driver/CAN/cfg/src/dri_can_conf.c **** 	if( status_l & (CAN_MO_MOSTAT_TXPND_Msk|CAN_MO_MOSTAT_MSGVAL_Msk) )/* Message Validity and transmi
 427              	 .loc 1 589 0
 428 001c 064B     	 ldr r3,.L44
 429 001e 1B68     	 ldr r3,[r3]
 430              	.LBB54:
 431              	.LBB55:
 432              	 .loc 2 1621 0
 433 0020 9B68     	 ldr r3,[r3,#8]
 434 0022 1B68     	 ldr r3,[r3]
 435 0024 DB69     	 ldr r3,[r3,#28]
 436              	.LBE55:
 437              	.LBE54:
 590:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 438              	 .loc 1 590 0
 439 0026 13F0220F 	 tst r3,#34
 440 002a 04D0     	 beq .L40
 592:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 441              	 .loc 1 592 0
 442 002c 0248     	 ldr r0,.L44
 443 002e 0221     	 movs r1,#2
 444 0030 0522     	 movs r2,#5
 445 0032 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 446              	.LVL30:
 447              	.L40:
 448 0036 08BD     	 pop {r3,pc}
 449              	.L45:
 450              	 .align 2
 451              	.L44:
 452 0038 00000000 	 .word .LANCHOR1
 453              	 .cfi_endproc
 454              	.LFE237:
 456              	 .section .text.CAN0_7_IRQHandler,"ax",%progbits
 457              	 .align 2
 458              	 .global CAN0_7_IRQHandler
 459              	 .thumb
 460              	 .thumb_func
 462              	CAN0_7_IRQHandler:
 463              	.LFB238:
 597:../Driver/CAN/cfg/src/dri_can_conf.c **** 	unsigned long status_l = XMC_CAN_NODE_GetStatus( (XMC_CAN_NODE_t *const)CAN2.p_config->p_channel_c
 464              	 .loc 1 597 0
 465              	 .cfi_startproc
 466              	 
 467              	 
 468 0000 10B5     	 push {r4,lr}
 469              	.LCFI6:
 470              	 .cfi_def_cfa_offset 8
 471              	 .cfi_offset 4,-8
 472              	 .cfi_offset 14,-4
 598:../Driver/CAN/cfg/src/dri_can_conf.c **** 	/* Check status */
 473              	 .loc 1 598 0
 474 0002 0A4B     	 ldr r3,.L50
 475 0004 1B68     	 ldr r3,[r3]
 476 0006 1B68     	 ldr r3,[r3]
 477              	.LVL31:
 478              	.LBB56:
 479              	.LBB57:
1233:E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/XMCLib/inc\xmc_can.h **** }
 480              	 .loc 2 1233 0
 481 0008 5C68     	 ldr r4,[r3,#4]
 482              	.LBE57:
 483              	.LBE56:
 600:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 484              	 .loc 1 600 0
 485 000a 14F0200F 	 tst r4,#32
 486 000e 04D0     	 beq .L47
 603:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 487              	 .loc 1 603 0
 488 0010 0648     	 ldr r0,.L50
 489 0012 0221     	 movs r1,#2
 490 0014 0A46     	 mov r2,r1
 491 0016 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 492              	.LVL32:
 493              	.L47:
 606:../Driver/CAN/cfg/src/dri_can_conf.c **** 	{
 494              	 .loc 1 606 0
 495 001a 14F0070F 	 tst r4,#7
 496 001e 04D0     	 beq .L46
 608:../Driver/CAN/cfg/src/dri_can_conf.c **** 	}
 497              	 .loc 1 608 0
 498 0020 0248     	 ldr r0,.L50
 499 0022 0221     	 movs r1,#2
 500 0024 0322     	 movs r2,#3
 501 0026 FFF7FEFF 	 bl CAN_ISR_Handler_Entry
 502              	.LVL33:
 503              	.L46:
 504 002a 10BD     	 pop {r4,pc}
 505              	.L51:
 506              	 .align 2
 507              	.L50:
 508 002c 00000000 	 .word .LANCHOR1
 509              	 .cfi_endproc
 510              	.LFE238:
 512              	 .global CAN2
 513              	 .global CAN1
 514              	 .global CAN_Global
 515              	 .global CAN2_Node_Callback
 516              	 .comm CAN2_Node_Control,4,4
 517              	 .global CAN2_Node_Configuration
 518              	 .global CAN2_Events
 519              	 .global CAN2_Event_Interrupt_Configuration
 520              	 .global CAN2_MO_Interrupt_Configuration
 521              	 .global CAN2_Interrupt_Configuration
 522              	 .global CAN1_Node_Callback
 523              	 .comm CAN1_Node_Control,4,4
 524              	 .global CAN1_Node_Configuration
 525              	 .global CAN1_Events
 526              	 .global CAN1_Event_Interrupt_Configuration
 527              	 .global CAN1_MO_Interrupt_Configuration
 528              	 .global CAN1_Interrupt_Configuration
 529              	 .section .data.CAN_Global,"aw",%progbits
 530              	 .align 2
 533              	CAN_Global:
 534 0000 00000000 	 .word CAN_GlobalConfiguration
 535 0004 00000000 	 .word CAN_GlobalControl
 536              	 .section .data.CAN2_Node_Callback,"aw",%progbits
 537              	 .align 2
 540              	CAN2_Node_Callback:
 541 0000 00000000 	 .word CAN_callback_handler
 542              	 .section .data.CAN2_MO_Interrupt_Configuration,"aw",%progbits
 543              	 .align 2
 546              	CAN2_MO_Interrupt_Configuration:
 547 0000 52       	 .byte 82
 548 0001 30       	 .byte 48
 549 0002 0000     	 .space 2
 550 0004 06000000 	 .word 6
 551              	 .section .data.CAN2_BitConfiguration,"aw",%progbits
 552              	 .align 2
 555              	CAN2_BitConfiguration:
 556 0000 000E2707 	 .word 120000000
 557 0004 20A10700 	 .word 500000
 558 0008 401F     	 .short 8000
 559 000a 0200     	 .short 2
 560              	 .section .data.CAN1_BitConfiguration,"aw",%progbits
 561              	 .align 2
 564              	CAN1_BitConfiguration:
 565 0000 000E2707 	 .word 120000000
 566 0004 20A10700 	 .word 500000
 567 0008 401F     	 .short 8000
 568 000a 0200     	 .short 2
 569              	 .section .data.CAN_GlobalConfiguration,"aw",%progbits
 570              	 .align 2
 573              	CAN_GlobalConfiguration:
 574 0000 00400148 	 .word 1208041472
 575 0004 000E2707 	 .word 120000000
 576 0008 01       	 .byte 1
 577 0009 000000   	 .space 3
 578              	 .section .data.CAN1_Node_Callback,"aw",%progbits
 579              	 .align 2
 582              	CAN1_Node_Callback:
 583 0000 00000000 	 .word CAN_callback_handler
 584              	 .section .data.CAN1_MessageObject_Receiver,"aw",%progbits
 585              	 .align 3
 588              	CAN1_MessageObject_Receiver:
 589 0000 60500148 	 .word 1208045664
 590 0004 22       	 .byte 34
 591 0005 22       	 .byte 34
 592 0006 00       	 .byte 0
 593 0007 40       	 .byte 64
 594 0008 FF       	 .byte 255
 595 0009 07       	 .byte 7
 596 000a 00       	 .byte 0
 597 000b 20       	 .byte 32
 598 000c 08       	 .byte 8
 599 000d 000000   	 .space 3
 600 0010 00000000 	 .word 0
 601 0014 00000000 	 .word 0
 602 0018 00       	 .byte 0
 603 0019 00000000 	 .space 7
 603      000000
 604              	 .section .data.CAN2_MessageObject_Receiver,"aw",%progbits
 605              	 .align 3
 608              	CAN2_MessageObject_Receiver:
 609 0000 A0500148 	 .word 1208045728
 610 0004 11       	 .byte 17
 611 0005 11       	 .byte 17
 612 0006 00       	 .byte 0
 613 0007 40       	 .byte 64
 614 0008 FF       	 .byte 255
 615 0009 07       	 .byte 7
 616 000a 00       	 .byte 0
 617 000b 20       	 .byte 32
 618 000c 08       	 .byte 8
 619 000d 000000   	 .space 3
 620 0010 00000000 	 .word 0
 621 0014 00000000 	 .word 0
 622 0018 00       	 .byte 0
 623 0019 00000000 	 .space 7
 623      000000
 624              	 .section .data.CAN1_Event_Interrupt_Configuration,"aw",%progbits
 625              	 .align 2
 628              	CAN1_Event_Interrupt_Configuration:
 629 0000 50       	 .byte 80
 630 0001 31       	 .byte 49
 631 0002 0000     	 .space 2
 632 0004 04000000 	 .word 4
 633              	 .section .data.CAN2_Events,"aw",%progbits
 634              	 .align 2
 637              	CAN2_Events:
 638 0000 02000000 	 .word 2
 639 0004 08000000 	 .word 8
 640 0008 04000000 	 .word 4
 641 000c 00004000 	 .word 4194304
 642              	 .section .data.CAN1_MessageObject_Transmitter,"aw",%progbits
 643              	 .align 3
 646              	CAN1_MessageObject_Transmitter:
 647 0000 40500148 	 .word 1208045632
 648 0004 11       	 .byte 17
 649 0005 11       	 .byte 17
 650 0006 00       	 .byte 0
 651 0007 40       	 .byte 64
 652 0008 FF       	 .byte 255
 653 0009 07       	 .byte 7
 654 000a 00       	 .byte 0
 655 000b 20       	 .byte 32
 656 000c 08       	 .byte 8
 657 000d 000000   	 .space 3
 658 0010 00000000 	 .word 0
 659 0014 00000000 	 .word 0
 660 0018 01       	 .byte 1
 661 0019 00000000 	 .space 7
 661      000000
 662              	 .section .data.CAN2_Interrupt_Configuration,"aw",%progbits
 663              	 .align 2
 666              	CAN2_Interrupt_Configuration:
 667 0000 51       	 .byte 81
 668 0001 30       	 .byte 48
 669 0002 0000     	 .space 2
 670 0004 05000000 	 .word 5
 671              	 .section .data.CAN2_Node_Configuration,"aw",%progbits
 672              	 .align 2
 675              	CAN2_Node_Configuration:
 676 0000 00440148 	 .word 1208042496
 677 0004 00000000 	 .word CAN2_BitConfiguration
 678 0008 00000000 	 .word CAN2_MessageObject_Transmitter
 679 000c 00000000 	 .word CAN2_MessageObject_Receiver
 680 0010 0400     	 .short 4
 681 0012 0500     	 .short 5
 682 0014 00000000 	 .word CAN2_Interrupt_Configuration
 683 0018 00000000 	 .word CAN2_MO_Interrupt_Configuration
 684 001c 00000000 	 .word CAN2_Event_Interrupt_Configuration
 685 0020 00000000 	 .word CAN2_Events
 686 0024 04       	 .byte 4
 687 0025 00       	 .byte 0
 688 0026 00       	 .byte 0
 689 0027 00       	 .space 1
 690              	 .section .data.CAN1_MO_Interrupt_Configuration,"aw",%progbits
 691              	 .align 2
 694              	CAN1_MO_Interrupt_Configuration:
 695 0000 4F       	 .byte 79
 696 0001 31       	 .byte 49
 697 0002 0000     	 .space 2
 698 0004 03000000 	 .word 3
 699              	 .section .data.CAN1_Interrupt_Configuration,"aw",%progbits
 700              	 .align 2
 703              	CAN1_Interrupt_Configuration:
 704 0000 4E       	 .byte 78
 705 0001 31       	 .byte 49
 706 0002 0000     	 .space 2
 707 0004 02000000 	 .word 2
 708              	 .section .data.CAN1_Node_Configuration,"aw",%progbits
 709              	 .align 2
 712              	CAN1_Node_Configuration:
 713 0000 00430148 	 .word 1208042240
 714 0004 00000000 	 .word CAN1_BitConfiguration
 715 0008 00000000 	 .word CAN1_MessageObject_Transmitter
 716 000c 00000000 	 .word CAN1_MessageObject_Receiver
 717 0010 0200     	 .short 2
 718 0012 0300     	 .short 3
 719 0014 00000000 	 .word CAN1_Interrupt_Configuration
 720 0018 00000000 	 .word CAN1_MO_Interrupt_Configuration
 721 001c 00000000 	 .word CAN1_Event_Interrupt_Configuration
 722 0020 00000000 	 .word CAN1_Events
 723 0024 04       	 .byte 4
 724 0025 00       	 .byte 0
 725 0026 02       	 .byte 2
 726 0027 00       	 .space 1
 727              	 .section .data.CAN2_Event_Interrupt_Configuration,"aw",%progbits
 728              	 .align 2
 731              	CAN2_Event_Interrupt_Configuration:
 732 0000 53       	 .byte 83
 733 0001 30       	 .byte 48
 734 0002 0000     	 .space 2
 735 0004 07000000 	 .word 7
 736              	 .section .bss.CAN_GlobalControl,"aw",%nobits
 737              	 .align 2
 740              	CAN_GlobalControl:
 741 0000 00000000 	 .space 4
 742              	 .section .data.CAN1_Events,"aw",%progbits
 743              	 .align 2
 746              	CAN1_Events:
 747 0000 02000000 	 .word 2
 748 0004 08000000 	 .word 8
 749 0008 04000000 	 .word 4
 750 000c 00004000 	 .word 4194304
 751              	 .section .data.CAN1,"aw",%progbits
 752              	 .align 2
 753              	 .set .LANCHOR0,.+0
 756              	CAN1:
 757 0000 00000000 	 .word CAN1_Node_Configuration
 758 0004 00000000 	 .word CAN1_Node_Control
 759 0008 00000000 	 .word CAN1_Node_Callback
 760              	 .section .data.CAN2,"aw",%progbits
 761              	 .align 2
 762              	 .set .LANCHOR1,.+0
 765              	CAN2:
 766 0000 00000000 	 .word CAN2_Node_Configuration
 767 0004 00000000 	 .word CAN2_Node_Control
 768 0008 00000000 	 .word CAN2_Node_Callback
 769              	 .section .data.CAN2_MessageObject_Transmitter,"aw",%progbits
 770              	 .align 3
 773              	CAN2_MessageObject_Transmitter:
 774 0000 80500148 	 .word 1208045696
 775 0004 22       	 .byte 34
 776 0005 22       	 .byte 34
 777 0006 00       	 .byte 0
 778 0007 40       	 .byte 64
 779 0008 FF       	 .byte 255
 780 0009 07       	 .byte 7
 781 000a 00       	 .byte 0
 782 000b 20       	 .byte 32
 783 000c 08       	 .byte 8
 784 000d 000000   	 .space 3
 785 0010 00000000 	 .word 0
 786 0014 00000000 	 .word 0
 787 0018 01       	 .byte 1
 788 0019 00000000 	 .space 7
 788      000000
 789              	 .text
 790              	.Letext0:
 791              	 .file 3 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 792              	 .file 4 "e:\\embedded\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 793              	 .file 5 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 794              	 .file 6 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Driver/inc/dri_types.h"
 795              	 .file 7 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Driver/CAN/cfg/inc/dri_can_types.h"
 796              	 .file 8 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Include/core_cm4.h"
 797              	 .file 9 "E:/Embedded/Projects/XMC4500/Ethernet_CAN_XMC4500/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 dri_can_conf.c
    {standard input}:19     .text.CAN_ISR_Handler_Entry:00000000 $t
    {standard input}:24     .text.CAN_ISR_Handler_Entry:00000000 CAN_ISR_Handler_Entry
    {standard input}:153    .text.CAN0_2_IRQHandler:00000000 $t
    {standard input}:158    .text.CAN0_2_IRQHandler:00000000 CAN0_2_IRQHandler
    {standard input}:204    .text.CAN0_2_IRQHandler:0000002c $d
    {standard input}:209    .text.CAN0_3_IRQHandler:00000000 $t
    {standard input}:214    .text.CAN0_3_IRQHandler:00000000 CAN0_3_IRQHandler
    {standard input}:272    .text.CAN0_3_IRQHandler:00000038 $d
    {standard input}:277    .text.CAN0_4_IRQHandler:00000000 $t
    {standard input}:282    .text.CAN0_4_IRQHandler:00000000 CAN0_4_IRQHandler
    {standard input}:328    .text.CAN0_4_IRQHandler:0000002c $d
    {standard input}:333    .text.CAN0_5_IRQHandler:00000000 $t
    {standard input}:338    .text.CAN0_5_IRQHandler:00000000 CAN0_5_IRQHandler
    {standard input}:384    .text.CAN0_5_IRQHandler:0000002c $d
    {standard input}:389    .text.CAN0_6_IRQHandler:00000000 $t
    {standard input}:394    .text.CAN0_6_IRQHandler:00000000 CAN0_6_IRQHandler
    {standard input}:452    .text.CAN0_6_IRQHandler:00000038 $d
    {standard input}:457    .text.CAN0_7_IRQHandler:00000000 $t
    {standard input}:462    .text.CAN0_7_IRQHandler:00000000 CAN0_7_IRQHandler
    {standard input}:508    .text.CAN0_7_IRQHandler:0000002c $d
    {standard input}:765    .data.CAN2:00000000 CAN2
    {standard input}:756    .data.CAN1:00000000 CAN1
    {standard input}:533    .data.CAN_Global:00000000 CAN_Global
    {standard input}:540    .data.CAN2_Node_Callback:00000000 CAN2_Node_Callback
                            *COM*:00000004 CAN2_Node_Control
    {standard input}:675    .data.CAN2_Node_Configuration:00000000 CAN2_Node_Configuration
    {standard input}:637    .data.CAN2_Events:00000000 CAN2_Events
    {standard input}:731    .data.CAN2_Event_Interrupt_Configuration:00000000 CAN2_Event_Interrupt_Configuration
    {standard input}:546    .data.CAN2_MO_Interrupt_Configuration:00000000 CAN2_MO_Interrupt_Configuration
    {standard input}:666    .data.CAN2_Interrupt_Configuration:00000000 CAN2_Interrupt_Configuration
    {standard input}:582    .data.CAN1_Node_Callback:00000000 CAN1_Node_Callback
                            *COM*:00000004 CAN1_Node_Control
    {standard input}:712    .data.CAN1_Node_Configuration:00000000 CAN1_Node_Configuration
    {standard input}:746    .data.CAN1_Events:00000000 CAN1_Events
    {standard input}:628    .data.CAN1_Event_Interrupt_Configuration:00000000 CAN1_Event_Interrupt_Configuration
    {standard input}:694    .data.CAN1_MO_Interrupt_Configuration:00000000 CAN1_MO_Interrupt_Configuration
    {standard input}:703    .data.CAN1_Interrupt_Configuration:00000000 CAN1_Interrupt_Configuration
    {standard input}:530    .data.CAN_Global:00000000 $d
    {standard input}:573    .data.CAN_GlobalConfiguration:00000000 CAN_GlobalConfiguration
    {standard input}:740    .bss.CAN_GlobalControl:00000000 CAN_GlobalControl
    {standard input}:537    .data.CAN2_Node_Callback:00000000 $d
    {standard input}:543    .data.CAN2_MO_Interrupt_Configuration:00000000 $d
    {standard input}:552    .data.CAN2_BitConfiguration:00000000 $d
    {standard input}:555    .data.CAN2_BitConfiguration:00000000 CAN2_BitConfiguration
    {standard input}:561    .data.CAN1_BitConfiguration:00000000 $d
    {standard input}:564    .data.CAN1_BitConfiguration:00000000 CAN1_BitConfiguration
    {standard input}:570    .data.CAN_GlobalConfiguration:00000000 $d
    {standard input}:579    .data.CAN1_Node_Callback:00000000 $d
    {standard input}:585    .data.CAN1_MessageObject_Receiver:00000000 $d
    {standard input}:588    .data.CAN1_MessageObject_Receiver:00000000 CAN1_MessageObject_Receiver
    {standard input}:605    .data.CAN2_MessageObject_Receiver:00000000 $d
    {standard input}:608    .data.CAN2_MessageObject_Receiver:00000000 CAN2_MessageObject_Receiver
    {standard input}:625    .data.CAN1_Event_Interrupt_Configuration:00000000 $d
    {standard input}:634    .data.CAN2_Events:00000000 $d
    {standard input}:643    .data.CAN1_MessageObject_Transmitter:00000000 $d
    {standard input}:646    .data.CAN1_MessageObject_Transmitter:00000000 CAN1_MessageObject_Transmitter
    {standard input}:663    .data.CAN2_Interrupt_Configuration:00000000 $d
    {standard input}:672    .data.CAN2_Node_Configuration:00000000 $d
    {standard input}:773    .data.CAN2_MessageObject_Transmitter:00000000 CAN2_MessageObject_Transmitter
    {standard input}:691    .data.CAN1_MO_Interrupt_Configuration:00000000 $d
    {standard input}:700    .data.CAN1_Interrupt_Configuration:00000000 $d
    {standard input}:709    .data.CAN1_Node_Configuration:00000000 $d
    {standard input}:728    .data.CAN2_Event_Interrupt_Configuration:00000000 $d
    {standard input}:737    .bss.CAN_GlobalControl:00000000 $d
    {standard input}:743    .data.CAN1_Events:00000000 $d
    {standard input}:752    .data.CAN1:00000000 $d
    {standard input}:761    .data.CAN2:00000000 $d
    {standard input}:770    .data.CAN2_MessageObject_Transmitter:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.3466fc6a3db32493c997d085de4c7a28
                           .group:00000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4002528de975c0fcce6c551c15d87b8c
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.48aa5dfcc4adf36b323cf9dbe32c793a
                           .group:00000000 wm4.core_cm4.h.174.824e0532337e90525b645435b961cc25
                           .group:00000000 wm4.mpu_armv7.h.32.7da498ea6f18d3b74a42202d7c1d394e
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:00000000 wm4.xmc_common.h.92.bbcf261068c7c74d7033b80d0dbf155c
                           .group:00000000 wm4.xmc4_scu.h.83.0449f5880ac071460ec1a8072311ea51
                           .group:00000000 wm4.xmc_can_map.h.53.acf344f754863d08777806bac8258159
                           .group:00000000 wm4.xmc_can.h.165.b8cbf26258050f21ae0d7187b2c799e4
                           .group:00000000 wm4.dri_can_conf.h.20.eb4c579fd7daa502d40dc524de831fe0
                           .group:00000000 wm4.xmc_gpio.h.51.99a4c0bd520ffa931ac6d8600dce89c4
                           .group:00000000 wm4.xmc4_gpio_map.h.74.66e9110cf801b78826ef5354da51c32f
                           .group:00000000 wm4.xmc4_gpio.h.79.ce6c49508b5a7769c66e7e3c21dcdfe4
                           .group:00000000 wm4.dri_types.h.39.161f94b021468f2f6263340b954bb37f

UNDEFINED SYMBOLS
CAN_callback_handler
